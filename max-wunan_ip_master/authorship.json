[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "# Duke Project User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "## Setting Up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "## Using Duke Project"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "1. To display all the tasks and relevant information"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1. Launch the app and type in \u0027list\u0027, all necessary information will be printed as below:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1.[T][✘] task A"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    2.[D][✘] Task B (by: deadline)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1. If it is your first time using Duke Project, there will be no data stored, so when you type in \u0027list\u0027, it will look as follows:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "1. To add tasks (and date/time if needed)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1. If you want to add a \u0027Todo\u0027 task, which is the kind of task without date/time, all you need to do is to key in \u0027Todo description\u0027, as description is to be replaced by the content of this \u0027Todo\u0027 task, which is, what exactly you are going to do. It will look as follows:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    todo borrow book"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    [T][✘]borrow book"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   1. If you want to add a \u0027Deadline\u0027 task, which the type of task must be completed before a certain time/day, you will need to key in both description and deadline date in the format \u0027Deadline description /by date\u0027. It will look as follows:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    deadline CS2113 assignment /by Friday"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    [D][✘]CS2113 assignment (by: Friday)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1. If you want to add an \u0027Event\u0027 task, which represents an event happening in the future, you will need to key in both description and event time as well in the format \u0027event team meeting /at Monday\u0027. It will look as follows:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    event team meeting /at Monday"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    [E][✘]team meeting (at: Monday)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "1. To delete/edit/search for tasks"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1. If you want to delete a task, you will need to know its index in the list printed through list. Suppose now the list contains the following tasks:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1.[T][✘]borrow book"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    2.[D][✘]CS2113 assignment (by: Friday)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    3.[E][✘]team meeting (at: Monday)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    For example, you want to delete the assignment as Friday has already passed, all you need to do is to key in \u0027delete taskIndex\u0027, and in this case \u0027taskIndex\u0027 \u003d 2. It will be as follows:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    delete 2"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    [D][✘]CS2113 assignment (by: Friday)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1. If you want to mark a task as done, you will also need to know the index if the task. Suppose the initial list is identical as above, if you want to mark borrow book as done, you need to key in \u0027done taskIndex\u0027, and in this case the \u0027taskIndex\u0027 \u003d 1. It will look as follows:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ``` "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    done 1"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    [T][✓]borrow book"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1. If you want to search for a task based on certain keywords, all you need to do is to key in \u0027find keyword\u0027, where keyword is to be replaced by the actual keyword. The app will display all tasks whose description contain the keyword you chose. Suppose the initial list is still the same as above, the result of searching will look as follows:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    find meeting"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1.[E][✘]team meeting (at: Monday)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    If none of the tasks contain your keyword in the descripton, it will look as follows:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    find abcdefghijklmnopq"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   "
      }
    ],
    "authorContributionMap": {
      "max-wunan": 109,
      "-": 24
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "# Duke Project User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "## Setting Up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "## Using Duke Project"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "1. To display all the tasks and relevant information"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1. Launch the app and type in \u0027list\u0027, all necessary information will be printed as below:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1.[T][✘] task A"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    2.[D][✘] Task B (by: deadline)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1. If it is your first time using Duke Project, there will be no data stored, so when you type in \u0027list\u0027, it will look as follows:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "1. To add tasks (and date/time if needed)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1. If you want to add a \u0027Todo\u0027 task, which is the kind of task without date/time, all you need to do is to key in \u0027Todo description\u0027, as description is to be replaced by the content of this \u0027Todo\u0027 task, which is, what exactly you are going to do. It will look as follows:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    todo borrow book"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    [T][✘]borrow book"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "   1. If you want to add a \u0027Deadline\u0027 task, which the type of task must be completed before a certain time/day, you will need to key in both description and deadline date in the format \u0027Deadline description /by date\u0027. It will look as follows:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    deadline CS2113 assignment /by Friday"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    [D][✘]CS2113 assignment (by: Friday)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1. If you want to add an \u0027Event\u0027 task, which represents an event happening in the future, you will need to key in both description and event time as well in the format \u0027event team meeting /at Monday\u0027. It will look as follows:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    event team meeting /at Monday"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    [E][✘]team meeting (at: Monday)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "1. To delete/edit/search for tasks"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1. If you want to delete a task, you will need to know its index in the list printed through list. Suppose now the list contains the following tasks:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1.[T][✘]borrow book"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    2.[D][✘]CS2113 assignment (by: Friday)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    3.[E][✘]team meeting (at: Monday)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    For example, you want to delete the assignment as Friday has already passed, all you need to do is to key in \u0027delete taskIndex\u0027, and in this case \u0027taskIndex\u0027 \u003d 2. It will be as follows:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    delete 2"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    [D][✘]CS2113 assignment (by: Friday)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1. If you want to mark a task as done, you will also need to know the index if the task. Suppose the initial list is identical as above, if you want to mark borrow book as done, you need to key in \u0027done taskIndex\u0027, and in this case the \u0027taskIndex\u0027 \u003d 1. It will look as follows:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ``` "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    done 1"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    [T][✓]borrow book"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1. If you want to search for a task based on certain keywords, all you need to do is to key in \u0027find keyword\u0027, where keyword is to be replaced by the actual keyword. The app will display all tasks whose description contain the keyword you chose. Suppose the initial list is still the same as above, the result of searching will look as follows:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    find meeting"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    1.[E][✘]team meeting (at: Monday)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    If none of the tasks contain your keyword in the descripton, it will look as follows:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    find abcdefghijklmnopq"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    -----------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      }
    ],
    "authorContributionMap": {
      "max-wunan": 124,
      "-": 9
    }
  },
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "max-wunan": 1
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* Represents all possible commands including invalid commands"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* types of commands are represented by integers as follows:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 1 - add Todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 2 - add Deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 3 - add Event"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 4 - print task list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 5 - delete task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 6 - find task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 7 - mark a task as done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 0 - exit"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* -1 - invalid command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public int commandType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Command(int typeInteger) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.commandType \u003d typeInteger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this(-1); // -1 represents invalid input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to print information of newly created todo/deadline/event object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * returns nothing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @param tasklist the TaskList object where newly created todo/deadline/event objects are stored"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @param newTask the newly created todo/deadline/event object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void printCommand(TaskList tasklist, Task newTask) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(newTask.getSymbol() + newTask.getStatusIcon() + newTask.getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"Now you have \" + tasklist.tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to execute various commands, including add, delete and find tasks, etc."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * returns nothing"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @param tasklist the TaskList object where all task information is stored"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @param fullCommand the command text input by users"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @throws DukeException when detecting incomplete and incorrect commands"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void executeCommand(TaskList tasklist, String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        switch (this.commandType) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            case 1: // when the command is to add a new Todo"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                if (fullCommand.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    throw new DukeException(\"todo\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String description \u003d fullCommand.substring(5);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                Task newTodo \u003d new Todo(description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasklist.tasks.add(newTodo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                printCommand(tasklist, newTodo);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            case 2: // when the command is to add a new Deadline"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                if (fullCommand.length() \u003c\u003d 9) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    throw new DukeException(\"deadline\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String content \u003d fullCommand.substring(9, fullCommand.indexOf(\"/\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String deadline \u003d fullCommand.substring(fullCommand.indexOf(\"/\") + 4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                Deadline newDeadline \u003d new Deadline(content, deadline);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasklist.tasks.add(newDeadline);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                printCommand(tasklist, newDeadline);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            case 3: // when the command is to add a new Event"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                if (fullCommand.length() \u003c\u003d 6) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    throw new DukeException(\"event\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String eventContent \u003d fullCommand.substring(6, fullCommand.indexOf(\"/\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String startTime \u003d fullCommand.substring(fullCommand.indexOf(\"/\") + 4);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                Event newEvent \u003d new Event(eventContent, startTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasklist.tasks.add(newEvent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                printCommand(tasklist, newEvent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            case 4: // when the command is to print the task list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasklist.printList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            case 5: // when the command is to delete a task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                if (fullCommand.length() \u003c\u003d 7) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    throw new DukeException(\"delete\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                int taskNo \u003d Integer.parseInt(fullCommand.substring(7));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasklist.deleteTask(taskNo);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            case 6: // when the command is to find tasks containing a keyword"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                if (fullCommand.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    throw new DukeException(\"find\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String keyWord \u003d fullCommand.substring(5);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasklist.findTask(keyWord);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            case 7: // when the command is to mark a task as done"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                if (fullCommand.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    throw new DukeException(\"done\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                int taskIndex \u003d Integer.parseInt(fullCommand.substring(5));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasklist.markAsDone(taskIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            case 0: // when the command is to exit the system"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            default: // when the command is invalid"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                throw new DukeException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "max-wunan": 108
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* Represents a type of task with description and a deadline (date or time)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* status is undone unless marked done by the user"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected String symbol \u003d \"[D]\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected String deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Deadline(String content, String deadline) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * Function to make it easier to print information"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * @return String symbol \"[D]\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * Function to make it easier to print information"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * @return String description e.g. \"assignmen (by: today)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return this.description + \"(by: \" + this.deadline + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "max-wunan": 33
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "//import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "//import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "//import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* Represents the whole Duke project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* a Duke(filepath) object represents a Duke project"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* that store all task information in file at the path of filepath"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    private TaskList tasklist;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * The constructor for a Duke object, returns nothing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * loading the task information that already exist in the file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * which is written by previous runs before each run"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @param the path of the file on which the task information is written"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @throws FileNotFoundException when the file is not found at the path given"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            tasklist \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            System.out.println(\"☹ OOPS!!! There is something wrong with the file: \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            tasklist \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function that execute the functions of this app"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * no parameters, returns nothing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * continues the running until command \"bye\" is typed in to break the loop"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * call functions to execute each specific functions"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @throws DukeException when the command typed in is incomplete or different from any existing commands"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @throws IOEException when issues are detected during file writing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        ui.printGreeting();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        while(!isExit) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                Command newCommand \u003d parser.analyzeCommand(fullCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                newCommand.executeCommand(tasklist, fullCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                if (newCommand.commandType \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    storage.writeToFile(tasklist.tasks);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    ui.printBye();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    isExit \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                switch (e.type) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    case \"todo\": // no description given after todo"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        System.out.println(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    case \"deadline\": // no description given after deadline"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        System.out.println(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    case \"event\": // no description given after event"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        System.out.println(\"☹ OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    case \"delete\": // no index given after delete"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        System.out.println(\"☹ OOPS!!! I don\u0027t understand what you want to delete :-(\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    case \"find\": // no index given after find"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        System.out.println(\"☹ OOPS!!! I don\u0027t understand what you want to find :-(\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    case \"done\": // no index given after done"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        System.out.println(\"☹ OOPS!!! I don\u0027t understand what you have done :-(\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    case \"invalid description\": // invalid command input"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    case \"delete non-existing task\": // trying to delete tasks that do not exist"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        System.out.println(\"☹ OOPS!!! You can\u0027t delete a task that doesn\u0027t exist :-(\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    case \"mark non-existent task as done\": // trying to mark non-existing task as done"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        System.out.println(\"☹ OOPS!!! You can\u0027t mark a task that doesn\u0027t exist as done :-(\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    case \"already done\": // trying to mark task that is already done as done"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        System.out.println(\"☹ OOPS!!! You can\u0027t mark a task that is already done as done :-(\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                System.out.println(\"☹ OOPS!!! There is something wrong with the file: \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        new Duke(\"src/main/java/duke.txt\").run();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "max-wunan": 125,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* Represents all possible exceptions when incomplete or incorrect command is typed in"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* description gives details of exceptions"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* for incomplete commands, the description of DukeException will be the prefix of the command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* e.g. DukeException(\"todo\")"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* for incorrect commands, the description will be \"invalid description\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this(\"invalid description\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public DukeException(String type) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "max-wunan": 18
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected String symbol \u003d \"[E]\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected String startTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Event(String content, String startTime) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return this.description + \"(at: \" + this.startTime + \")\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* Represents a type of task with description and a startTime (date or time)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* status is undone by default unless marked done by the user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected String symbol \u003d \"[E]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected String startTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Event(String content, String startTime) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * Function to make it easier to print information"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * @return String symbol \"[E]\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * Function to make it easier to print information"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * @return String description e.g. \"meeting (at: tomorrow 8pm)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return this.description + \"(at: \" + this.startTime + \")\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "max-wunan": 52
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * 1 - add Todo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * 2 - add Deadline"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * 3 - add Event"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * 4 - print task list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * 5 - delete task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * 6 - find task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * 7 - mask as done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * 0 - exit*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Command analyzeCommand(String commandLine) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        if (commandLine.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (commandLine.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (commandLine.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(3);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (commandLine.equals(\"list\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(4);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (commandLine.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(5);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (commandLine.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(6);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (commandLine.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(7);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (commandLine.equals(\"bye\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* Represents an object that deals with user command input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* converts command texts to integers to represent different commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* integers and their corresponding commands as follows:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 1 - add Todo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 2 - add Deadline"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 3 - add Event"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 4 - print task list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 5 - delete task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 6 - find task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 7 - mask as done"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* 0 - exit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* -1 - invalid command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * Function to analyze command texts typed in by users"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * by detecting the content or prefix or command text"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * this function determines the specific type of command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * and convert commands into integers"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * @param commandLine the command text input by users"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * @return Command object with different typeInteger to represent different types of commands"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Command analyzeCommand(String commandLine) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        if (commandLine.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (commandLine.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (commandLine.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (commandLine.equals(\"list\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(4);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (commandLine.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(5);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (commandLine.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(6);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (commandLine.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(7);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (commandLine.equals(\"bye\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            return new Command();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "max-wunan": 88
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void writeToFile(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        FileWriter dukeText \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            dukeText.write(task.getSymbol() + \" | \" + task.getStatusIcon() + \" | \" + task.getDescription());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        dukeText.close();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        File dukeText \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        Scanner in \u003d new Scanner(dukeText);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        while (in.hasNext()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            String line \u003d in.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            String[] taskInfo \u003d line.split(\"|\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            if (taskInfo[0].contains(\"[T]\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                Task newTask \u003d new Todo(taskInfo[2].trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                if (taskInfo[1].contains(\"[\\u2713]\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    newTask.isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    newTask.isDone \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            } else if (taskInfo[0].contains(\"[D]\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String description \u003d line.substring(0,line.indexOf(\"(by: \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String deadline \u003d line.substring(line.indexOf(\"(by: \" + 5), line.indexOf(\")\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                Task newTask \u003d new Deadline(description.trim(), deadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                if (taskInfo[1].contains(\"[\\u2713]\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    newTask.isDone \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                } else {import java.io.FileWriter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* Represents an object that deals with loading information from a file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* as well as writing information into it"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* A Storage(filepath) object corresponds to an object that can read and write"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* into the file at the path given by filepath"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to write task information into the txt file at given path"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * returns nothing"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * if the ArrayList is empty, nothing will be written"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @param task the ArrayList whose data will be stored into the file"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @throws IOEException when file writing encounters issues"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void writeToFile(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        FileWriter dukeText \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            dukeText.write(task.getSymbol() + \" | \" + task.getStatusIcon() + \" | \" + task.getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        dukeText.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to read from a file and store all the data into an ArrayList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * returns the ArrayList storing all data read from the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * if the file is empty, the ArrayList will be instantiated as an empty new ArrayList"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * no parameters"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @return ArrayList\u003cTask\u003e tasks that stores all task information read from the file"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @throws FileNotFoundException when no file is found at the path given"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        File dukeText \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        Scanner in \u003d new Scanner(dukeText);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        while (in.hasNext()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            String line \u003d in.nextLine();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            //String[] taskInfo \u003d line.split(\"|\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            if (line.substring(0,3).equals(\"[T]\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                Task newTask \u003d new Todo(line.substring(12));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                newTask.isDone \u003d line.substring(6,9).equals(\"[\\u2713]\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            } else if (line.substring(0,3).equals(\"[D]\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String description \u003d line.substring(12,line.indexOf(\"(by: \"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String deadline \u003d line.substring(line.indexOf(\"(by: \" + 5), line.indexOf(\")\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                Task newTask \u003d new Deadline(description, deadline);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                newTask.isDone \u003d line.substring(6,9).equals(\"[\\u2713]\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            } else if (line.substring(0,3).equals(\"[E]\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String description \u003d line.substring(12,line.indexOf(\"(at: \"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String eventTime \u003d line.substring(line.indexOf(\"(at : \" + 5), line.indexOf(\")\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                Task newTask \u003d new Event(description, eventTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                newTask.isDone \u003d line.substring(6,9).equals(\"[\\u2713]\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    newTask.isDone \u003d false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            } else if (taskInfo[0].contains(\"[E]\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String description \u003d line.substring(0,line.indexOf(\"(at: \"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                String eventTime \u003d line.substring(line.indexOf(\"(at : \" + 5), line.indexOf(\")\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                Task newTask \u003d new Event(description.trim(), eventTime);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                if (taskInfo[1].contains(\"[\\u2713]\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    newTask.isDone \u003d true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                    newTask.isDone \u003d false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "max-wunan": 137
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    //protected String symbol \u003d \"[N]\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        new Task(\"No description given\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return [tick] or [X] symbols"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* Represents all types of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* parent class of Todo/Deadline/Event"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* includes description only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* status is undone by default unless marked done by user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    //protected String symbol \u003d \"[N]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        new Task(\"No description given\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * Function to make it easier to print information"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * @return String status icon \"[tick]\" or \"[X]\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return [tick] or [X] symbols"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "max-wunan": 65
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            System.out.println(i + \".\" + this.tasks.get(i-1).getSymbol() + this.tasks.get(i-1).getStatusIcon() + this.tasks.get(i-1).getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void deleteTask(int taskIndex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        String description \u003d this.tasks.get(taskIndex-1).getSymbol() + this.tasks.get(taskIndex-1).getStatusIcon() + this.tasks.get(taskIndex-1).getDescription();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.tasks.remove(taskIndex-1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void findTask(String keyWord) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        ArrayList\u003cTask\u003e tasksWithKey \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            if (task.description.contains(keyWord)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasksWithKey.add(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        for (int i  \u003d 1; i \u003c\u003d tasksWithKey.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            System.out.println(i + \".\" + tasksWithKey.get(i-1).getSymbol() + tasksWithKey.get(i-1).getStatusIcon() + tasksWithKey.get(i-1).getDescription());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }import java.util.ArrayList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* Represents a collection of all tasks"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* all tasks are stored in ArrayList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* include methods to add/delete/find tasks and to print all tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to print all tasks and relevant information"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * returns nothing, no parameter"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * if the ArrayList is empty, there will be nothing shown below \"Here are the tasks in your list:\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            System.out.println(i + \".\" + this.tasks.get(i-1).getSymbol() + this.tasks.get(i-1).getStatusIcon() + this.tasks.get(i-1).getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to delete a certain task based on its index"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * returns nothing"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @param taskIndex the index of the task that the user wants to delete"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @throws DukeException when user tries to delete tasks that does not exist"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void deleteTask(int taskIndex) throws DukeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        if (taskIndex \u003e this.tasks.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            throw new DukeException(\"delete non-existing task\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        String description \u003d this.tasks.get(taskIndex-1).getSymbol() + this.tasks.get(taskIndex-1).getStatusIcon() + this.tasks.get(taskIndex-1).getDescription();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        this.tasks.remove(taskIndex-1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(description);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to find tasks whose description contains the keyword given by users"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * returns nothing"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * if no task is found, nothing will be printed below \"Here are the matching tasks in your list:\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @param keyWord the keyword given by the user"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void findTask(String keyWord) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        ArrayList\u003cTask\u003e tasksWithKey \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            if (task.description.contains(keyWord)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                tasksWithKey.add(task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        for (int i  \u003d 1; i \u003c\u003d tasksWithKey.size(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            System.out.println(i + \".\" + tasksWithKey.get(i-1).getSymbol() + tasksWithKey.get(i-1).getStatusIcon() + tasksWithKey.get(i-1).getDescription());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to change the status of a task from undone to done"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * returns nothing"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @param taskNo the index of task which user wants to mark as done"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @throws DukeException when user tries to mark done a non-existent task"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * or tries to mark done a task that is already done"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void markAsDone(int taskNo) throws DukeException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        if (taskNo \u003e tasks.size()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            throw new DukeException(\"mark non-existent task as done\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else if (tasks.get(taskNo - 1).isDone) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            throw new DukeException(\"already done\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        tasks.get(taskNo-1).isDone \u003d true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(tasks.get(taskNo-1).getSymbol() + tasks.get(taskNo-1).getStatusIcon() + tasks.get(taskNo-1).description + \"\\n\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void markAsDone(int taskNo) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        tasks.get(taskNo-1).isDone \u003d true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(tasks.get(taskNo-1).getSymbol() + tasks.get(taskNo-1).getStatusIcon() + tasks.get(taskNo-1).description + \"\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "max-wunan": 152
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* Represents a type of task with description only"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* without any date/time"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* status is undone by default unless user marks it as done"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    protected String symbol \u003d \"[T]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Todo(String content) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to make it easier to print information"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @return String symbol \"[T]\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return super.getDescription();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "max-wunan": 27
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* Represents an object with the function of user interaction"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* deals with the command text typed in by users"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* as well as signals the start and end of the whole program"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void printGreeting() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        String greeting \u003d \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"What can I do for you?\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void printBye() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        String bye \u003d \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"Bye. Hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(bye);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        String line \u003d in.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* Represents an object with the function of user interaction"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* deals with the command text typed in by users"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* as well as signals the start and end of the whole program"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to print welcome texts every time this app is launched"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * no parameter, returns nothing"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void printGreeting() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        String greeting \u003d \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"What can I do for you?\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to print the ending message for users"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * no parameter, returns nothing"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void printBye() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        String bye \u003d \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"Bye. Hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(bye);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to read the command input by users and store them as Strings"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * make it easy to pass the command text of users to other functions"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * for command analyzing and executing purposes"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * no parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @return String object the command text input by user"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* Represents an object with the function of user interaction"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* deals with the command text typed in by users"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* as well as signals the start and end of the whole program"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "* */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to print welcome texts every time this app is launched"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * no parameter, returns nothing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void printGreeting() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        String greeting \u003d \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"What can I do for you?\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to print the ending message for users"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * no parameter, returns nothing"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void printBye() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        String bye \u003d \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"Bye. Hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "                + \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(bye);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * Function to read the command input by users and store them as Strings"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * make it easy to pass the command text of users to other functions"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * for command analyzing and executing purposes"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * no parameters"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * @return String object the command text input by user"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "max-wunan": 150
    }
  },
  {
    "path": "src/main/java/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "max-wunan": 1
    }
  }
]
