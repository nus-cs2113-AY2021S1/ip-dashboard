[
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidTaskTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class InvalidTaskTypeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 4
    }
  },
  {
    "path": "src/main/java/duke/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.exceptions.InvalidTaskTypeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static String separatingLine \u003d \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printGreetings(String greeting) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (greeting.equals(\"hello\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            System.out.println(separatingLine);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            System.out.println(\"Hello! I\u0027m duke.main.Duke\\n\" + \"What do you want to do today?\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            System.out.println(separatingLine);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } else if (greeting.equals(\"bye\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            System.out.println(separatingLine);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            System.out.println(\"Bye. See you tomorrow!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            System.out.println(separatingLine);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void main(String[] args) throws DukeException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        TaskManager todayList \u003d new TaskManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printGreetings(\"hello\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String fileName \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Path filePath \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(String.valueOf(filePath));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Scanner sc \u003d new Scanner(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        filePath \u003d Paths.get(fileName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "//        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "          String text \u003d sc.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        while (!text.equals(\"bye\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            System.out.println(separatingLine);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            //list command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                if (text.equals(\"list\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    todayList.printTasks();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    //done command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                } else if (text.contains(\"done\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    setTaskDone(text, todayList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    //add command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                } else if (text.contains(\"delete\")){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    String[] commandSplit \u003d text.split(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    int taskID \u003d Integer.parseInt(commandSplit[1]) - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    System.out.println(\"Noted down. I\u0027ve deleted this task: \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    todayList.printOneTask(todayList.getNumTasks() - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    todayList.deleteTask(taskID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    System.out.println(\"Now you have \" + todayList.getNumTasks() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                } else{"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    todayList.addTask(text);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    updateFile(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    todayList.printOneTask(todayList.getNumTasks() - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    System.out.println(\"Now you have \" + todayList.getNumTasks() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                System.out.println(\"OOPS!!! There is no such task!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                System.out.println(\"OOPS!!! No task ID like this!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            } catch (InvalidTaskTypeException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            System.out.println(separatingLine);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            text \u003d sc.nextLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (int i\u003d0; i\u003c todayList.getNumTasks(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            fw.write(todayList[i].toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printGreetings(\"bye\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void setTaskDone(String text, TaskManager todayList) throws DukeException{"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] commandSplit \u003d text.split(\" \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        int taskID \u003d Integer.parseInt(commandSplit[1]) - 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (taskID \u003c todayList.getNumTasks()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            todayList.setTaskAsDone(taskID);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            todayList.printOneTask(taskID);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static void updateFile(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(String.valueOf(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (Task t : todayList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            fw.write(t.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        fw.write(\"There are a total of \" + arrayOfTasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 112,
      "-": 9
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public Deadline (String description, int id, String by) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(description, id);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return String.format(\"[D]%s %s (by: %s)\",getStatus(), description, by);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 15
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public  Event(String description, int id, String at) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(description, id);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return String.format(\"[E]%s %s (at: %s)\",getStatus(), description, at);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 17
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    protected Boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    protected int id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public Task(String description, int id) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void setAsDone ()  {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 28
    }
  },
  {
    "path": "src/main/java/duke/task/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.exceptions.InvalidTaskTypeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private Task[] tasks \u003d new Task[100];"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private int numTasks \u003d0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void addTask(String task) throws InvalidTaskTypeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            if (task.contains(\"todo\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                addToDo(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            } else if (task.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                addDeadline(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            } else if (task.contains(\"event\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                addEvent(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                throw new InvalidTaskTypeException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            System.out.println(\"OOPS!!! You have to provide the date!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        numTasks++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void addToDo(String task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String description \u003d task.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            tasks[numTasks] \u003d new ToDo(description, numTasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            System.out.println(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void addDeadline(String task) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            task \u003d task.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String description \u003d task.split(\"/by\")[0].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            if (description.length() \u003c 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                throw new DukeException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                String byTime \u003d task.split(\"/by\")[1].trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                tasks[numTasks] \u003d new Deadline(description, numTasks, byTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            System.out.println(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void addEvent(String task) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            task \u003d task.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String description \u003d task.split(\"/at\")[0].trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            if (description.length() \u003c 2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                throw new DukeException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                String byTime \u003d task.split(\"/at\")[1].trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                tasks[numTasks] \u003d new Event(description, numTasks, byTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            System.out.println(\"OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public int getNumTasks() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return numTasks;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void printTasks() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (int i \u003d 0; i \u003cnumTasks; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            System.out.println((i + 1) + \".\" + tasks[i].toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void deleteTask(int id) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        numTasks--;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (int i \u003d id; i\u003cnumTasks-1; i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            tasks[i] \u003d tasks[i+1];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void printOneTask(int id) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        System.out.println(tasks[id].toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void setTaskAsDone(int id) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tasks[id].setAsDone();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 95
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ToDo(String description, int id) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(description, id);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return String.format(\"[T]%s %s\", getStatus(), description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 14
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "javac  -cp ..\\src\\main\\java\\duke\\main -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 2,
      "-": 19
    }
  }
]
