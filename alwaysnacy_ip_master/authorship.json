[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "## Starting Duke program"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "### Using Command Line"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "2. Open Command Prompt (on Windows) or Terminal (on Mac)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "3. Change directory to the folder where `ip.jar` file are stored by `cd` into `ip\\out\\artifacts\\ip_jar`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "4. Change the font in Command Prompt to NSimSan by typing `chcp 65001` in Command Prompt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "6. Type in `java -Dfile.encoding\u003dUTF-8 -jar ip.jar`, then enter to run Duke. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "## Viewing possible actions: `help`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Format `help`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "## Adding a task to Duke: `todo` `event` `deadline`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Words in `UPPERCASE` are the parameters"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "### Adding a Todo: `todo`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Adds a Todo to the Duke"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "_Format_: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "__Example:__"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "- `todo borrow The kite runner`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "- `todo return the pen get from Jen`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "### Adding an Event"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Adds an Event to the Duke"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "_Format_: `event DESCRIPTION /at YYYY-MM-DD HH:MM`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "__Example:__"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "- `event project meeting /at 2020-09-23 12:00`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "- `event join the BumbleBee Welcome Tea /at 2020-09-23 12:00`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "### Adding a Deadline"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Adds a Deadline to the Duke"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "_Format_: `deadline DESCRIPTION /by YYYY-MM-DD HH:MM`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "__Example:__"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "- `deadline project report /by 2020-09-23 12:00`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "- `deadline join the BumbleBee First Evaluation /by 2020-09-23 12:00`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "## Listing all tasks: `list`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Shows a list of all tasks in Duke, along with their details, status and ID"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "_Format_: `list`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "## Marking task as done: `done`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Marks a task specified by its ID as done. You have to list all the tasks first using `list` before using `done`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "_Format_: `done ID`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "__Example__:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "- `list` `done 1`: will mark the first task in the last shown list as done"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "- `list` `done 3`: will mark the third task in the last shown list as done"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "## Deleting task: `delete`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Deletes a task specified by its ID. You have to list all the tasks first using `list` before using `delete`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "_Format_: `delete ID`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "__Example__:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "- `list` `delete 1`: will delete the first task in the last shown list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "- `list` `delete 3`: will delete the third task in the last shown list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "## Find task: `find`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Finds tasks containing a given keyword"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "_Format:_ `find KEYWORD`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "__Example:__:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "- `find book`: will return all tasks having _book_ in their description"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "- `find project`: will return all tasks having _project_ in their description"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "## Exiting the program: `bye`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Exits the Duke"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "_Format:_ `bye`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 93
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "[T][✘] join sports club[T][✘] read book[D][✘] return book (by: June 6th)[E][✘] project meeting (at: Aug 6th 2-4pm)[T][✘] read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "[D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "[E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "[T][✘] join sports club"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 4
    }
  },
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "E | 0 | project meeting | 2020-11-13 19:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "T | 0 | borrow book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "D | 0 | return book | 2020-11-24 03:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "E | 0 | project meeting | 2020-09-23 12:00"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 5
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.action.Action;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.action.ActionResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.action.ExitAction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private TaskManager todayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private TextUi ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private String filePath \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        loadData();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private void loadData() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            todayList \u003d storage.loadFromStorage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            todayList \u003d new TaskManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.ui \u003d new TextUi();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        ui.printGoodbyeMessage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Action action;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String userInput \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            action \u003d new Parser().parseInput(userInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            ActionResult result \u003d executeCommand(action);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            action.modifyFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            ui.printActionResult(result);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } while (!ExitAction.isExit(action));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private ActionResult executeCommand(Action action) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            action.setData(todayList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            ActionResult result \u003d action.executeAction();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            ui.printScreen(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 74
    }
  },
  {
    "path": "src/main/java/duke/action/Action.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class Action {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    protected TaskManager taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private int taskID \u003d -1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    protected Action() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Executes the action and returns the result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ActionResult executeAction() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        throw new UnsupportedOperationException(\"To be implemented by child classes\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Supplies the data the action will be executed on."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void setData(TaskManager taskList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Extracts the task with target taskID in the last shown list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public int getTargetIndex() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return taskID;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * modifies the default Storage file (duke.txt) whenever an action is executed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void modifyFile() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            Storage.saveToStorage(taskList, Paths.get(Storage.DEFAULT_STORAGE_FILEPATH));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 46
    }
  },
  {
    "path": "src/main/java/duke/action/ActionResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class ActionResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public final String outputToScreen;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * constructs the ActionResult class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param outputToScreen a String to be printed out to the user as a result of an action"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ActionResult(String outputToScreen) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.outputToScreen \u003d outputToScreen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 16
    }
  },
  {
    "path": "src/main/java/duke/action/AddAction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public abstract class AddAction extends Action {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String MESSAGE \u003d \"Got it. I\u0027ve added this task:\\n %1$s\\n\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \"Now you have %2$d tasks in the list.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public abstract ActionResult executeAction();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 9
    }
  },
  {
    "path": "src/main/java/duke/action/AddDeadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Adds a Deadline task to the TaskManager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class AddDeadline extends AddAction{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String ACTION \u003d \"deadline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String HELP_MESSAGE \u003d ACTION + \": Adds a Deadline to the task list of DUKE.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Parameters: DESCRIPTION /by YYYY-MM-DD HH:MM\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Example: \" + ACTION"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" submit the third Math homework /by 2020-10-03 23:59\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static Task task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public AddDeadline(String description, LocalDateTime byTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        task \u003d new Deadline(description, getTargetIndex(), byTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ActionResult executeAction() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new ActionResult(String.format(MESSAGE, task, taskList.getNumTasks()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 28
    }
  },
  {
    "path": "src/main/java/duke/action/AddEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Adds an Event task to the TaskManager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class AddEvent extends AddAction {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String ACTION \u003d \"event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static Task task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String HELP_MESSAGE \u003d ACTION + \": Adds an Event to the task list of DUKE.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Parameters: DESCRIPTION /at YYYY-MM-DD HH:MM\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Example: \" + ACTION"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" meet with the CS2113 team /at 2020-10-12 16:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public AddEvent(String description, LocalDateTime atTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        task \u003d new Event(description, getTargetIndex(), atTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ActionResult executeAction() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new ActionResult(String.format(MESSAGE, task, taskList.getNumTasks()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 29
    }
  },
  {
    "path": "src/main/java/duke/action/AddTodo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Adds a Todo task to the TaskManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class AddTodo extends AddAction {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String ACTION \u003d \"todo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String HELP_MESSAGE \u003d ACTION + \": Adds a Todo to the task list of DUKE.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Parameters: DESCRIPTION\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Example: \" + ACTION"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" return books to the Library\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static Task task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public AddTodo(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        task \u003d new ToDo(description, getTargetIndex());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ActionResult executeAction() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new ActionResult(String.format(MESSAGE, task, taskList.getNumTasks()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 27
    }
  },
  {
    "path": "src/main/java/duke/action/DeleteAction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Deletes a task identified using it\u0027s last displayed index from the TaskManager."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class DeleteAction extends  Action {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String ACTION \u003d \"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String HELP_MESSAGE \u003d ACTION"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \": Deletes the task identified by the index number.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Example: \" + ACTION + \" 1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private int taskID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String MESSAGE \u003d \"Noted down. I\u0027ve deleted this task:\\n %1$s\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \"Now you have %2$d tasks in the list.\";;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public DeleteAction(int taskID) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ActionResult executeAction() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        final Task deletedTask \u003d taskList.getTask(taskID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        taskList.deleteTask(this.taskID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new ActionResult(String.format(MESSAGE, deletedTask, taskList.getNumTasks()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 29
    }
  },
  {
    "path": "src/main/java/duke/action/ExitAction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Exits the Duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class ExitAction extends Action{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String ACTION \u003d \"bye\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String HELP_MESSAGE \u003d ACTION + \": Exits the program.\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Example: \" + ACTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String EXIT_MESSAGE \u003d \"I am closing today\u0027s task list ...\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ActionResult executeAction() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new ActionResult(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static boolean isExit(Action action) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return action instanceof ExitAction; // instanceof returns false if it is null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 20
    }
  },
  {
    "path": "src/main/java/duke/action/FindAction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Finds tasks containing a given keyword (not empty)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class FindAction extends Action {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String ACTION \u003d \"find\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String HELP_MESSAGE \u003d ACTION + \": Finds all tasks whose descriptions contain any of \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \"a keyword and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Example: \" + ACTION + \"book\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String MESSAGE \u003d \"Here are the matching tasks in your list:\\n%1$s\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \"%2$d matching tasks listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String NO_TASk_FOUND_MESSAGE \u003d \"No matching tasks found!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public int numberOfMactchingTasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public FindAction(String keyword) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.numberOfMactchingTasks \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String getStringOfMatchingTask() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String matchingTask \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (int i \u003d 0; i \u003ctaskList.getNumTasks(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            if (taskList.getStringOfTask(i).contains(keyword)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                matchingTask +\u003d (i+1) + \". \" + taskList.getStringOfTask(i) + \"\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                numberOfMactchingTasks++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return matchingTask;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ActionResult executeAction() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String stringOfMatchingTasks \u003d getStringOfMatchingTask();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (stringOfMatchingTasks.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new ActionResult(NO_TASk_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new ActionResult(String.format(MESSAGE, stringOfMatchingTasks, numberOfMactchingTasks));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 45
    }
  },
  {
    "path": "src/main/java/duke/action/FinishAction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static duke.ui.TextUi.INDEX_OFFSET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Marks as done a task identified using it\u0027s last displayed index from the TaskManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class FinishAction extends Action {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String ACTION \u003d \"done\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String HELP_MESSAGE \u003d ACTION + \": Set the task identified by index number as done. \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Example: \" + ACTION +\"1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\\n %1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static int taskID;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public FinishAction(int taskID) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ActionResult executeAction() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        taskList.setTaskAsDone(this.taskID - INDEX_OFFSET);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new ActionResult(String.format(MESSAGE, taskList.getStringOfTask(taskID-INDEX_OFFSET)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 28
    }
  },
  {
    "path": "src/main/java/duke/action/HelpAction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Shows help action."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class HelpAction extends Action{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String ACTION \u003d \"help\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String HELP_MESSAGE \u003d ACTION + \": Shows what you can do in DUKE.\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Example: \" + ACTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ActionResult executeAction() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new ActionResult("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                AddTodo.HELP_MESSAGE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                        + \"\\n\" + AddEvent.HELP_MESSAGE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                        + \"\\n\" + AddDeadline.HELP_MESSAGE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                        + \"\\n\" + DeleteAction.HELP_MESSAGE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                        + \"\\n\" + ListAction.HELP_MESSAGE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                        + \"\\n\" + HelpAction.HELP_MESSAGE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                        + \"\\n\" + ExitAction.HELP_MESSAGE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 24
    }
  },
  {
    "path": "src/main/java/duke/action/InvalidAction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Represents an invalid action. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class InvalidAction extends Action {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public final String outputToScreen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public InvalidAction(String outputToScreen) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.outputToScreen \u003d outputToScreen;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ActionResult executeAction() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new ActionResult(outputToScreen);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 15
    }
  },
  {
    "path": "src/main/java/duke/action/ListAction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Lists all tasks in the TaskManager of Duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class ListAction extends Action {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String ACTION \u003d \"list\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String HELP_MESSAGE \u003d ACTION"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \": Displays all tasks in DUKE as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \" Example: \" + ACTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String MESSAGE\u003d \"Here are the tasks in your list:\\n%1$s\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \"You have %2$d tasks in the list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String NO_TASK_MESSAGE \u003d \"You are having no task!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ActionResult executeAction() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (taskList.getNumTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new ActionResult(NO_TASK_MESSAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new ActionResult(String.format(MESSAGE, taskList.getStringOfAllTasks(), taskList.getNumTasks()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 23
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public DukeException(String updateFileError) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 6
    }
  },
  {
    "path": "src/main/java/duke/message/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.message;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String GOODBYE_MESSAGE \u003d \"Good bye. See you tomorrow!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String INVALID_ACTION_MESSAGE \u003d \"There is no such action! \\n%1$s\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String INVALID_TASK_ID_MESSAGE \u003d \"The task ID provided is invalid \\n%1$s\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String WRONG_DATETIME_FORMAT_MESSAGE \u003d \"You entered the wrong date time format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String NO_KEYWORD_FOUND_MESSAGE \u003d \"You did not enter the keyword!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String WRONG_FORMAT_MESSAGE \u003d \"You entered the wrong action format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Duke.\\nWhat do you want to do today?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String LOGO_MESSAGE \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                                            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                                            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                                            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                                            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 18
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.action.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static duke.message.Messages.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Parses user input into respective action for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param userInput a full user input in type of String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return the action the user has input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public Action parseInput(String userInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] inputs \u003d userInput.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (inputs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new InvalidAction(String.format(INVALID_ACTION_MESSAGE, HelpAction.HELP_MESSAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        final String actionWord \u003d inputs[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        final String arguments \u003d userInput.replaceFirst(actionWord, \"\").trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        switch (actionWord) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case AddTodo.ACTION:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return prepareAddTodo(arguments);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case AddEvent.ACTION:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return prepareAddEvent(arguments);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case AddDeadline.ACTION:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return prepareAddDeadline(arguments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case DeleteAction.ACTION:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return prepareDeleteAction(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case FinishAction.ACTION:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return prepareFinishAction(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case ListAction.ACTION:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new ListAction();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case ExitAction.ACTION:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new ExitAction();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case HelpAction.ACTION:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new HelpAction();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case FindAction.ACTION:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return prepareFindAction(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new InvalidAction(String.format(WRONG_FORMAT_MESSAGE, HelpAction.HELP_MESSAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Parses arguments to prepare parameters for AddTodo action"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param args full argument String, extracted after the action word"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return the prepared addTodo object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private Action prepareAddTodo(String args) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new AddTodo(args);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Parses arguments to prepare parameters for AddEvent action"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param args full argument String, extracted after the action word"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return the prepared addEvent object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private Action prepareAddEvent(String args) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] descriptionAndTime \u003d args.split(\"/at\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (descriptionAndTime.length !\u003d 2) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new InvalidAction(String.format(WRONG_FORMAT_MESSAGE, AddEvent.HELP_MESSAGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            LocalDateTime at \u003d convertDateTimeFormat(descriptionAndTime[1].trim());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new AddEvent(descriptionAndTime[0].trim(), at);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new InvalidAction(String.format(WRONG_DATETIME_FORMAT_MESSAGE, AddEvent.HELP_MESSAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Parses arguments to prepare parameters for AddDeadline action"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param args full argument String, extracted after the action word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return the prepared addDeadline object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private Action prepareAddDeadline(String args) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] descriptionAndTime \u003d args.split(\"/by\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (descriptionAndTime.length !\u003d 2) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new InvalidAction(String.format(WRONG_FORMAT_MESSAGE, AddDeadline.HELP_MESSAGE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            LocalDateTime by \u003d convertDateTimeFormat(descriptionAndTime[1].trim());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new AddDeadline(descriptionAndTime[0].trim(), by);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new InvalidAction(String.format(WRONG_DATETIME_FORMAT_MESSAGE, AddDeadline.HELP_MESSAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * converts String parameter to LocalDateTime object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param dateAndTime full argument String, extracted after the action word"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return the LocalDateTime object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private LocalDateTime convertDateTimeFormat(String dateAndTime) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(dateAndTime, formatter);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Parses arguments to prepare parameters to initialize DeleteAction"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param args full argument String, extracted after the action word"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return the prepared DeleteAction object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private Action prepareDeleteAction(String args) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            final int targetIndex \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new DeleteAction(targetIndex);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new InvalidAction(String.format(INVALID_TASK_ID_MESSAGE, FinishAction.HELP_MESSAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Parses arguments to prepare parameters to initialize FinishAction"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param args full argument String, extracted after the action word"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return the prepared FinishAction object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private Action prepareFinishAction(String args) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            final int targetIndex \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new FinishAction(targetIndex);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new InvalidAction(String.format(INVALID_TASK_ID_MESSAGE, FinishAction.HELP_MESSAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Parses arguments to prepare parameters to initialize FindAction action"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * ensures no empty keyword provided to the FindAction object"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param args full argument String, extracted after the action word"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return the prepared FindAction object"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private Action prepareFindAction(String args) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new InvalidAction(NO_KEYWORD_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new FindAction(args.trim());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 177
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String UPDATE_FILE_ERROR_MESSAGE \u003d \"Could not write to file\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String LOAD_FILE_ERROR_MESSAGE \u003d \"Could not load file.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String NO_FILE_ERROR_MESSAGE \u003d \"File not found, new duke.txt file will be created\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            + \"to store new tasks added.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Loads the {@code TaskManager} data from this storage file, and then returns it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return a TaskManager object containing tasks read from existing file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @throws DukeException if there were errors loading data from file or file specified does not exist"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public TaskManager loadFromStorage() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        TaskManager tasksFromFile \u003d new TaskManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        int taskCounter \u003d0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Scanner fileScanner;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            fileScanner \u003d new Scanner(path);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            throw new DukeException(NO_FILE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            throw new DukeException(LOAD_FILE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            taskCounter++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String fileInput \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String taskType \u003d fileInput.substring(0, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            loadTaskFromStorage(fileInput, taskType, tasksFromFile, taskCounter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return tasksFromFile;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Adds task from duke.txt file to the TaskManager object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param fileInput a full line in duke.txt file"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param taskType indicates if a task is Todo, Event or Deadline"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param tasksFromFile a TaskManager object to contains all tasks read from duke.txt"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param taskID taskID of the task from File, get by parsing the input String line"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void loadTaskFromStorage(String fileInput, String taskType, TaskManager tasksFromFile, int taskID) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            loadTodoFromStorage(fileInput, tasksFromFile, taskID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            loadEventFromStorage(fileInput, tasksFromFile, taskID);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            loadDeadlineFromStorage(fileInput, tasksFromFile, taskID);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * loads Todo task from the storage file if it exists"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * creates Todo task from the String line and adds it to the TaskManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param fileInput a full line in duke.txt file"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param tasksFromFile a TaskManager object to contains all tasks read from duke.txt"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param taskID taskID of the task from File, get by parsing the input String line"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void loadTodoFromStorage(String fileInput, TaskManager tasksFromFile, int taskID) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String description \u003d fileInput.substring(7).trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Task todo \u003d new ToDo(description, taskID);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tasksFromFile.addTask(todo);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        checkStatus(fileInput, tasksFromFile);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * loads Event task from the storage file if it exists"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * creates Event task from the String line and adds it to the TaskManager"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param fileInput a full line in duke.txt file"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param tasksFromFile a TaskManager object to contains all tasks read from duke.txt"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param taskID taskID of the task from File, get by parsing the input String line"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void loadEventFromStorage(String fileInput, TaskManager tasksFromFile, int taskID) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String descriptionAndTime \u003d fileInput.substring(8);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] parts \u003d descriptionAndTime.split(\"\\\\|\", 2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        LocalDateTime at \u003d convertDateTimeFormat(parts[1].trim());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Task event \u003d new Event(parts[0].trim(), taskID, at);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tasksFromFile.addTask(event);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        checkStatus(fileInput, tasksFromFile);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * loads Deadline task from the storage file if it exists"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * creates Deadline task from the String line and adds it to the TaskManager"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param fileInput a full line in duke.txt file"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param tasksFromFile a TaskManager object to contains all tasks read from duke.txt"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param taskID taskID of the task from File, get by parsing the input String line"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void loadDeadlineFromStorage(String fileInput, TaskManager tasksFromFile, int taskID) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String descriptionAndTime \u003d fileInput.substring(8);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] parts \u003d descriptionAndTime.split(\"\\\\|\", 2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        LocalDateTime by \u003d convertDateTimeFormat(parts[1].trim());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Task deadline \u003d new Deadline(parts[0].trim(), taskID, by);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tasksFromFile.addTask(deadline);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        checkStatus(fileInput, tasksFromFile);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * converts String parameter to LocalDateTime object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param dateAndTime full argument String, extracted after the action word"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return the LocalDateTime object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static LocalDateTime convertDateTimeFormat(String dateAndTime) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(dateAndTime, formatter);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * checks status of the task loaded from duke.txt"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * if done, marks the task just added in taskFromFile as done"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param fileInput a full line in duke.txt file"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param tasksFromFile a TaskManager object to contains all tasks read from duke.txt"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void checkStatus(String fileInput, TaskManager tasksFromFile) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String status \u003d fileInput.substring(3, 6);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (status.contains(\"[\\u2713]\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            tasksFromFile.setTaskAsDone(tasksFromFile.getNumTasks()-1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Updates file whenever there is modification to the TaskManager"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param tasks Instance of TaskManager class"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param filePath Path of duke.txt file"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @throws DukeException if there is problem writing tasks to the file created"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void saveToStorage(TaskManager tasks, Path filePath) throws DukeException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            FileWriter fw \u003d new FileWriter(String.valueOf(filePath));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            for (Task task : tasks.getAllTasks()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                fw.write(task.toFile() + System.lineSeparator());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            throw new DukeException(UPDATE_FILE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 192
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public Deadline (String description, int taskID, LocalDateTime by) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(description, taskID);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return String.format(\"D | %s | %s | %s\", getStatusAsNumber(), description,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                by.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return String.format(\"[D]%s %s (by: %s)\",getStatus(), description,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 26
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public  Event(String description, int taskID, LocalDateTime at) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(description, taskID);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return String.format(\"E | %s | %s | %s\", getStatusAsNumber(), description,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                at.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return String.format(\"[E]%s %s (at: %s)\",getStatus(), description,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 29
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    protected Boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    protected int taskID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public Task(String description, int taskID) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String getStatusAsNumber() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return (isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void setAsDone ()  {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String toFile() { return description; }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 34
    }
  },
  {
    "path": "src/main/java/duke/task/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * TaskManager stores Tasks in an ArrayList of Task objects"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final int INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Adds a Task object to the ArrayList of Tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * gets the total number of tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return integer primitive type number of tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public int getNumTasks() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * deletes task specified by its ID in the last shown list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param taskID"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void deleteTask(int taskID) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tasks.remove(taskID-INDEX_OFFSET);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * gets the tasks specified by their index in form of String"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param id task index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return a String of task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String getStringOfTask(int id) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return tasks.get(id).toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * gets all tasks in the list in form of concatenated String"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return a String of all tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String getStringOfAllTasks() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String stringOfTasks \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (int i \u003d 0; i \u003ctasks.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            stringOfTasks +\u003d (i+1) + \". \" + tasks.get(i).toString() +\"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return stringOfTasks;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * gets task specified by its taskID"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param taskID integer primitive type"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return a Task object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public Task getTask(int taskID) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return tasks.get(taskID - INDEX_OFFSET);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * gets an ArrayList of all tasks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return an ArrayList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * set Task specified by its index as Done"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param id integer primitive type"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void setTaskAsDone(int id) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tasks.get(id).setAsDone();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 88
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ToDo(String description, int taskID) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(description, taskID);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return String.format(\"T | %s | %s\", getStatusAsNumber(), description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return String.format(\"[T]%s %s\", getStatus(), description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 19
    }
  },
  {
    "path": "src/main/java/duke/ui/TextUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import duke.action.ActionResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static duke.message.Messages.GOODBYE_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static duke.message.Messages.WELCOME_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static duke.message.Messages.LOGO_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final int INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String REPLY_IDENTIFIER \u003d \"\u003e\u003e \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String COMMAND_DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        System.out.print(REPLY_IDENTIFIER + \"Action: \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String UserInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return UserInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printScreen(COMMAND_DIVIDER, COMMAND_DIVIDER, LOGO_MESSAGE, COMMAND_DIVIDER, WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void printGoodbyeMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printScreen(GOODBYE_MESSAGE, COMMAND_DIVIDER, COMMAND_DIVIDER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void printScreen(String... messages) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (String message: messages) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            if (message \u003d\u003d LOGO_MESSAGE || message \u003d\u003d COMMAND_DIVIDER) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                System.out.println(message);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                System.out.println(REPLY_IDENTIFIER + message.replace(\"\\n\", NEWLINE + REPLY_IDENTIFIER));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void printActionResult(ActionResult result) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printScreen(result.outputToScreen, COMMAND_DIVIDER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 47
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "help"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "deadline return book /by 2020-10-12 16:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "event project meeting /at 2020-11-13 19:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "deadline return book /by 2020-11-24 03:00"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "event project meeting /at 2020-09-23 12:00"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "find book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 15
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "DEL ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java ..\\src\\main\\java\\duke\\action\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\message\\*.java ..\\src\\main\\java\\duke\\parser\\*.java ..\\src\\main\\java\\duke\\storage\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\ui\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin\\duke Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 3,
      "-": 18
    }
  }
]
