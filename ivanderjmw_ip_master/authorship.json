[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "# Duke Template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "Seting up in IntteliJ Idea"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "ivanderjmw": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "# Duke "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "Duke is a simple task management Command Line interface (CLI) software. Available features include different task types, autosaving, and search."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "## User Guide"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "Welcome to Duke. This user guide will help you to get started, or just to find further references of the various Duke commands."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "1. Getting Started"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "2. Adding a task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "3. Listing tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "4. Marking a task as done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "5. Removing a task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "6. Searching a task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "7. Saving your data"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "### Getting Started"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "To get started, download Java 11 and the latest Duke .jar package."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "1. Download JRE 11."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "2. Run the following command `java -Dfile.encoding\u003dUTF-8 -jar ip.jar`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "3. Local duke files are stored in a folder named `duke_data`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "Try to enter some Duke commands, "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "like `todo Watch netflix`, `list`, and exit by entering `bye`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "### Adding a Task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "There are three available different task types in Duke. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "The most basic task is called a `TODO`, with it you can set the task as done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "You also can use `EVENT` to include an `/at` attribute or `DEADLINE` to include a `/by` attribute. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "To add a task, you can enter the following formats."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "`todo TODO_DESCRIPTION`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "`event EVENT_DESCRIPTION /at EVENT_DATE`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "`deadline DEADLINE_DESCRIPTION /by DEADLINE_DATE`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "Added tasks will automatically be stored and you do not need to worry about losing data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": " "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "### Listing Tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "You can list all of your stored tasks. Enter the following command: `list`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "Below is an example output of the list command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "Enter command: list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "1. E - ✓ (at:1am 15 September) Apple WWDC 2020"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "2. T - ✘ Finish Week 6 ip"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "3. T - ✓ Buy boba koi"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "4. E - ✓ (at:27 Sept 11am) Go to Church"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "### Marking a task as done"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "To mark a task as done, you need to refer to the task index (numbering) from the `list` command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "Then we could enter the following:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "```done TASK_INDEX```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "### Removing a task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "You can remove a task permanently from your task list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "Similar with `done`, you need to refer to the task index (numbering) from the `list` command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "Then enter the following:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "```delete TASK_INDEX```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "### Searching a task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "To search through your task descriptions, you could use this command, and find your tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "that contain a specific keyword."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "Enter the following into Duke:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "```search SEARCH_KEYWORD```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "### Saving Your Data"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "Duke stores your user data inside a folder named `duke_data`. "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "Your tasks are stored in that folder inside a file named `store.txt`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "Duke stores your data every time your commands are executed with no errors."
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "ivanderjmw": 69
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class Duke extends Throwable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        storage \u003d new Storage(filePath, ui);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            tasks \u003d new TaskList(storage.readFile());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            ui.printWithTemplate(e.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        parser \u003d new Parser(tasks, ui, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        input \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                // Checks cases for the command entered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                Command userCommand \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                userCommand.execute();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                storage.saveFile(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                ui.printWithTemplate(e.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            // Gets the next command entered"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            input \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        new Duke(\"duke_data/store.txt\").run();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "ivanderjmw": 55
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 7
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected TaskList tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Parser(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * A method that returns a SetDoneCommand with attributes parsed from a user\u0027s raw input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @param rawInput string of the user\u0027s input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @return a SetDoneCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Command setTaskDone(String rawInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String input \u003d rawInput.replaceFirst(\"done\", \"\").trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        // Parses the task index from the users input with format \"done \u003cindex\u003e\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(input) -  1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return new SetDoneCommand(tasks, ui, taskIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * A method that returns a DeleteCommand with attributes parsed from a user\u0027s raw input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @param rawInput string of the user\u0027s input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @return a DeleteCommand object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Command parseDeleteCommand(String rawInput) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String input \u003d rawInput.replaceFirst(\"delete\", \"\").trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        // Parses the task index from the users input with format \"delete \u003cindex\u003e\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return new DeleteCommand(tasks, ui, taskIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * A method that returns a FindCommand object with attributes parsed from a user\u0027s raw input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @param rawInput string of the user\u0027s input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @return a FindCommand object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Command parseFindCommand(String rawInput) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String keyword \u003d rawInput.replaceFirst(\"find\", \"\").trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return new FindCommand(tasks, ui, keyword);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * A command parser that parses the user input and calls the respective command methods."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Simplifies the method redirection."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @param rawInput the raw user input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @return a command object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Command parseCommand(String rawInput) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String commandEntered \u003d rawInput.trim().split(\" \")[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        Command parsedCommand \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        switch (commandEntered) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        case \"todo\": case \"deadline\": case \"event\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            parsedCommand \u003d parseAddCommand(rawInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            parsedCommand \u003d new ListCommand(tasks, ui);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            parsedCommand \u003d setTaskDone(rawInput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            parsedCommand \u003d parseDeleteCommand(rawInput);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            parsedCommand \u003d parseFindCommand(rawInput);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            ui.printByeMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException(\"Command not found. Try refer to Duke\u0027s user guide in README.md\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return parsedCommand;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Parses the user\u0027s raw input and returns an AddCommand object according to the details."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @param rawUserInput the raw input from a user"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @return an AddCommand object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Command parseAddCommand(String rawUserInput) throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        // Checks the type of task in the prefix"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (rawUserInput.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            String description \u003d rawUserInput.replaceFirst(\"^todo\", \"\").trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            newTask \u003d new ToDo(description);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } else if (rawUserInput.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            if (!rawUserInput.contains(\"/by\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                throw new DukeException(\"duke.task.Deadline needs to have /by attribute\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            String by \u003d rawUserInput.substring(rawUserInput.indexOf(\"/by\") + \"/by\".length()).trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            String description \u003d rawUserInput.substring(0, rawUserInput.indexOf(\"/by\"))"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    .replaceFirst(\"^deadline\", \"\").trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            newTask \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } else if (rawUserInput.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            if (!rawUserInput.contains(\"/at\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                throw new DukeException(\"duke.task.Event needs to have /at attribute\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            String at \u003d rawUserInput.substring(rawUserInput.indexOf(\"/at\") + \"/at\".length()).trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            String description \u003d rawUserInput.substring(0, rawUserInput.indexOf(\"/at\"))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    .replaceFirst(\"^event\", \"\").trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            newTask \u003d new Event(description, at);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException(\"Command does not match any available task types. Try todo, event, or deadline.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return new AddCommand(tasks, ui, newTask);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 145
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public final Path FILE_PATH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Storage(String filePath, Ui ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        FILE_PATH \u003d Paths.get(\"duke_data/store.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Saves an encoded file from a tasklist. Rewrites the previously saved file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @param tasks a tasklist to be encoded"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void saveFile(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            FileWriter fw \u003d new FileWriter(FILE_PATH.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            String textOut \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                Task t \u003d tasks.get(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                textOut \u003d textOut.concat(t.encode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                textOut \u003d textOut.concat(\"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            fw.write(textOut);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException(\"IO exception\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Creates a file for DUKE\u0027s storage and if the path is non-existent, will create"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * the required directories. Compatible for all operating systems."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void createFile() throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        // Code referenced from"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        // https://stackoverflow.com/questions/2833853/create-whole-path-automatically-when-writing-to-a-new-file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        Files.createDirectories(FILE_PATH.getParent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        Files.createFile(FILE_PATH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        ui.printWithTemplate(\"New storage file created.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Reads the storage file. Decodes the encoded taskList stored inside the file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @return a TaskList object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public TaskList readFile() throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        TaskList parsedTasks \u003d new TaskList(100);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            File f \u003d new File(FILE_PATH.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                String[] inputArray \u003d line.split(\" [ | ] \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                Task t;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                  type | isDone | description | attribute"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                  The input array splits the encrypted input into separate String values"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                switch (inputArray[0]) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    t \u003d new ToDo(inputArray[2]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    t \u003d new Deadline(inputArray[2], inputArray[3]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    t \u003d new Event(inputArray[2], inputArray[3]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    throw new DukeException(\"Parse Error\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                if (inputArray[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    t.setDone();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                parsedTasks.add(t);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            return parsedTasks;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                createFile();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            } catch (IOException k) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                throw new DukeException(k.toString() + \"\\nProblem with reading the storage file.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 125
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public TaskList (int size) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public TaskList (TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        list \u003d (ArrayList\u003cTask\u003e) taskList.list.clone();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Task get (int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void add (Task t) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        list.add(t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Removes a task with the specified index from the tasklist. Throws an exception if"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * given task is out of bounds"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @param index the index of the task to be removed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @return the removed Task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Task remove(int index) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (index \u003c 1 || index \u003e list.size() - 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    \"duke.task.Task number \" + (list.size() + 1)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                            + \" doesn\u0027t exist.\\nPlease enter a valid task index.\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return list.remove(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Sets a task to done, throws an exception if given index is out of bounds."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @param index the index of the task to be set to done"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void setTaskDone(int index) throws DukeException{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (index \u003c 1 || index \u003e list.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    \"duke.task.Task number \" + (index + 1)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                            + \" doesn\u0027t exist.\\nPlease enter a valid task index.\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        list.get(index).setDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Returns a message intended to be shown to users. Lists all the tasks inside TaskList."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Uses enumeration from 1 to n-1, where n is the number of tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @return a string of the task list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            message \u003d \"Task List is empty.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            // concatenates each task into message"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                message \u003d message.concat((i + 1) + \". \" + list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            // removes last newline item"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            message \u003d message.substring(0, message.length() - 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Searches the descriptions of tasks if it contains the specified keyword."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Returns a tasklist of search results, ordered by increasing task index."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @param keyword a string keyword"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @return a tasklist containing search results."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public TaskList search(String keyword) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        TaskList searchResults \u003d new TaskList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            if (t.contains(keyword)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                searchResults.add(t);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return searchResults;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 116
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Referenced from addressbook-level2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Prompts for the command and reads the text entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Ignores empty, pure whitespace, and comment lines."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Echos the command back to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @return command (full line) entered by the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        out.print(\"Enter command: \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String fullInputLine \u003d in.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return fullInputLine;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Prints a string using a specified template."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Here the template is set as a horizontal line before and after the output."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @param text is the desired string to be printed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void printWithTemplate(String text) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String line \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        out.println(line);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        out.println(text);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        out.println(line);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Prints the welcome message to the user. Includes a DUKE logo."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String welcomeMessage \u003d \"Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                \"What can I do for you?\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        printWithTemplate(welcomeMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Prints a goodbye message to the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void printByeMessage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String byeMessage \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        printWithTemplate(byeMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 74
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    private Task newTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public AddCommand(TaskList taskList, Ui ui, Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        super(taskList, ui);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.newTask \u003d task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        ui.printWithTemplate(\"added: \" + newTask.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 24
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected TaskList tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Command(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        throw new DukeException(\"Unspecified Method\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void setData(TaskList tasks) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 26
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    private int selectedTaskIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public DeleteCommand(TaskList taskList, Ui ui, int selectedTaskIndex) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        super(taskList, ui);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.selectedTaskIndex \u003d selectedTaskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (selectedTaskIndex \u003c 0 || selectedTaskIndex \u003e tasks.size()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException(\"Index given is out of bounds\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            String removedTaskString \u003d tasks.remove(selectedTaskIndex).toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            ui.printWithTemplate(\"deleted: \" + removedTaskString);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 26
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public FindCommand(TaskList tasks, Ui ui, String keyword) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        super(tasks, ui);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String text \u003d \"Here are matching tasks that contains [\" + keyword + \"]\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        ui.printWithTemplate(text + tasks.search(keyword).getMessage());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 20
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public ListCommand(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        super(tasks, ui);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        ui.printWithTemplate(tasks.getMessage());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 16
    }
  },
  {
    "path": "src/main/java/duke/command/SetDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class SetDoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    private int selectedTaskIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public SetDoneCommand(TaskList taskList, Ui ui, int selectedTaskIndex) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        super(taskList, ui);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.selectedTaskIndex \u003d selectedTaskIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (selectedTaskIndex \u003c 0 || selectedTaskIndex \u003e tasks.size()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException(\"Index given is out of bounds\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            tasks.setTaskDone(selectedTaskIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            ui.printWithTemplate(\"set done: \" + tasks.get(selectedTaskIndex).toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 28
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (by.isBlank()) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException(\"Deadline needs to have a non-blank attribute /by.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return \"D - \"+ (isDone ? \"\\u2713\" : \"\\u2718\") + \" (by:\" + by + \")\"; //return tick or X symbols"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return this.getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String SPLITTER \u003d \" | \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String isDoneCode \u003d (this.isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return \"D\" + SPLITTER + isDoneCode + SPLITTER + this.description + SPLITTER + this.by;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 36
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Event(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (at.isBlank()) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException(\"Event needs to have a non-blank attribute /at.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return \"E - \"+ (isDone ? \"\\u2713\" : \"\\u2718\") + \" (at:\" + at + \")\"; //return tick or X symbols"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return this.getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String SPLITTER \u003d \" | \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String isDoneCode \u003d (this.isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return \"E\" + SPLITTER + isDoneCode + SPLITTER + this.description + SPLITTER + this.at;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 36
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Task(String description) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException(\"Description cannot be empty.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Returns a Cross or a Check symbol that shows the done status of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @return the status icon of the specified task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Sets the task as done"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Returns one line of String that is an encoded form of the specified task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Human readable. Works in compliment with readFile() in Duke.Storage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @return the task encoded as a UTF-8 string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String SPLITTER \u003d \" | \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String isDoneCode \u003d (this.isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return \"T\" + SPLITTER + isDoneCode + SPLITTER + this.description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Checks whether a keyword exists in the task\u0027s description."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Not case-sensitive."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @param keyword the keyword to be searched"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @return true if the task\u0027s description contains the specified keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public boolean contains(String keyword) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return description.toLowerCase().contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 56
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public ToDo(String description) throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return \"T - \"+ (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return this.getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String SPLITTER \u003d \" | \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String isDoneCode \u003d (this.isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return \"T\" + SPLITTER + isDoneCode + SPLITTER + this.description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 30
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "todo Answer CS2113 tutorial questions"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "event CS2113 tutorial /at Wed 11am"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "deadline Submit TP direction on teammates /by 4 Sept"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "todo Complete code review"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "event"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "event /at 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "deadline /by 2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "event Look at that /at"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "deadline Look at this /by"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "done 9"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 21
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": " @ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ../src/main/java/duke/*.java ../src/main/java/duke/task/*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "ivanderjmw": 2
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/task/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "ivanderjmw": 2
    }
  }
]
