[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "ivanderjmw": 1
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    private static int taskCount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    private static final Path FILE_PATH \u003d Paths.get(\"duke_data/store.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Prints a string using a specified template."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * Here the template is set as a horizontal line before and after the output."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * @param text is the desired string to be printed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public static void printWithTemplate(String text) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String line \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        System.out.println(text);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public static void printWelcomeMessage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String welcomeMessage \u003d \"Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                \"What can I do for you?\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        printWithTemplate(welcomeMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public static void printByeMessage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String byeMessage \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        printWithTemplate(byeMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public static void saveFile() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            FileWriter fw \u003d new FileWriter(FILE_PATH.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            String textOut \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                Task t \u003d tasks.get(i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                textOut \u003d textOut.concat(t.encrypt());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                textOut \u003d textOut.concat(\"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            fw.write(textOut);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException(\"IO exception\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public static void createFile() throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        // Code referenced from"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        // https://stackoverflow.com/questions/2833853/create-whole-path-automatically-when-writing-to-a-new-file"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        Files.createDirectories(FILE_PATH.getParent());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        Files.createFile(FILE_PATH);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        printWithTemplate(\"New storage file created.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public static void readFile() throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        ArrayList\u003cTask\u003e parsedTasks \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        int parsedTaskCount \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            File f \u003d new File(FILE_PATH.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                String[] inputArray \u003d line.split(\" [ | ] \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                Task t;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                  type | isDone | description | attribute"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                  The input array splits the encrypted input into separate String values"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                switch (inputArray[0]) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    t \u003d new ToDo(inputArray[2]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    t \u003d new Deadline(inputArray[2], inputArray[3]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    t \u003d new Event(inputArray[2], inputArray[3]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    throw new DukeException(\"Parse Error\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                if (inputArray[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    t.setDone();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                parsedTasks.add(parsedTaskCount, t);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                parsedTaskCount++;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            tasks \u003d parsedTasks;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            taskCount \u003d parsedTaskCount;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                createFile();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            } catch (IOException k) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                throw new DukeException(k.toString() + \"\\nProblem with reading the storage file.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public static void parseAndAddTask(String taskData) throws DukeException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        // Checks the type of task in the prefix"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (taskData.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            String description \u003d taskData.replaceFirst(\"^todo\", \"\").trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            tasks.add(new ToDo(description));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } else if (taskData.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            if (!taskData.contains(\"/by\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                throw new DukeException(\"duke.task.Deadline needs to have /by attribute\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            String by \u003d taskData.substring(taskData.indexOf(\"/by\") + \"/by\".length()).trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            String description \u003d taskData.substring(0, taskData.indexOf(\"/by\"))"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    .replaceFirst(\"^deadline\", \"\").trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            tasks.add(new Deadline(description, by));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } else if (taskData.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            if (!taskData.contains(\"/at\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                throw new DukeException(\"duke.task.Event needs to have /at attribute\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            String at \u003d taskData.substring(taskData.indexOf(\"/at\") + \"/at\".length()).trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            String description \u003d taskData.substring(0, taskData.indexOf(\"/at\"))"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    .replaceFirst(\"^event\", \"\").trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            tasks.add(new Event(description, at));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException(\"Command does not match any available task types. Try todo, event, or deadline.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        printWithTemplate(\"added: \" + tasks.get(taskCount).toString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        taskCount++;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        saveFile();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public static void listTasks() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String taskList \u003d \"\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (taskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            printWithTemplate(\"You have no tasks\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            taskList \u003d taskList.concat((i + 1) + \". \" +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    tasks.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        // removes last newline item"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        taskList \u003d taskList.substring(0, taskList.length() - 1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        printWithTemplate(taskList);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public static void setTaskDone(String rawInput) throws DukeException{"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String input \u003d rawInput.replaceFirst(\"done\", \"\").trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        // Parses the task index from the users input with format \"done \u003cindex\u003e\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(input) -  1;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (taskIndex \u003e taskCount - 1) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    \"duke.task.Task number \" + (taskIndex + 1)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                            + \" doesn\u0027t exist.\\nPlease enter a valid task index.\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            );"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        Task selectedTask \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        selectedTask.setDone();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        printWithTemplate(\"Great! I have marked this task as done:\\n\" + selectedTask.toString());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        saveFile();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public static void deleteTask(String rawInput) throws DukeException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String input \u003d rawInput.replaceFirst(\"delete\", \"\").trim();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        // Parses the task index from the users input with format \"delete \u003cindex\u003e\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (taskIndex \u003e taskCount - 1) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                    \"duke.task.Task number \" + (taskIndex + 1)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                            + \" doesn\u0027t exist.\\nPlease enter a valid task index.\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            );"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        // Remove the task with the corresponding index"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String selectedTaskText \u003d tasks.get(taskIndex).toString();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        taskCount--;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        printWithTemplate(\"The following task was deleted:\\n\" + selectedTaskText);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        saveFile();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public static void parseCommand(String rawInput) throws DukeException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String commandEntered \u003d rawInput.trim().split(\" \")[0];"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        switch (commandEntered) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        case \"todo\": case \"deadline\": case \"event\":"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            parseAndAddTask(rawInput);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            listTasks();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            setTaskDone(rawInput);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            deleteTask(rawInput);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            printByeMessage();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            printWithTemplate(\"Command not found.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        tasks \u003d new ArrayList\u003cTask\u003e(100);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            readFile();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            printWithTemplate(e.toString());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        printWelcomeMessage();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        input \u003d in.nextLine();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                // Checks cases for the command entered"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                parseCommand(input);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "                printWithTemplate(e.toString());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            // Gets the next command entered"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            input \u003d in.nextLine();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "ivanderjmw": 293
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 7
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (by.isBlank()) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException(\"Deadline needs to have a non-blank attribute /by.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return \"D - \"+ (isDone ? \"\\u2713\" : \"\\u2718\") + \" (by:\" + by + \")\"; //return tick or X symbols"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return this.getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String encrypt() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String SPLITTER \u003d \" | \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String isDoneCode \u003d (this.isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return \"D\" + SPLITTER + isDoneCode + SPLITTER + this.description + SPLITTER + this.by;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 36
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Event(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (at.isBlank()) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException(\"Event needs to have a non-blank attribute /at.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return \"E - \"+ (isDone ? \"\\u2713\" : \"\\u2718\") + \" (at:\" + at + \")\"; //return tick or X symbols"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return this.getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String encrypt() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String SPLITTER \u003d \" | \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String isDoneCode \u003d (this.isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return \"E\" + SPLITTER + isDoneCode + SPLITTER + this.description + SPLITTER + this.at;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 36
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public Task(String description) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "            throw new DukeException(\"Description cannot be empty.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String encrypt() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String SPLITTER \u003d \" | \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String isDoneCode \u003d (this.isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return \"T\" + SPLITTER + isDoneCode + SPLITTER + this.description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 31
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public ToDo(String description) throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return \"T - \"+ (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return this.getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    public String encrypt() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String SPLITTER \u003d \" | \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        String isDoneCode \u003d (this.isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "        return \"T\" + SPLITTER + isDoneCode + SPLITTER + this.description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 30
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "todo Answer CS2113 tutorial questions"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "event CS2113 tutorial /at Wed 11am"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "deadline Submit TP direction on teammates /by 4 Sept"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "todo Complete code review"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "event"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "event /at 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "deadline /by 2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "event Look at that /at"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "deadline Look at this /by"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "done 9"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ivanderjmw": 21
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": " @ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ../src/main/java/duke/*.java ../src/main/java/duke/task/*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "ivanderjmw": 2
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/task/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanderjmw"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "ivanderjmw": 2
    }
  }
]
