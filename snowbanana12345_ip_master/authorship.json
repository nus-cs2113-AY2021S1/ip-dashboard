[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import duke_command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import duke_command.dukeCommandManager;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import duke_exception.BadInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import duke_exception.EmptyInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import duke_exception.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import task.DeadLine;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * main duke chat bot main function"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    static Task[] storedUserTasks \u003d new Task[100];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    static int numberStoredTasks \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    static boolean dukeActive \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    static String[] currentUserInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    static Command currentUserCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        dukeGreet();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        dukeStart();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        dukePrintInstructions();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        while (dukeActive){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                dukeCollectUserInput(in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                switch (dukeProvideUserCommand()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                case COMMAND_EXIT:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    dukeStop();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                case COMMAND_LIST_STORED_TASKS:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    dukeReadStoredTasks();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                case COMMAND_SET_TASK_DONE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    dukeSetDone(dukeProvideUserInput());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                case COMMAND_ADD_TODO:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    dukeAddToDo(dukeProvideUserInput());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                case COMMAND_ADD_DEADLINE:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    dukeAddDeadLine(dukeProvideUserInput());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                case COMMAND_ADD_EVENT:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    dukeAddEvent(dukeProvideUserInput());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                case COMMAND_INSTRUCTIONS:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    dukePrintInstructions();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    dukeDefaultResponse();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            catch (InvalidCommandException | EmptyInputException | BadInputException e){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                dukeDefaultResponse();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        dukeGoodBye();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /* ##################################"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * ------- List of duke functions -----------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * dukeStart"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * dukeStop"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * dukeBeforeActionResponse"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * dukePrintInstructions"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * dukeAddTask"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * dukeGreet"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * dukeGoodBye"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * dukeEcho"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * dukeReadStoredTasks"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * dukeSetDone"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     ###################################"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static void dukeStart(){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        dukeActive \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static void dukeStop(){"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        dukeActive \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static void dukeDefaultResponse() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"To see the list of commands, type: \" + dukeCommandManager.getUserCommand(Command.COMMAND_INSTRUCTIONS));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static void dukeCollectUserInput(Scanner in)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws InvalidCommandException{"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        currentUserInput \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (currentUserInput.length \u003d\u003d 0){"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new InvalidCommandException(\"Please provide me with some command and not just silence\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (!(dukeCommandManager.isValidCommand(currentUserInput[0]))){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new InvalidCommandException(\"i don\u0027t understand what you\u0027re saying\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        currentUserCommand \u003d dukeCommandManager.getCommand((currentUserInput[0]));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static String[] dukeProvideUserInput(){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return currentUserInput;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static Command dukeProvideUserCommand(){"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return currentUserCommand;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static void dukePrintInstructions(){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.print(\"Here is NOT how you should ever use me\\n\" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                \"-------- List of commands -------\\n\" +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                dukeCommandManager.getUserCommand(Command.COMMAND_EXIT) + \": this will exit the programme\\n\" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                dukeCommandManager.getUserCommand(Command.COMMAND_LIST_STORED_TASKS)+ \": List out the set of tasks stored\\n\" +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                dukeCommandManager.getUserCommand(Command.COMMAND_SET_TASK_DONE) + \": set the task with a provided task number to done\\n\" +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                dukeCommandManager.getUserCommand(Command.COMMAND_ADD_TODO) + \" {Name of to do} : Adds a new undone todo to the list\\n\" +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                dukeCommandManager.getUserCommand(Command.COMMAND_ADD_DEADLINE) + \" {Name of dead line} /by {date or time of deadline} : Adds a new undone deadline to the list\\n\" +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                dukeCommandManager.getUserCommand(Command.COMMAND_ADD_EVENT) + \" {Name of event} /at {date or time of event} : Adds a new undone event to the list\\n\" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                \"GOT IT????\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        );"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static void dukeAddToDo(String[] userInputs)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws EmptyInputException{"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        ToDo new_task \u003d createToDo(userInputs);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        addTask(new_task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printAddTaskMessage(new_task);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static void dukeAddDeadLine(String[] userInputs)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws EmptyInputException, BadInputException{"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        DeadLine new_task \u003d createDeadLine(userInputs);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        addTask(new_task);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printAddTaskMessage(new_task);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static void dukeAddEvent(String[] userInputs)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws EmptyInputException, BadInputException{"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Event new_task \u003d createEvent(userInputs);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        addTask(new_task);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printAddTaskMessage(new_task);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * prints a greeting to the user"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static void dukeGreet(){"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printHorizontalLine(50);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke, not that anybody cares.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Make it quick, im busy!\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * prints a goodbye message to the user"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static void dukeGoodBye(){"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printHorizontalLine(50);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again never!\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Now get out of my sight!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printHorizontalLine(50);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * repeats whatever the user said"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param userInput the user message"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static void dukeEcho(String userInput){"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printHorizontalLine(50);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"added: \" + userInput);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printHorizontalLine(50);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Ask duke to read out the user\u0027s list of tasks it stored"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static void dukeReadStoredTasks(){"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printHorizontalLine(50);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (int i \u003d 0; i \u003c numberStoredTasks; i++){"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println((i+1) + \". \" + storedUserTasks[i]);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printHorizontalLine(50);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static void dukeSetDone(String[] userInputs)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws BadInputException{"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(userInputs[1]);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            setUserTaskToDone(storedUserTasks[taskNumber - 1]);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            printSetDoneMessage(storedUserTasks[taskNumber - 1]);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (NullPointerException e){"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new BadInputException(\"You tried to access a task that does not exist!\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (ArrayIndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new BadInputException(\"You either did not provide a number or an astronomical number\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (NumberFormatException e){"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new BadInputException(\"The task must be specificed by it\u0027s number!\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    ----------- Second level of abstraction ------------------"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static void printHorizontalLine(int length){"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (int i \u003d 0; i \u003c length; i++){"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.print(\"_\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static void printAddTaskMessage(Task new_task) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printHorizontalLine(50);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Got it. i\u0027ve added this task\\n  \" + new_task);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Now you have \" + numberStoredTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printHorizontalLine(50);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static void printSetDoneMessage(Task storedUserTask) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printHorizontalLine(50);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Does the completion of such mundane tasks elicit joy in you?\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Or does the emptiness that ensues it\u0027s completion fill you with regret?\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(storedUserTask);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printHorizontalLine(50);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static void addTask(Task new_task) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        storedUserTasks[numberStoredTasks] \u003d new_task;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        numberStoredTasks++;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static Event createEvent(String[] userInputs)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws EmptyInputException, BadInputException{"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (userInputs.length \u003c\u003d 1){"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new EmptyInputException(\"The description of a Event cannot be empty!\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        StringBuilder taskName \u003d new StringBuilder();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        StringBuilder at \u003d new StringBuilder();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        boolean isBuildingName \u003d true;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (int i \u003d 1; i \u003c userInputs.length; i++){"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (userInputs[i].equals(\"/at\")){"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                isBuildingName \u003d false;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (isBuildingName) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                taskName.append(userInputs[i]).append(\" \");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            else{"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                at.append(userInputs[i]).append(\" \");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (at.length() \u003d\u003d 0){"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new BadInputException(\"Event time cannot be empty!\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return new Event(taskName.toString(), at.toString());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static DeadLine createDeadLine(String[] userInputs)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws EmptyInputException, BadInputException{"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (userInputs.length \u003c\u003d 1){"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new EmptyInputException(\"The description of a DeadLine cannot be empty!\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        StringBuilder taskName \u003d new StringBuilder();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        StringBuilder by \u003d new StringBuilder();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        boolean isBuildingName \u003d true;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (int i \u003d 1; i \u003c userInputs.length; i++){"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (userInputs[i].equals(\"/by\")){"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                isBuildingName \u003d false;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (isBuildingName) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                taskName.append(userInputs[i]).append(\" \");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            else{"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                by.append(userInputs[i]).append(\" \");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (by.length() \u003d\u003d 0){"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new BadInputException(\"DeadLine due date cannot be empty!\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return new DeadLine(taskName.toString(), by.toString());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static ToDo createToDo(String[] userInputs)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws EmptyInputException{"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (userInputs.length \u003c\u003d 1){"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new EmptyInputException(\"The description of a ToDo cannot be empty!\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        StringBuilder taskName \u003d new StringBuilder();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (int i \u003d 1; i \u003c userInputs.length; i++){"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            taskName.append(userInputs[i]).append(\" \");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return new ToDo(taskName.toString());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static void setUserTaskToDone(Task storedUserTask) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        storedUserTask.setDone(true);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static boolean isValidTaskNumber(int taskNumber) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        boolean isValid \u003d !(taskNumber \u003e numberStoredTasks || taskNumber \u003c\u003d 0);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (!(isValid)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Are you stupid? There is no such Task\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 313,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke_command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package duke_command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_EXIT(\"bye\", \"exits the program\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_LIST_STORED_TASKS(\"list\", \"list all stored tasks\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_SET_TASK_DONE(\"done\", \"sets a task to done\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_ADD_TODO(\"todo\", \"adds a todo\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_ADD_DEADLINE(\"deadline\", \"adds a deadline\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_ADD_EVENT(\"event\", \"adds a user event\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_INSTRUCTIONS(\"instructions\", \"prints out the set of instructions for command\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_NULL(\"null\", \"does nothing\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String commandFunction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    Command(String userInput, String commandFunction){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.commandFunction \u003d commandFunction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getUserInput(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return this.userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return \"Duke Command : \" + this.userInput + \" : \" + this.commandFunction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 28
    }
  },
  {
    "path": "src/main/java/duke_command/dukeCommandManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package duke_command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public abstract class dukeCommandManager {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    static Hashtable\u003cString,Command\u003e commandTable \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(\"bye\",Command.COMMAND_EXIT);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(\"list\", Command.COMMAND_LIST_STORED_TASKS);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(\"deadline\",Command.COMMAND_ADD_DEADLINE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(\"todo\", Command.COMMAND_ADD_TODO);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(\"event\", Command.COMMAND_ADD_EVENT);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(\"done\",Command.COMMAND_SET_TASK_DONE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(\"instructions\", Command.COMMAND_INSTRUCTIONS);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    static Hashtable\u003cCommand,String\u003e userCommandTable \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        userCommandTable.put(Command.COMMAND_EXIT,\"bye\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        userCommandTable.put(Command.COMMAND_LIST_STORED_TASKS,\"list\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        userCommandTable.put(Command.COMMAND_ADD_DEADLINE,\"deadline\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        userCommandTable.put(Command.COMMAND_ADD_TODO,\"todo\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        userCommandTable.put(Command.COMMAND_ADD_EVENT,\"event\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        userCommandTable.put(Command.COMMAND_SET_TASK_DONE,\"done\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        userCommandTable.put(Command.COMMAND_INSTRUCTIONS,\"instructions\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static Command getCommand(String userCommand){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return commandTable.get(userCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static boolean isValidCommand(String userCommand){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return commandTable.containsKey(userCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static String getUserCommand(Command command){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return userCommandTable.get(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 38
    }
  },
  {
    "path": "src/main/java/duke_exception/BadInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package duke_exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class BadInputException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public BadInputException(String s) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 7
    }
  },
  {
    "path": "src/main/java/duke_exception/EmptyInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package duke_exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class EmptyInputException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public EmptyInputException(String s) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 7
    }
  },
  {
    "path": "src/main/java/duke_exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package duke_exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class InvalidCommandException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public InvalidCommandException(String s) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 7
    }
  },
  {
    "path": "src/main/java/task/DeadLine.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class DeadLine extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public DeadLine(String task, String deadline){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.deadline + \")\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 13
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String at;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Event(String task, String at){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + this.at + \")\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 13
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    protected Task(String task){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return this.done;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void setDone(boolean isdone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.done \u003d isdone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return ((this.done) ? \"[\" + \"\\u2713\"+\"]\" : \"[\" + \"\\u2717\" + \"]\") + \" \" + this.task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 22
    }
  },
  {
    "path": "src/main/java/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class ToDo extends Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public ToDo(String task){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 11
    }
  }
]
