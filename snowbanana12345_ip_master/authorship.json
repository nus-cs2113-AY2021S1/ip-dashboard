[
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "duke is a chat bot that keep tracks of your tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "It uses a command line interface. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "List out tasks : list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Add a to-do : todo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Add a event : event"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Add a deadline : deadline"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Mark a task as done : done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Delete a task : delete"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "save the current task list to file : save"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "load a saved file : load"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "list tasks on a certain take : list-by-late"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "find all task items containing a certain phrase : find"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Exit the programme : exit"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Feature 1 "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Listing out recorded tasks:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### `Keyword` - Describe action"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "1. [E][✗] book reading session (at: tomorrow afternoon)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "1. [D][✓] finish reading book (by: tomorrow afternoon)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### Feature 2 "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Adding a Todo:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "todo /name {Name of Todo}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "### `Keyword` - Describe action"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "name : name of the todo"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "todo /name read book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Added todo read book as a task! :)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### Feature 3 "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Adds a event to the task list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "event /name {Name of event} /time {time}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### `Keyword` - Describe action"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "name : name of the event"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "time : time of the event"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "event /name book reading session /time tomorrow afternoon"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "added event book reading session scheduled at time tomorrow afternoon! :)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### Feature 4 "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "add a new deadline to the task list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "deadline /name {Name of DeadLine} /time {time}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### `Keyword` - Describe action"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "name : name of the deadline"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "time : date due of the deadline"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "deadline /name finish reading macbeth /time NOW"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "added a deadline finish reading macbeth due NOW to the task list :)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### Feature 5 "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Marking a task as done:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "done /number {task number} "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### `Keyword` - Describe action"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "task number : the task number on the list that is to be set to done"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "done /number 3"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "deadline finish reading macbeth due NOW is marked as done! :)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### Feature 6 "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Deleting a task fom the task list:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "delete /number {task number} "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### `Keyword` - Describe action"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "task number : the task number on the list of the task that is to be deleted"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "delete /number 2"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Noted! i\u0027ve removed this task:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\t[D][✗] mydeadline (by: NOW)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\tNow you have 4 tasks on your list!"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### Feature 7"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "saving the task list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "## Usage "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "save /name {file name}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### `Keyword` - Describe action"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "file name : the file name to be saved to"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "save /name my first save"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Current task list is saved as :my first save!"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### Feature 8"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "load a saved task list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "load /name {file name}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### `Keyword` - Describe action"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "name : the file name containing the task list to be loaded"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "load /name my saved file"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### feature 9"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "listing the tasks by date"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "## Usage "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "list-by-date /time {date time}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### `Keyword` - Describe action"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "date time : a date time in the valid format YYYY-MM-DD-TTTT"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "The time input must be given, although any time will work."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "list-by-date /time 2020-10-09-1030"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "1. [E][✗] eat book(at: October 20 1990 1159 PM)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "2. [E][✗] dump carrots into the ocean(at: October 20 1990 1159 PM)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "## Feature 10"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "finding only the tasks that contains a certain name"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "find /name {task name}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "### `Keyword` - Describe action"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "task name : the task just has to contain the name to be displayed"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "find /name dump"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Printing only tasks that contains: dump"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "3. [E][✗] dump carrots into the ocean (at: October 20 1990 1159 PM)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "4. [E][✓] dump some tentacle porn(at: September 9 2020 1000 AM)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "5. [T][✗] dump some random stuff"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "## Feature 11"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "exit the programme"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "exit"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Excepted outcome:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "GoodBye, Hope to see you again"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 161,
      "-": 22
    }
  },
  {
    "path": "src/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_command.DukeCommandManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_command.DukeFieldManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * main duke chat bot main function"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        DukeManager duke \u003d new DukeManager(new DukeCommandManager(), new DukeFieldManager()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                , new DukeTaskManager(), new DukeMessageCreater(), new DukeTaskSaver(), new DukeInputParser());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        duke.start();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        while (duke.isActive()){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            duke.receiveAndExecuteUserInput(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 21,
      "-": 3
    }
  },
  {
    "path": "src/main/duke/DukeInputParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_command.DukeField;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_command.FieldManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.EmptyInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.InvalidFieldException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class DukeInputParser extends InputParser{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public DukeInputParser(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void parseUserInput(String userInput, Hashtable\u003cDukeField, String\u003e targetInputFields, FieldManager fieldManager)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws EmptyInputException, InvalidFieldException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            String[] userInputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            targetInputFields.put(DukeField.COMMAND, userInputs[0]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            DukeField currentField \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            StringBuilder currentInput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            for (String input : userInputs) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                Character c \u003d input.charAt(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                if (c.equals(\u0027/\u0027)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    if (!(currentField \u003d\u003d null)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                        targetInputFields.put(currentField, currentInput.substring(1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    currentField \u003d fieldManager.getField(input.substring(1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    currentInput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    currentInput.append(\" \").append(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (!(currentField \u003d\u003d null)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                targetInputFields.put(currentField, currentInput.substring(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new EmptyInputException(\"The input is empty!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (InvalidFieldException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 42
    }
  },
  {
    "path": "src/main/duke/DukeManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_command.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_command.CommandManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_command.FieldManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_command.DukeField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class DukeManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final TaskManager taskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final CommandManager commandManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final FieldManager fieldManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final MessageCreater messageCreater;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final TaskSaver taskSaver;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final InputParser inputParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private boolean active;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Hashtable\u003cDukeField, String\u003e inputFields;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public DukeManager(CommandManager commandManager, FieldManager fieldManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            , TaskManager taskManager, MessageCreater messageCreater, TaskSaver taskSaver, InputParser inputParser){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.taskManager \u003d taskManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.commandManager \u003d commandManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.fieldManager \u003d fieldManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.messageCreater \u003d messageCreater;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.taskSaver \u003d taskSaver;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.inputParser \u003d inputParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.active \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.inputFields \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void start(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        activate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        messageCreater.startLoopMessage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        messageCreater.greet();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.taskSaver.init();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        messageCreater.endLoopMessage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void stop(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        deactivate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        messageCreater.startLoopMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        messageCreater.sayBye();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        messageCreater.endLoopMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public boolean isActive(){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return this.active;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Main control function for duke"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This function also does all the error handling"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param userInput the user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void receiveAndExecuteUserInput(String userInput){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            recieveUserInput(userInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            executeUserInput();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            clearUserInput();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (EmptyInputException e){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            messageCreater.describeException(e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (InvalidCommandException e){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            messageCreater.describeException(e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (NumberInputException e){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            messageCreater.describeException(e);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (InvalidFieldException e){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            messageCreater.describeException(e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (EmptyFieldException e){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            messageCreater.describeException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (BadInputException e){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            messageCreater.describeException(e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void clearUserInput(){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        inputFields \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param userInput : the user input"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *  The user input is assumed to be in the format"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *  {user command} /{field 1} {input 1} /{field 2} {input 2} and so on"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void recieveUserInput(String userInput)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws EmptyInputException, InvalidFieldException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.inputParser.parseUserInput(userInput, inputFields, fieldManager);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Main place where the functions are done"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void executeUserInput()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws InvalidCommandException, NumberInputException, EmptyFieldException, BadInputException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            messageCreater.startLoopMessage();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            Command userCommand \u003d commandManager.getCommand(inputFields.get(DukeField.COMMAND));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            switch (userCommand) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            case COMMAND_EXIT:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                stop();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            case COMMAND_ADD_DEADLINE:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                taskManager.addDeadLine(inputFields.get(DukeField.NAME), inputFields.get(DukeField.TIME));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.addDeadLine(inputFields.get(DukeField.NAME), inputFields.get(DukeField.TIME));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.numberOfTasks(taskManager.getNumberOfTasks());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            case COMMAND_ADD_TODO:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                taskManager.addToDo(inputFields.get(DukeField.NAME));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.addTodo(inputFields.get(DukeField.NAME));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.numberOfTasks(taskManager.getNumberOfTasks());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            case COMMAND_ADD_EVENT:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                taskManager.addEvent(inputFields.get(DukeField.NAME), inputFields.get(DukeField.TIME));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.addEvent(inputFields.get(DukeField.NAME), inputFields.get(DukeField.TIME));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.numberOfTasks(taskManager.getNumberOfTasks());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            case COMMAND_LIST_STORED_TASKS:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.listTasks(taskManager.getTaskList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            case COMMAND_SET_TASK_DONE:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                taskManager.markAsDone(inputFields.get(DukeField.INDEX));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.markAsDone(inputFields.get(DukeField.INDEX));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            case COMMAND_DELETE:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.deleteTask(taskManager.getTaskDescription(inputFields.get(DukeField.INDEX)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                taskManager.deleteTask(inputFields.get(DukeField.INDEX));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.numberOfTasks(taskManager.getNumberOfTasks());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            case COMMAND_SAVE:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                taskSaver.save(taskManager.getTaskList(), inputFields.get(DukeField.NAME));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.save(inputFields.get(DukeField.NAME));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            case COMMAND_FIND:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.listTasksWithNameFilter(taskManager.getTaskList(), inputFields.get(DukeField.NAME));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            case COMMAND_LOAD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.load(inputFields.get(DukeField.NAME));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                taskManager.load(taskSaver.load(inputFields.get(DukeField.NAME)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            case COMMAND_LIST_BY_DATE:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.listTasks(taskManager.getFilteredTaskListByDateTime(inputFields.get(DukeField.TIME)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                messageCreater.defaultMessage();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            messageCreater.endLoopMessage();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (InvalidCommandException e){"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (NumberInputException e){"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (EmptyFieldException e){"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (BadInputException e){"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    // #### --------- Lower level implementations ----------- ####"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void activate() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.active \u003d true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void deactivate() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.active \u003d false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 177
    }
  },
  {
    "path": "src/main/duke/DukeMessageCreater.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.task.DeadLine;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class DukeMessageCreater extends MessageCreater{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    static int horizontalLineLength \u003d 50;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public DukeMessageCreater(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void greet(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printGreet();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void sayBye(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printGoodbye();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void addTodo(String name){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printAddTodo(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void addEvent(String name, String time){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printAddEvent(name, time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void addDeadLine(String name, String time){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printAddDeadLine(name, time);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void listTasks(List\u003cTask\u003e taskList){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printTaskList(taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void listTasksWithNameFilter(List\u003cTask\u003e taskList, String name){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printTaskWithNameFilterMessage(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printTaskListWithNameFilter(taskList, name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void markAsDone(String index){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printDoneMessage(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void defaultMessage(){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printDefaultMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void describeException(Exception e){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printException(e);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void startLoopMessage(){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printHorizontalLine(horizontalLineLength);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void endLoopMessage(){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printHorizontalLine(horizontalLineLength);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void save(String fileName){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printSave(fileName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void load(String fileName){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printLoad(fileName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void deleteTask(String taskDescription) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printDeleteTask(taskDescription);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printDeleteTask(String taskDescription){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Noted! i\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"\\t\" + taskDescription);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void numberOfTasks(Integer numberOfTasks){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        printNumberOfTasks(numberOfTasks);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    // #### --------- Lower level implementations ----------- ####"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printTaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++){"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println((i + 1) + \". \" + taskList.get(i));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printTaskListWithNameFilter(List\u003cTask\u003e taskList, String name) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (task.getName().contains(name)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                System.out.println((i + 1) + \". \" + task);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printException(Exception e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Ooops!!! Looks like we have a problem: \" + e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printAddEvent(String name, String time){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Added a event to the task list!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"\\t\" + (new Event(name,time).toString()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printAddDeadLine(String name, String time){"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"\\tAdded a deadline to the task list!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"\\t\" + (new DeadLine(name,time).toString()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printAddTodo(String name) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Added a todo to the task list!\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"\\t\" + (new ToDo(name).toString()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printGoodbye() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"GoodBye, Hope to see you again\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printGreet() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Hello, i am duke!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printDoneMessage(String index) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Task \" + index + \" is now marked as done!\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printDefaultMessage() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Please give me a instruction! :)\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printHorizontalLine(int length){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (int i \u003d 0; i \u003c length; i++){"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.print(\"_\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printNumberOfTasks(Integer numberOfTasks){"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"\\tNow you have \" + numberOfTasks + \" tasks on your list!\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printTaskWithNameFilterMessage(String name) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Printing only tasks that contains: \" + name);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printSave(String fileName) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Current task list is saved as :\" + fileName + \"!\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void printLoad(String fileName) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Loading task list from file :\" + fileName);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 161
    }
  },
  {
    "path": "src/main/duke/DukeTaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.BadInputException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.EmptyFieldException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.NumberInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.task.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class DukeTaskManager extends TaskManager{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final Integer INDEX_OFF_SET \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public DukeTaskManager(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void addToDo(String name)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        throws EmptyFieldException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (name \u003d\u003d null || name.equals(\"\")){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new EmptyFieldException(\"please input a name!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        taskList.add(new ToDo(name));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void addEvent(String name, String time)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws EmptyFieldException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (name \u003d\u003d null || name.equals(\"\")){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new EmptyFieldException(\"please input a name!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (time \u003d\u003d null || time.equals(\"\")){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new EmptyFieldException(\"please input a time!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        taskList.add(new Event(name, time));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void addDeadLine(String name, String due)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws EmptyFieldException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (name \u003d\u003d null || name.equals(\"\")){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new EmptyFieldException(\"please input a name!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (due \u003d\u003d null || due.equals(\"\")){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new EmptyFieldException(\"please input a time!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        taskList.add(new DeadLine(name, due));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void markAsDone(String taskNumber)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws NumberInputException, EmptyFieldException, BadInputException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (taskNumber \u003d\u003d null){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                throw new EmptyFieldException(\"a number is not provided!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (Integer.parseInt(taskNumber) \u003c 0){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                throw new BadInputException(\"Please input a valid task number\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            taskList.get(Integer.parseInt(taskNumber) - INDEX_OFF_SET).setDone(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (NumberFormatException e){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new NumberInputException(\"The task number provided is not a number! : \" + taskNumber);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new BadInputException(\"The task you are looking for does not exist!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void deleteTask(String taskNumber){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        taskList.remove(Integer.parseInt(taskNumber) - INDEX_OFF_SET);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Integer getNumberOfTasks(){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getTaskDescription(String taskNumber){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return taskList.get(Integer.parseInt(taskNumber) - INDEX_OFF_SET).toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public List\u003cTask\u003e getTaskList(){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void load (List\u003cTask\u003e newTaskList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.taskList.clear();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.taskList.addAll(newTaskList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public List\u003cTask\u003e getFilteredTaskListByDateTime(String dateTime) throws BadInputException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        List\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Dateable dateable;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (Task task : taskList){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (task instanceof Dateable){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                dateable \u003d (Dateable) task;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                if (dateable.isOnDate(dateTime)){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    newTaskList.add(task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return newTaskList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 101
    }
  },
  {
    "path": "src/main/duke/DukeTaskSaver.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.BadInputException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.task.DeadLine;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class DukeTaskSaver extends TaskSaver{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String TODO_SYMBOL \u003d \"T\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String DEADLINE_SYMBOL \u003d \"D\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String EVENT_SYMBOL \u003d \"E\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String DONE_SYMBOL \u003d \"D\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String NOT_DONE_SYMBOL \u003d \"N\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String SEPERATOR_SYMBOL \u003d \"\u0026\u0026%%\u0026\u0026\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static String root_directory \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static String duke_folder_name \u003d  root_directory + File.separator + \"duke\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static String default_file_path \u003d root_directory + File.separator + \"duke\" + File.separator + \"saves\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public DukeTaskSaver(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.filePath \u003d default_file_path;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void init(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        File dir1 \u003d new File(duke_folder_name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        dir1.mkdir();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        File dir \u003d new File(default_file_path);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        dir.mkdir();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void save(List\u003cTask\u003e tasks, String fileName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            File file \u003d new File(default_file_path + File.separator + fileName + \".txt\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            boolean success \u003d file.createNewFile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            FileWriter writer \u003d new FileWriter( default_file_path + File.separator + fileName + \".txt\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            ToDo todo;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            Event event;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            DeadLine deadline;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                writer.write((i+1) + SEPERATOR_SYMBOL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                if (task instanceof ToDo){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    todo \u003d (ToDo) task;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write(TODO_SYMBOL + SEPERATOR_SYMBOL);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write((todo.isDone() ? DONE_SYMBOL : NOT_DONE_SYMBOL) + SEPERATOR_SYMBOL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write(todo.getName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write(\"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                if (task instanceof Event){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    event \u003d (Event) task;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write(EVENT_SYMBOL + SEPERATOR_SYMBOL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write((event.isDone() ? DONE_SYMBOL : NOT_DONE_SYMBOL) + SEPERATOR_SYMBOL);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write(event.getName() + SEPERATOR_SYMBOL);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write(event.getAt());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write(\"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                if (task instanceof DeadLine) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    deadline \u003d (DeadLine) task;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write(DEADLINE_SYMBOL + SEPERATOR_SYMBOL);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write((deadline.isDone() ? DONE_SYMBOL : NOT_DONE_SYMBOL) + SEPERATOR_SYMBOL);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write(deadline.getName() + SEPERATOR_SYMBOL);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write(deadline.getBy());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write(\"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (IOException e){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public List\u003cTask\u003e load(String fileName) throws BadInputException{"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            File file \u003d new File(default_file_path + File.separator + fileName + \".txt\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            Scanner reader \u003d new Scanner(file);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            String[] splitedLine;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            ToDo todo;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            Event event;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            DeadLine deadline;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            while (reader.hasNext()){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                line \u003d reader.nextLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                splitedLine \u003d line.split(SEPERATOR_SYMBOL);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                if (splitedLine[1].equals(TODO_SYMBOL)){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    todo \u003d new ToDo(splitedLine[3]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    if (splitedLine[2].equals(DONE_SYMBOL)){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                        todo.setDone(true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    taskList.add(todo);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                if (splitedLine[1].equals(EVENT_SYMBOL)){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    event \u003d new Event(splitedLine[3],splitedLine[4]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    if (splitedLine[2].equals(DONE_SYMBOL)){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                        event.setDone(true);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    taskList.add(event);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                if (splitedLine[1].equals(DEADLINE_SYMBOL)){"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    deadline \u003d new DeadLine(splitedLine[3],splitedLine[4]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    if (splitedLine[2].equals(DONE_SYMBOL)){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                        deadline.setDone(true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    taskList.add(deadline);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"File :\" + fileName + \" is loaded successfully!\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (FileNotFoundException e){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new BadInputException(fileName + \" does not exist! Please enter a valid file name!\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 126
    }
  },
  {
    "path": "src/main/duke/InputParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_command.DukeField;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_command.FieldManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.EmptyInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.InvalidFieldException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "abstract class InputParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract public void parseUserInput (String userInput, Hashtable\u003cDukeField, String\u003e targetInputFields, FieldManager fieldManager)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throws EmptyInputException, InvalidFieldException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 14
    }
  },
  {
    "path": "src/main/duke/MessageCreater.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "abstract class MessageCreater {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract public void greet();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract public void sayBye();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract public void addTodo(String name);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract public void addEvent(String name, String time);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract public void addDeadLine(String name, String time);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract public void listTasks(List\u003cTask\u003e taskList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract public void markAsDone(String index);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract public void defaultMessage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract public void describeException(Exception e);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract void numberOfTasks(Integer numberOfTasks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract void startLoopMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract void endLoopMessage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract void deleteTask(String taskDescription);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract void listTasksWithNameFilter(List\u003cTask\u003e taskList, String s);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract void save(String s);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract void load(String s);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 28
    }
  },
  {
    "path": "src/main/duke/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.BadInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.EmptyFieldException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.NumberInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "abstract class TaskManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract void addToDo(String name) throws EmptyFieldException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract public void addEvent(String name, String time) throws EmptyFieldException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract public void addDeadLine(String name, String due) throws EmptyFieldException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract public void markAsDone(String taskNumber) throws NumberInputException, EmptyFieldException, BadInputException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract List\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract Integer getNumberOfTasks();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract void deleteTask(String s);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract String getTaskDescription(String s);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract void load(List\u003cTask\u003e taskList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract List\u003cTask\u003e getFilteredTaskListByDateTime(String s) throws BadInputException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 21
    }
  },
  {
    "path": "src/main/duke/TaskSaver.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.BadInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "abstract class TaskSaver {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract void save(List\u003cTask\u003e taskList, String s);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract void init();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract List\u003cTask\u003e load(String s) throws BadInputException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 12
    }
  },
  {
    "path": "src/main/duke_command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke_command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_EXIT,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_LIST_STORED_TASKS,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_SET_TASK_DONE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_ADD_TODO,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_ADD_DEADLINE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_ADD_EVENT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_INSTRUCTIONS,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_DELETE,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_SAVE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_LOAD,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_LIST_BY_DATE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND_FIND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 16
    }
  },
  {
    "path": "src/main/duke_command/CommandManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke_command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public abstract class CommandManager {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Takes in the string form of the user command and coverts it to the enum class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param userCommand the string input command from the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return the enum class COMMAND"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract Command getCommand(String userCommand) throws InvalidCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Checks if the userCommand is one of the valid commands set by the CommandManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param userCommand the string input command from user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return true if the string from user command is in the list of commands in the CommandManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract boolean isValidCommand(String userCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 19
    }
  },
  {
    "path": "src/main/duke_command/DukeCommandManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke_command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.InvalidCommandException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "/***"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * This purpose of this class is to avoid magic strings"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class DukeCommandManager extends CommandManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String COMMAND_EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String COMMAND_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String COMMAND_INSTRUCTIONS \u003d \"help\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String COMMAND_SAVE \u003d \"save\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String COMMAND_LOAD \u003d \"load\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String COMMAND_LIST_BY_DATE \u003d \"list-by-date\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String ERROR_NO_SUCH_COMMAND \u003d \"There is no such command!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final Hashtable\u003cString, Command\u003e commandTable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public DukeCommandManager(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.commandTable \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(COMMAND_EXIT , Command.COMMAND_EXIT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(COMMAND_LIST, Command.COMMAND_LIST_STORED_TASKS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(COMMAND_DEADLINE, Command.COMMAND_ADD_DEADLINE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(COMMAND_TODO, Command.COMMAND_ADD_TODO);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(COMMAND_EVENT, Command.COMMAND_ADD_EVENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(COMMAND_DONE, Command.COMMAND_SET_TASK_DONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(COMMAND_INSTRUCTIONS, Command.COMMAND_INSTRUCTIONS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(COMMAND_DELETE, Command.COMMAND_DELETE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(COMMAND_SAVE, Command.COMMAND_SAVE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(COMMAND_FIND, Command.COMMAND_FIND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(COMMAND_LOAD, Command.COMMAND_LOAD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        commandTable.put(COMMAND_LIST_BY_DATE, Command.COMMAND_LIST_BY_DATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Command getCommand(String userCommand)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        throws InvalidCommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Command command \u003d commandTable.get(userCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new InvalidCommandException(ERROR_NO_SUCH_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public boolean isValidCommand(String userCommand){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return commandTable.containsKey(userCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 58
    }
  },
  {
    "path": "src/main/duke_command/DukeField.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke_command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public enum DukeField {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    COMMAND,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    NAME,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    TIME,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    INDEX"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 8
    }
  },
  {
    "path": "src/main/duke_command/DukeFieldManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke_command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.InvalidFieldException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class DukeFieldManager extends FieldManager{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String FIELD_COMMAND \u003d \"command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String FIELD_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String FIELD_TIME \u003d \"time\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String FIELD_INDEX \u003d \"number\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String ERROR_NO_SUCH_FIELD \u003d \"There is no such input field!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final Hashtable\u003cString, DukeField\u003e fieldTable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final Hashtable\u003cDukeField,String\u003e reverseFieldTable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public DukeFieldManager(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.fieldTable \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        fieldTable.put(FIELD_COMMAND, DukeField.COMMAND);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        fieldTable.put(FIELD_NAME, DukeField.NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        fieldTable.put(FIELD_TIME, DukeField.TIME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        fieldTable.put(FIELD_INDEX, DukeField.INDEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.reverseFieldTable \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        reverseFieldTable.put(DukeField.COMMAND, FIELD_COMMAND);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        reverseFieldTable.put(DukeField.NAME, FIELD_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        reverseFieldTable.put(DukeField.TIME, FIELD_TIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        reverseFieldTable.put(DukeField.INDEX, FIELD_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public DukeField getField(String field)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        throws InvalidFieldException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        DukeField dukefield\u003d fieldTable.get(field);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (dukefield \u003d\u003d null){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new InvalidFieldException(ERROR_NO_SUCH_FIELD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return fieldTable.get(field);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public boolean isValidCommand(String field){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return fieldTable.containsKey(field);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getUserField(DukeField field){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return reverseFieldTable.get(field);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 49
    }
  },
  {
    "path": "src/main/duke_command/FieldManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke_command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.InvalidFieldException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public abstract class FieldManager {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract DukeField getField(String field) throws InvalidFieldException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract boolean isValidCommand(String field);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public abstract String getUserField(DukeField field);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 11
    }
  },
  {
    "path": "src/main/duke_exception/BadInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke_exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class BadInputException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public BadInputException(String s) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 7
    }
  },
  {
    "path": "src/main/duke_exception/EmptyFieldException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke_exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class EmptyFieldException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public EmptyFieldException(String message){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 7
    }
  },
  {
    "path": "src/main/duke_exception/EmptyInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke_exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class EmptyInputException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public EmptyInputException(String s) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 7
    }
  },
  {
    "path": "src/main/duke_exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke_exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class InvalidCommandException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public InvalidCommandException(String s) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 7
    }
  },
  {
    "path": "src/main/duke_exception/InvalidFieldException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke_exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class InvalidFieldException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public InvalidFieldException(String message){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 7
    }
  },
  {
    "path": "src/main/duke_exception/NumberInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.duke_exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class NumberInputException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public NumberInputException(String s){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 7
    }
  },
  {
    "path": "src/main/task/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static Hashtable\u003cInteger,String\u003e monthTable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        monthTable \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        monthTable.put(1, \"January\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        monthTable.put(2, \"February\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        monthTable.put(3, \"March\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        monthTable.put(4, \"April\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        monthTable.put(5, \"May\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        monthTable.put(6, \"June\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        monthTable.put(7, \"July\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        monthTable.put(8, \"August\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        monthTable.put(9, \"September\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        monthTable.put(10, \"October\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        monthTable.put(11, \"November\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        monthTable.put(12, \"December\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int day;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int month;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    DateTime(int day, int year, int month, int time){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static boolean isSameDate(DateTime dt1, DateTime dt2){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return (dt1.day \u003d\u003d dt2.day) \u0026\u0026 (dt1.month \u003d\u003d dt2.month)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                \u0026\u0026 (dt1.year \u003d\u003d dt2.year);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private String giveTimeString(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Integer clockTime \u003d this.time % 1200;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String timeString \u003d clockTime.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (clockTime \u003c 1000){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            timeString \u003d \"0\" + timeString;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        else if (clockTime \u003c 100){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            timeString \u003d \"00\" + timeString;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return timeString + \" \" + ((this.time \u003c 1200) ? \"AM\" : \"PM\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return monthTable.get(this.month) + \" \" + this.day + \" \" + this.year + \" \" + giveTimeString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 55
    }
  },
  {
    "path": "src/main/task/DateTimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.BadInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "abstract class DateTimeParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final char SEPERATOR \u003d \u0027-\u0027;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static DateTime parseDateTime(String dateTime) throws BadInputException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (!(isValidDateTime(dateTime))){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new BadInputException(\"The format of the date time is wrong!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            String[] splitDateTime \u003d dateTime.split(String.valueOf(SEPERATOR));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            return new DateTime(Integer.parseInt(splitDateTime[2]), Integer.parseInt(splitDateTime[0]),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    Integer.parseInt(splitDateTime[1]), Integer.parseInt(splitDateTime[3]));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (NumberFormatException e){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new BadInputException(\"Please input Integers for date time!\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * A valid date time string must be of the format YYYY-MM-DD-TTTT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param dateTime"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static boolean isValidDateTime(String dateTime){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return dateTime.length() \u003d\u003d 15 \u0026\u0026 dateTime.charAt(4) \u003d\u003d SEPERATOR"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                \u0026\u0026 dateTime.charAt(7) \u003d\u003d SEPERATOR \u0026\u0026 dateTime.charAt(10) \u003d\u003d SEPERATOR;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 30
    }
  },
  {
    "path": "src/main/task/Dateable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.BadInputException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public interface Dateable {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    boolean isOnDate(String dateTime) throws BadInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 6
    }
  },
  {
    "path": "src/main/task/DeadLine.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.BadInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class DeadLine extends Task implements Dateable{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private boolean hasValidDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public DeadLine(String task, String deadline){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.hasValidDateTime \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.dateTime \u003d new DateTime(0,0,0,0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            this.dateTime \u003d DateTimeParser.parseDateTime(deadline);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            this.hasValidDateTime \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (BadInputException e){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getBy(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public boolean isOnDate(String dateTime) throws BadInputException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (!(hasValidDateTime)){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            DateTime date \u003d DateTimeParser.parseDateTime(dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            return DateTime.isSameDate(this.dateTime, date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (BadInputException e){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new BadInputException(\"The date time entered has a problem:\" + e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (hasValidDateTime){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            return \"[E]\" + super.toString() + \"(at: \" + this.dateTime + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            return \"[E]\" + super.toString() + \"(at: \" + this.deadline + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 50
    }
  },
  {
    "path": "src/main/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import main.duke_exception.BadInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Event extends Task implements Dateable{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private boolean hasValidDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Event(String task, String at){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.hasValidDateTime \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.dateTime \u003d new DateTime(0,0,0,0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            this.dateTime \u003d DateTimeParser.parseDateTime(at);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            this.hasValidDateTime \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (BadInputException e){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getAt(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public boolean isOnDate(String dateTime) throws BadInputException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (!(hasValidDateTime)){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            DateTime date \u003d DateTimeParser.parseDateTime(dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            return DateTime.isSameDate(this.dateTime, date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        catch (BadInputException e){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new BadInputException(\"The date time entered has a problem:\" + e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        if (hasValidDateTime){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + this.dateTime + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + this.at + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 50
    }
  },
  {
    "path": "src/main/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String taskName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    protected Task(String task){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.taskName \u003d task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return this.done;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void setDone(boolean isdone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.done \u003d isdone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getName(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return ((this.done) ? \"[\" + \"\\u2713\"+\"]\" : \"[\" + \"\\u2717\" + \"]\") + \" \" + this.taskName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 26
    }
  },
  {
    "path": "src/main/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package main.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class ToDo extends Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public ToDo(String task){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 11
    }
  }
]
