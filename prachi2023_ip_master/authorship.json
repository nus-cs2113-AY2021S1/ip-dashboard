[
  {
    "path": "data/tasklist.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "T:true:Fix"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "T:false:mroe"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "D:true:ip:tonight"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "E:true:meeting:midnight"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "T:false:bloop"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "E:false:movie:8pm"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 6
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isExit \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static String path \u003d \"tasklist.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public Duke (String filepath ){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        // Set up and retrieve data from file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            storage.load(tasks, parser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }catch (IOException e){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showFileCreatingError(path);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }catch (DukeException e){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showErrorMessage(e.getErrorMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void run(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                Command c \u003d Parser.parseInput(fullCommand, ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                c.execute(ui, tasks, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showErrorMessage(e.getErrorMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ui.printExitMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        new Duke(path).run();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "prachi2023": 37,
      "-": 17
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Deals with understanding the user input"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Ensures that the user has entered the commands in the right format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Returns a Command that can then be executed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * The String input is minimally broken down into the first word entered which should be the command name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * An error is thrown when the user has not entered valid formats for the inputs for the various commands"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param input the input that the user has entered"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param ui required to print error messages when input is entered in the wrong format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @return Command class that is required to execute the user\u0027s input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Command parseInput(String input, Ui ui) throws DukeException{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        // Get the command word entered"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] userInput \u003d input.split(\" \",2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d userInput[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] detailsSplit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        int taskNum;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        LocalTime time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        // Find the right command class to return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                return new ListCommand(\u0027N\u0027);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindCommand(userInput[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                taskNum \u003d getInteger(userInput[1], ui)- 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DoneCommand(taskNum);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                taskNum \u003d getInteger(userInput[1], ui) -1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommand(taskNum);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            case \"today\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                return new ListCommand(\u0027D\u0027);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                int month;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    month \u003d getInteger(userInput[1], ui);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    month \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                return new ListCommand(\u0027M\u0027, month);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            case \"year\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                int year;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    year \u003d getInteger(userInput[1], ui);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    year \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                return new ListCommand(\u0027Y\u0027, year);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                String description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                try{"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    description \u003d userInput[1];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch(ArrayIndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"invalid number of arguments enetered\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                if (userInput[1].equals(\"\")){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    throw new DukeException(\"No description of added\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommand(\u0027T\u0027, description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                try{"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                    detailsSplit \u003d parseDeadline(userInput[1]); //splits the input into the description and the dateTime"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                    String[] dateTimeDetails \u003d detailsSplit[1].trim().split(\" \", 2); //splits the dateTime string into date and Time"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                    date \u003d parseDate(dateTimeDetails[0].trim());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    time \u003d parseTime(dateTimeDetails[1], ui);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"invalid number of arguments entered\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommand(\u0027D\u0027, detailsSplit[0], date, time);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                    detailsSplit \u003d parseEvent(userInput[1]);//splits the input into the description and the dateTime"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                    String[] dateTimeDetails \u003d detailsSplit[1].trim().split(\" \", 2); //splits the dateTime string into date and Time"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                    date \u003d parseDate(dateTimeDetails[0].trim());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    time \u003d parseTime(dateTimeDetails[1], ui);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"invalid number of arguments entered\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommand(\u0027E\u0027, detailsSplit[0],date, time);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            // If it is none of the above commands, Tell the user to enter a valid command"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException (\"Invalid command Entered\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "   protected static LocalDate parseDate(String date) throws DukeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        LocalDate d;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            d \u003d LocalDate.parse(date.trim());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new DukeException(\"Please enter the date in the format yyyy-mm-dd\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return d;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    protected static LocalTime parseTime(String time, Ui ui)  {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        LocalTime t;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            t \u003d LocalTime.parse(time.trim());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            t \u003d LocalTime.parse(\"23:59\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            ui.showErrorMessage(\"Time format entered is invalid. Please enter HH:MM. 23:59 has been added as a default time.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String[] parseDeadline (String userInput) throws DukeException{"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String[] taskDetails \u003d userInput.split(\"by\", 2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!userInput.contains(\"by\")){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new DukeException(\"No \u0027by\u0027 for deadline\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (taskDetails[0].equals(\"\")){"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new DukeException(\"No description of task added\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String[] parseEvent (String userInput) throws DukeException{"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String[] taskDetails \u003d userInput.split(\"at\", 2);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!userInput.contains(\"at\")){"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new DukeException(\"No \u0027at\u0027 for event\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (taskDetails[0].equals(\"\")){"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new DukeException(\"No description of task added\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    // Used for the determining which task to delete or mark as done"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static Integer getInteger (String indexInput, Ui ui) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Integer taskNum \u003d -1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            taskNum \u003d Integer.parseInt(indexInput.trim());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showErrorMessage(\"Number Format Exception\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskNum;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 92,
      "-": 64
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Represents the file that stores the data. A \u003ccode\u003eStorage\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * a filepath where the file is stored"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * a scanner \u003ccode\u003es \u003c/code\u003e to read the file data"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * and a file \u003ccode\u003ef \u003c/code\u003e which stores the data"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    File f;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Scanner s;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage (String filePath) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        f \u003d new File(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String fullFilePath \u003d f.getAbsolutePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        f \u003d new File(fullFilePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!f.exists()){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads the tasks from the file, if there is a file that already existed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks Tasklist where the tasks are stored"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param parser Parser to parse the information into the relevant Object types"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void load (TaskList tasks, Parser parser) throws DukeException{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        while (s.hasNext()){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            String taskInput \u003d s.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            String[] task \u003d taskInput.split(\":\", 5);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            LocalDate date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            LocalTime time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (task[0]) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    tasks.addTodo(task[2]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    date \u003d parser.parseDate(task[3]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    time \u003d LocalTime.parse(task[4]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    tasks.addDeadline(task[2], date, time);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    date \u003d parser.parseDate(task[3]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    time \u003d LocalTime.parse(task[4]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    tasks.addEvent(task[2], date, time);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"File format error\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task[1].equals(\"true\")){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                tasks.markTaskDone(tasks.size()-1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Writes to the file to add a line about the new Task that has been added to the tasklist"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param index index of the task in the tasklist to be added"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param tasks Tasklist of tasks"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void addTaskToFile (int index, TaskList tasks) throws IOException, DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileWriter fwAppend \u003d new FileWriter(this.filePath, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskToWrite \u003d tasks.get(index).saveFormat();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        fwAppend.write(taskToWrite + System.lineSeparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        fwAppend.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Rewrites every task in the tasklist to the file"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param tasks Tasklist of tasks"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void editOrDeleteTaskFile (TaskList tasks) throws IOException, DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Delete all the data in the original file"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        fw.write(\"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Add back all the data excluding deleted data, including the edited data"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            addTaskToFile(i, tasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 32,
      "-": 65
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Represents the array of tasks that are stored"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Deals with the addition, deletion and modification of the tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public TaskList(){ }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static void addTodo(String task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(new ToDo(task));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static void addDeadline (String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        tasks.add(new Deadline(description, date, time));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static void addEvent (String description,  LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        tasks.add(new Event(description, date, time));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Changes the status of the task from not done to done"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Index needs to be within 0 and the size of the tasklist"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param index index of task in the tasklist to be marked as completed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @exception DukeException throws an exception for the index out of range"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static void markTaskDone (Integer index) throws DukeException{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.size()){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new DukeException(\"Invalid task number\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        task.markTaskDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Deletes a task from the tasklist"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Index needs to be within 0 and the size of the tasklist"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Task deleted is the task with the index entered in the tasklist"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param index index of the task in the tasklist"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteTask (int index){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Returns a boolean."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Checks if the task description has the keywords inputted by the user"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Index needs to be within 0 and the TaskList size"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param index index of the task in the tasklist"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param keyword string which is the keyword/s"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @return The status of the task containing the keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @exception DukeException throws an exception for the index out of range"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static Boolean checkTask(int index, String keyword) throws DukeException{"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.size()){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new DukeException(\"Invalid task number\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (task.getDescription().contains(keyword)){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Returns a Task object in the tasklist with the corresponding index."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * index needs to be within 0 and the size of the tasklist"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param index of the task to be extracted from the tasklist"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @return task"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @exception DukeException throws an exception for the index out of range"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static Task get(Integer index) throws DukeException{"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.size()){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new DukeException(\"Invalid task number\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @return Number of tasks in the tasklist"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Integer size(){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 62,
      "-": 38
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * The class deals with all interactions with the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Input from the user is gotten using this class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * All the outputs to the command line are sent from this class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    //input"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Returns a String that the user enters into the command line"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Method returns once the user has clicked \"enter\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @return one line of the users input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner (System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    //welcome and exit message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printWelcomeMessage (){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println (\"Hello! I\u0027m DUKE\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println (\"What can I do for you?\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printExitMessage (){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println (\"Bye\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println (\"See you again!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void printLine(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"----------------------------------------------------------\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    //Error messages"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorMessage (String errorMessage){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println (errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showFileCreatingError (String fileName){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println (\"Unable to create a file name \"+ fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showFileEditingError (){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println (\"Unable to edit file\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    //Print task and list info"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Prints out the Task information along with the index of the task in the task list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param index Position of the task in the TaskList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param task Description of the task along with other information in a string format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void printTaskInfo(int index, String task){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println (index + \". \" + task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Prints out the summary of the tasks printed, including the total num of tasks and the num completed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param numTasks Number of tasks that the ListCommand has printed according to the constraints given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param numTasksDone Number of tasks that have been completed out of the tasks printed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void printListInfo(int numTasks, int numTasksDone){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"You have \" + numTasks + \" Tasks in the list\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"You have completed \" + numTasksDone +\" Tasks\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    //Print commands relating to actions done by the user: adding, deleting and marking as done"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printTaskMarkedDone (String description){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Good Job completing your task! I have marked it as done.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(description);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Tells the user that the task entered by the user has been marked as done previously"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param task Description of the task along with other information in a string format"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void printTaskPreviouslyMarkedDone (String task){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"This task has already been marked as done!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void printDeletedTask(String task){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Alright deleting task: \" + task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Task has been deleted\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printAddedTask (String task){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"There you go I\u0027ve added \" + task + \" to the list\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printNoMatchingTask (){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"There are no tasks that match this keyword\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printMatchingTask(){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Prints out all the commands that the user can enter"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Shows the format in which the user needs to enter the commands"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void printCommandInfo() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String helpInfo \u003d \"Available Commands:\\n\" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                \"help: Prints out available commands\\n\" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                \"list: lists out all tasks stored\\n\" +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                \"exit: Ends the duke program\\n\"+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                \"done x: marks the task with index x as done\\n\" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                \"delete x: deletes the task with index x\\n\" +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                \"\\n***Adding Tasks***\\n\"+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                \"todo description of task: adds a todo task with a description of the task\\n\" +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                \"deadline description by yyyy-mm-dd HH:MM : this adds a task with a deadline. If no time is entered the default time is 23:59\\n\" +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                \"event description at yyyy-mm-dd HH:MM : this adds an event at a certain date. If no time is added default is 23:59\\n\"+"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                \"\\n***Searching for a Task***\\n\" +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                \"find x: finds a task with x as a keyword\\n\" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                \"today: lists all the tasks occuring on that given day\\n\"+"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                \"month x: lists all the tasks in the month of x (integer). If no x is added it shows the task in the current month\\n\"+"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                \"year x: lists all the tasks in the year x, if no year is entered it shows the tasks in the current year\\n\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        System.out.print(helpInfo);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 61,
      "-": 63
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private char taskType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand (char taskType, String taskDescription){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public AddCommand (char taskType, String taskDescription, LocalDate date, LocalTime time){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute (Ui ui, TaskList tasks, Storage storage) throws DukeException{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        switch(taskType){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            case \u0027T\u0027:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                tasks.addTodo(taskDescription);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            case \u0027D\u0027:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                tasks.addDeadline(taskDescription, date, time);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            case \u0027E\u0027:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                tasks.addEvent(taskDescription, date, time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"Parser error\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.printAddedTask(tasks.get(tasks.size()-1).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.addTaskToFile (tasks.size()-1,tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showFileEditingError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 11,
      "-": 40
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Represents the command to be done"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Keeps check of whether the application has to end \u003ccode\u003e isExit \u003c/code\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public Boolean isExit \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(Ui ui, TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand (int index){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(Ui ui, TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ui.printDeletedTask(tasks.get(index).toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.deleteTask(this.index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.editOrDeleteTaskFile(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showFileEditingError();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Command that ends the application"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(Ui ui, TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Represents the command to find a keyword in the tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * \u003ccode\u003e keyword\u003c/code\u003e corresponds to the word that needs to be there in the task descriptions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand (String keyword){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void execute(Ui ui, TaskList tasks, Storage storage)throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            if(tasks.checkTask(i, keyword.trim())){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                matchingTasks.add(tasks.get(i));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        //Check if there are any matching to inform the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (matchingTasks.isEmpty()){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.printNoMatchingTask();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.printMatchingTask();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c matchingTasks.size(); i++){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                ui.printTaskInfo(i+1, matchingTasks.get(i).toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 7,
      "-": 31
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void execute(Ui ui, TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ui.printCommandInfo();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 13
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Represents the command entered by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * \u003ccode\u003e tag\u003c/code\u003e corresponds to the type of list the user wants to be printed (everything or according to date)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static char tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static int value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static int numTasksPrinted ;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static int numTasksDone ;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public ListCommand (char tag){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        numTasksDone \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        numTasksPrinted \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public ListCommand (char tag, int value){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        numTasksDone \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        numTasksPrinted \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void execute(Ui ui, TaskList tasks, Storage storage) throws DukeException{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "       for (int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            if (checkPrintingStatus(tasks.get(i))){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                ui.printTaskInfo(i+1, tasks.get(i).toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                processPrintedTaskDetails(tasks.get(i));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ui.printListInfo(numTasksPrinted, numTasksDone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static void processPrintedTaskDetails (Task task){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        numTasksPrinted ++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (task.getIsDone()){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            numTasksDone ++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    // This functions checks whether the task fulfills the conditions necessary to be printed (eg is it today)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static Boolean checkPrintingStatus (Task task) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        switch (tag) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            case \u0027N\u0027: // normal case of listing"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            case \u0027D\u0027:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                return (task.getDate().equals(LocalDate.now()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            case \u0027M\u0027:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                if (value \u003e 12 || value \u003c 0){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    throw new DukeException(\"Please enter a valid month number from 0 to 12. 0 shows the tasks in the current month\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }else if (value \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    return (task.getMonth() \u003d\u003d LocalDate.now().getMonthValue());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }else{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    return (task.getMonth() \u003d\u003d value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            case \u0027Y\u0027:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                if (value \u003c 0){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    throw new DukeException(\"Please enter a valid year from 0. 0 shows the tasks in the current year\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }else if (value \u003d\u003d 0){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    return (task.getYear() \u003d\u003d LocalDate.now().getYear());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }else{"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    return (task.getYear() \u003d\u003d value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "               return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 65,
      "-": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * DukeException represents exceptions that are unique to Duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * It stores the error message to be shown to the user"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String errorMessage){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Returns a string that describes the reason for the DukeException being thrown"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @return the error message that is to be displayed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getErrorMessage(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 10,
      "-": 12
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents work that has to be done by a certain deadline. A \u003ccode\u003eTask\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * a task represented using a string for the description of it eg \u003ccode\u003e CS2113 tutorial \u003c/code\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * a Boolean to keep track of whether it has been completed"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * a LocalDate format of yyyy-mm-dd to store the date the task is due"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * a localTime 24hr format of HH:MM to store the time the task is due"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public Deadline(String description, LocalDate date, LocalTime time){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String toString (){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return String.format(\"[D][%s] %s(by:%s %s)\", getStatusIcon(), description, dateToString(), timeToString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String saveFormat(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"D:%s:%s:%s:%s\", isDone, description, date.toString(), time.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a String of the date in the format of dd MONTH (in words) yyyy which defers from the input format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return date of the event"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String dateToString (){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        int day \u003d date.getDayOfMonth();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        int year \u003d date.getYear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String month \u003d date.getMonth().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return String.format(\"%s %s %s\", day, month, year);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string in the 12hour clock format with the relevant am/pm period"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return time of the event"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String timeToString(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        int hour;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        int min;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String period; //am or pm"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (time.getHour() \u003e 12){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            hour \u003d (time.getHour() -12);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            period \u003d \"pm\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else if (time.getHour() \u003d\u003d 0){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            hour \u003d 12;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            period \u003d \"am\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            hour \u003d time.getHour();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            period \u003d \"am\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        min \u003d time.getMinute();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return String.format(\"%s:%02d %s\", hour, min, period);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public int getYear(){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return date.getYear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public int getMonth(){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return date.getMonthValue();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public LocalDate getDate(){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 57,
      "-": 16
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents work that has to be done by a certain deadline. A \u003ccode\u003eTask\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * a task represented using a string for the description of it eg \u003ccode\u003e CS2113 tutorial \u003c/code\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * a Boolean to keep track of whether it has been completed"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * a LocalDate format of yyyy-mm-dd to store the date the event is taking place"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * a localTime 24hr format of HH:MM to store the time the event is starting"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public Event(String description, LocalDate date, LocalTime time){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String toString (){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return String.format(\"[E][%s] %s(at:%s %s)\", getStatusIcon(), description, dateToString(), timeToString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String saveFormat(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return String.format(\"E:%s:%s:%s:%s\", isDone, description, date.toString(), time.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a String of the date in the format of dd MONTH (in words) yyyy which defers from the input format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return date of the event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String dateToString (){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String day \u003d date.format(DateTimeFormatter.ofPattern(\"d\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        int year \u003d date.getYear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String month \u003d date.getMonth().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return String.format(\"%s %s %s\", day, month, year);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string in the 12hour clock format with the relevant am/pm period"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return time of the event"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String timeToString(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        int hour;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        int min;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String period; //am or pm"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (time.getHour() \u003e 12){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            hour \u003d (time.getHour() -12);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            period \u003d \"pm\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else if (time.getHour() \u003d\u003d 0){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            hour \u003d 12;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            period \u003d \"am\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            hour \u003d time.getHour();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            period \u003d \"am\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        min \u003d time.getMinute();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return String.format(\"%s:%02d %s\", hour, min, period);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public int getYear(){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return date.getYear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public int getMonth(){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return date.getMonthValue();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public LocalDate getDate(){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 58,
      "-": 16
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Represents work that has to be done. A \u003ccode\u003eTask\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * a task represented using a string for the description of it eg \u003ccode\u003e CS2113 tutorial \u003c/code\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * and a Boolean to keep track of whether it has been completed"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public Task(String description){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Returns a String of the task with the format of \"[isDone] description\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Method always returns immediately"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @return task information"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String toString (){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Returns a string of the task information"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Formatted with : between each new piece of information"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Use this format to save it to storage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @return task information"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String saveFormat(){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return String.format(\"%s:%s\", isDone, description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void markTaskDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public Boolean getIsDone (){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a String of the icon to be shown to the user when printing the task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return status icon"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String getStatusIcon(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return (isDone ? \"Done\": \"X\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String getDescription(){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    // These return 0 as there is no dateTime associated with a basic task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public int getYear(){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public int getMonth(){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public LocalDate getDate(){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return LocalDate.parse(\"0000:00:00\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 63,
      "-": 5
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents work that has to be done. A \u003ccode\u003eTask\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * a task represented using a string for the description of it eg \u003ccode\u003e CS2113 tutorial \u003c/code\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * and a Boolean to keep track of whether it has been completed"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * No date and time information is represented"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "public class ToDo extends Task{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public ToDo (String description){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return String.format (\"[T][%s] %s\", getStatusIcon(),this.description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String saveFormat(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return String.format(\"T:%s:%s\", isDone, description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 12,
      "-": 7
    }
  },
  {
    "path": "tasklist.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "D:true:blue :2019-10-10:20:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "E:false:new :2019-11-05:12:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "D:true:bleh :2020-09-27:23:59"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "E:false:meeting :2020-09-28:23:59"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 4
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "todo finish work"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "deadline cut hair /by tonight"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "event orientation /at 27th aug 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "prachi2023": 2,
      "-": 19
    }
  }
]
