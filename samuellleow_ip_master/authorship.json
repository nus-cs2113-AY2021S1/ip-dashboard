[
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "T | 1 | drink water"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "E | 1 | water plants | 12/03/2021"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "D | 1 | return book | June 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "D | 1 | read book | Oct 11 2020 18:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "D | 0 | cs2113 project | December 2020"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "D | 0 | team project | Dec 31 2020 23:59"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "E | 0 | project presentation | January 2021"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "E | 1 | Grandma 99th birthday | Dec 31 2020 23:59"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 9
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Duke is an application that helps the user with task scheduling and management."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "## Things to do before we start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. Ensure you have **Java 11** installed in your computer."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. Copy the `ip.jar` file into an empty folder."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "3. Open a command window in that folder."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "4. Enter the following commands `chcp 65001` followed by setting the font to **NSimSun**."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "5. Run the command `java -Dfile.encoding\u003dUTF-8 -jar ip.jar` in the jar folder to start the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "## Main Features "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "* Create various types of tasks and adding into a list (E.g todo, deadline, event)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "* Mark tasks as done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "* Delete tasks from the list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "* Search for specific tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### Adding a Todo task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Adds a todo task to the task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Command: `todo TASK_DESCRIPTION`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Example: `todo read book`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "       [T][âœ˜] read book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### Adding a Deadline task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Adds a deadline task to the task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Commands: "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. `deadline TASK_DESCRIPTION /by DEADLINE_BY`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. `deadline TASK_DESCRIPTION /by (yyyy-MM-dd)T(HH:mm)`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. `deadline cs2113 project /by December 2020`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. `deadline team project /by 2020-12-31T23:59`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Expected output 1:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```     "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    Hello! You may want to use the correct date and time format:)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /by (yyyy-MM-dd)T(HH:mm) OR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /at (yyyy-MM-dd)T(HH:mm)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    But no worries, I have added your task into the list:)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "      [D][âœ˜] cs2113 project (by: December 2020)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "       "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Expected output 2:    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "   ____________________________________________________________"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "      [D][âœ˜] team project (by: Dec 31 2020 23:59)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    Now you have 8 tasks in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "   ____________________________________________________________"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### Adding an Event task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Adds an event task to the task list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Commands: "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. `event TASK_DESCRIPTION /by EVENT_AT`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. `event TASK_DESCRIPTION /by (yyyy-MM-dd)T(HH:mm)`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. `event project presentation /at January 2021`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. `event Grandma 99th birthday /at 2020-12-31T23:59`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Expected output 1:     "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "   ____________________________________________________________"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    Hello! You may want to use the correct date and time format:)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /by (yyyy-MM-dd)T(HH:mm) OR"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /at (yyyy-MM-dd)T(HH:mm)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    But no worries, I have added your task into the list:)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "   ____________________________________________________________"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "      [E][âœ˜] project presentation (at: January 2021)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    Now you have 9 tasks in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "   ____________________________________________________________"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "       "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Expected output 2:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "   ____________________________________________________________"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "      [E][âœ˜] Grandma 99th birthday (at: Dec 31 2020 23:59)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    Now you have 10 tasks in the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "   ____________________________________________________________"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "         "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### Listing all the tasks"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Shows a list of all tasks in the task list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Command: `list`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### Marking task as done"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Marks the specified task in the list as done."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Command: `done TASK_INDEX`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Example: `done 2`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Expected output: "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "       [E][âœ“] water plants (at: 12/03/2021)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### Deleting task"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Deletes the specified task in the list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Command: `deletes TASK_INDEX`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Example: `delete 3`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Expected output: "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "       [D][âœ˜] cs2113 project (by: 02/10/20202)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     Now you have 9 tasks in the list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### Finding task using keyword provided"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Finds task(s) in the list containing the keyword provided"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Command: `find KEYWORD`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Example: `find book`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     1.[D][âœ“] return book (by: June 6th)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     2.[D][âœ“] read book (by: Oct 11 2020 18:00)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     3.[T][âœ˜] read book"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "```"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### Terminating the application"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Terminates Duke program"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Command: `bye`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "samuellleow": 155,
      "-": 10
    }
  },
  {
    "path": "src/main/java/Duke/Commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Adds a task to the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String INPUT_COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String INPUT_COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String INPUT_COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private String taskType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private String currentInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public AddCommand(String taskType, String description, String currentInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.currentInput \u003d currentInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Adds a particular task type corresponding to the user\u0027s input command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks TaskList object that stores existing tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param ui User interface of application"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param storage Storage object that stores existing tasks into a data file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void executeCommand(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        switch(taskType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        case INPUT_COMMAND_TODO:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            TaskList.errorCheckingTodo(currentInput, tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        case INPUT_COMMAND_DEADLINE:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            TaskList.errorCheckingDeadline(currentInput, description, tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        case INPUT_COMMAND_EVENT:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            TaskList.errorCheckingEvent(currentInput, description, tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 49
    }
  },
  {
    "path": "src/main/java/Duke/Commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Executes the command corresponding to user\u0027s input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks TaskList object that stores existing tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param ui User interface of application"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param storage Storage object that stores existing tasks into a data file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public abstract void executeCommand(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Returns an exit flag that is determined by user\u0027s command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Terminate the program if user\u0027s command equals \u0027bye\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public abstract Boolean isExit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 24
    }
  },
  {
    "path": "src/main/java/Duke/Commands/DateTimeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Prints the date and/or time of Deadline and Event task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class DateTimeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private String currentInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public DateTimeCommand(String currentInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.currentInput \u003d currentInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void executeCommand(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TaskList.errorCheckingDateTime(currentInput, tasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 24
    }
  },
  {
    "path": "src/main/java/Duke/Commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Deletes a task identified using the displayed index from the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private String currentInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public DeleteCommand(String currentInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.currentInput \u003d currentInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void executeCommand(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TaskList.errorCheckingDelete(currentInput, tasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 25
    }
  },
  {
    "path": "src/main/java/Duke/Commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Marks a task as done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private String currentInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public DoneCommand(String currentInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.currentInput \u003d currentInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void executeCommand(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TaskList.errorCheckingTaskDone(currentInput, tasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 25
    }
  },
  {
    "path": "src/main/java/Duke/Commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Displays goodbye message when application is terminated by the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void executeCommand(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Ui.printGoodbyeMessage();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 18
    }
  },
  {
    "path": "src/main/java/Duke/Commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Finds and displays task(s) corresponding to keyword provided"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public FindCommand(String inputCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.keyword \u003d inputCommand.split(\" \", 2)[1];;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void executeCommand(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Ui.findTask(tasks, keyword);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 24
    }
  },
  {
    "path": "src/main/java/Duke/Commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Prints a list of existing tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void executeCommand(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Ui.printListMessage(tasks);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 18
    }
  },
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Entry point of the Duke application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Initializes the application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Sets up the required objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param filePath Path of the data file that stores existing tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        storage.loadDataList(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints welcome message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Loads existing tasks from the data file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Starts the interaction with the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Runs the program until termination by the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        ui.printStartDukeMessage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            Command commandInput \u003d Parser.parse(ui.in.nextLine());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            commandInput.executeCommand(tasks, ui, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            storage.saveTaskList(tasks, FILE_PATH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            isExit \u003d commandInput.isExit();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            } catch (NullPointerException | StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException| IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                ui.printInvalidTaskInputErrorMessage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 58,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Duke/Parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Commands.DateTimeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Commands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String INPUT_COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String INPUT_COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String INPUT_COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String INPUT_COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String INPUT_COMMAND_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String INPUT_COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String INPUT_COMMAND_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String INPUT_COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String INPUT_COMMAND_DATETIME \u003d \"datetime\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param inputCommand Full user input command string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Command object corresponding to the input command of the user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static Command parse(String inputCommand) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Command commandType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        if (inputCommand.equals(INPUT_COMMAND_BYE)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            commandType \u003d new ExitCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } else if (inputCommand.equals(INPUT_COMMAND_LIST)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            commandType \u003d new ListCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            commandType \u003d checkTask(inputCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Parses user input related to tasks into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param inputCommand Full user input command string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Command object corresponding to the input command of the user"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static Command checkTask(String inputCommand) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Command commandType \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String taskType \u003d inputCommand.split(\" \")[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String taskDescription;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        // Check validity of user\u0027s input on task description"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        // If given correct command but invalid format, error messages can be printed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        if (inputCommand.split(\" \").length \u003e 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            taskDescription \u003d inputCommand.split(\" /\", 2)[0].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            taskDescription \u003d inputCommand;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        case INPUT_COMMAND_DEADLINE:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        case INPUT_COMMAND_EVENT:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        case INPUT_COMMAND_TODO:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            commandType \u003d new AddCommand(taskType, taskDescription, inputCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        case INPUT_COMMAND_DONE:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            commandType \u003d new DoneCommand(inputCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        case INPUT_COMMAND_DELETE:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            commandType \u003d new DeleteCommand(inputCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        case INPUT_COMMAND_FIND:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            commandType \u003d new FindCommand(inputCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        case INPUT_COMMAND_DATETIME:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            commandType \u003d new DateTimeCommand(inputCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 84
    }
  },
  {
    "path": "src/main/java/Duke/Storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Task.Events;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String ERROR_MESSAGE_IOEXCEPTION \u003d \"IOException error has occurred\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String FILE_DIRECTORY \u003d \"data/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Checks if specified directory, else creates a new directory."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Checks if specified data file exists, else creates a new date file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param filePath Path of the data file that stores existing tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        checkSpecificFolderExist();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            File dataListFile \u003d checkFileExists(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            System.out.println(ERROR_MESSAGE_IOEXCEPTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private void checkSpecificFolderExist() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        File folder \u003d new File(FILE_DIRECTORY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        if (!folder.exists()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            folder.mkdir();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private File checkFileExists(String dataListFilePath) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        File dataListFile \u003d new File(dataListFilePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        if (!dataListFile.exists()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            dataListFile.createNewFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return dataListFile;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Loads existing tasks in the data file into a TaskList object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks TaskList object that stores existing tasks loaded from data file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void loadDataList(TaskList tasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            File dataListFile \u003d checkFileExists(FILE_PATH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            readDataList(dataListFile, tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            System.out.println(ERROR_MESSAGE_IOEXCEPTION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private void readDataList(File dataListFile, TaskList tasks) throws FileNotFoundException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Scanner fileScanner \u003d new Scanner(dataListFile);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        while (fileScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String currentLine \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (currentLine.isBlank()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String taskType \u003d currentLine.split(\" \\\\| \")[0];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String taskDescription \u003d currentLine.split(\" \\\\| \")[2];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String isTaskDone \u003d currentLine.split(\" \\\\| \")[1];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                Task toDoTask \u003d new ToDo(taskDescription);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                if (isTaskDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    toDoTask.taskDone();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                tasks.getTaskList().add(toDoTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                String deadlineBy \u003d currentLine.split(\" \\\\| \")[3];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                Task deadlineTask \u003d new Deadline(taskDescription, deadlineBy);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                if (isTaskDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    deadlineTask.taskDone();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                tasks.getTaskList().add(deadlineTask);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                String eventAt \u003d currentLine.split(\" \\\\| \")[3];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                Task eventTask \u003d new Events(taskDescription, eventAt);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                if (isTaskDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    eventTask.taskDone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                tasks.getTaskList().add(eventTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                System.out.println(\"Undefined task type - should not happen\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Saves all existing tasks into the data file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks TaskList object that stores existing tasks"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param filePath Path of the data file that stores existing tasks"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @throws IOException If the data file does not exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void saveTaskList(TaskList tasks, String filePath) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getTaskList().size(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String taskDescription \u003d tasks.getTaskList().get(i).getTaskDescription();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String taskType \u003d tasks.getTaskList().get(i).getTaskType();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String isTaskDone;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (tasks.getTaskList().get(i).getTaskStatus()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                isTaskDone \u003d \"1\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                isTaskDone \u003d \"0\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            case \"ToDo\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                fw.write(\"T | \" + isTaskDone + \" | \" + taskDescription + System.lineSeparator());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            case \"Deadline\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                fw.write(\"D | \" + isTaskDone + \" | \" + taskDescription + \" | \" + tasks.getTaskList().get(i).getTimeline() + System.lineSeparator());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            case \"Events\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                fw.write(\"E | \" + isTaskDone + \" | \" + taskDescription + \" | \" + tasks.getTaskList().get(i).getTimeline() + System.lineSeparator());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                System.out.println(\"Undefined task type - should not happen\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 142
    }
  },
  {
    "path": "src/main/java/Duke/Task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Represents a Deadline task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.taskType \u003d \"Deadline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getTimeline() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return this.taskType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return \"[D][\" + getStatusIcon() + \"] \" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 31
    }
  },
  {
    "path": "src/main/java/Duke/Task/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 5
    }
  },
  {
    "path": "src/main/java/Duke/Task/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Represents an Event task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Events(String description, String at) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.taskType \u003d \"Events\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getTimeline() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return \"[E][\" + getStatusIcon() + \"] \" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 32
    }
  },
  {
    "path": "src/main/java/Duke/Task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Represents a Task in the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Task class constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param description Description of task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Marks a particular task as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void taskDone(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Returns description of specified task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Description of task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Returns date and/or time of specified task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Date and/or time of task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getTimeline() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Returns type of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Type of task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Returns the status of the specified task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Status of task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public boolean getTaskStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Returns details of the specified task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Details of task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 78
    }
  },
  {
    "path": "src/main/java/Duke/Task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Represents a Todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.taskType \u003d \"ToDo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return this.taskType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return \"[T][\" + getStatusIcon() + \"] \" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 24
    }
  },
  {
    "path": "src/main/java/Duke/TaskList/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Task.Events;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Task.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Creates an empty task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Gets the arraylist that contains existing tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Arraylist that contains existing tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Checks if user added task description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Creates and adds a new Todo task into the arraylist if no error is found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param currentInput Full user\u0027s input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks Arraylist that stores existing tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void errorCheckingTodo(String currentInput, TaskList tasks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            createTodoTask(currentInput, tasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            Ui.printInvalidTodoErrorMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static void createTodoTask(String currentInput, TaskList tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String taskDescription \u003d currentInput.split(\" \")[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Task newToDoTask \u003d new ToDo(taskDescription);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        tasks.getTaskList().add(newToDoTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Ui.printAddTaskMessage(tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Checks for formatting error in user\u0027s input on adding Deadline task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Creates and adds a new Deadline task into the arraylist if no error is found."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param currentInput Full user\u0027s input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param taskDescription Description of Deadline task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks Arraylist that stores existing tasks"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void errorCheckingDeadline(String currentInput, String taskDescription, TaskList tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            createDeadlineTask(currentInput, taskDescription, tasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            Ui.printInvalidDeadlineErrorMessage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static void createDeadlineTask(String currentInput, String taskDescription, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        if (!currentInput.contains(\"/by\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String deadlineBy \u003d currentInput.split(\"/by \")[1];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        deadlineBy \u003d checkDateTime(deadlineBy);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Task newDeadlineTask \u003d new Deadline(taskDescription, deadlineBy);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        tasks.getTaskList().add(newDeadlineTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Ui.printAddTaskMessage(tasks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Checks for formatting error in user\u0027s input on adding Event task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Creates and adds a new Event task into the arraylist if no error is found."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param currentInput Full user\u0027s input"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param taskDescription Description of Event task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks Arraylist that stores existing tasks"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void errorCheckingEvent(String currentInput, String taskDescription, TaskList tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            createEventTask(currentInput, taskDescription, tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            Ui.printInvalidEventErrorMessage();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static void createEventTask(String currentInput, String taskDescription, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        if (!currentInput.contains(\"/at\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String eventAt \u003d currentInput.split(\"/at \")[1];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        eventAt \u003d checkDateTime(eventAt);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Task newEventTask \u003d new Events(taskDescription, eventAt);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        tasks.getTaskList().add(newEventTask);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Ui.printAddTaskMessage(tasks);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Checks for indexing error in user\u0027s input on deleting task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Deletes the task corresponding to the user\u0027s index input if no error is found."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param currentInput Full user\u0027s input"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks Arraylist that stores existing tasks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void errorCheckingDelete(String currentInput, TaskList tasks) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            deleteTask(currentInput, tasks);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (tasks.getTaskList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                Ui.printEmptyListErrorMessage();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                Ui.printInvalidTaskNumberErrorMessage();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static void deleteTask(String currentInput, TaskList tasks) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int itemIndex \u003d Integer.parseInt(currentInput.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Task taskToBeDeleted \u003d tasks.getTaskList().get(itemIndex);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        tasks.getTaskList().remove(itemIndex);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Ui.printDeleteTaskMessage(taskToBeDeleted, tasks);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Checks for indexing error in user\u0027s input on marking task as done."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Sets the task as done corresponding to the user\u0027s index input if no error is found."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param currentInput Full user\u0027s input"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks Arraylist that stores existing tasks"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void errorCheckingTaskDone(String currentInput, TaskList tasks) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            taskMarkAsDone(currentInput, tasks);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (tasks.getTaskList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                Ui.printEmptyListErrorMessage();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                Ui.printInvalidTaskNumberErrorMessage();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static void taskMarkAsDone(String currentInput, TaskList tasks) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int itemIndex \u003d Integer.parseInt(currentInput.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        tasks.getTaskList().get(itemIndex).taskDone();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Ui.printDoneTaskMessage(itemIndex, tasks);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Checks for formatting error in user\u0027s input on date and time input."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Returns the date and time details in \u003cMMM d yyyy HH:mm\u003e format if no error is found."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param dateTimeDetails Details of date and/or time of Deadline or Event task"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Details of date and/or time"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String checkDateTime(String dateTimeDetails) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.parse(dateTimeDetails);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            dateTimeDetails \u003d dateTime.format(formatter);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (java.time.format.DateTimeParseException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            Ui.printInvalidDateTimeErrorMessage();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return dateTimeDetails;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Checks for indexing error in user\u0027s input on checking date and time of task."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Returns the date and time details corresponding to the user\u0027s index input if no error is found."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param currentInput Full user\u0027s input"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks Arraylist that stores existing tasks"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void errorCheckingDateTime(String currentInput, TaskList tasks) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            taskDateTime(currentInput, tasks);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (tasks.getTaskList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                Ui.printEmptyListErrorMessage();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                Ui.printInvalidTaskNumberErrorMessage();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static void taskDateTime(String currentInput, TaskList tasks) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int itemIndex \u003d Integer.parseInt(currentInput.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        tasks.getTaskList().get(itemIndex).getTimeline();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Ui.printDateTimeMessage(itemIndex, tasks);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 203
    }
  },
  {
    "path": "src/main/java/Duke/Ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package Duke.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.Task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import Duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Text UI of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_GREETINGS \u003d \"     Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            \"     What can I do for you?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_SINGLE_LINE \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_GOODBYE \u003d \"     Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_ADD_TASK \u003d \"     Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_DONE_TASK \u003d \"     Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_REMOVE_TASK \u003d \"     Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_TASK_LIST \u003d \"     Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_FIND_TASK \u003d \"     Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_FIND_TASK \u003d \"     There are no task(s) that match your keyword!!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_DATE_TIME \u003d \"     This deadline/event is by/at \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String ERROR_MESSAGE_EMPTY_LIST \u003d \"     Your list is empty!!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_TASK_NO \u003d \"     Please input a valid task number!!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_TASK_INPUT \u003d \"     â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_TODO \u003d \"     I\u0027m sorry, but please tell me the task you need to do:)\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            \"     For example: todo (task description)\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_DEADLINE \u003d \"     Please enter deadline of task:)\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            \"     For example: deadline (task description) /by (yyyy-MM-dd)T(HH:mm)\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_EVENT \u003d \"     Please enter date of event:)\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            \"     For example: event (task description) /at (yyyy-MM-dd)T(HH:mm)\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_DATE_TIME \u003d \"     Hello! You may want to use the correct date and time format:)\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            \"     /by (yyyy-MM-dd)T(HH:mm) OR\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            \"     /at (yyyy-MM-dd)T(HH:mm)\\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            \"     But no worries, I have added your task into the list:)\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Scanner in;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Reads user\u0027s input command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints welcome message upon the start of the application."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void printStartDukeMessage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_GREETINGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints goodbye message upon termination of the application."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void printGoodbyeMessage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_GOODBYE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints description of the added task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks TaskList object that stores existing tasks"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void printAddTaskMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_ADD_TASK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(\"       \" + tasks.getTaskList().get(tasks.getTaskList().size()-1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        printNoOfTask(tasks);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static void printNoOfTask(TaskList tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(\"     Now you have \" + tasks.getTaskList().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "//    private static void printNoOfTaskForDeleteFunction(TaskList tasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "//        System.out.println(\"     Now you have \" + (tasks.getTaskList().size() - 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints description of the task that is marked as done."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param itemIndex Index of the task to be marked as done"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks TaskList object that stores existing tasks"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void printDoneTaskMessage(int itemIndex, TaskList tasks) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_DONE_TASK);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(\"       \" + tasks.getTaskList().get(itemIndex));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints description of the task that is deleted."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param taskToBeDeleted Task to be deleted"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks TaskList object that stores existing tasks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void printDeleteTaskMessage(Task taskToBeDeleted, TaskList tasks) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_REMOVE_TASK);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(\"       \" + taskToBeDeleted);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        printNoOfTask(tasks);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints date and time of the task."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param itemIndex Index of the task to be deleted"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks askList object that stores existing tasks"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void printDateTimeMessage(int itemIndex, TaskList tasks) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_DATE_TIME);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(\"       \" + tasks.getTaskList().get(itemIndex).getTimeline());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints the list of existing tasks in the Arraylist."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks TaskList object that stores existing tasks"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void printListMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        if (tasks.getTaskList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            printEmptyListErrorMessage();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            System.out.println(MESSAGE_TASK_LIST);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.getTaskList().size(); i++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                if (tasks.getTaskList().get(i).getTaskType().equals(\"Deadline\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    System.out.println(\"     \" + (i + 1) + \".\" + tasks.getTaskList().get(i));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                } else if (tasks.getTaskList().get(i).getTaskType().equals(\"Events\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    System.out.println(\"     \" + (i + 1) + \".\" + tasks.getTaskList().get(i));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    System.out.println(\"     \" + (i + 1) + \".\" + tasks.getTaskList().get(i));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Finds the task(s) corresponding to the keyword the user has input."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param tasks TaskList object that stores existing tasks"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param keyword Keyword used to find a task"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void findTask(TaskList tasks, String keyword) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Boolean foundTaskWithKeyword \u003d false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int taskIndex \u003d 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        if (tasks.getTaskList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            printEmptyListErrorMessage();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.getTaskList().size(); i++) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                if (tasks.getTaskList().get(i).getTaskDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    if(!foundTaskWithKeyword) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        System.out.println(MESSAGE_FIND_TASK);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    System.out.println(\"     \" + (taskIndex + 1) + \".\" + tasks.getTaskList().get(i));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    foundTaskWithKeyword \u003d true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    taskIndex++;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (!foundTaskWithKeyword) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                System.out.println(ERROR_MESSAGE_INVALID_FIND_TASK);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints error message if the Arraylist is empty."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void printEmptyListErrorMessage() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(ERROR_MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints error message when user provides invalid task number."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void printInvalidTaskNumberErrorMessage() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(ERROR_MESSAGE_INVALID_TASK_NO);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints error message when user provides invalid input command."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void printInvalidTaskInputErrorMessage() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(ERROR_MESSAGE_INVALID_TASK_INPUT);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints error message when user provides invalid Todo task."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void printInvalidTodoErrorMessage() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(ERROR_MESSAGE_INVALID_TODO);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints error message when user provides invalid Deadline task."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void printInvalidDeadlineErrorMessage() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(ERROR_MESSAGE_INVALID_DEADLINE);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints error message when user provides invalid Event task."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void printInvalidEventErrorMessage() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(ERROR_MESSAGE_INVALID_EVENT);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Prints date and/or time of Deadline or Event task."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static void printInvalidDateTimeErrorMessage() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(ERROR_MESSAGE_INVALID_DATE_TIME);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 259
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java ..\\src\\main\\java\\Task\\*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java ../src/main/java/Task/*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 1,
      "-": 37
    }
  }
]
