[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "      _____                    _        _            "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     |_   _|   ___     ___    | |_     (_)     ___   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "       | |    / _ \\   / _ \\   |  _|    | |    / -_)  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "      _|_|_   \\___/   \\___/   _\\__|   _|_|_   \\___|  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    _|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"| "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    \"`-0-0-\u0027\"`-0-0-\u0027\"`-0-0-\u0027\"`-0-0-\u0027\"`-0-0-\u0027\"`-0-0-\u0027 "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 8,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/CommandExecutor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CommandExecutor {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    START, HELP, ADD_TODO, ADD_EVENT, ADD_DEADLINE, LIST, DONE, BYE, SAVE, DELETE,  UNRECOGNISED"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 6
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TasklistEmptyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.finalObjects.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // array containing all tasks the user has input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static ArrayList\u003cTask\u003e allTasks \u003d new ArrayList\u003cTask\u003e(TootieConstants.MAX_TASKS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static int numTasks \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        CommandType commandType \u003d CommandType.START;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(TootieStrings.BLOCKY_TOOTIE_LOGO);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printTootieLogo();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printHelloMessage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while(commandType !\u003d CommandType.BYE){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            userInput \u003d getUserInput();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            echoUserInput(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            commandType \u003d extractCommandType(userInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            executeCommand(commandType, userInput, allTasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // get user input, ignore comments and blank lines"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static String getUserInput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            userInput \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } while (userInput.matches(TootieRegex.BLANK_STRING_REGEX)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                || userInput.startsWith(TootieInputMarkers.INPUT_COMMENT_MARKER));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // echo the userInput for testing"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void echoUserInput(String userInput) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(userInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // prints Tootie logo (text art randomized each run)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printTootieLogo() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String[] logos \u003d new String[TootieConstants.NUM_LOGOS_AVAILABLE];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        logos[0] \u003d TootieStrings.SIMPLE_TOOTIE_LOGO;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        logos[1] \u003d TootieStrings.BLOCKY_TOOTIE_LOGO;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        logos[2] \u003d TootieStrings.TRAIN_THEME_TOOTIE_LOGO;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        logos[3] \u003d TootieStrings.THICK_TOOTIE_LOGO;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Random rand \u003d new Random(System.currentTimeMillis());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Hello from\" + NEWLINE + logos[Math.abs(rand.nextInt() % 4)] + NEWLINE + TootieStrings.VERSION);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // prints the line divider"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(TootieStrings.SPARKLY_TEXT_DIVIDER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // prints the hello when starting"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printHelloMessage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.print(TootieStrings.HELLO_GREETING);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // prints farewell message"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printFarewellMessage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.print(TootieStrings.FAREWELL_GREETING);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // prints all list items with index and check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printAllTasks (ArrayList\u003cTask\u003e taskList) throws TasklistEmptyException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (numTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TasklistEmptyException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"You have \" + numTasks +\" tasks!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (int i \u003d 0; i \u003c numTasks; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.print((i + 1) + \". \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskList.get(i).printTaskType();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskList.get(i).printCompletionIndicator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskList.get(i).printTaskDescription();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // TODO: print \"all done ʕ•ᴥ•ʔ\" if all tasks done for now"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // print the message when command is not understood"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void printConfusedMessage() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Command not found? \" + TootieStrings.CONFUSED_EMOTICON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Type \\\"help\\\" for a list of commands!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // print list of commands and example usage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void printHelpInfo() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Here is the list of commands I understand:\" + NEWLINE + NEWLINE + TootieStrings.HELP_COMMAND_TEXT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // figure out the command type from userInput"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static CommandType extractCommandType(String userInput) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (userInput.trim().startsWith(\"help\")){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.HELP;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.trim().startsWith(\"todo\")){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.ADD_TODO;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.trim().startsWith(\"deadline\")){"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.ADD_DEADLINE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.trim().startsWith(\"event\")){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.ADD_EVENT;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.trim().startsWith(\"list\")){"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.LIST;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.trim().startsWith(\"done\")){"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.DONE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.trim().startsWith(\"bye\")){"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                return CommandType.BYE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.UNRECOGNISED;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // execute the command as required"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void executeCommand(CommandType commandType, String userInput, ArrayList\u003cTask\u003e allTasks) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printHelpInfo();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case ADD_TODO:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            addToDo(userInput);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case ADD_DEADLINE:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            addDeadline(userInput);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case ADD_EVENT:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            addEvent(userInput);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                printAllTasks(allTasks);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TasklistEmptyException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.TasklistEmptyMsg);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            markTaskComplete(userInput, allTasks);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printFarewellMessage();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SAVE:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            saveTasks(allTasks);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            deleteTask(userInput, allTasks);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printConfusedMessage();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // TODO: implement save tasks function"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void saveTasks(ArrayList\u003cTask\u003e allTasks) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // TODO: implement delete task function"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void deleteTask(String userInput, ArrayList\u003cTask\u003e allTasks) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // add an event task to the allTasks list"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void addEvent(String userInput) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isPlacementCorrect \u003d true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean startTimeFormatCorrect \u003d true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean endTimeFormatCorrect \u003d true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date startTime \u003d null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date endTime \u003d null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String taskName \u003d \"\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String startTimeUnformatted \u003d \"\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String endTimeUnformatted \u003d \"\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // identify placements"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int taskNamePosition \u003d userInput.indexOf(TootieInputMarkers.TASKNAME_MARKER);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int startTimePosition \u003d userInput.indexOf(TootieInputMarkers.STARTTIME_MARKER);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int endTimePosition \u003d userInput.indexOf(TootieInputMarkers.ENDTIME_MARKER);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if placement is correct"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskNamePosition \u003d\u003d -1 || startTimePosition \u003d\u003d -1 || endTimePosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            isPlacementCorrect \u003d false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                taskName \u003d userInput.substring(taskNamePosition + 2, startTimePosition);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                startTimeUnformatted \u003d userInput.substring(startTimePosition + 2, endTimePosition).trim();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                endTimeUnformatted \u003d userInput.substring(endTimePosition + 2).trim();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                isPlacementCorrect \u003d false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!isPlacementCorrect) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Check event input formatting!\" + NEWLINE + NEWLINE + TootieStrings.EVENT_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check format start time"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isStartDateWithTime \u003d isDateWithTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isStartDateWithoutTime \u003d isDateWithoutTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check format end time"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isEndDateWithTime \u003d isDateWithTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isEndDateWithoutTime \u003d isDateWithoutTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse start time"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (isStartDateWithTime) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startTime \u003d parseDateWithTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if(isStartDateWithoutTime){"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startTime \u003d parseDateWithoutTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startTimeFormatCorrect \u003d false;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (startTime \u003d\u003d null || !startTimeFormatCorrect){"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Check start date formatting!\" + NEWLINE + NEWLINE + TootieStrings.EVENT_COMMAND_DESCRIPTION"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + NEWLINE + NEWLINE + TootieStrings.DATE_FORMAT_MESSAGE + NEWLINE);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse end time"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (isEndDateWithTime) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endTime \u003d parseDateWithTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if(isEndDateWithoutTime){"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endTime \u003d parseDateWithoutTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endTimeFormatCorrect \u003d false;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (endTime \u003d\u003d null || !endTimeFormatCorrect){"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Check end date formatting!\" + NEWLINE + NEWLINE + TootieStrings.EVENT_COMMAND_DESCRIPTION"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + NEWLINE + NEWLINE + TootieStrings.DATE_FORMAT_MESSAGE + NEWLINE);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if date entered is valid"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if(!isValidDate(startTime)){"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Invalid start date\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if(!isValidDate(endTime)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Invalid end date\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if start and end time are in chronological order"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if(startTime.after(endTime)){"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Error! End time cannot be before start time!\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskName.isBlank()){"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"event taskname is empty? \" + TootieStrings.CONFUSED_EMOTICON);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // add event to list"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.add(new Event(taskName.trim(), startTime, endTime));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"added event:\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.get(numTasks).printTaskDescription();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        numTasks++;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // adds a deadline task to the allTasks list"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void addDeadline(String userInput) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isPlacementCorrect \u003d true;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean dueDateFormatCorrect \u003d true;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date dueDate \u003d null;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String taskName \u003d \"\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String dueDateUnformatted \u003d \"\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // identify placements"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int taskNamePosition \u003d userInput.indexOf(TootieInputMarkers.TASKNAME_MARKER);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int dueDatePosition \u003d userInput.indexOf(TootieInputMarkers.DUEDATE_MARKER);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if placement is correct, split if correct"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskNamePosition \u003d\u003d -1 || dueDatePosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            isPlacementCorrect \u003d false;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                taskName \u003d userInput.substring(taskNamePosition + 2, dueDatePosition);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dueDateUnformatted \u003d userInput.substring(dueDatePosition + 2).trim();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                isPlacementCorrect \u003d false;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!isPlacementCorrect) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Check deadline input formatting!\" + NEWLINE + NEWLINE + TootieStrings.DEADLINE_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check format due date"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isDueDateWithTime \u003d isDateWithTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isDueDateWithoutTime \u003d isDateWithoutTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse due date"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (isDueDateWithTime) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dueDate \u003d parseDateWithTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if(isDueDateWithoutTime){"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dueDate \u003d parseDateWithoutTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dueDateFormatCorrect \u003d false;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (dueDate \u003d\u003d null || !dueDateFormatCorrect){"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Check due date formatting!\" + NEWLINE + NEWLINE + TootieStrings.DEADLINE_COMMAND_DESCRIPTION"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + NEWLINE + NEWLINE + TootieStrings.DATE_FORMAT_MESSAGE + NEWLINE);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskName.isBlank()){"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"deadline taskname is empty? \" + TootieStrings.CONFUSED_EMOTICON);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if date entered is valid"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if(!isValidDate(dueDate)){"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Invalid due date\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // add event to list"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.add(new Deadline(taskName.trim(), dueDate));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"added deadline:\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.get(numTasks).printTaskDescription();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        numTasks++;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // TODO fix the date validator it doesn\u0027t work properly :("
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // check if the date entered is a valid calendar date"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static boolean isValidDate(Date date) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        cal.setLenient(false);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        cal.setTime(date);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            cal.getTime();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // parse the date if time is not included in input"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static Date parseDateWithoutTime(String unformattedDate) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date formattedDate;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SimpleDateFormat dateWithoutTime \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            formattedDate \u003d dateWithoutTime.parse(unformattedDate);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return formattedDate;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // parse the date if time is included in input"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static Date parseDateWithTime(String unformattedDate) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date formattedDate;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SimpleDateFormat dateWithTime \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            formattedDate \u003d dateWithTime.parse(unformattedDate);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return formattedDate;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // check if the date entered is correctly formatted with a date but no time"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static boolean isDateWithoutTime(String timeUnformmated) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return timeUnformmated.matches(TootieRegex.DATE_WITHOUT_TIME_REGEX);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // check if the date entered is correctly formatted with a date and time"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static boolean isDateWithTime(String timeUnformmated) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return timeUnformmated.matches(TootieRegex.DATE_WITH_TIME_REGEX);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // adds a toto task to the allTasks list"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void addToDo(String userInput) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // identify placements"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int taskNamePosition \u003d userInput.indexOf(TootieInputMarkers.TASKNAME_MARKER);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskNamePosition \u003d\u003d -1){"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Check todo input formatting!\" + NEWLINE + NEWLINE + TootieStrings.TODO_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String taskName \u003d userInput.substring(taskNamePosition + 2);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskName.isBlank()){"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"todo taskname is empty? \" + TootieStrings.CONFUSED_EMOTICON);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // add task to list"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.add(new ToDo(taskName.trim()));"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        numTasks++;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"added todo: \" + taskName.trim());"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // process the user input and mark the"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void markTaskComplete(String userInput, ArrayList\u003cTask\u003e allTasks) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int taskNum \u003d 0;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean taskExists \u003d true;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse task and check if it exists"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskNum \u003d Integer.parseInt(userInput.replaceAll(\"[\\\\D]\", \"\"));"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (taskNum \u003e numTasks || taskNum \u003c 1) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                taskExists \u003d false;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(taskNum - 1).setComplete(true);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskExists \u003d false;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // print response"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskExists) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"    \" + TootieStrings.TICK_SYMBOL + allTasks.get(taskNum - 1).getTaskName());"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(TootieStrings.SPARKLY_EMOTICON);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"No such task? \" + TootieStrings.CONFUSED_EMOTICON);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 451,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TasklistEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TasklistEmptyException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TootieExceptions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieExceptions {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/finalObjects/TootieConstants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.finalObjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieConstants {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final int MAX_TASKS \u003d 100;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final int NUM_LOGOS_AVAILABLE \u003d 4;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 6
    }
  },
  {
    "path": "src/main/java/duke/finalObjects/TootieErrorMsgs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.finalObjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieErrorMsgs {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TasklistEmptyMsg \u003d \"No tasks found! \" + TootieStrings.HAPPY_EMOTICON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 5
    }
  },
  {
    "path": "src/main/java/duke/finalObjects/TootieInputMarkers.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.finalObjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieInputMarkers {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String INPUT_COMMENT_MARKER \u003d \"#\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASKNAME_MARKER \u003d \"t/\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String STARTTIME_MARKER \u003d \"s/\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDTIME_MARKER \u003d \"e/\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DUEDATE_MARKER \u003d \"d/\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 10
    }
  },
  {
    "path": "src/main/java/duke/finalObjects/TootieRegex.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.finalObjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieRegex {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BLANK_STRING_REGEX \u003d \"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DATE_WITHOUT_TIME_REGEX \u003d \"([0-9]{2})-([0-9]{2})-([0-9]{4})\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DATE_WITH_TIME_REGEX \u003d \"([0-9]{2})-([0-9]{2})-([0-9]{4}) ([0-9]{2}):([0-9]{2})\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 7
    }
  },
  {
    "path": "src/main/java/duke/finalObjects/TootieStrings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.finalObjects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieStrings {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // Help command descriptions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELP_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"help: displays a list of commands tootie understands\" + NEWLINE + \"  Example:  help\" + NEWLINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TODO_COMMAND_DESCRIPTION \u003d \"todo: add a todo task to the\" + \" list\" + NEWLINE + "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"  \" + \"Parameters:  todo t/TASKNAME\" + NEWLINE + \"  Example:  todo t/clean room\" + NEWLINE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEADLINE_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"deadline: add a task with a deadline to the list\" + NEWLINE + \"  Parameters:  deadline t/TASKNAME \" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    \"d/DUE_DATE\" + NEWLINE + \"  Example:  deadline t/write essay d/31-12-2020 04:55\" + NEWLINE + \"  \" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    \"Example:  deadline t/submit report d/30-10-2020\" + NEWLINE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String EVENT_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"event: add a scheduled event task to the list\" + NEWLINE + \"  Parameters:  event t/TASKNAME s/START_TIME \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"e/END_TIME\" + NEWLINE + \"  Example:  event t/clean room s/31-12-2020 04:55 e/31-12-2020 05:45\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + NEWLINE + \"  Example:  event t/clean room s/31-12-2020 e/31-12-2020\" + NEWLINE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LIST_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"list: displays the complete list of tasks entered\" + NEWLINE + \"  Example:  list\" + NEWLINE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BYE_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"bye: closes the program\" + NEWLINE + \"  Example:  bye\" + NEWLINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DATE_FORMAT_MESSAGE \u003d \"NOTE: datetime entries can be of the format \\\"dd-MM-yyyy \" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"HH:mm\\\"\" + NEWLINE + \"    OR \\\"dd-MM-yyyy\\\"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELP_COMMAND_TEXT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            HELP_COMMAND_DESCRIPTION + NEWLINE + TODO_COMMAND_DESCRIPTION + NEWLINE + DEADLINE_COMMAND_DESCRIPTION"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + NEWLINE + EVENT_COMMAND_DESCRIPTION + NEWLINE + LIST_COMMAND_DESCRIPTION + NEWLINE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + BYE_COMMAND_DESCRIPTION + NEWLINE + \"-----\" + NEWLINE + DATE_FORMAT_MESSAGE + NEWLINE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // Tootie logos"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String THICK_TOOTIE_LOGO \u003d \"88888888888                888    d8b          \" + NEWLINE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"    888                    \" + \"888\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"    Y8P          \" + NEWLINE + \"    888                    888                 \" + NEWLINE + \"    \" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"888   .d88b.   .d88b.  888888 888  .d88b.  \" + NEWLINE + \"    888  d88\\\"\\\"88b d88\\\"\\\"88b 888    888 \" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"d8P  Y8b \" + NEWLINE + \"    888  888  888 888  888 888    888 88888888 \" + NEWLINE + \"    888  Y88.\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \".88P Y88..88P Y88b.  888 Y8b.     \" + NEWLINE + \"    888   \\\"Y88P\\\"   \\\"Y88P\\\"   \\\"Y888 888  \\\"Y8888\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"  \" + NEWLINE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TRAIN_THEME_TOOTIE_LOGO \u003d \"  _____                    _        _            \" + NEWLINE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \" |_   _|   ___     ___    \" + \"| \" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"|_     (_)     ___   \" + NEWLINE + \"   | |    / _ \\\\   / _ \\\\  \" + \" |\" + \"  _|    | |   \" + \" /\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \" -_)  \" + NEWLINE + \"  _|_|_   \\\\___/   \\\\___/   _\\\\__|   _|_|_   \\\\___|  \" + NEWLINE + \"_\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_\" + \"|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"| \" + NEWLINE +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027 \" + NEWLINE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BLOCKY_TOOTIE_LOGO \u003d \"\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\" + \"\\u2557\" + \"  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2588\\u2588\\u2588\" + \"\\u2588\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\" + \"\\u2588\\u2588\" + \"\\u2588\\u2557\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + NEWLINE + \"\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\" + \"\\u2588\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\" + \"\\u2551\\u2588\\u2588\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\" + NEWLINE + \"   \\u2588\" + \"\\u2588\\u2551   \\u2588\\u2588\\u2551\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \" + \"\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\" + \"\\u2588\\u2557\" + NEWLINE + \"   \\u2588\\u2588\\u2551 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"  \\u2588\\u2588\\u2551   \" + \"\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2551   \" + \"\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\" + NEWLINE + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"  \\u2588\" + \"\\u2588\\u2551   \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551   \" + \"\\u2588\\u2588\\u2551\\u2588\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\" + NEWLINE + \"   \\u255a\" + \"\\u2550\\u255d  \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d  \" + \"\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u255d    \\u255a\\u2550\\u255d   \" + \"\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2550\\u255d\" + NEWLINE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SIMPLE_TOOTIE_LOGO \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \" _____           _   _      \" + NEWLINE + \"|_   _|         | | (_)     \" + NEWLINE + \"  | | ___  \" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \" ___ | |_ _  ___ \" + NEWLINE + \"  | |/ _ \\\\ / _ \\\\| __| |/ _ \\\\\" + NEWLINE + \"  | | (_) | (_) | |_| \" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"|  __/\" + NEWLINE + \"  \\\\_/\\\\___/ \\\\___/ \\\\__|_|\\\\___|\" + NEWLINE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // is complete indicator symbols"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TICK_SYMBOL \u003d \"[\\u2713]\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String CROSS_SYMBOL \u003d \"[\\u2717]\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // Emoticons in unicode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SPARKLY_EMOTICON \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"\\u0028\\uff89\\u25d5\\u30ee\\u25d5\\u0029\\uff89\\u002a\\u003a\\uff65\\uff9f\\u2727\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String CONFUSED_EMOTICON \u003d \"\\u0028\\u30fb\\u2227\\u2010\\u0029\\u309e\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HAPPY_EMOTICON \u003d \"\\uff08\\u00b4\\u30fb\\u03c9\\u30fb \\u0060\\uff09\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FLOWER_SMILE_EMOTICON \u003d \"(\\u25e0\\u203f\\u25e0\\u273f)\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FAREWELL_GREETING \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Bye! Hope to see you again soon! \" + FLOWER_SMILE_EMOTICON + NEWLINE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SPARKLY_TEXT_DIVIDER \u003d \"\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2731\\u002a\\u002e\\uff61\\u003a\\uff61\" + \"\\u2731\\u002a\\u002e\\u003a\\uff61\\u2727\\u002a\\u002e\\uff61\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2730\\u002a\\u002e\\u003a\\uff61\\u2727\" + \"\\u002a\\u002e\\uff61\\u003a\\uff61\\u002a\\u002e\\uff61\\u2731\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \" \" + \"\\u2500\\u2500\\u2500\\u2500\\u2500\" + \"\\u2500\\u2500\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELLO_GREETING \u003d \"Hello! I\u0027m Tootie!\" + NEWLINE + \"What can I do for you?\" + NEWLINE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String VERSION \u003d \"Tootie - Version 1.4\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 92
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    protected Date dueDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Deadline(String taskName, Date dueDate) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        super(taskName, false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setBy(dueDate);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setBy(Date dueDate) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void printTaskType() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.print(\"[D]\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void printTaskDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(super.getTaskName() + \" (by: \" + dueDate + \")\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 27
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    protected Date startTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    protected Date endTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Event(String taskName, Date startTime, Date endTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        super(taskName, false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setStartTime(startTime);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setEndTime(endTime);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Date getStartTime() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Date getEndTime() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setStartTime(Date startTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setEndTime(Date endTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void printTaskType() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.print(\"[E]\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void printTaskDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(super.getTaskName() + \" (from: \" + startTime + \" to \" + endTime + \")\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 40
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // is complete indicator symbols"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TICK_SYMBOL \u003d \"[\\u2713]\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String CROSS_SYMBOL \u003d \"[\\u2717]\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private boolean isComplete;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Task(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this(\"no name\", false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Task(String taskName, boolean isComplete) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setTaskName(taskName);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setComplete(isComplete);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setTaskName(String taskName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setComplete(boolean isComplete) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskName(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public boolean isComplete(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return isComplete;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void printTaskType(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"[?]\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void printTaskDescription(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(taskName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void printCompletionIndicator (){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (isComplete) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.print(TICK_SYMBOL + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.print(CROSS_SYMBOL + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 51
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public ToDo(String taskName) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        super(taskName, false);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void printTaskType() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.print(\"[T]\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void printTaskDescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(super.getTaskName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 21
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test ignore comment"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test unrecognised command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "blah"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test todo versions/ error handling"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo t/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo t/clean room"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test deadline versions/ error handling"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline t/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline t/write essay d/31-12-2020"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline t/do project d/30-01-2020 04:55"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test event versions/ error handling"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean house s/31-12-2020 e/31-02-2020"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean house s/12-12-2020 e/31-12-2020"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean room s/01-02-2020 e/31-12-2020 05:45"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean room s/01-02-2020 04:55 e/31-12-2020 05:45"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test done function"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 7"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 30
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "javac -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "java -Dfile.encoding\u003dUTF8 -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "REM compare the output to the expected output USE INTELLIJ INSTEAD FC BAD :("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "echo -------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "echo check output by selecting both files in intellij"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "echo and then right click and find compare files"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "echo or press ctrl + D after selecting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "REM FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 9,
      "-": 17
    }
  }
]
