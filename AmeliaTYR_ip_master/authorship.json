[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "      _____                    _        _            "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     |_   _|   ___     ___    | |_     (_)     ___   "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "       | |    / _ \\   / _ \\   |  _|    | |    / -_)  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "      _|_|_   \\___/   \\___/   _\\__|   _|_|_   \\___|  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    _|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"| "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    \"`-0-0-\u0027\"`-0-0-\u0027\"`-0-0-\u0027\"`-0-0-\u0027\"`-0-0-\u0027\"`-0-0-\u0027 "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Modifications"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Duke name changed to Tootie in honor of Tootie the terrapin"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 14,
      "-": 19
    }
  },
  {
    "path": "data/allTasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Total tasks: 11"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tasks completed: 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Task completion status:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "0 is not done([✗]), 1 is done([✓])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Task types (T,D,E):"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "T is to-do, D is deadline, E is event"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[T][0] clean shoes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][1] do project (by: Thu Jan 30 04:55:00 SGT 2020)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][1] clean kitchen (from: Sat Dec 12 00:00:00 SGT 2020 to Thu Dec 31 00:00:00 SGT 2020)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tasks:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[T][0] clean shoes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][1] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][0] test 1 (from: Fri 31 Jan 2020 05:45 AM to Mon 21 Dec 2020 04:55 AM)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][0] test 2 (from: Sat 11 Jan 2020 05:45 AM to Tue 22 Dec 2020 04:55 AM)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][0] test 3 (from: Fri 24 Apr 2020 05:45 AM to Thu 21 May 2020 04:55 AM)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][0] clean room (from: Thu 31 Dec 2020 12:00 AM to Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] test d1 (by: Wed 23 Dec 2020 04:55 AM)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] test d2 (by: Fri 11 Dec 2020 04:55 AM)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] clean robot (by: Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] test d3 (by: Mon 4 May 2020 04:55 AM)"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 27
    }
  },
  {
    "path": "data/allTasksTemplate.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Total tasks: 3"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tasks completed: 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Task completion status:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "0 is not done([✗]), 1 is done([✓])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Task types (T,D,E):"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "T is to-do, D is deadline, E is event"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[T][0] clean shoes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][1] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tasks:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[T][0] clean shoes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][1] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 19
    }
  },
  {
    "path": "data/temp.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "INFORMATION"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tootie - Version 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "FILE PATHS"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Tootie settings: C:\\Users\\Amelia\\Documents\\GitHub\\ip\\text-ui-test\\data\\tootieSettings.txt"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ All Tasks: C:\\Users\\Amelia\\Documents\\GitHub\\ip\\text-ui-test\\data\\allTasks.txt"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "USER PREFERENCES"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Divider choice: DOUBLE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Username: Ames"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 14
    }
  },
  {
    "path": "data/tootieHistory.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Session: 0"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Session: 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Time Start:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Actions:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Time End:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 8
    }
  },
  {
    "path": "data/tootieSettings.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "INFORMATION"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tootie - Version 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "FILE PATHS"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Tootie settings: C:\\Users\\Amelia\\Documents\\GitHub\\ip\\data\\tootieSettings.txt"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ All Tasks: C:\\Users\\Amelia\\Documents\\GitHub\\ip\\data\\allTasks.txt"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "USER PREFERENCES"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Divider choice: SPARKLY"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Username: Ames"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 14
    }
  },
  {
    "path": "data/tootieSettingsTemplate.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "INFORMATION"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tootie version: 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "FILE PATHS:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Tootie settings: "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ All Tasks:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ User History:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "USER PREFERENCES:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Divider choice: PLAIN"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Username: Amelia"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "USER STATISTICS:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ total sessions:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ total time spent: "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ total tasks completed: "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 22
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Doe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ron John | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 9
    }
  },
  {
    "path": "docs/AmeliaTan.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# John Doe - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "{Describe the target user profile}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 34
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tootie is a task list manager program"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Down the latest version of `Tootie` from [here](https://github.com/AmeliaTYR/ip/releases/tag/v1.1-alpha)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  1. The current version is v1.1-alpha"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* All comments starting with # will be ignored."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* Change your console font to one which supports Unicode for the optimal user experience."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  * For Windows, the instructions are as follows: "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * run \"chcp 65001\" to change to UTF-8"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * right click the bar above your command line app to open properties"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * change the font to NSimSun"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * java -Dfile.encoding\u003dUTF-8 -jar \"absolute ip.jar file path\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 1) Basic CLI commands"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Basic commands to use the program"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Bring up help guide: `help`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Displays a list of commands tootie understands"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Here is the list of commands I understand:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help: displays a list of commands tootie understands"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  help"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filepath: Display file paths of save files"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  filepath"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  filepaths"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Note: The command can be spelled with or without the \u0027s\u0027 at the end"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "save: manually save the list of tasks without closing the program"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  save"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "bye: closes the program"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  bye"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo: add a todo task to the list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  todo t/TASKNAME"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  todo t/clean room"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline: add a task with a deadline to the list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  deadline t/TASKNAME d/DUE_DATE"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  deadline t/write essay d/31-12-2020 04:55"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  deadline t/submit report d/30-10-2020"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event: add a scheduled event task to the list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  event t/TASKNAME s/START_TIME e/END_TIME"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  event t/clean room s/31-12-2020 04:55 e/31-12-2020 05:45"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  event t/clean room s/31-12-2020 e/31-12-2020"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done: marks indicated task done (choose number from list)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  done TASK_INDEX"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  done 1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone: marks indicated task undone (choose number from list)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  undone TASK_INDEX"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  undone 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete: deletes indicated task (choose number from list)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  delete TASK_INDEX"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  delete 1"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list: displays the complete list of tasks entered"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter: filters out tasks from the list according to the parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  filter st/SEARCH_TERM sb/START_BEFORE sa/START_AFTER eb/END_BEFORE"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        ea/END_AFTER db/DUE_BEFORE da/DUE_AFTER tt/TASK_TYPES"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  filter tt/event sb/13-01-2019 ea/31-01-2020"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  filter tt/event todo st/homework"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  filter tt/deadline,todo db/14-04-2020 16:40"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Note: Check user guide for more verbose description"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "username: allows user to set username"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  username USERNAME"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  username Sophia"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider: select a divider for customisation"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  dividers avaliable:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1) SPARKLY ─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "2) PLAIN ----------------------------------------------"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "3) SIMPLE *---*---*---*---*---*---*---*---*---*---*---*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "4) DOUBLE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  divider [DIVIDER_INDEX]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  divider 1"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "-----"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "NOTE: datetime entries can be of the format"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    \"dd-MM-yyyy HH:mm\" with time in 24-Hour format"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    OR \"dd-MM-yyyy\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Display file paths: `filepath` or `filepaths`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Display file paths of save files"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `filepath` or `filepaths`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The command can be spelled with or without the \u0027s\u0027 at the end"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filepath`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filepaths`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filepath"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "The list of saved tasks can be found at:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "C:/Users/Amelia/Documents/GitHub/ip/text-ui-test/data/allTasks.txt"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "The list of saved settings can be found at:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "C:/Users/Amelia/Documents/GitHub/ip/text-ui-test/data/tootieSettings.txt"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "OR"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filepaths"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "The list of saved tasks can be found at:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "C:/Users/Amelia/Documents/GitHub/ip/text-ui-test/data/allTasks.txt"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "The list of saved settings can be found at:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "C:/Users/Amelia/Documents/GitHub/ip/text-ui-test/data/tootieSettings.txt"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Manually save all tasks: `save`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Allows user to manually save all tasks in the list to the save file"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `save`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* It is not necessary to use this function as the list is automatically saved at the end of the program, but the user may do so anyway in case the program was closed accidentally."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`save`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "save"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "All tasks saved!"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Close the program: `bye`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Signals the end of the program use and automatically saves settings and tasks in the task list"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "bye"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Bye Sophia! Hope to see you again soon! (◠‿◠✿)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "All tasks saved."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "All settings saved."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 2) Add Task items"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Add a `todo`, `deadline` or`event` to the list of tasks."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Add a todo: `todo`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Adds a new todo task to the list of tasks."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `todo n/TASKNAME`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TODO_NAME` cannot contain slashes.  "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`todo n/Write the rest of the User Guide`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`todo n/Refactor the User Guide to remove passive voice`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo t/clean turtle tank"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "added todo: clean turtle tank"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Formatting errors caught:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Check todo input formatting!"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo: add a todo task to the list"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  todo t/TASKNAME"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  todo t/clean room"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo t/"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo taskname is empty? (・∧‐)ゞ"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Add a deadline: `deadline`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Adds a new deadline task to the list of tasks."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `deadline t/TASKNAME d/DUE_DATE`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASKNAME` cannot contain slashes.  "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `DUE_DATE` can be of the format \"dd-MM-yyyy HH:mm\" with the time in 24-Hr format or \"dd-MM-yyyy\"."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `DUE_DATE` must be a valid calendar date. "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The parameters can be in any order"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`deadline t/write essay d/31-12-2020 04:55`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`deadline t/submit report d/30-10-2020`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`deadline d/30-10-2020 t/submit report `"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if no time is added the time defaults to 12:00AM"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline t/write essay d/31-12-2020"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "added deadline:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "write essay (by: Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "time entered should be in 24-Hr format"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline t/do project d/30-01-2020 04:55"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "added deadline:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "do project (by: Thu 30 Jan 2020 04:55 AM)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Add an event: `event`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Adds a new scheduled event task to the list of tasks."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `event t/TASKNAME s/START_TIME e/END_TIME`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASKNAME` cannot contain slashes.  "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `START_TIME` and `END_TIME` can be of the format \"dd-MM-yyyy HH:mm\" with the time in 24-Hr format or \"dd-MM-yyyy\"."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `START_TIME` should be before the `END_TIME`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The parameters can be in any order"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`event t/clean room s/31-12-2020 04:55 e/31-12-2020 05:45`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`event t/clean room s/31-12-2020 e/31-12-2020`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`event e/31-12-2020 t/clean room s/31-12-2020`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if no time is added the time defaults to 12:00AM"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean kitchen s/12-12-2020 e/31-12-2020"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "added event:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "clean kitchen (from: Sat 12 Dec 2020 12:00 AM to Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "time entered should be in 24-Hr format"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean shoes s/01-02-2020 e/31-12-2020 05:45"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "added event:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "clean shoes (from: Sat 1 Feb 2020 12:00 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 3) Modify task list"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Mark a task as `done` or `undone`, or `delete` the task from the list."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Mark a task done: `done`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Marks an indicated task done by index"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `done TASK_INDEX`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_INDEX` should be within range of tasks in the list"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    [E][✓] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if the task index is out of bounds this error would appear"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "No such task? (・∧‐)ゞ"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Mark a task undone: `undone`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Marks an indicated task undone by index"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `undone TASK_INDEX`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_INDEX` should be within range of tasks in the list"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`undone 1`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone 5"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Aww... I\u0027ve marked this task undone:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    [D][✗] write essay (by: Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "(╥﹏╥)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if the task index is out of bounds this error would appear"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone 0"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "No such task? (・∧‐)ゞ"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Delete a task: `delete`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Delete a task from the task list by index"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `delete TASK_INDEX`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_INDEX` should be within range of tasks in the list"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Yay! I have deleted this task:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    [D][✓] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if the task index is out of bounds this error would appear"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "No such task? (・∧‐)ゞ"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 4) List view"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "View all tasks in the list, or run a filtered search for specific tasks"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### List all tasks: `list`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Displays all the tasks in the list"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "You have 10 tasks, 9 not done"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. [T][✗] clean shoes"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "2. [D][✗] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "3. [E][✓] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "4. [T][✗] clean turtle tank"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "5. [D][✗] write essay (by: Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "6. [D][✗] do project (by: Thu 30 Jan 2020 04:55 AM)"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "7. [E][✗] clean house (from: Thu 31 Dec 2020 12:00 AM to Fri 5 Feb 2021 12:00 AM)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "8. [E][✗] clean kitchen (from: Sat 12 Dec 2020 12:00 AM to Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "9. [E][✗] clean shoes (from: Sat 1 Feb 2020 12:00 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "10. [E][✗] clean socks (from: Sat 1 Feb 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Filtered search: `filter`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Filters out tasks from the list according to the parameters"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `filter st/SEARCH_TERM sb/START_BEFORE sa/START_AFTER eb/END_BEFORE ea/END_AFTER db/DUE_BEFORE da/DUE_AFTER tt/TASK_TYPES`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The parameters can be in any order."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The command should contain at least one search parameter."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `SEARCH_TERM` cannot contain slashes and is case-sensitive.  "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_TYPES` should not contain slashes, and should contain desired task types, which are `todo`, `deadline` and`event`."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  * If no `TASK_TYPES` parameter is specified, the function will filter for all 3 types."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_TYPES` can be separated by any delimiter of your choice, and may be in any order, and is not case-sensitive. "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  * For example, `tt/event todo`, `tt/TODO,deadline` and `tt/eventdeadline` are all valid."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `START_BEFORE`, `START_AFTER`, `END_BEFORE`, `END_AFTER`, `DUE_BEFORE`, `DUE_AFTER`, are dates and can be of the format \"dd-MM-yyyy HH:mm\" with the time in 24-Hr format or \"dd-MM-yyyy\"."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `START_BEFORE` applies to `Event` tasks and filters for events which start time is before this date."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `START_AFTER` applies to `Event` tasks and filters for events which start time is after this date."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `END_BEFORE` applies to `Event` tasks and filters for events which end time is before this date."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `END_AFTER` applies to `Event` tasks and filters for events which end time is after this date."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `DUE_BEFORE` applies to `Deadline` tasks and filters for deadlines which due date is before this date."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `DUE_AFTER` applies to `Deadline` and filters for deadlines which due date is after this date."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* If the \"before\" dates are after the \"after\" dates, they will be automatically swapped."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filter tt/event sb/13-01-2019 ea/31-01-2020`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filter tt/event todo st/homework`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filter tt/deadline,todo`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filter st/clean`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter tt/event,todo"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. [T][✗] clean shoes"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "2. [E][✓] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "3. [T][✓] clean turtle tank"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "5. [E][✗] clean house (from: Thu 31 Dec 2020 12:00 AM to Fri 5 Feb 2021 12:00 AM)"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "6. [E][✗] clean kitchen (from: Sat 12 Dec 2020 12:00 AM to Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "7. [E][✗] clean shoes (from: Sat 1 Feb 2020 12:00 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "8. [E][✗] clean socks (from: Sat 1 Feb 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Filtered! 7 tasks found, 5 incomplete."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 5) Customisation"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Customise Tootie by changing your username, and the style of line divider used."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Change username: `username`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Change username stored in system"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `username USERNAME`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `USERNAME` may have spaces"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`username Tootie`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "username Sophia"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Hello Sophia!(◠‿◠✿)"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Also the greeting and farewell will change accordingly"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Hello Ames! I\u0027m Tootie!"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Bye Sophia! Hope to see you again soon! (◠‿◠✿)"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Select a new divider: `divider`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Select a divider from the list of dividers for customisation"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  dividers avaliable:"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. SPARKLY ─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. PLAIN ----------------------------------------------"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. SIMPLE *---*---*---*---*---*---*---*---*---*---*---*"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. DOUBLE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `divider DIVIDER_INDEX`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `DIVIDER_INDEX` should be a number from 1 to 4"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`divider 1`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 3"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider changed! (◠‿◠✿)"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "*---*---*---*---*---*---*---*---*---*---*---*"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 2"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "*---*---*---*---*---*---*---*---*---*---*---*"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider changed! (◠‿◠✿)"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "----------------------------------------------"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 4"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "----------------------------------------------"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider changed! (◠‿◠✿)"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 1"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider changed! (◠‿◠✿)"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if the divider index is out of bounds this error would appear"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 6"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider choice not found? (・∧‐)ゞ"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 6) Basic error handling"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "If an unrecognised command is used, Tootie will feedback to the user."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Unrecognised commands"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "blah"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Command not found? (・∧‐)ゞ"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Type \"help\" for a list of commands!"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 7) Set up file paths"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Initial interaction with Tootie to set up allTasks.txt and tootieSettings.txt save locations"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Ask user for allTasks.txt absolute path"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**A**: Copy the allTasks.txt into a folder labelled \"data\" and state the absolute file path when prompted. The saved settings file is automatically generated."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**Q**: How do I find the save files for allTasks.txt and tootieSettings.txt?"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**A**: Use the `filepath` command in the program to retrieve the absolute file paths for both files. \\(Note: they may not be in the same location\\)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**Q**: Can I change the Tootie logo at the start of the program?"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**A**: No. It is randomly decided by the program."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**Q**: Can I modify the saved list of tasks directly?"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**A**: Yes, but ensure number of tasks and number of tasks complete at the top of the file is updated as well."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " Command | Purpose | Syntax"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "---------|---------|-------"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help|Bring up help guide|_help_"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filepath|Display file paths|_filepath_ or _filepaths_ "
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "save|Save all tasks|_save_"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "bye|Close the program|_bye_ "
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo|Add a todo|_todo n/TASKNAME_"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline|Add a deadline|_deadline t/TASKNAME d/DUE_DATE_"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event|Add an event|_event t/TASKNAME s/START_TIME e/END_TIME_"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done|Mark a task done|_done 1_"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone|Mark a task undone|_undone 1_"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete|Delete a task|_delete 1_"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list |List all tasks|_list_"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter|Filtered search|_filter st/SEARCH_TERM sb/START_BEFORE sa/START_AFTER eb/END_BEFORE ea/END_AFTER db/DUE_BEFORE da/DUE_AFTER tt/TASK_TYPES_"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "username|Change username|_username Ames_"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider|Mark a task done|_divider 1_"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 609,
      "-": 13
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tootie is a task list manager program"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Down the latest version of `Duke` from [here](http://link.to/duke)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* All comments starting with # will be ignored."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* Change your console font to one which supports Unicode for the optimal user experience."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 1) Basic CLI commands"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Basic commands to use the program"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Bring up help guide: `help`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Displays a list of commands tootie understands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```no```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Display file paths: `filepath` or `filepaths`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Display file paths of save files"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `filepath` or `filepaths`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The command can be spelled with or without the \u0027s\u0027 at the end"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filepath`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filepaths`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```no```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Manually save all tasks: `save`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Allows user to manually save all tasks in the list to the save file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `save`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* It is not necessary to use this function as the list is automatically saved at the end of the program, but the user may do so anyway in case the program was closed accidentally."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`save`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "save"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "All tasks saved!"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Close the program: `bye`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Signals the end of the program use and automatically saves settings and tasks in the task list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "bye"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Bye Sophia! Hope to see you again soon! (◠‿◠✿)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "All tasks saved."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "All settings saved."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 2) Add Task items"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Add a `todo`, `deadline` or`event` to the list of tasks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Add a todo: `todo`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Adds a new todo task to the list of tasks."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `todo n/TASKNAME`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TODO_NAME` cannot contain slashes.  "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`todo n/Write the rest of the User Guide`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`todo n/Refactor the User Guide to remove passive voice`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo t/clean turtle tank"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "added todo: clean turtle tank"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Formatting errors caught:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Check todo input formatting!"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo: add a todo task to the list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  todo t/TASKNAME"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  todo t/clean room"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo t/"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo taskname is empty? (・∧‐)ゞ"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Add a deadline: `deadline`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Adds a new deadline task to the list of tasks."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `deadline t/TASKNAME d/DUE_DATE`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASKNAME` cannot contain slashes.  "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `DUE_DATE` can be of the format \"dd-MM-yyyy HH:mm\" with the time in 24-Hr format or \"dd-MM-yyyy\"."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `DUE_DATE` must be a valid calendar date. "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The parameters can be in any order"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`deadline t/write essay d/31-12-2020 04:55`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`deadline t/submit report d/30-10-2020`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`deadline d/30-10-2020 t/submit report `"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```no```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Add an event: `event`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Adds a new scheduled event task to the list of tasks."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `event t/TASKNAME s/START_TIME e/END_TIME`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASKNAME` cannot contain slashes.  "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `START_TIME` and `END_TIME` can be of the format \"dd-MM-yyyy HH:mm\" with the time in 24-Hr format or \"dd-MM-yyyy\"."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `START_TIME` should be before the `END_TIME`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The parameters can be in any order"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`event t/clean room s/31-12-2020 04:55 e/31-12-2020 05:45`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`event t/clean room s/31-12-2020 e/31-12-2020`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`event e/31-12-2020 t/clean room s/31-12-2020`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```no```"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 3) Modify task list"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Mark a task as `done` or `undone`, or `delete` the task from the list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Mark a task done: `done`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Marks an indicated task done by index"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `done TASK_INDEX`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_INDEX` should be within range of tasks in the list"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    [E][✓] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if the task index is out of bounds this error would appear"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "No such task? (・∧‐)ゞ"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Mark a task undone: `undone`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Marks an indicated task undone by index"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `undone TASK_INDEX`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_INDEX` should be within range of tasks in the list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`undone 1`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone 5"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Aww... I\u0027ve marked this task undone:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    [D][✗] write essay (by: Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "(╥﹏╥)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if the task index is out of bounds this error would appear"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone 0"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "No such task? (・∧‐)ゞ"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Delete a task: `delete`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Delete a task from the task list by index"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `delete TASK_INDEX`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_INDEX` should be within range of tasks in the list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Yay! I have deleted this task:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    [D][✓] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if the task index is out of bounds this error would appear"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "No such task? (・∧‐)ゞ"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 4) List view"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "View all tasks in the list, or run a filtered search for specific tasks"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### List all tasks: `list`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Displays all the tasks in the list"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "You have 10 tasks, 9 not done"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. [T][✗] clean shoes"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "2. [D][✗] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "3. [E][✓] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "4. [T][✗] clean turtle tank"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "5. [D][✗] write essay (by: Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "6. [D][✗] do project (by: Thu 30 Jan 2020 04:55 AM)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "7. [E][✗] clean house (from: Thu 31 Dec 2020 12:00 AM to Fri 5 Feb 2021 12:00 AM)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "8. [E][✗] clean kitchen (from: Sat 12 Dec 2020 12:00 AM to Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "9. [E][✗] clean shoes (from: Sat 1 Feb 2020 12:00 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "10. [E][✗] clean socks (from: Sat 1 Feb 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Filtered search: `filter`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Filters out tasks from the list according to the parameters"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `filter st/SEARCH_TERM sb/START_BEFORE sa/START_AFTER eb/END_BEFORE ea/END_AFTER db/DUE_BEFORE da/DUE_AFTER tt/TASK_TYPES`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The parameters can be in any order."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The command should contain at least one search parameter."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `SEARCH_TERM` cannot contain slashes and is case-sensitive.  "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_TYPES` should not contain slashes, and should contain desired task types, which are `todo`, `deadline` and`event`."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  * If no `TASK_TYPES` parameter is specified, the function will filter for all 3 types."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_TYPES` can be separated by any delimiter of your choice, and may be in any order, and is not case-sensitive. "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  * For example, `tt/event todo`, `tt/TODO,deadline` and `tt/eventdeadline` are all valid."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `START_BEFORE`, `START_AFTER`, `END_BEFORE`, `END_AFTER`, `DUE_BEFORE`, `DUE_AFTER`, are dates and can be of the format \"dd-MM-yyyy HH:mm\" with the time in 24-Hr format or \"dd-MM-yyyy\"."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `START_BEFORE` applies to `Event` tasks and filters for events which start time is before this date."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `START_AFTER` applies to `Event` tasks and filters for events which start time is after this date."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `END_BEFORE` applies to `Event` tasks and filters for events which end time is before this date."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `END_AFTER` applies to `Event` tasks and filters for events which end time is after this date."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `DUE_BEFORE` applies to `Deadline` tasks and filters for deadlines which due date is before this date."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `DUE_AFTER` applies to `Deadline` and filters for deadlines which due date is after this date."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* If the \"before\" dates are after the \"after\" dates, they will be automatically swapped."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filter tt/event sb/13-01-2019 ea/31-01-2020`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filter tt/event todo st/homework`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filter tt/deadline,todo`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filter st/clean`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```no```"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 5) Customisation"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Customise Tootie by changing your username, and the style of line divider used."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Change username: `username`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Change username stored in system"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `username USERNAME`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `USERNAME` may have spaces"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`username Tootie`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "username Sophia"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Hello Sophia!(◠‿◠✿)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Select a new divider: `divider`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Select a divider from the list of dividers for customisation"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  dividers avaliable:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. SPARKLY ─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. PLAIN ----------------------------------------------"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. SIMPLE *---*---*---*---*---*---*---*---*---*---*---*"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. DOUBLE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `divider DIVIDER_INDEX`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `DIVIDER_INDEX` should be a number from 1 to 4"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`divider 1`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 3"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider changed!(◠‿◠✿)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "*---*---*---*---*---*---*---*---*---*---*---*"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 2"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "*---*---*---*---*---*---*---*---*---*---*---*"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider changed!(◠‿◠✿)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "----------------------------------------------"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 4"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "----------------------------------------------"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider changed!(◠‿◠✿)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 1"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider changed!(◠‿◠✿)"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if the divider index is out of bounds this error would appear"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 6"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider choice not found?(・∧‐)ゞ"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 6) Basic error handling"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "If an unrecognised command is used, Tootie will feedback to the user."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Unrecognised commands"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "blah"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Command not found? (・∧‐)ゞ"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Type \"help\" for a list of commands!"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 7) Set up file paths"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Initial interaction with Tootie to set up allTasks.txt and tootieSettings.txt save locations"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "#### Ask user for allTasks.txt absolute path"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**A**: Copy the allTasks.txt and specific the file path when prompted. The saved settings file is automatically generated."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**Q**: How do I find the save files for allTasks.txt and tootieSettings.txt?"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**A**: Use the `filepath` command in the program to retrieve the absolute file paths for both files. \\(Note: they may not be in the same location\\)"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**Q**: Can I change the Tootie logo at the start of the program?"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**A**: No. It is randomly decided by the program."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " Command | Purpose | Syntax"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "---------|---------|-------"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help|Bring up help guide|_help_"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filepath|Display file paths|_filepath_ or _filepaths_ "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "save|Save all tasks|_save_"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "bye|Close the program|_bye_ "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo|Add a todo|_todo n/TASKNAME_"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline|Add a deadline|_deadline t/TASKNAME d/DUE_DATE_"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event|Add an event|_event t/TASKNAME s/START_TIME e/END_TIME_"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done|Mark a task done|_done 1_"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone|Mark a task undone|_undone 1_"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete|Delete a task|_delete 1_"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list |List all tasks|_list_"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter|Filtered search|_filter st/SEARCH_TERM sb/START_BEFORE sa/START_AFTER eb/END_BEFORE ea/END_AFTER db/DUE_BEFORE da/DUE_AFTER tt/TASK_TYPES_"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "username|Change username|_username Ames_"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider|Mark a task done|_divider_"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 465
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.storage.AllTasksLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.storage.AllTasksSaver;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.storage.SettingsLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.storage.SettingsSaver;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.DividerChoice;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieFilePaths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.tootieFunctions.CommandExecutor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.ui.Printers;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.ui.UserInputHandlers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.parsers.Parsers.parseLineDividerFromString;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.storage.SettingsLoader.addSavedSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Entry point of the Tootie Tasklist application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Scanner to read input from the console **/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** An array containing all tasks the user has input **/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static ArrayList\u003cTask\u003e allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Number of Tasks in the allTasks array **/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static AtomicInteger numTasks \u003d new AtomicInteger(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static AtomicInteger numTasksCompleted \u003d new AtomicInteger(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** settings set to defaults **/"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String tootieSettingsFilePath \u003d TootieFilePaths.DEFAULT_TOOTIE_SETTINGS_FILE_PATH;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String allTasksFilePath \u003d TootieFilePaths.DEFAULT_ALL_TASKS_FILE_PATH;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static DividerChoice dividerChoice \u003d DividerChoice.SPARKLY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String username \u003d \"user\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static ArrayList\u003cString\u003e savedSettings \u003d new ArrayList\u003c\u003e(TootieConstants.NUMBER_OF_SETTINGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        run();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Runs the program until termination.  */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void run() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        saveTasksAndSettings();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Loads saved items, and prints the welcome message.  */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void start() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Printers.printTootieLogo();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Printers.printDivider();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        loadTasksAndSettings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Printers.printHelloMessage(username);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Loads all the saved Tasks and Settings  */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void loadTasksAndSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        addSavedSettings(savedSettings, tootieSettingsFilePath, allTasksFilePath, dividerChoice, username);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SettingsLoader.loadTootieSettingsFile(savedSettings, tootieSettingsFilePath,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasksFilePath, dividerChoice, username);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        updateSettingsVariables(savedSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        AllTasksLoader.loadAllTasksFile(allTasks, SCANNER, allTasksFilePath, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Loads the saved settings variables into the current session"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings list of saved settings parsed from settings file"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void updateSettingsVariables(ArrayList\u003cString\u003e savedSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        tootieSettingsFilePath \u003d savedSettings.get(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasksFilePath \u003d savedSettings.get(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        dividerChoice \u003d parseLineDividerFromString(savedSettings.get(2));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        username \u003d savedSettings.get(3);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Reads user commands until the \"bye\" command is entered */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        CommandType commandType \u003d CommandType.START;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // process commands"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (commandType !\u003d CommandType.BYE) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            userInput \u003d UserInputHandlers.getUserInput(SCANNER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            UserInputHandlers.echoUserInput(userInput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Printers.printDivider();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            commandType \u003d CommandExecutor.extractCommandType(userInput);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            CommandExecutor.executeCommand(savedSettings, commandType, userInput, allTasks, tootieSettingsFilePath, allTasksFilePath, numTasks, numTasksCompleted, username);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // load settings if any were changed"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            updateSettingsVariables(savedSettings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Printers.printDivider();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Saves all the updated list of Tasks and Settings into the .txt files */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void saveTasksAndSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // Save tasks and settings"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            allTasksFilePath \u003d AllTasksSaver.saveAllTasks(allTasks, allTasksFilePath, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"All tasks saved.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            SettingsSaver.saveTootieSettings(tootieSettingsFilePath, allTasksFilePath, username, dividerChoice);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"All settings saved.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Printers.printDivider();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 125,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/constants/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Types of commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    START,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    HELP,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    ADD_TODO,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    ADD_EVENT,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    ADD_DEADLINE,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    MARK_TASK_DONE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    BYE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    SAVE,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    DELETE_TASK,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    MARK_TASK_UNDONE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    CHOOSE_DIVIDER,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    SET_USERNAME,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    FILTER_TASKS,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    PRINT_FILE_PATHS,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    UNRECOGNISED;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 24
    }
  },
  {
    "path": "src/main/java/duke/constants/DividerChoice.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Types of dividers"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public enum DividerChoice {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    SPARKLY,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    PLAIN,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    SIMPLE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    DOUBLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 11
    }
  },
  {
    "path": "src/main/java/duke/constants/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Types of tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    TASK,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    INVALID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 12
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieConstants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Numerical constants used in program"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieConstants {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Number of variations on the Tootie logo  */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final int NUM_LOGOS_AVAILABLE \u003d 4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Number of settings saved  */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final int NUMBER_OF_SETTINGS \u003d 4;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 13
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieErrorMsgs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Error messages to indicate errors"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieErrorMsgs {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Newline object specific to system used  */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** User input wrong format error messages  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TODO_WRONG_FORMAT_MSG \u003d \"Check todo input formatting!\" + NEWLINE + NEWLINE + TootieNormalMsgs.TODO_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEADLINE_WRONG_FORMAT_MSG \u003d \"Check deadline input formatting!\" + NEWLINE + NEWLINE + TootieNormalMsgs.DEADLINE_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DUEDATE_WRONG_FORMAT_MSG \u003d \"Check due date formatting!\" + NEWLINE + NEWLINE + TootieNormalMsgs.DEADLINE_COMMAND_DESCRIPTION + NEWLINE + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE + NEWLINE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String EVENT_WRONG_FORMAT_MSG \u003d \"Check event input formatting!\" + NEWLINE + NEWLINE + TootieNormalMsgs.EVENT_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String STARTDATE_WRONG_FORMAT_MSG \u003d \"Check start date formatting!\" + NEWLINE + NEWLINE + TootieNormalMsgs.EVENT_COMMAND_DESCRIPTION + NEWLINE + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE + NEWLINE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDDATE_WRONG_FORMAT_MSG \u003d \"Check end date formatting!\" + NEWLINE + NEWLINE + TootieNormalMsgs.EVENT_COMMAND_DESCRIPTION + NEWLINE + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE + NEWLINE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Unrecognised command messages  */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String COMMAND_NOT_FOUND_MSG \u003d \"Command not found? \" + TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SUGGEST_HELP_OPTION_MSG \u003d \"Type \\\"help\\\" for a list of commands!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Error messages for invalid dates  */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String INVALID_DUE_DATE_MSG \u003d \"Invalid due date\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String INVALID_START_DATE_MSG \u003d \"Invalid start date\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String INVALID_END_DATE_MSG \u003d \"Invalid end date\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDTIME_BEFORE_STARTIME_ERROR_MSG \u003d \"Error! End time cannot be before start time!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Required field empty error  */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TODO_TASKNAME_EMPTY_MSG \u003d \"todo taskname is empty? \" + TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEADLINE_TASKNAME_EMPTY_MSG \u003d \"deadline taskname is empty? \" + TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String EVENT_TASKNAME_EMPTY_MSG \u003d \"event taskname is empty? \" + TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Error messages for task index out of bounds  */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASK_NOT_FOUND_ERROR_MSG \u003d \"No such task? \" + TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TasklistEmptyMsg \u003d \"No tasks found! \" + TootieSymbols.HAPPY_EMOTICON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 37
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieFileMsgs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Messages formatted to save files"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieFileMsgs {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Newline object specific to system used  */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Instructions header for Tasks save file  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String INDICATOR_INSTRUCTION \u003d \"Task completion status:\" + NEWLINE + \"0 is not done(\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            TootieSymbols.CROSS_SYMBOL + \"), 1 is done(\" + TootieSymbols.TICK_SYMBOL + \")\" + NEWLINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASK_TYPE_INSTRUCTION \u003d \"Task types (T,D,E):\" + NEWLINE +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"T is to-do, D is deadline, E is event\" + NEWLINE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String EXAMPLE_INSTRUCTION \u003d \"Examples:\" + NEWLINE + \"[T][0] clean shoes\" + NEWLINE +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"[D][0] do project (by: Thu 30 Jan 2020 04:55 PM)\" + NEWLINE + \"\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"[E][1] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)\" + NEWLINE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASK_LIST_START \u003d \"--------------------------------------------------------\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            NEWLINE+ \"Tasks:\" + NEWLINE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ALL_TASKS_FILE_INSTRUCTIONS_HEADER \u003d INDICATOR_INSTRUCTION + NEWLINE +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            TASK_TYPE_INSTRUCTION + NEWLINE + EXAMPLE_INSTRUCTION + NEWLINE + TASK_LIST_START;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Instructions header for settomgs save file  */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TOOTIE_SETTINGS_FILE_DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TOOTIE_SETTINGS_FILE_INSTRUCTIONS_HEADER \u003d \"INFORMATION\" + NEWLINE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + TootieSymbols.VERSION + NEWLINE + NEWLINE + TOOTIE_SETTINGS_FILE_DIVIDER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TOOTIE_SETTINGS_FILE_PATHS_FORMAT \u003d \"FILE PATHS\" + NEWLINE + \"+ Tootie settings: %1$s\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + NEWLINE + \"+ All Tasks: %2$s\" + NEWLINE + NEWLINE + TOOTIE_SETTINGS_FILE_DIVIDER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TOOTIE_SETTINGS_USER_PREFERENCES_FORMAT \u003d \"USER PREFERENCES\" + NEWLINE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"+ Divider choice: %1$s\" + NEWLINE + \"+ Username: %2$s\" + NEWLINE + NEWLINE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + TOOTIE_SETTINGS_FILE_DIVIDER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 32
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieFilePaths.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Default file paths for save files"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieFilePaths {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Default path to file for saving tasks  */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEFAULT_ALL_TASKS_FILE_PATH \u003d \"data/allTasks.txt\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Default path to file for saving settings  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEFAULT_TOOTIE_SETTINGS_FILE_PATH \u003d \"data/tootieSettings.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 12
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieInputMarkers.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Special symbols to mark specific strings"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieInputMarkers {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Used to mark off comment lines in the text-ui-test input  */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String INPUT_COMMENT_MARKER \u003d \"#\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Markers to separate user input parameters */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASKNAME_MARKER \u003d \"t/\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String STARTTIME_MARKER \u003d \"s/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDTIME_MARKER \u003d \"e/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DUEDATE_MARKER \u003d \"d/\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 15
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieNormalMsgs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Messages printed to console"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieNormalMsgs {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Newline object specific to system used  */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Help command descriptions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEADLINE_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"deadline: add a task with a deadline to the list\" + NEWLINE + \"  Parameters:  deadline t/TASKNAME \" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    \"d/DUE_DATE\" + NEWLINE + \"  Example:  deadline t/write essay d/31-12-2020 04:55\" + NEWLINE + \"  \" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    \"Example:  deadline t/submit report d/30-10-2020\" + NEWLINE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String EVENT_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"event: add a scheduled event task to the list\" + NEWLINE + \"  Parameters:  event t/TASKNAME s/START_TIME \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"e/END_TIME\" + NEWLINE + \"  Example:  event t/clean room s/31-12-2020 04:55 e/31-12-2020 05:45\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + NEWLINE + \"  Example:  event t/clean room s/31-12-2020 e/31-12-2020\" + NEWLINE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DONE_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"done: marks indicated task done (choose number from list)\" + NEWLINE + \"  Parameters:  done TASK_INDEX\" + NEWLINE  + \"  Example:  done 1\" + NEWLINE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String UNDONE_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"undone: marks indicated task undone (choose number from list)\" + NEWLINE + \"  Parameters:  undone TASK_INDEX\" + NEWLINE  + \"  Example:  undone 1\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + NEWLINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DELETE_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"delete: deletes indicated task (choose number from list)\" + NEWLINE + \"  Parameters:  delete TASK_INDEX\" + NEWLINE  + \"  Example:  delete 1\" + NEWLINE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LIST_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"list: displays the complete list of tasks entered\" + NEWLINE + \"  Example:  list\" + NEWLINE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BYE_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"bye: closes the program\" + NEWLINE + \"  Example:  bye\" + NEWLINE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DATE_FORMAT_MESSAGE \u003d \"NOTE: datetime entries can be of the format\" + NEWLINE + \"    \\\"dd-MM-yyyy \" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"HH:mm\\\" with time in 24-Hour format\" + NEWLINE + \"    OR \\\"dd-MM-yyyy\\\"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TODO_COMMAND_DESCRIPTION \u003d \"todo: add a todo task to the\" + \" list\" + NEWLINE +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"  \" + \"Parameters:  todo t/TASKNAME\" + NEWLINE + \"  Example:  todo t/clean room\" + NEWLINE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELP_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"help: displays a list of commands tootie understands\" + NEWLINE + \"  Example:  help\" + NEWLINE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String USERNAME_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"username: allows user to set username\" + NEWLINE + \"  Parameters:  username USERNAME\" + NEWLINE  + \"  Example:  username Sophia\" + NEWLINE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DIVIDER_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"divider: select a divider for customisation\" + NEWLINE + \"  dividers avaliable:\" + NEWLINE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"1) SPARKLY \" + TootieSymbols.SPARKLY_TEXT_DIVIDER + NEWLINE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"2) PLAIN \" + TootieSymbols.PLAIN_TEXT_DIVIDER + NEWLINE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"3) SIMPLE \" + TootieSymbols.SIMPLE_TEXT_DIVIDER + NEWLINE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"4) DOUBLE \" + TootieSymbols.DOUBLE_TEXT_DIVIDER + NEWLINE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  Parameters:  divider [DIVIDER_INDEX]\" + NEWLINE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  Example:  divider 1\" + NEWLINE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static final String FILEPATH_COMMAND_DESCRIPTION \u003d \"filepath: Display file paths of save files\" + NEWLINE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"  Example:  filepath\" + NEWLINE + \"  Example:  filepaths\" + NEWLINE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"  Note: The command can be spelled with or without the \u0027s\u0027 at the end\" + NEWLINE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static final String FILTER_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"filter: filters out tasks from the list according to the parameters\" + NEWLINE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  Parameters:  filter st/SEARCH_TERM sb/START_BEFORE sa/START_AFTER eb/END_BEFORE\" + NEWLINE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"        ea/END_AFTER db/DUE_BEFORE da/DUE_AFTER tt/TASK_TYPES\" + NEWLINE"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  Example:  filter tt/event sb/13-01-2019 ea/31-01-2020\" + NEWLINE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  Example:  filter tt/event todo st/homework\" + NEWLINE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  Example:  filter tt/deadline,todo db/14-04-2020 16:40\" + NEWLINE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  Note: Check user guide for more verbose description\"  + NEWLINE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static final String SAVE_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"save: manually save the list of tasks without closing the program\" + NEWLINE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  Example:  save\"  + NEWLINE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELP_COMMAND_TEXT \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            HELP_COMMAND_DESCRIPTION + NEWLINE + FILEPATH_COMMAND_DESCRIPTION + NEWLINE"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + SAVE_COMMAND_DESCRIPTION + NEWLINE + BYE_COMMAND_DESCRIPTION + NEWLINE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + TODO_COMMAND_DESCRIPTION + NEWLINE + DEADLINE_COMMAND_DESCRIPTION + NEWLINE"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + EVENT_COMMAND_DESCRIPTION + NEWLINE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + DONE_COMMAND_DESCRIPTION + NEWLINE + UNDONE_COMMAND_DESCRIPTION + NEWLINE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + DELETE_COMMAND_DESCRIPTION+ NEWLINE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + LIST_COMMAND_DESCRIPTION + NEWLINE + FILTER_COMMAND_DESCRIPTION + NEWLINE"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + USERNAME_COMMAND_DESCRIPTION + NEWLINE + DIVIDER_COMMAND_DESCRIPTION + NEWLINE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"-----\" + NEWLINE + DATE_FORMAT_MESSAGE + NEWLINE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELP_INFO_MSG \u003d \"Here is the list of commands I understand:\" + NEWLINE + NEWLINE"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + HELP_COMMAND_TEXT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Greetings  */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FAREWELL_GREETING \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Bye %1$s! Hope to see you again soon! \" + TootieSymbols.FLOWER_SMILE_EMOTICON + NEWLINE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELLO_GREETING \u003d \"Hello %1$s! I\u0027m Tootie!\" + NEWLINE + \"What can I do for you?\" + NEWLINE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Task modification response messages */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASK_MARKED_DONE_RESPONSE_MSG \u003d \"Nice! I\u0027ve marked this task as done:\" + NEWLINE +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"    %1$s\" + TootieSymbols.TICK_SYMBOL + \" %2$s\" + NEWLINE + TootieSymbols.SPARKLY_EMOTICON;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASK_MARKED_UNDONE_RESPONSE_MSG \u003d \"Aww... I\u0027ve marked this task undone:\" + NEWLINE +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"    %1$s\" + TootieSymbols.CROSS_SYMBOL + \" %2$s\" + NEWLINE + TootieSymbols.SAD_EMOTICON;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASK_DELETED_RESPONSE_MSG \u003d \"Yay! I have deleted this task:\" + NEWLINE +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"    \" + \"%1$s%2$s %3$s\" + NEWLINE + TootieSymbols.SPARKLY_EMOTICON;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Message formats  */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LIST_TASK_FORMAT \u003d \"%1$d. %2$s%3$s %4$s\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ADDED_EVENT_FORMAT \u003d \"added event:\" + NEWLINE + \"%1$s\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ADDED_DEADLINE_FORMAT \u003d \"added deadline:\" + NEWLINE + \"%1$s\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ADDED_TODO_FORMAT \u003d \"added todo: \" + \"%1$s\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LOGO_PRINT_FORMAT \u003d \"Hello from\" + NEWLINE + \"%1$s\" + NEWLINE + TootieSymbols.VERSION;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NUMTASKS_PRINT_FORMAT \u003d \"You have %1$d task%2$s, %3$s not done\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASKS_ALL_DONE_MSG \u003d \"all done \" + TootieSymbols.BEAR_EMOTICON;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 94
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieRegex.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Regex strings used for comparison and format checking"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieRegex {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Regex to detect a blank line */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BLANK_STRING_REGEX \u003d \"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Regex for date formats */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DATE_WITHOUT_TIME_REGEX \u003d \"([0-9]{2})-([0-9]{2})-([0-9]{4})\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DATE_WITH_TIME_REGEX \u003d \"([0-9]{2})-([0-9]{2})-([0-9]{4}) ([0-9]{2}):([0-9]{2})\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 13
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieSymbols.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Class containing version number, logos, divider and emoticon ascii art"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieSymbols {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Newline object specific to system used  */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Different versions of the Tootie logo  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String THICK_TOOTIE_LOGO \u003d \"88888888888                888    d8b\" + NEWLINE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"    888                    \" + \"888\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"    Y8P\" + NEWLINE + \"    888                    888\" + NEWLINE + \"    \" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"888   .d88b.   .d88b.  888888 888  .d88b.\" + NEWLINE + \"    888  d88\\\"\\\"88b d88\\\"\\\"88b 888    888 \" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"d8P  Y8b\" + NEWLINE + \"    888  888  888 888  888 888    888 88888888\" + NEWLINE + \"    888  Y88.\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \".88P Y88..88P Y88b.  888 Y8b.\" + NEWLINE + \"    888   \\\"Y88P\\\"   \\\"Y88P\\\"   \\\"Y888 888  \\\"Y8888\" + NEWLINE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TRAIN_THEME_TOOTIE_LOGO \u003d \"  _____                    _        _\" + NEWLINE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \" |_   _|   ___     ___    \" + \"| \" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"|_     (_)     ___\" + NEWLINE + \"   | |    / _ \\\\   / _ \\\\  \" + \" |\" + \"  _|    | |   \" + \" /\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \" -_)\" + NEWLINE + \"  _|_|_   \\\\___/   \\\\___/   _\\\\__|   _|_|_   \\\\___|\" + NEWLINE + \"_\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_\" + \"|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|\" + NEWLINE +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\" + NEWLINE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BLOCKY_TOOTIE_LOGO \u003d \"\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\" + \"\\u2557\" + \"  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2588\\u2588\\u2588\" + \"\\u2588\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\" + \"\\u2588\\u2588\" + \"\\u2588\\u2557\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + NEWLINE + \"\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\" + \"\\u2588\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\" + \"\\u2551\\u2588\\u2588\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\" + NEWLINE + \"   \\u2588\" + \"\\u2588\\u2551   \\u2588\\u2588\\u2551\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \" + \"\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\" + \"\\u2588\\u2557\" + NEWLINE + \"   \\u2588\\u2588\\u2551 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"  \\u2588\\u2588\\u2551   \" + \"\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2551   \" + \"\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\" + NEWLINE + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"  \\u2588\" + \"\\u2588\\u2551   \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551   \" + \"\\u2588\\u2588\\u2551\\u2588\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\" + NEWLINE + \"   \\u255a\" + \"\\u2550\\u255d  \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d  \" + \"\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u255d    \\u255a\\u2550\\u255d   \" + \"\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2550\\u255d\" + NEWLINE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SIMPLE_TOOTIE_LOGO \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \" _____           _   _      \" + NEWLINE + \"|_   _|         | | (_)     \" + NEWLINE + \"  | | ___  \" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \" ___ | |_ _  ___ \" + NEWLINE + \"  | |/ _ \\\\ / _ \\\\| __| |/ _ \\\\\" + NEWLINE + \"  | | (_) | (_) | |_| \" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"|  __/\" + NEWLINE + \"  \\\\_/\\\\___/ \\\\___/ \\\\__|_|\\\\___|\" + NEWLINE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Task completion indication symbols  */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TICK_SYMBOL \u003d \"[\\u2713]\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String CROSS_SYMBOL \u003d \"[\\u2717]\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Emoticons in unicode  */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SPARKLY_EMOTICON \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"\\u0028\\uff89\\u25d5\\u30ee\\u25d5\\u0029\\uff89\\u002a\\u003a\\uff65\\uff9f\\u2727\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String CONFUSED_EMOTICON \u003d \"\\u0028\\u30fb\\u2227\\u2010\\u0029\\u309e\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HAPPY_EMOTICON \u003d \"\\uff08\\u00b4\\u30fb\\u03c9\\u30fb \\u0060\\uff09\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FLOWER_SMILE_EMOTICON \u003d \"(\\u25e0\\u203f\\u25e0\\u273f)\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ANGRY_EMOTICON \u003d \"\\u005b\\u25cb\\uff65\\uff40\\u0414\\u00b4\\uff65\\u25cb\\u005d\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SAD_EMOTICON \u003d \"\\u0028\\u2565\\ufe4f\\u2565\\u0029\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BEAR_EMOTICON \u003d \"\\u0295\\u2022\\u1d25\\u2022\\u0294\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Line divider options  */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SPARKLY_TEXT_DIVIDER \u003d \"\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2731\\u002a\\u002e\\uff61\\u003a\\uff61\" + \"\\u2731\\u002a\\u002e\\u003a\\uff61\\u2727\\u002a\\u002e\\uff61\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2730\\u002a\\u002e\\u003a\\uff61\\u2727\" + \"\\u002a\\u002e\\uff61\\u003a\\uff61\\u002a\\u002e\\uff61\\u2731\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \" \" + \"\\u2500\\u2500\\u2500\\u2500\\u2500\" + \"\\u2500\\u2500\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String PLAIN_TEXT_DIVIDER \u003d \"----------------------------------------------\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DOUBLE_TEXT_DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SIMPLE_TEXT_DIVIDER \u003d \"*---*---*---*---*---*---*---*---*---*---*---*\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Version info of the program. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String VERSION \u003d \"Tootie - Version 1.5\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 71
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DateAfterPreceedsDateBefore.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DateAfterPreceedsDateBefore extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DateBeforeMatchesAfterException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DateBeforeMatchesAfterException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DeadlineInputWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DeadlineInputWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DividerNonexistantException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DividerNonexistantException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DueDateWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DueDateWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EndTimeBeforeStartTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class EndTimeBeforeStartTimeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EndTimeWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class EndTimeWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EventInputWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class EventInputWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/FileEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FileEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/FilePathInvalidException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FilePathInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class InvalidDateException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidDueDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class InvalidDueDateException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidEndTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class InvalidEndTimeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidStartTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class InvalidStartTimeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/MissingFilterOptionsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class MissingFilterOptionsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/MissingParamsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class MissingParamsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/NoTasksFilteredException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class NoTasksFilteredException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/SavedTaskFormatWrongException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class SavedTaskFormatWrongException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/SettingObjectWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class SettingObjectWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/StartTimeWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class StartTimeWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TaskNameEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TaskNameEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TaskNonexistantException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TaskNonexistantException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 5
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TaskTypeInvalidException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TaskTypeInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TasklistEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TasklistEmptyException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ToDoInputWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class ToDoInputWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TotalTasksNumInvalidException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TotalTasksNumInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/UsernameCommandInvalidException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class UsernameCommandInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/UsernameEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class UsernameEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/parsers/Parsers.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.DividerChoice;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Parse information from user inputs and file lines"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Parsers {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parse the dividerChoice enum from the string read from file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dividerChoiceString file line containing saved divider choice"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the DividerChoice enum from a given string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static DividerChoice parseDividerChoice(String dividerChoiceString) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (dividerChoiceString) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case \"SPARKLY\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return DividerChoice.SPARKLY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case \"SIMPLE\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return DividerChoice.SIMPLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case \"DOUBLE\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return DividerChoice.DOUBLE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return DividerChoice.PLAIN;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Extract the value string from line in settings save file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileLine    a line read from the file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param objectTitle the string indicating the type of object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return returns the setting extracted from line in the settings file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws SettingObjectWrongFormatException the linel in the settings file was wrongly formatted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String parseFileObject(String fileLine, String objectTitle) throws SettingObjectWrongFormatException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int settingTitleLength \u003d objectTitle.length();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileObject;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // identify placements"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int settingObjectPosition \u003d fileLine.indexOf(objectTitle);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if placement is correct"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (settingObjectPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new SettingObjectWrongFormatException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                fileObject \u003d fileLine.substring(settingObjectPosition + settingTitleLength).trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new SettingObjectWrongFormatException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileObject;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parses the default date format and returns a Date object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param unformattedDate the string containing an unformatted date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return the date object extracted from the unformatted date"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date parseComplexDate(String unformattedDate) throws InvalidDateException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date formattedDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SimpleDateFormat complexDateFormat \u003d new SimpleDateFormat(\"EEE MMM d HH:mm:ss zzz yyyy\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            complexDateFormat.setLenient(false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            formattedDate \u003d complexDateFormat.parse(unformattedDate.trim());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return formattedDate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parses the default date format and returns a Date object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param unformattedDate a string containing a date object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return date object parsed from the string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidDateException date detected was invalid"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date parseSimpleDate(String unformattedDate) throws InvalidDateException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date formattedDate;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"EEE d MMM yyyy hh:mm aa\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            simpleDateFormat.setLenient(false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            formattedDate \u003d simpleDateFormat.parse(unformattedDate.trim());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return formattedDate;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Extract the desired line divider from user input command"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input command"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return DividerChoice extracted from the user input"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws DividerNonexistantException an invalid divider choice was indicated"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static DividerChoice parseLineDividerFromUserInput(String userInput) throws DividerNonexistantException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int dividerIndex;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        DividerChoice newDividerChoice \u003d DividerChoice.SPARKLY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dividerIndex \u003d Integer.parseInt(userInput.replaceAll(\"[\\\\D]\", \"\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (dividerIndex \u003e 5 || dividerIndex \u003c 1) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new DividerNonexistantException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new DividerNonexistantException();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (dividerIndex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.SPARKLY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.PLAIN;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.SIMPLE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.DOUBLE;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return newDividerChoice;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Extract the desired line divider from string"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileLine raw line read from file"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the DividerChoice enum extracted from the file"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static DividerChoice parseLineDividerFromString(String fileLine) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        DividerChoice newDividerChoice;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (fileLine) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case \"PLAIN\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.PLAIN;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case \"SIMPLE\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.SIMPLE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.SPARKLY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return newDividerChoice;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * parse the date if time is not included in input"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param unformattedDate a string containing date information"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the date object extracted"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date parseDateWithoutTime(String unformattedDate) throws InvalidDateException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date formattedDate;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SimpleDateFormat dateWithoutTime \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dateWithoutTime.setLenient(false);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            formattedDate \u003d dateWithoutTime.parse(unformattedDate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return formattedDate;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parse the date if time is included in input"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param unformattedDate a string containing date information"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the date object extracted"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date parseDateWithTime(String unformattedDate) throws InvalidDateException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date formattedDate;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SimpleDateFormat dateWithTime \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dateWithTime.setLenient(false);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            formattedDate \u003d dateWithTime.parse(unformattedDate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return formattedDate;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Replace \u0027\\\u0027 with \u0027/\u0027 characters in file paths variables"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param path a file path with illegal characters"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the path without illegal characters"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String pathReplaceIllegalCharacters(String path) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return path.replace(\u0027\\\\\u0027, \u0027/\u0027);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void parseDoubleCharacterTaggedParamsFromUserInput(String userInput,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                                                     HashMap\u003cString, String\u003e filterOptions)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws MissingFilterOptionsException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String parsedOption;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String optionIndicator;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int startPositionIndex \u003d 0;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int endPositionIndex \u003d 0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // clear filter options"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        filterOptions.clear();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!userInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingFilterOptionsException();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (userInput.indexOf(\"/\", startPositionIndex) !\u003d -1) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // identify placement"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startPositionIndex \u003d userInput.indexOf(\"/\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endPositionIndex \u003d userInput.indexOf(\"/\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // if reached end of string"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (endPositionIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // extract the option"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedOption \u003d userInput.substring(startPositionIndex + 1, endPositionIndex - 2);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            optionIndicator \u003d userInput.substring(startPositionIndex - 2, startPositionIndex);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // store the option"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            filterOptions.put(optionIndicator, parsedOption);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // extract the option"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedOption \u003d userInput.substring(startPositionIndex + 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        optionIndicator \u003d userInput.substring(startPositionIndex - 2, startPositionIndex);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // store the option"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        filterOptions.put(optionIndicator, parsedOption);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parse parameters"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput    line read from the console"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param parsedParams parameters parsed from the line"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws MissingParamsException line has no missing parameters"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void parseSingleCharacterTaggedParamsFromUserInput(String userInput,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                                                     HashMap\u003cString, String\u003e parsedParams)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws MissingParamsException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String parsedOption;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String optionIndicator;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int startPositionIndex \u003d 0;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int endPositionIndex \u003d 0;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // clear filter options"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedParams.clear();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!userInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingParamsException();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (userInput.indexOf(\"/\", startPositionIndex) !\u003d -1) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // identify placement"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startPositionIndex \u003d userInput.indexOf(\"/\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endPositionIndex \u003d userInput.indexOf(\"/\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // if reached end of string"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (endPositionIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // extract the option"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedOption \u003d userInput.substring(startPositionIndex + 1, endPositionIndex - 1);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            optionIndicator \u003d userInput.substring(startPositionIndex - 1, startPositionIndex);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // store the option"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedParams.put(optionIndicator, parsedOption);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // extract the option"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedOption \u003d userInput.substring(startPositionIndex + 1);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        optionIndicator \u003d userInput.substring(startPositionIndex - 1, startPositionIndex);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // store the option"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedParams.put(optionIndicator, parsedOption);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parses the string to return number of tasks as an int"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param totalTasks line containing total tasks in the save file"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return number of tasks in the save file"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TotalTasksNumInvalidException number of tasks cannot be parsed"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static int getNumTasks(String totalTasks) throws TotalTasksNumInvalidException {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"Total tasks: (\\\\d+)\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(totalTasks);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                return Integer.parseInt(matcher.group(1));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new TotalTasksNumInvalidException();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TotalTasksNumInvalidException();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Checks the task type for each task in the allTasks.txt file"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileInput line read from the file containing a saved task"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return task type detected"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static TaskType getTaskType(String fileInput) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (fileInput.trim().startsWith(\"[T]\")){"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return TaskType.TODO;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (fileInput.trim().startsWith(\"[D]\")){"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return TaskType.DEADLINE;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (fileInput.trim().startsWith(\"[E]\")){"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return TaskType.EVENT;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return TaskType.INVALID;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 329
    }
  },
  {
    "path": "src/main/java/duke/storage/AllTasksLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieFilePaths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieInputMarkers;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieRegex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieSymbols;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.FileEmptyException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidDateException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidDueDateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidEndTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidStartTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.SavedTaskFormatWrongException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TaskTypeInvalidException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TotalTasksNumInvalidException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.parsers.Parsers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.ui.Printers;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.ui.UserInputHandlers;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class AllTasksLoader {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public AllTasksLoader() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Search for the allTasks.txt file and try to load it"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param SCANNER           scanner to read from the console"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath  file path for the allTasks.txt file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted total number of tasks in the list completed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void loadAllTasksFile(ArrayList\u003cTask\u003e allTasks, Scanner SCANNER, String allTasksFilePath, AtomicInteger numTasks, AtomicInteger numTasksCompleted) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isFileNotRead \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Scanner allTasksFileScanner;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Loading allTasks.txt save file...\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (isFileNotRead){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                File allTasksFile \u003d fileFunctions.getFileFromFilePath(allTasksFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                fileFunctions.checkFileExists(allTasksFile);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasksFileScanner \u003d new Scanner(allTasksFile);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                readAllTasksFile(allTasks, allTasksFileScanner, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                isFileNotRead \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Save file not found? \" + TootieSymbols.CONFUSED_EMOTICON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                boolean isNewFilePathObtained \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                while (!isNewFilePathObtained) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    ArrayList\u003cString\u003e allTasksFilePathReturn \u003d new ArrayList\u003c\u003e(1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    isNewFilePathObtained \u003d getNewAllTasksFilePath(SCANNER, allTasksFilePathReturn);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    allTasksFilePath \u003d allTasksFilePathReturn.get(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    Printers.printDivider();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (FileEmptyException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Save file empty? \" + TootieSymbols.CONFUSED_EMOTICON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                isFileNotRead \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Get a new file path from user"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param SCANNER                scanner to read lines from the console"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePathReturn file path for the allTasks.txt file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return true if a new file path for the allTasks.txt file was obtained"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static boolean getNewAllTasksFilePath(Scanner SCANNER, ArrayList\u003cString\u003e allTasksFilePathReturn) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String path \u003d \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Options:\" + NEWLINE + \"(1)Find existing file\" + NEWLINE +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                \"(2)Manually create directory for file\" + NEWLINE + \"(3)Automatically create directory and file\" +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                NEWLINE + \"(type \\\"1\\\" \\\"2\\\" or \\\"3\\\")\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String response \u003d UserInputHandlers.getUserInput(SCANNER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        UserInputHandlers.echoUserInput(response);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (response.trim().equals(\"1\")){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Enter the full path to existing file: \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            path \u003d UserInputHandlers.getUserInput(SCANNER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (response.equals(\"2\")){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // make new file"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Enter the path to new directory location: \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            path \u003d UserInputHandlers.getUserInput(SCANNER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (path.endsWith(\"/\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                path \u003d path + \"data\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                path \u003d path + \"/data\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //Creating a File object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //Creating the directory"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isFileCreated \u003d file.mkdir();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if(isFileCreated){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Directory created successfully \" + TootieSymbols.HAPPY_EMOTICON);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                path \u003d path + \"/allTasks.txt\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Sorry, could not create specified directory\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (response.equals(\"3\")){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Automatically creating directory and file\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            path \u003d fileFunctions.autoCreateNewFile(TootieFilePaths.DEFAULT_ALL_TASKS_FILE_PATH);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(path + TootieSymbols.CONFUSED_EMOTICON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Response not recognised? \" + TootieSymbols.CONFUSED_EMOTICON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        path \u003d Parsers.pathReplaceIllegalCharacters(path);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasksFilePathReturn.add(0, path);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if the file path is valid"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File allTasksFile \u003d fileFunctions.getFileFromFilePath(path);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileFunctions.checkFileExists(allTasksFile);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"File not found uwu \" + path);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Try to read the allTasks.txt file into allTasks array"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks            complete list of all tasks"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFileScanner scanner to read lines from teh allTasks.txt file"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks            total number of tasks in the list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted   total number of tasks in the list completed"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws FileEmptyException file found was empty"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void readAllTasksFile(ArrayList\u003cTask\u003e allTasks,Scanner allTasksFileScanner, AtomicInteger numTasks, AtomicInteger numTasksCompleted) throws FileEmptyException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // get total number of tasks stored"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            int numTasksInList;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numTasksInList \u003d getNumTasksInList(allTasksFileScanner);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            SettingsLoader.readFileUntilLineContainsString(\"Tasks:\", allTasksFileScanner);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            addReadTasksToAllTasks(allTasks, allTasksFileScanner, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.printf(\"%1$d of %2$d tasks read successfully!%n\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    numTasks.get(), numTasksInList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Read each task and add to the allTasks arraylist"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all takss"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param FILE_SCANNER      scanner to read lines from the file"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted number of tasks in the list completed"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void addReadTasksToAllTasks(ArrayList\u003cTask\u003e allTasks, Scanner FILE_SCANNER, AtomicInteger numTasks, AtomicInteger numTasksCompleted) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (FILE_SCANNER.hasNext()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String fileInput \u003d getFileNextLine(FILE_SCANNER);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                addTaskToAllTasksArrayList(allTasks,fileInput, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TaskTypeInvalidException | SavedTaskFormatWrongException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.printf(\"Error reading file! Error on line:\" + NEWLINE + \"%1$s%n\", fileInput);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidStartTimeException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.printf(\"Error reading start time from line:\" + NEWLINE + \"  %1$s%n\", fileInput);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDueDateException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.printf(\"Error reading due date from line:\" + NEWLINE + \"  %1$s%n\", fileInput);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidEndTimeException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.printf(\"Error reading end time from line:\" + NEWLINE + \"  %1$s%n\", fileInput);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Gets the number of tasks recorded in the allTasks.txt file from the header"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param FILE_SCANNER scanner to read lines from the file"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return number of tasks in the list as read from the file"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws FileEmptyException file found was empty"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static int getNumTasksInList(Scanner FILE_SCANNER) throws FileEmptyException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int numTasksInList \u003d 0;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (FILE_SCANNER.hasNext()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String totalTasks \u003d getFileNextLine(FILE_SCANNER);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                numTasksInList \u003d Parsers.getNumTasks(totalTasks);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TotalTasksNumInvalidException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"File header invalid!\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new FileEmptyException();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return numTasksInList;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parses lines from the allTasks.txt file and adds the corresponding task to the allTasks ArrayList"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          complete list of all tasks"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileInput         line read from the file"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted number of tasks in the list completed"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskTypeInvalidException      task saved in the save file has an invalid Task type"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws SavedTaskFormatWrongException task saved in the save file was wrongly formatted"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidDueDateException       due date of a deadline task was invalid"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidEndTimeException       end time of an event task is invalid"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidStartTimeException     start time of an event task is invalid"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void addTaskToAllTasksArrayList(ArrayList\u003cTask\u003e allTasks, String fileInput, AtomicInteger numTasks, AtomicInteger numTasksCompleted) throws TaskTypeInvalidException, SavedTaskFormatWrongException, InvalidDueDateException, InvalidEndTimeException, InvalidStartTimeException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        TaskType taskType \u003d Parsers.getTaskType(fileInput);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            addToDoToList(allTasks, fileInput, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            addDeadlineToList(allTasks, fileInput, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            addEventToList(allTasks, fileInput, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TaskTypeInvalidException();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Adds a ToDo task read from the file to the allTasks ArrayList"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all tasks"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileInput         line read from the file"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted number of tasks completed"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws SavedTaskFormatWrongException due date of a deadline task was invalid"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void addToDoToList(ArrayList\u003cTask\u003e allTasks, String fileInput, AtomicInteger numTasks, AtomicInteger numTasksCompleted) throws SavedTaskFormatWrongException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"\\\\[T\\\\]\\\\[([0-1])\\\\](.*)\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(fileInput);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            allTasks.add(new ToDo(matcher.group(2).trim()));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if(matcher.group(1).equals(\"1\")){"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(numTasks.get()).setComplete(true);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                numTasksCompleted.getAndIncrement();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numTasks.getAndIncrement();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new SavedTaskFormatWrongException();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Adds a Deadline task read from the file to the allTasks ArrayList"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all tasks"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileInput         line read from the file"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted number of tasks completed"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws SavedTaskFormatWrongException saved task in the list is of the wrong format"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidDueDateException       due date of deadline task was wrong format"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void addDeadlineToList(ArrayList\u003cTask\u003e allTasks, String fileInput, AtomicInteger numTasks, AtomicInteger numTasksCompleted) throws SavedTaskFormatWrongException, InvalidDueDateException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"\\\\[D\\\\]\\\\[([0-1])\\\\](.*)\\\\(by:(.*)\\\\)\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(fileInput);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Date dueDate;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dueDate \u003d Parsers.parseSimpleDate(matcher.group(3).trim());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new InvalidDueDateException();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            allTasks.add(new Deadline(matcher.group(2).trim(),dueDate));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if(matcher.group(1).equals(\"1\")){"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(numTasks.get()).setComplete(true);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                numTasksCompleted.getAndIncrement();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numTasks.getAndIncrement();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new SavedTaskFormatWrongException();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Adds a Event task read from the file to the allTasks ArrayList"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all tasks"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileInput         line read from the file"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted number of tasks completed"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws SavedTaskFormatWrongException saved task in the list is of the wrong format"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidStartTimeException     start time of an event task is invalid"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidEndTimeException       end time of an event task is invalid"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void addEventToList(ArrayList\u003cTask\u003e allTasks, String fileInput, AtomicInteger numTasks, AtomicInteger numTasksCompleted) throws SavedTaskFormatWrongException, InvalidStartTimeException, InvalidEndTimeException {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"\\\\[E\\\\]\\\\[([0-1])\\\\](.*)\\\\(from:(.*)to(.*)\\\\)\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(fileInput);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Date startDate;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                startDate \u003d Parsers.parseSimpleDate(matcher.group(3).trim());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new InvalidStartTimeException();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Date endDate;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                endDate \u003d Parsers.parseSimpleDate(matcher.group(4).trim());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new InvalidEndTimeException();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            allTasks.add(new Event(matcher.group(2).trim(), startDate, endDate));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if(matcher.group(1).equals(\"1\")){"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(numTasks.get()).setComplete(true);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                numTasksCompleted.getAndIncrement();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numTasks.getAndIncrement();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new SavedTaskFormatWrongException();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Read non-blank lines of the file"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param FILE_SCANNER scanner to read through lines in the file"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return a non blank line read from the file"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String getFileNextLine(Scanner FILE_SCANNER) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileInput;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileInput \u003d FILE_SCANNER.nextLine();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } while (fileInput.matches(TootieRegex.BLANK_STRING_REGEX)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                || fileInput.startsWith(TootieInputMarkers.INPUT_COMMENT_MARKER));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileInput;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 355
    }
  },
  {
    "path": "src/main/java/duke/storage/AllTasksSaver.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieFileMsgs;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class AllTasksSaver {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public AllTasksSaver() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // saves all tasks from the allTasks ArrayList to the allTasks.txt file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String saveAllTasks(ArrayList\u003cTask\u003e allTasks, String allTasksFilePath, AtomicInteger numTasks, AtomicInteger numTasksCompleted) throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File allTasksFile \u003d new File(allTasksFilePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"EEE d MMM yyyy hh:mm aa\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (allTasksFile.createNewFile()){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"New file created: \" + allTasksFile.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // clear the file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        new FileWriter(allTasksFilePath, false).close();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // write file header"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(String.format(\"Total tasks: %1$d\", numTasks.get()), allTasksFilePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(NEWLINE, allTasksFilePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(String.format(\"Tasks completed: %1$d\", numTasksCompleted.get()), allTasksFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.writeDoubleNewlineToFile(allTasksFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(TootieFileMsgs.ALL_TASKS_FILE_INSTRUCTIONS_HEADER, allTasksFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String printOut \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (int i \u003d 0; i \u003c numTasks.get(); i++){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (allTasks.get(i) instanceof ToDo) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                printOut \u003d \"[T][\" + ((allTasks.get(i).getComplete()) ? 1 : 0) + \"] \" + allTasks.get(i).getTaskName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (allTasks.get(i) instanceof Deadline) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                printOut \u003d \"[D][\" + ((allTasks.get(i).getComplete()) ? 1 : 0) + \"] \" + allTasks.get(i).getTaskName() +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                        \" (by: \" + dateFormat.format(((Deadline) allTasks.get(i)).getDueDate()) + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (allTasks.get(i) instanceof Event) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                printOut \u003d \"[E][\" + ((allTasks.get(i).getComplete()) ? 1 : 0) + \"] \" + allTasks.get(i).getTaskName() +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                        \" (from: \" + dateFormat.format(((Event) allTasks.get(i)).getStartTime()) + \" to \" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                        dateFormat.format(((Event) allTasks.get(i)).getEndTime()) + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileFunctions.appendsStringToFile(printOut,allTasksFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileFunctions.appendsStringToFile(NEWLINE, allTasksFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return allTasksFile.getAbsolutePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 61
    }
  },
  {
    "path": "src/main/java/duke/storage/SettingsLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.FileEmptyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.SettingObjectWrongFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.DividerChoice;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieFilePaths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.parsers.Parsers;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.storage.AllTasksLoader.getFileNextLine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.ui.Printers.changeDivider;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class SettingsLoader {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public SettingsLoader() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Attempts to load and store the tootieSettings.txt variables"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings          array of saved settings"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tootieSettingsFilePath file path to the settings save file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath       file path to the save file for all tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dividerChoice          divider chosen by user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username               user input name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void loadTootieSettingsFile(ArrayList\u003cString\u003e savedSettings, String tootieSettingsFilePath,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                              String allTasksFilePath, DividerChoice dividerChoice, String username) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Loading tootieSettings.txt save file...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            File tootieSettingsFile \u003d fileFunctions.getFileFromFilePath(tootieSettingsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileFunctions.checkFileExists(tootieSettingsFile);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            readTootieSettingsFile(savedSettings, tootieSettingsFile, tootieSettingsFilePath, allTasksFilePath,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dividerChoice, username);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"tootieSettings.txt save file not found\" + NEWLINE + \"Creating new file...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            tootieSettingsFilePath \u003d fileFunctions.autoCreateNewFile(TootieFilePaths.DEFAULT_ALL_TASKS_FILE_PATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileEmptyException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"tootieSettings.txt save file empty\" + NEWLINE + \"No previous settings loaded\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Read and parse all the settings from the tootieSettings.txt file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings          array of saved settings"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tootieSettingsFile     the save file containing the saved settings"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tootieSettingsFilePath file path to the settings save file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath       file path to the save file for all tasks"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dividerChoice          divider chosen by user"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username               user input name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws FileEmptyException the settings file is empty"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws FileNotFoundException the settings file cannot be found"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void readTootieSettingsFile(ArrayList\u003cString\u003e savedSettings, File tootieSettingsFile,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                               String tootieSettingsFilePath, String allTasksFilePath,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                               DividerChoice dividerChoice, String username) throws FileEmptyException, FileNotFoundException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Scanner SETTINGS_FILE_SCANNER \u003d new Scanner(tootieSettingsFile);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileLine \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!SETTINGS_FILE_SCANNER.hasNext()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            setSavedSettings(savedSettings, tootieSettingsFilePath, allTasksFilePath, dividerChoice, username);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new FileEmptyException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String parsedString;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileLine \u003d readFileUntilLineContainsString(\"+ Tootie settings:\", SETTINGS_FILE_SCANNER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedString \u003d Parsers.parseFileObject(fileLine, \"+ Tootie settings:\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                tootieSettingsFilePath \u003d parsedString;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileLine \u003d readFileUntilLineContainsString(\"+ All Tasks:\", SETTINGS_FILE_SCANNER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedString \u003d Parsers.parseFileObject(fileLine, \"+ All Tasks:\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasksFilePath \u003d parsedString;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileLine \u003d readFileUntilLineContainsString(\"+ Divider choice:\", SETTINGS_FILE_SCANNER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedString \u003d Parsers.parseFileObject(fileLine, \"+ Divider choice:\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dividerChoice \u003d Parsers.parseDividerChoice(parsedString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            changeDivider(dividerChoice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileLine \u003d readFileUntilLineContainsString(\"+ Username:\", SETTINGS_FILE_SCANNER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedString \u003d Parsers.parseFileObject(fileLine, \"+ Username:\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                username \u003d parsedString;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            setSavedSettings(savedSettings, tootieSettingsFilePath, allTasksFilePath, dividerChoice, username);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (SettingObjectWrongFormatException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.printf(\"Error reading settings file! Error on line:\" + NEWLINE + \"%1$s%n\", fileLine);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Adds the default settings to saved settings array"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings          array of saved settings"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tootieSettingsFilePath file path to the settings save file"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath       file path to the save file for all tasks"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dividerChoice          divider chosen by user"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username               user input name"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void addSavedSettings(ArrayList\u003cString\u003e savedSettings, String tootieSettingsFilePath,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                        String allTasksFilePath, DividerChoice dividerChoice, String username) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.add(Parsers.pathReplaceIllegalCharacters(tootieSettingsFilePath));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.add(Parsers.pathReplaceIllegalCharacters(allTasksFilePath));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.add(dividerChoice.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.add(username);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Sets the default settings to saved settings array"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings          array of saved settings"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tootieSettingsFilePath file path to the settings save file"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath       file path to the save file for all tasks"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dividerChoice          divider chosen by user"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username               user input name"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void setSavedSettings(ArrayList\u003cString\u003e savedSettings, String tootieSettingsFilePath,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                        String allTasksFilePath, DividerChoice dividerChoice, String username) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.set(0, Parsers.pathReplaceIllegalCharacters(tootieSettingsFilePath));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.set(1, Parsers.pathReplaceIllegalCharacters(allTasksFilePath));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.set(2, dividerChoice.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.set(3, username);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * continue reading through a file until a specific string is found"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param stringSearched indicator string"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileScanner    scanner for scanning a file"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the line the string is on"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String readFileUntilLineContainsString(String stringSearched, Scanner fileScanner) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileInput \u003d \"\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // read each setting and return the variables accordingly"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileInput \u003d getFileNextLine(fileScanner);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (fileInput.contains(stringSearched)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileInput;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 160
    }
  },
  {
    "path": "src/main/java/duke/storage/SettingsSaver.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.DividerChoice;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieFileMsgs;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class SettingsSaver {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // save settings to tootieSettings.txt file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void saveTootieSettings(String tootieSettingsFilePath, String allTasksFilePath, String username,DividerChoice dividerChoice) throws IOException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File tootieSettingsFile \u003d new File(tootieSettingsFilePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (tootieSettingsFile.createNewFile()){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"New file created: \" + tootieSettingsFile.getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // clear the file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        new FileWriter(tootieSettingsFilePath, false).close();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(TootieFileMsgs.TOOTIE_SETTINGS_FILE_INSTRUCTIONS_HEADER, tootieSettingsFilePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(NEWLINE, tootieSettingsFilePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(String.format(TootieFileMsgs.TOOTIE_SETTINGS_FILE_PATHS_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                tootieSettingsFile.getAbsolutePath(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasksFilePath), tootieSettingsFilePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(NEWLINE, tootieSettingsFilePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String dividerChoiceString \u003d dividerChoiceToString(dividerChoice);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(String.format(TootieFileMsgs.TOOTIE_SETTINGS_USER_PREFERENCES_FORMAT, dividerChoiceString,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                username), tootieSettingsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // convert the dividerChoice into a string to save in tootieSettings.txt"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static String dividerChoiceToString(DividerChoice dividerChoice) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (dividerChoice){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SIMPLE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return \"SIMPLE\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SPARKLY:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return \"SPARKLY\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return \"PLAIN\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 47
    }
  },
  {
    "path": "src/main/java/duke/storage/fileFunctions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieSymbols;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.FilePathInvalidException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.ui.Printers;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.parsers.Parsers.pathReplaceIllegalCharacters;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class fileFunctions {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public fileFunctions() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // check if a file exists"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void checkFileExists(File file) throws FileNotFoundException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!file.exists()){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // create a new file at the specified file path"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String autoCreateNewFile(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Auto creating new file using path: \" + newFile.getAbsolutePath());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        filePath \u003d pathReplaceIllegalCharacters(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            checkFileExists(newFile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"File not exists.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // make the directory"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String directoryPath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String txtFileName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // identify placements"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            int endOfDirectoryName \u003d filePath.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            int endOfFileName \u003d filePath.indexOf(\".txt\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // check if placement is correct"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (endOfDirectoryName \u003d\u003d -1 || endOfFileName \u003d\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new FilePathInvalidException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    directoryPath \u003d filePath.substring(0, endOfDirectoryName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    txtFileName \u003d filePath.substring(endOfDirectoryName + 2, endOfFileName).trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    throw new FilePathInvalidException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //Creating a File object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            File file \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //Creating the directory"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isFileCreated \u003d file.mkdir();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if(isFileCreated){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Directory created successfully \" + TootieSymbols.HAPPY_EMOTICON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                filePath \u003d filePath + \"/\" + txtFileName + \".txt\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Sorry, could not create specified directory\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FilePathInvalidException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Error when making directory!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // make the file"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (newFile.createNewFile()){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"File created: \" + newFile.getAbsolutePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"File already exists.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"IO error when making file!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Wow! New file at: \" + filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return newFile.getAbsolutePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // Checks if the file with the given file path exists"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static File getFileFromFilePath(String filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File allTasksFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"full path: \" + allTasksFile.getAbsolutePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Printers.printDivider();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return allTasksFile;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // writes a double new line to the file to create one blank line of space"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void writeDoubleNewlineToFile(String filePath) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        appendsStringToFile(NEWLINE, filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        appendsStringToFile(NEWLINE, filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // appends the string to the given file specified by filePath"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void appendsStringToFile(String textToAppend, String filePath) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, true); // create a FileWriter in append mode"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fw.write(textToAppend);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 113
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    protected Date dueDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"EEE d MMM yyyy hh:mm aa\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Deadline(String taskName, Date dueDate) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        super(taskName, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setDueDate(dueDate);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setDueDate(Date dueDate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Date getDueDate() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return \"[D]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return super.getTaskName() + \" (by: \" + dateFormat.format(dueDate) + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 33
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    protected Date startTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    protected Date endTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"EEE d MMM yyyy hh:mm aa\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Event(String taskName, Date startTime, Date endTime) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        super(taskName, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setStartTime(startTime);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setEndTime(endTime);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Date getStartTime() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Date getEndTime() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setStartTime(Date startTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setEndTime(Date endTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return \"[E]\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return super.getTaskName() + \" (from: \" + dateFormat.format(startTime) + \" to \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                + dateFormat.format(endTime) + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 44
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieSymbols.CROSS_SYMBOL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieSymbols.TICK_SYMBOL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private boolean isComplete;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Task(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this(\"no name\", false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Task(String taskName, boolean isComplete) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setTaskName(taskName);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setComplete(isComplete);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setTaskName(String taskName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setComplete(boolean isComplete) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskName(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public boolean getComplete(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return isComplete;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskType(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return \"[?]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskDescription(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return getTaskName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getCompletionIndicator (){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (isComplete) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return TICK_SYMBOL;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CROSS_SYMBOL;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 51
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Todo class, only contains taskname with no due date"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public ToDo(String taskName) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        super(taskName, false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return \"[T]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 17
    }
  },
  {
    "path": "src/main/java/duke/tootieFunctions/AddNewTasks.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.tootieFunctions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieInputMarkers;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieNormalMsgs;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieRegex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DeadlineInputWrongFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DueDateWrongFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.EndTimeBeforeStartTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.EndTimeWrongFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.EventInputWrongFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidDateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidDueDateException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidEndTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidStartTimeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.MissingParamsException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.StartTimeWrongFormatException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TaskNameEmptyException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.ToDoInputWrongFormatException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.parsers.Parsers;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.parsers.Parsers.parseSingleCharacterTaggedParamsFromUserInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Add new Events, Todos or Deadlines to the list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class AddNewTasks {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Adds an event task to the allTasks list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks  list of all Tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks  total number of tasks in the list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws EventInputWrongFormatException  the command for adding event was wrongly formatted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidStartTimeException       the start time entered is invalid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidEndTimeException         the end time entered is invalid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws StartTimeWrongFormatException   the start time entered has formatting errors"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws EndTimeWrongFormatException     the end time entered has formatting errors"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws EndTimeBeforeStartTimeException the end time entered should not be before the start time"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskNameEmptyException          the task name field is empty"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void addEvent(String userInput, ArrayList\u003cTask\u003e allTasks, AtomicInteger numTasks) throws EventInputWrongFormatException, InvalidStartTimeException, InvalidEndTimeException, StartTimeWrongFormatException, EndTimeWrongFormatException, EndTimeBeforeStartTimeException, TaskNameEmptyException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date startTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date endTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // for returning filter options parsed from the user input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cString, String\u003e filterOptions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // parse filter command into segments"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parseSingleCharacterTaggedParamsFromUserInput(userInput, filterOptions);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (MissingParamsException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new EventInputWrongFormatException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!filterOptions.containsKey(\"t\") || !filterOptions.containsKey(\"s\") || !filterOptions.containsKey(\"e\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new EventInputWrongFormatException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String taskName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String startTimeUnformatted;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String endTimeUnformatted;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        taskName \u003d filterOptions.get(\"t\").trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        startTimeUnformatted \u003d filterOptions.get(\"s\").trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        endTimeUnformatted \u003d filterOptions.get(\"e\").trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check format start time"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isStartDateWithTime \u003d isDateWithTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isStartDateWithoutTime \u003d isDateWithoutTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check format end time"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isEndDateWithTime \u003d isDateWithTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isEndDateWithoutTime \u003d isDateWithoutTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse start time"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (isStartDateWithTime) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                startTime \u003d Parsers.parseDateWithTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new InvalidStartTimeException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (isStartDateWithoutTime) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                startTime \u003d Parsers.parseDateWithoutTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new InvalidStartTimeException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new StartTimeWrongFormatException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new StartTimeWrongFormatException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse end time"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (isEndDateWithTime) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                endTime \u003d Parsers.parseDateWithTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new InvalidEndTimeException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (isEndDateWithoutTime) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                endTime \u003d Parsers.parseDateWithoutTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new InvalidEndTimeException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new EndTimeWrongFormatException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new EndTimeWrongFormatException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if start and end time are in chronological order"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (startTime.after(endTime)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new EndTimeBeforeStartTimeException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskName.isBlank()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TaskNameEmptyException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // add event to list"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.add(new Event(taskName.trim(), startTime, endTime));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf((TootieNormalMsgs.ADDED_EVENT_FORMAT) + \"%n\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(numTasks.get()).getTaskDescription());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        numTasks.getAndIncrement();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Adds a deadline task to the allTasks list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks  list of all Tasks"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks  total number of tasks in the list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws DeadlineInputWrongFormatException the deadline command was wrongly formatted"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws DueDateWrongFormatException       the due date is wrongly formatted"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskNameEmptyException            the task name field is empty"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidDueDateException           due date entered wrong format"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void addDeadline(String userInput, ArrayList\u003cTask\u003e allTasks, AtomicInteger numTasks) throws DeadlineInputWrongFormatException, DueDateWrongFormatException, TaskNameEmptyException, InvalidDueDateException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date dueDate;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // for returning filter options parsed from the user input"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cString, String\u003e filterOptions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // parse filter command into segments"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parseSingleCharacterTaggedParamsFromUserInput(userInput, filterOptions);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (MissingParamsException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new DeadlineInputWrongFormatException();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!filterOptions.containsKey(\"t\") || !filterOptions.containsKey(\"d\")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new DeadlineInputWrongFormatException();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String taskName;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String dueDateUnformatted;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        taskName \u003d filterOptions.get(\"t\").trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        dueDateUnformatted \u003d filterOptions.get(\"d\").trim();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check format due date"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isDueDateWithTime \u003d isDateWithTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isDueDateWithoutTime \u003d isDateWithoutTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse due date"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (isDueDateWithTime) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dueDate \u003d Parsers.parseDateWithTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new InvalidDueDateException();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (isDueDateWithoutTime) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dueDate \u003d Parsers.parseDateWithoutTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new InvalidDueDateException();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new DueDateWrongFormatException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (dueDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new DueDateWrongFormatException();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskName.isBlank()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TaskNameEmptyException();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // add event to list"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.add(new Deadline(taskName.trim(), dueDate));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf((TootieNormalMsgs.ADDED_DEADLINE_FORMAT) + \"%n\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(numTasks.get()).getTaskDescription());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        numTasks.getAndIncrement();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * /check if the date entered is correctly formatted with a date but no time"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param timeUnformmated a string containing a date without the time included"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return true if it matches the correct format"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static boolean isDateWithoutTime(String timeUnformmated) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return timeUnformmated.matches(TootieRegex.DATE_WITHOUT_TIME_REGEX);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Check if the date entered is correctly formatted with a date and time"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param timeUnformmated a string containing a date with the time included"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return true if it matches the correct format"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static boolean isDateWithTime(String timeUnformmated) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return timeUnformmated.matches(TootieRegex.DATE_WITH_TIME_REGEX);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Adds a toto task to the allTasks list"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks  list of all Tasks"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks  total number of tasks in the list"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws ToDoInputWrongFormatException the format of the todo command is incorrect"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskNameEmptyException        the task name field is empty"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void addToDo(String userInput, ArrayList\u003cTask\u003e allTasks, AtomicInteger numTasks) throws ToDoInputWrongFormatException, TaskNameEmptyException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // identify placements"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int taskNamePosition \u003d userInput.indexOf(TootieInputMarkers.TASKNAME_MARKER);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskNamePosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new ToDoInputWrongFormatException();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String taskName \u003d userInput.substring(taskNamePosition + 2);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskName.isBlank()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TaskNameEmptyException();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // add task to list"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.add(new ToDo(taskName.trim()));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        numTasks.getAndIncrement();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf((TootieNormalMsgs.ADDED_TODO_FORMAT) + \"%n\", taskName.trim());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 256
    }
  },
  {
    "path": "src/main/java/duke/tootieFunctions/CommandExecutor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.tootieFunctions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieSymbols;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DeadlineInputWrongFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DividerNonexistantException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DueDateWrongFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.EndTimeBeforeStartTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.EndTimeWrongFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.EventInputWrongFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidDueDateException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidEndTimeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidStartTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.MissingFilterOptionsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.NoTasksFilteredException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.StartTimeWrongFormatException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TaskNameEmptyException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TaskNonexistantException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TasklistEmptyException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.ToDoInputWrongFormatException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.UsernameCommandInvalidException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.UsernameEmptyException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.storage.AllTasksSaver;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.CommandType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.DividerChoice;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieErrorMsgs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.parsers.Parsers;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.ui.Printers;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.tootieFunctions.Filters.filterTasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Contains functions that detect and execute commands"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CommandExecutor {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * figure out the command type from userInput"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return command type object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static CommandType extractCommandType(String userInput) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (userInput.toLowerCase().trim().startsWith(\"help\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.HELP;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.ADD_TODO;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.ADD_DEADLINE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"event\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.ADD_EVENT;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"list\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.LIST;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"done\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.MARK_TASK_DONE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"bye\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.BYE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.DELETE_TASK;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"undone\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.MARK_TASK_UNDONE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"divider\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.CHOOSE_DIVIDER;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"username\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.SET_USERNAME;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"filter\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.FILTER_TASKS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"save\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.SAVE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"filepaths\") ||"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                userInput.toLowerCase().trim().startsWith(\"filepath\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.PRINT_FILE_PATHS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.UNRECOGNISED;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parses the user command and executes it"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *  @param savedSettings     array containing saved settings for updates"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param commandType       command type detected"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput         raw user input"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all Tasks"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath  file path to allTasks.txt"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted total number of tasks completed"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username          user provided name"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void executeCommand(ArrayList\u003cString\u003e savedSettings, CommandType commandType, String userInput, ArrayList\u003cTask\u003e allTasks, String tootieSettingsFilePath, String allTasksFilePath, AtomicInteger numTasks, AtomicInteger numTasksCompleted, String username) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Printers.printHelpInfo();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case ADD_TODO:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                AddNewTasks.addToDo(userInput, allTasks, numTasks);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (ToDoInputWrongFormatException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.TODO_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TaskNameEmptyException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.TODO_TASKNAME_EMPTY_MSG);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case ADD_DEADLINE:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                AddNewTasks.addDeadline(userInput, allTasks, numTasks);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (DeadlineInputWrongFormatException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.DEADLINE_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (DueDateWrongFormatException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.DUEDATE_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TaskNameEmptyException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.DEADLINE_TASKNAME_EMPTY_MSG);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDueDateException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.INVALID_DUE_DATE_MSG);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case ADD_EVENT:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                AddNewTasks.addEvent(userInput, allTasks, numTasks);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (EventInputWrongFormatException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.EVENT_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidStartTimeException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.INVALID_START_DATE_MSG);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidEndTimeException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.INVALID_END_DATE_MSG);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (StartTimeWrongFormatException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.STARTDATE_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (EndTimeWrongFormatException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.ENDDATE_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (EndTimeBeforeStartTimeException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.ENDTIME_BEFORE_STARTIME_ERROR_MSG);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TaskNameEmptyException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.EVENT_TASKNAME_EMPTY_MSG);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                Printers.printAllTasks(allTasks, numTasks.get(), numTasksCompleted.get());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TasklistEmptyException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.TasklistEmptyMsg);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case MARK_TASK_DONE:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                ModifyTasks.markTaskComplete(userInput, allTasks, numTasksCompleted, numTasks);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TaskNonexistantException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.TASK_NOT_FOUND_ERROR_MSG);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case MARK_TASK_UNDONE:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                ModifyTasks.markTaskIncomplete(userInput, allTasks, numTasksCompleted, numTasks);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TaskNonexistantException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.TASK_NOT_FOUND_ERROR_MSG);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Printers.printFarewellMessage(username);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SAVE:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                AllTasksSaver.saveAllTasks(allTasks, allTasksFilePath, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"All tasks saved!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case DELETE_TASK:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                ModifyTasks.deleteTask(userInput, allTasks, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TaskNonexistantException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.TASK_NOT_FOUND_ERROR_MSG);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case CHOOSE_DIVIDER:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                DividerChoice dividerChoice \u003d Parsers.parseLineDividerFromUserInput(userInput);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                Printers.changeDivider(dividerChoice);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                savedSettings.set(2, dividerChoice.toString());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Divider changed! \" + TootieSymbols.FLOWER_SMILE_EMOTICON);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (DividerNonexistantException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Divider choice not found? \" + TootieSymbols.CONFUSED_EMOTICON);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SET_USERNAME:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                username \u003d SetPreferences.setUsername(userInput);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(String.format(\"Hello %1$s! \" + TootieSymbols.FLOWER_SMILE_EMOTICON, username));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                savedSettings.set(3, username);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (UsernameCommandInvalidException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Username command invalid! \" + TootieSymbols.ANGRY_EMOTICON);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (UsernameEmptyException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Username is blank? \" + TootieSymbols.CONFUSED_EMOTICON);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case FILTER_TASKS:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                filterTasks(userInput, allTasks);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (MissingFilterOptionsException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Filter command missing valid arguments? \" + TootieSymbols.CONFUSED_EMOTICON);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (NoTasksFilteredException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"No tasks matching parameters found? \" + TootieSymbols.BEAR_EMOTICON);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case PRINT_FILE_PATHS:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Printers.printFilePaths(tootieSettingsFilePath, allTasksFilePath);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Printers.printConfusedMessage();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 215
    }
  },
  {
    "path": "src/main/java/duke/tootieFunctions/Filters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.tootieFunctions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieNormalMsgs;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DateAfterPreceedsDateBefore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DateBeforeMatchesAfterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidDateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.MissingFilterOptionsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.NoTasksFilteredException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.parsers.Parsers;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.ui.Printers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieSymbols.NEWLINE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.parsers.Parsers.parseDoubleCharacterTaggedParamsFromUserInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.tootieFunctions.AddNewTasks.isDateWithTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.tootieFunctions.AddNewTasks.isDateWithoutTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Filters the tasks in the list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Filters {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parse the user input and filter out the suitable tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput user input strings"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks  list of all tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws MissingFilterOptionsException the filter command has no parameters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws NoTasksFilteredException      the filter returned no tasks with desired parameters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void filterTasks(String userInput, ArrayList\u003cTask\u003e allTasks) throws MissingFilterOptionsException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            NoTasksFilteredException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // flags for filters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean hasAtLeastOneFilterOption \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsSearchTerm \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean taskTypeIndicated \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsStartTimeBeforeParam \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsEndTimeBeforeParam \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsDueDateBeforeParam \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsStartTimeAfterParam \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsEndTimeAfterParam \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsDueDateAfterParam \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean dateWronglyFormatted \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // dates for any of the indicators"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date dueDateBefore \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date dueDateAfter \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date startTimeBefore \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date startTimeAfter \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date endTimeBefore \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date endTimeAfter \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        ArrayList\u003cTaskType\u003e taskTypes \u003d new ArrayList\u003c\u003e(2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String componentUserInput;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String searchTerm \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cInteger, Task\u003e filteredTasks \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // for returning filter options parsed from the user input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cString, String\u003e filterOptions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // parse filter command into segments"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parseDoubleCharacterTaggedParamsFromUserInput(userInput, filterOptions);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(\"tt\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            componentUserInput \u003d filterOptions.get(\"tt\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskTypeIndicated \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parseTaskTypes(componentUserInput, taskTypes);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(\"st\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            containsSearchTerm \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            searchTerm \u003d filterOptions.get(\"st\").trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(\"db\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String dueDateUnformatted \u003d filterOptions.get(\"db\").trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // check format due date"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isDueDateWithTime \u003d isDateWithTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isDueDateWithoutTime \u003d isDateWithoutTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // try to parse due date"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (isDueDateWithTime) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dueDateBefore \u003d Parsers.parseDateWithTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else if (isDueDateWithoutTime) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dueDateBefore \u003d Parsers.parseDateWithoutTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (dateWronglyFormatted) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Date for \\\"due date before\\\" wrongly formatted. Ignoring param.\" + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dateWronglyFormatted \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                containsDueDateBeforeParam \u003d true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(\"da\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String dueDateUnformatted \u003d filterOptions.get(\"da\").trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // check format due date"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isDueDateWithTime \u003d isDateWithTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isDueDateWithoutTime \u003d isDateWithoutTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // try to parse due date"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (isDueDateWithTime) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dueDateAfter \u003d Parsers.parseDateWithTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else if (isDueDateWithoutTime) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dueDateAfter \u003d Parsers.parseDateWithoutTime(dueDateUnformatted);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (dateWronglyFormatted) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Date for \\\"due date after\\\" wrongly formatted. Ignoring param.\" + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dateWronglyFormatted \u003d false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                containsDueDateAfterParam \u003d true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // compare dates before and after"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            checkIfDateAfterPreceedsBefore(containsDueDateBeforeParam, containsDueDateAfterParam, dueDateBefore,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dueDateAfter);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            checkIfBeforeAndAfterDatesMatch(containsDueDateBeforeParam, containsDueDateAfterParam, dueDateBefore,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dueDateAfter);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateBeforeMatchesAfterException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Warning: date for \\\"due date before\\\" is the same as date for \\\"due date after\\\".\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateAfterPreceedsDateBefore dateAfterPreceedsDateBefore) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Date for \\\"due date before\\\" is before date for \\\"due date after\\\".\" + NEWLINE + \"Automatically swapping the two...\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Date temp \u003d dueDateAfter;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dueDateAfter \u003d dueDateBefore;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dueDateBefore \u003d temp;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(\"sb\")) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String startTimeUnformatted \u003d filterOptions.get(\"sb\").trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // check format start time"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isStartTimeWithTime \u003d isDateWithTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isStartTimeWithoutTime \u003d isDateWithoutTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // try to parse start time"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (isStartTimeWithTime) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    startTimeBefore \u003d Parsers.parseDateWithTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else if (isStartTimeWithoutTime) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    startTimeBefore \u003d Parsers.parseDateWithoutTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (dateWronglyFormatted) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Date for \\\"start time before\\\" wrongly formatted. Ignoring param.\" + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dateWronglyFormatted \u003d false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                containsStartTimeBeforeParam \u003d true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(\"sa\")) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String startTimeUnformatted \u003d filterOptions.get(\"sa\").trim();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // check format start time"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isStartTimeWithTime \u003d isDateWithTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isStartTimeWithoutTime \u003d isDateWithoutTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // try to parse start time"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (isStartTimeWithTime) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    startTimeAfter \u003d Parsers.parseDateWithTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else if (isStartTimeWithoutTime) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    startTimeAfter \u003d Parsers.parseDateWithoutTime(startTimeUnformatted);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (dateWronglyFormatted) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Date for \\\"start time after\\\" wrongly formatted. Ignoring param.\"  + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dateWronglyFormatted \u003d false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                containsStartTimeAfterParam \u003d true;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // compare dates before and after"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            checkIfDateAfterPreceedsBefore(containsStartTimeBeforeParam, containsStartTimeAfterParam, startTimeBefore,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    startTimeAfter);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            checkIfBeforeAndAfterDatesMatch(containsStartTimeBeforeParam, containsStartTimeAfterParam, startTimeBefore,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    startTimeAfter);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateBeforeMatchesAfterException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Warning: date for \\\"start time before\\\" is the same as date for \\\"start time after\\\".\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateAfterPreceedsDateBefore dateAfterPreceedsDateBefore) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Date for \\\"start time before\\\" is before date for \\\"start time after\\\".\" + NEWLINE +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    \"Automatically swapping the two...\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Date temp \u003d startTimeAfter;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startTimeAfter \u003d startTimeBefore;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startTimeBefore \u003d temp;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(\"eb\")) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String endTimeUnformatted \u003d filterOptions.get(\"eb\").trim();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // check format end time"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isEndTimeWithTime \u003d isDateWithTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isEndTimeWithoutTime \u003d isDateWithoutTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // try to parse end time"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (isEndTimeWithTime) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    endTimeBefore \u003d Parsers.parseDateWithTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else if (isEndTimeWithoutTime) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    endTimeBefore \u003d Parsers.parseDateWithoutTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (dateWronglyFormatted) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Date for \\\"end time before\\\" wrongly formatted. Ignoring param.\" + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dateWronglyFormatted \u003d false;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                containsEndTimeBeforeParam \u003d true;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(\"ea\")) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String endTimeUnformatted \u003d filterOptions.get(\"ea\").trim();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // check format end time"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isEndTimeWithTime \u003d isDateWithTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isEndTimeWithoutTime \u003d isDateWithoutTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // try to parse end time"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (isEndTimeWithTime) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    endTimeAfter \u003d Parsers.parseDateWithTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else if (isEndTimeWithoutTime) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    endTimeAfter \u003d Parsers.parseDateWithoutTime(endTimeUnformatted);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dateWronglyFormatted \u003d true;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (dateWronglyFormatted) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(\"Date for \\\"end time after\\\" wrongly formatted. Ignoring param.\"  + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dateWronglyFormatted \u003d false;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                containsEndTimeAfterParam \u003d true;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // compare dates before and after"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            checkIfDateAfterPreceedsBefore(containsEndTimeBeforeParam, containsEndTimeAfterParam, endTimeBefore,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    endTimeAfter);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            checkIfBeforeAndAfterDatesMatch(containsEndTimeBeforeParam, containsEndTimeAfterParam, endTimeBefore,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    endTimeAfter);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateBeforeMatchesAfterException e) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Warning: date for \\\"end time before\\\" is the same as date for \\\"end time after\\\".\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateAfterPreceedsDateBefore dateAfterPreceedsDateBefore) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(\"Date for \\\"end time before\\\" is before date for \\\"end time after\\\".\" + NEWLINE +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    \"Automatically swapping the two...\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Date temp \u003d endTimeAfter;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endTimeAfter \u003d endTimeBefore;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endTimeBefore \u003d temp;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!hasAtLeastOneFilterOption) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingFilterOptionsException();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cInteger, Task\u003e numberedTasks \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Set\u003cMap.Entry\u003cInteger, Task\u003e\u003e entries \u003d numberedTasks.entrySet();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // add all the numbered tasks to a hashmap"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (i \u003d 1; i \u003c\u003d allTasks.size(); i++) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numberedTasks.put(i, allTasks.get(i - 1));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // make filters final for filtering"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String finalSearchTerm \u003d searchTerm;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date finalDueDateBefore \u003d dueDateBefore;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date finalDueDateAfter \u003d dueDateAfter;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date finalStartTimeAfter \u003d startTimeAfter;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date finalStartTimeBefore \u003d startTimeBefore;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date finalEndTimeBefore \u003d endTimeBefore;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date finalEndTimeAfter \u003d endTimeAfter;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // then filter for todo specifications, add to list"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!taskTypeIndicated || taskTypes.contains(TaskType.TODO)) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Stream\u003cMap.Entry\u003cInteger, Task\u003e\u003e entriesStream \u003d entries.stream();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            entriesStream.filter(entry -\u003e entry.getValue() instanceof ToDo).filter(containsSearchTerm ?"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            entry -\u003e entry.getValue().getTaskName().contains(finalSearchTerm) : entry -\u003e true)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .forEach(entry -\u003e filteredTasks.put(entry.getKey(), entry.getValue()));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // then filter for deadline specifications, add to list"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!taskTypeIndicated || taskTypes.contains(TaskType.DEADLINE)) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Stream\u003cMap.Entry\u003cInteger, Task\u003e\u003e entriesStream \u003d entries.stream();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            entriesStream.filter(entry -\u003e entry.getValue() instanceof Deadline).filter(containsSearchTerm ?"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            entry -\u003e entry.getValue().getTaskName().contains(finalSearchTerm) : entry -\u003e true)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsDueDateBeforeParam ? entry -\u003e ((Deadline) entry.getValue()).getDueDate()"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            .compareTo(finalDueDateBefore) \u003c 0 : entry -\u003e true)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsDueDateAfterParam ? entry -\u003e ((Deadline) entry.getValue()).getDueDate()"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            .compareTo(finalDueDateAfter) \u003e 0 : entry -\u003e true)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .forEach(entry -\u003e filteredTasks.put(entry.getKey(), entry.getValue()));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // then filter for event specifications, add to list"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!taskTypeIndicated || taskTypes.contains(TaskType.EVENT)) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Stream\u003cMap.Entry\u003cInteger, Task\u003e\u003e entriesStream \u003d entries.stream();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            entriesStream.filter(entry -\u003e entry.getValue() instanceof Event).filter(containsSearchTerm ?"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            entry -\u003e entry.getValue().getTaskName().contains(finalSearchTerm) : entry -\u003e true)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsStartTimeBeforeParam ? entry -\u003e ((Event) entry.getValue()).getStartTime()"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            .compareTo(finalStartTimeBefore) \u003c 0 : entry -\u003e true)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsStartTimeAfterParam ? entry -\u003e ((Event) entry.getValue()).getStartTime()"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            .compareTo(finalStartTimeAfter) \u003e 0 : entry -\u003e true)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsEndTimeBeforeParam ? entry -\u003e ((Event) entry.getValue()).getEndTime()"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            .compareTo(finalEndTimeBefore) \u003c 0 : entry -\u003e true)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsEndTimeAfterParam ? entry -\u003e ((Event) entry.getValue()).getEndTime()"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            .compareTo(finalEndTimeAfter) \u003e 0 : entry -\u003e true)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .forEach(entry -\u003e filteredTasks.put(entry.getKey(), entry.getValue()));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filteredTasks.isEmpty()) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new NoTasksFilteredException();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printFilteredTasks(allTasks.size(), filteredTasks);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Print the list of filtered tasks"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks      total number of tasks in"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filteredTasks list of filtered tasks"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void printFilteredTasks(int numTasks, HashMap\u003cInteger, Task\u003e filteredTasks) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int tasksFound \u003d 0;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int tasksComplete \u003d 0;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (i \u003d 1; i \u003c\u003d numTasks; i++) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (filteredTasks.containsKey(i)) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.printf((TootieNormalMsgs.LIST_TASK_FORMAT) + \"%n\", i, filteredTasks.get(i).getTaskType(),"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                        filteredTasks.get(i).getCompletionIndicator(), filteredTasks.get(i).getTaskDescription());"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                tasksFound++;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                if (filteredTasks.get(i).getComplete()) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    tasksComplete++;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Printers.printFilterSummary(tasksFound, tasksComplete);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Check if the date after comes before the date before"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param containsDateBeforeParam the date for before was detected in the command"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param containsDateAfterParam  the date for after was detected in the command"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dateBefore              the date for before"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dateAfter               the date for after"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws DateAfterPreceedsDateBefore the date for after comes before the date for before"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void checkIfDateAfterPreceedsBefore(boolean containsDateBeforeParam,"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                                       boolean containsDateAfterParam, Date dateBefore, Date dateAfter)"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws DateAfterPreceedsDateBefore {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (containsDateAfterParam \u0026\u0026 containsDateBeforeParam) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (dateBefore.compareTo(dateAfter) \u003c 0) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new DateAfterPreceedsDateBefore();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Check if the Date for Before is the same Date as the date for after"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param containsDateBeforeParam the date for before was found"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param containsDateAfterParam  the date for after was found"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dateBefore              the date for before"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dateAfter               the date for after"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws DateBeforeMatchesAfterException the date for before is the same as the date for after"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void checkIfBeforeAndAfterDatesMatch(boolean containsDateBeforeParam,"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                                        boolean containsDateAfterParam, Date dateBefore, Date dateAfter)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws DateBeforeMatchesAfterException {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (containsDateAfterParam \u0026\u0026 containsDateBeforeParam) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (dateBefore.compareTo(dateAfter) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new DateBeforeMatchesAfterException();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parse the task types from the task type param"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param taskTypesUserInput the user input for the parameter task types"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param taskTypes          the list of task types detected"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void parseTaskTypes(String taskTypesUserInput, ArrayList\u003cTaskType\u003e taskTypes) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String userInputLowerCase \u003d taskTypesUserInput.toLowerCase();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (userInputLowerCase.contains(\"event\")) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskTypes.add(TaskType.EVENT);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (userInputLowerCase.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskTypes.add(TaskType.DEADLINE);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (userInputLowerCase.contains(\"todo\")) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskTypes.add(TaskType.TODO);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 482
    }
  },
  {
    "path": "src/main/java/duke/tootieFunctions/ModifyTasks.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.tootieFunctions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TaskNonexistantException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieNormalMsgs;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Modifies the tasks in the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class ModifyTasks {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * deletes the selected task based on user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput         raw user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all Tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted total number of tasks completed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskNonexistantException cannot delete nonexistant task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void deleteTask(String userInput, ArrayList\u003cTask\u003e allTasks, AtomicInteger numTasks,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                  AtomicInteger numTasksCompleted) throws TaskNonexistantException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int taskNum;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse task and check if it exists"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        taskNum \u003d getTaskNumFromInput(userInput, numTasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // print response"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf((TootieNormalMsgs.TASK_DELETED_RESPONSE_MSG) + \"%n\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(taskNum - 1).getTaskType(), allTasks.get(taskNum - 1).getCompletionIndicator(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(taskNum - 1).getTaskDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (allTasks.get(taskNum - 1).getComplete()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numTasksCompleted.getAndDecrement();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.remove(taskNum - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        numTasks.getAndDecrement();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * process the user input and mark the task complete"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput         raw user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all Tasks"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted total number of tasks completed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskNonexistantException cannot mark nonexistant task complete"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void markTaskComplete(String userInput, ArrayList\u003cTask\u003e allTasks, AtomicInteger numTasksCompleted,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                        AtomicInteger numTasks) throws TaskNonexistantException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int taskNum;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse task and check if it exists"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        taskNum \u003d getTaskNumFromInput(userInput, numTasks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!allTasks.get(taskNum - 1).getComplete()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numTasksCompleted.getAndIncrement();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.get(taskNum - 1).setComplete(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // print response"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf((TootieNormalMsgs.TASK_MARKED_DONE_RESPONSE_MSG) + \"%n\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(taskNum - 1).getTaskType(), allTasks.get(taskNum - 1).getTaskDescription());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Extract the task number from the user input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks  total number of tasks in the list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return task number as indicated by user"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskNonexistantException task number indicated by user out of range"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static int getTaskNumFromInput(String userInput, AtomicInteger numTasks) throws TaskNonexistantException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int taskNum;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskNum \u003d Integer.parseInt(userInput.replaceAll(\"[\\\\D]\", \"\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (taskNum \u003e numTasks.get() || taskNum \u003c 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new TaskNonexistantException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TaskNonexistantException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return taskNum;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * process the user input and mark the task incomplete"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput         raw user input"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all Tasks"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted total number of tasks completed"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskNonexistantException cannot mark nonexistant task incomplete"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void markTaskIncomplete(String userInput, ArrayList\u003cTask\u003e allTasks, AtomicInteger numTasksCompleted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            , AtomicInteger numTasks) throws TaskNonexistantException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int taskNum;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse task and check if it exists"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        taskNum \u003d getTaskNumFromInput(userInput, numTasks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (allTasks.get(taskNum - 1).getComplete()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numTasksCompleted.getAndDecrement();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.get(taskNum - 1).setComplete(false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // print response"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf((TootieNormalMsgs.TASK_MARKED_UNDONE_RESPONSE_MSG) + \"%n\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(taskNum - 1).getTaskType(), allTasks.get(taskNum - 1).getTaskDescription());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 117
    }
  },
  {
    "path": "src/main/java/duke/tootieFunctions/SetPreferences.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.tootieFunctions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.UsernameCommandInvalidException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.UsernameEmptyException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Functions for the user to set preferences such as"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class SetPreferences {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Extracts the username from the raw user input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return updated username"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws UsernameCommandInvalidException username command incorrectly formatted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws UsernameEmptyException user name field should not be empty"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String setUsername(String userInput) throws UsernameCommandInvalidException,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            UsernameEmptyException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // identify placements"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int usernamePosition \u003d userInput.indexOf(\"username\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (usernamePosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new UsernameCommandInvalidException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String usernameInput \u003d userInput.substring(usernamePosition + 8).trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (usernameInput.isBlank()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new UsernameEmptyException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return usernameInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 35
    }
  },
  {
    "path": "src/main/java/duke/ui/Printers.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.DividerChoice;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieConstants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieErrorMsgs;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieNormalMsgs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieSymbols;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TasklistEmptyException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieSymbols.NEWLINE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Functions to print to the console as part of the UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Printers {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Line divider set to default before settings are loaded"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String currentLineDivider \u003d TootieSymbols.DOUBLE_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Changes the line divider to the option chosen by user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dividerChoice divider chosen by user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void changeDivider(DividerChoice dividerChoice) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (dividerChoice) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SIMPLE:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            currentLineDivider \u003d TootieSymbols.SIMPLE_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SPARKLY:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            currentLineDivider \u003d TootieSymbols.SPARKLY_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case DOUBLE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            currentLineDivider \u003d TootieSymbols.DOUBLE_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            currentLineDivider \u003d TootieSymbols.PLAIN_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints the line divider to the console"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(currentLineDivider);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints the personalised hello message"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username user input name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printHelloMessage(String username) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf(TootieNormalMsgs.HELLO_GREETING, username);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints the personalised farewell message"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username user indicated name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printFarewellMessage(String username) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf(TootieNormalMsgs.FAREWELL_GREETING, username);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints a randomised version of the Tootie logo"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printTootieLogo() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String[] logos \u003d new String[TootieConstants.NUM_LOGOS_AVAILABLE];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        logos[0] \u003d TootieSymbols.SIMPLE_TOOTIE_LOGO;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        logos[1] \u003d TootieSymbols.BLOCKY_TOOTIE_LOGO;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        logos[2] \u003d TootieSymbols.TRAIN_THEME_TOOTIE_LOGO;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        logos[3] \u003d TootieSymbols.THICK_TOOTIE_LOGO;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Random rand \u003d new Random(System.currentTimeMillis());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf((TootieNormalMsgs.LOGO_PRINT_FORMAT) + \"%n\", logos[Math.abs(rand.nextInt() % 4)]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints message when command is not understood by the program"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printConfusedMessage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(TootieErrorMsgs.COMMAND_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(TootieErrorMsgs.SUGGEST_HELP_OPTION_MSG);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints list of commands and example usage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printHelpInfo() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(TootieNormalMsgs.HELP_INFO_MSG);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints all list items with index and completion indicator"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all Tasks"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted total number of tasks completed"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TasklistEmptyException cannot print empty task list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printAllTasks(ArrayList\u003cTask\u003e allTasks, int numTasks, int numTasksCompleted) throws TasklistEmptyException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (numTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TasklistEmptyException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf((TootieNormalMsgs.NUMTASKS_PRINT_FORMAT) + \"%n\", numTasks, (numTasks \u003d\u003d 1? \"\" : \"s\"), numTasks - numTasksCompleted);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (int i \u003d 0; i \u003c numTasks; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.printf((TootieNormalMsgs.LIST_TASK_FORMAT) + \"%n\", (i + 1),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    allTasks.get(i).getTaskType(), allTasks.get(i).getCompletionIndicator(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    allTasks.get(i).getTaskDescription());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (numTasks \u003d\u003d numTasksCompleted) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(TootieNormalMsgs.TASKS_ALL_DONE_MSG);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Print out the file paths for the allTasks.txt file and tootieSettings.txt file"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tootieSettingsFilePath file path to the tootieSettings.txt file"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath       file path to the allTasks.txt file"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printFilePaths(String tootieSettingsFilePath, String allTasksFilePath) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"The list of saved tasks can be found at:\" + NEWLINE + allTasksFilePath + NEWLINE"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                + \"The list of saved settings can be found at:\" + NEWLINE + tootieSettingsFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Print filter summary"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tasksFound    number of tasks filtered in total"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tasksComplete number of tasks filtered that were complete"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printFilterSummary(int tasksFound, int tasksComplete) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (tasksComplete \u003d\u003d tasksFound) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.printf(\"Filtered! %1$s task%2$s found, all complete!%n\", tasksFound, (tasksFound \u003d\u003d 1 ? \"\" :"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    \"s\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.printf(\"Filtered! %1$s task%2$s found, %3$s incomplete.%n\", tasksFound, (tasksFound \u003d\u003d 1 ? \"\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    : \"s\"), tasksFound - tasksComplete);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 157
    }
  },
  {
    "path": "src/main/java/duke/ui/UserInputHandlers.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieInputMarkers;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieRegex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * For user input detection and echoing"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class UserInputHandlers {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Gets user input, ignore comments and blank lines"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param SCANNER Scanner object for console inputs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return raw user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String getUserInput(Scanner SCANNER) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            userInput \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } while (userInput.matches(TootieRegex.BLANK_STRING_REGEX) || userInput.startsWith(TootieInputMarkers.INPUT_COMMENT_MARKER));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Echos the userInput for testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void echoUserInput(String userInput) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 34
    }
  },
  {
    "path": "text-ui-test/data/allTasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Total tasks: 3"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tasks completed: 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Task completion status:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "0 is not done([✗]), 1 is done([✓])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Task types (T,D,E):"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "T is to-do, D is deadline, E is event"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[T][0] clean shoes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][1] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tasks:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[T][0] clean shoes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][1] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 19
    }
  },
  {
    "path": "text-ui-test/data/tootieSettings.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "INFORMATION"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tootie - Version 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "FILE PATHS"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Tootie settings: C:\\Users\\Amelia\\Documents\\GitHub\\ip\\text-ui-test\\data\\tootieSettings.txt"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ All Tasks: C:\\Users\\Amelia\\Documents\\GitHub\\ip\\text-ui-test\\data\\allTasks.txt"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "USER PREFERENCES"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Divider choice: DOUBLE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Username: Ames"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 14
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# automatically create new allTasks.txt file"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test help function"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test unrecognised command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "blah"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test todo versions/ error handling"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo t/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo t/clean turtle tank"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test deadline versions/ error handling"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline t/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline t/write essay d/31-12-2020"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline t/do project d/30-01-2020 04:55"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test event versions/ error handling"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean house s/31-12-2020 e/31-02-2020"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean house s/31-12-2020 e/05-02-2021"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean cupboard e/31-12-2020 s/05-02-2021"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean kitchen s/12-12-2020 e/31-12-2020"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean shoes s/01-02-2020 e/31-12-2020 05:45"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean socks s/01-02-2020 04:55 e/31-12-2020 05:45"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test done function"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 11"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test undone function"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone 11"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone 5"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone 0"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test delete function"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete 12"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test divider function"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 3"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 2"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 4"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 1"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test username function"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "username Sophia"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test filter function"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter tt/event,todo"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter tt/deadline"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter st/clean"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter tt/event sb/13-01-2019 ea/31-01-2020"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test filepath function"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filepath"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filepaths"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test save function"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "save"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test bye function"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 73
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "javac -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\storage\\*.java ..\\src\\main\\java\\duke\\exceptions\\*.java ..\\src\\main\\java\\duke\\tootieFunctions\\*.java ..\\src\\main\\java\\duke\\parsers\\*.java ..\\src\\main\\java\\duke\\constants\\*.java ..\\src\\main\\java\\duke\\ui\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "java -Dfile.encoding\u003dUTF8 -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "REM compare the output to the expected output USE INTELLIJ INSTEAD FC BAD :("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "echo -------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "echo check output by selecting both files in intellij"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "echo and then right click and find compare files"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "echo or press ctrl + D after selecting"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "REM FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 9,
      "-": 18
    }
  }
]
