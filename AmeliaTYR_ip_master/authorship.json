[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# Tootie - based on the Duke project"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tootie is a task list manager program"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Setting up for use "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Down the latest version of `Tootie` from [here](https://github.com/AmeliaTYR/ip/releases/tag/v1.1-alpha)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  1. The current version is v1.1-alpha"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* All comments starting with # will be ignored."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* Change your console font to one which supports Unicode for the optimal user experience."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  * For Windows, the instructions are as follows: "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * save the ip.jar file to your desired folder"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * open the command line in the folder that the ip.jar is in "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        * you may do this by typing `cmd` in the location bar of Windows Explorer and pressing the Enter key"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * run `chcp 65001` to change to UTF-8"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * right click the bar above your command line app to open properties"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * change the font to NSimSun"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * run `java -Dfile.encoding\u003dUTF-8 -jar ip.jar`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Further instructions on using Tootie can be found at the user guide [here](https://ameliatyr.github.io/ip/)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Setting up in Intellij for editing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "      _____                    _        _            "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     |_   _|   ___     ___    | |_     (_)     ___   "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "       | |    / _ \\   / _ \\   |  _|    | |    / -_)  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "      _|_|_   \\___/   \\___/   _\\__|   _|_|_   \\___|  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    _|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"| "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    \"`-0-0-\u0027\"`-0-0-\u0027\"`-0-0-\u0027\"`-0-0-\u0027\"`-0-0-\u0027\"`-0-0-\u0027 "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   Tootie - Version 2.0"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   Loading tootieSettings.txt save file..."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   ─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   Loading allTasks.txt save file..."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   11 tasks expected from file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   11 tasks read successfully!"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   ─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   Hello Ames! I\u0027m Tootie!"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   What can I do for you?"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   ─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   The logo itself will vary between runs at random"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Modifications"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Duke name changed to Tootie in honor of Tootie the terrapin"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 49,
      "-": 17
    }
  },
  {
    "path": "data/allTasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Total tasks: 11"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tasks completed: 4"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Task completion status:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "0 is not done([✗]), 1 is done([✓])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Task types (T,D,E):"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "T is to-do, D is deadline, E is event"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[T][0] clean shoes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][1] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tasks:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[T][0] clean shoes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][1] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][1] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][0] test 1 (from: Fri 31 Jan 2020 05:45 AM to Mon 21 Dec 2020 04:55 AM)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][0] test 2 (from: Sat 11 Jan 2020 05:45 AM to Tue 22 Dec 2020 04:55 AM)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][1] test 3 (from: Fri 24 Apr 2020 05:45 AM to Thu 21 May 2020 04:55 AM)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][1] clean room (from: Thu 31 Dec 2020 12:00 AM to Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] test d1 (by: Wed 23 Dec 2020 04:55 AM)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] test d2 (by: Fri 11 Dec 2020 04:55 AM)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] clean robot (by: Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] test d3 (by: Mon 4 May 2020 04:55 AM)"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 27
    }
  },
  {
    "path": "data/allTasksTemplate.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Total tasks: 3"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tasks completed: 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Task completion status:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "0 is not done([✗]), 1 is done([✓])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Task types (T,D,E):"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "T is to-do, D is deadline, E is event"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[T][0] clean shoes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][1] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tasks:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[T][0] clean shoes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][1] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 19
    }
  },
  {
    "path": "data/temp.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "INFORMATION"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tootie - Version 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "FILE PATHS"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Tootie settings: C:\\Users\\Amelia\\Documents\\GitHub\\ip\\text-ui-test\\data\\tootieSettings.txt"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ All Tasks: C:\\Users\\Amelia\\Documents\\GitHub\\ip\\text-ui-test\\data\\allTasks.txt"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "USER PREFERENCES"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Divider choice: DOUBLE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Username: Ames"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 14
    }
  },
  {
    "path": "data/tootieHistory.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Session: 0"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Session: 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Time Start:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Actions:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Time End:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 8
    }
  },
  {
    "path": "data/tootieSettings.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "INFORMATION"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tootie - Version 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "FILE PATHS"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Tootie settings: C:\\Users\\Amelia\\Documents\\GitHub\\ip\\data\\tootieSettings.txt"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ All Tasks: C:\\Users\\Amelia\\Documents\\GitHub\\ip\\data\\allTasks.txt"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "USER PREFERENCES"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Divider choice: SPARKLY"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Username: Ames"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 14
    }
  },
  {
    "path": "data/tootieSettingsTemplate.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "INFORMATION"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tootie version: 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "FILE PATHS:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Tootie settings: "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ All Tasks:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ User History:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "USER PREFERENCES:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Divider choice: PLAIN"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Username: Amelia"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "USER STATISTICS:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ total sessions:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ total time spent: "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ total tasks completed: "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 22
    }
  },
  {
    "path": "docs/AmeliaTan.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# John Doe - Project Portfolio Page - wip"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# Developer Guide - wip"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "{Describe the target user profile}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 34
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# Tootie User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tootie is a task list manager program"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Down the latest version of `Tootie` from [here](https://github.com/AmeliaTYR/ip/releases/tag/v1.1-alpha)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  1. The current version is v1.1-alpha"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Run `java -Dfile.encoding\u003dUTF-8 -jar ip.jar` in the folder where the ip.jar file is stored to start the progam"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. You should be prompted to either load an existing save file or create a new file. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  1. If this is your first time using Tootie, just enter `2` to automatically create the file. "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  1. If you see this segment, Tootie has successfully been set up."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     ```"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     Hello user! I\u0027m Tootie!"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     ```"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  1. You may then begin entering commands. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  1. Enjoy!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* All commands starting with # will be ignored."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* Change your console font to one which supports Unicode for the optimal user experience."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  * For Windows, the instructions are as follows: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * save the ip.jar file to your desired folder"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * open the command line in the folder that the ip.jar is in "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        * you may do this by typing `cmd` in the location bar of Windows Explorer and pressing the Enter key"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * run `chcp 65001` to change to UTF-8"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * right click the bar above your command line app to open properties"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * change the font to NSimSun"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    * run `java -Dfile.encoding\u003dUTF-8 -jar ip.jar`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 1) Basic CLI commands"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Basic commands to use the program"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Bring up help guide: `help`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Displays a list of commands tootie understands, or search for a specific command for the command description"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `help [COMMAND]`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* `COMMAND` is a command the user may specifically search for. If no command matching the search command is found an error message will be displayed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The command can have no arguments, and will print the full list of commands"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`help full`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`help list`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "for the full list of commands"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help full"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Here is the list of commands I understand:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help: displays a list of commands tootie understands"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  or search for a specific command for the command description"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  help [COMMAND]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  help"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  help filter"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filepath: Display file paths of save files"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  filepath"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  filepaths"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Note: The command can be spelled with or without the \u0027s\u0027 at the end"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "save: manually save the list of tasks without closing the program"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  save"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "bye: closes the program"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  bye"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo: add a todo task to the list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  todo t/TASKNAME"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  todo t/clean room"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline: add a task with a deadline to the list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  deadline t/TASKNAME d/DUE_DATE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  deadline t/write essay d/31-12-2020 04:55"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  deadline t/submit report d/30-10-2020"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event: add a scheduled event task to the list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  event t/TASKNAME s/START_TIME e/END_TIME"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  event t/clean room s/31-12-2020 04:55 e/31-12-2020 05:45"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  event t/clean room s/31-12-2020 e/31-12-2020"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "load: add tasks from existing file"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  load"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done: marks indicated task done (choose number from list)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  done TASK_INDEX"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  done 1"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone: marks indicated task undone (choose number from list)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  undone TASK_INDEX"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  undone 1"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete: deletes indicated task (choose number from list)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  delete TASK_INDEX"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  delete 1"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list: displays the complete list of tasks entered"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter: filters out tasks from the list according to the parameters"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  filter st/SEARCH_TERM sb/START_BEFORE sa/START_AFTER eb/END_BEFORE"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        ea/END_AFTER db/DUE_BEFORE da/DUE_AFTER tt/TASK_TYPES cs/COMPLETION_STATUS"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  filter tt/event sb/13-01-2019 ea/31-01-2020"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  filter tt/event todo st/homework"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  filter tt/deadline,todo db/14-04-2020 16:40"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Note: Check user guide for more verbose description"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "username: allows user to set username"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  username USERNAME"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  username Sophia"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider: select a divider for customisation"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  dividers available:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1) SPARKLY ─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "2) PLAIN ----------------------------------------------"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "3) SIMPLE *---*---*---*---*---*---*---*---*---*---*---*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "4) DOUBLE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  divider DIVIDER_INDEX"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  divider 1"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "-----"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "NOTE: datetime entries can be of the format"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    \"dd-MM-yyyy HH:mm\" with time in 24-Hour format"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    OR \"dd-MM-yyyy\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "for the shortened list of commands"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Here is the list of commands I understand:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help: displays a list of commands tootie understands"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filepath: Display file paths of save files"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "save: manually save the list of tasks without closing"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "bye: closes the program"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo: add a todo task to the list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline: add a task with a deadline to the list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event: add a scheduled event task to the list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "load: add tasks from existing file"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done: marks indicated task done (choose number from list)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone: marks indicated task undone (choose number from list)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete: deletes indicated task (choose number from list)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list: displays the complete list of tasks entered"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter: filters out tasks from the list according to the parameters"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "username: allows user to set username"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider: select a divider for customisation"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "-----"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  NOTE: search for a specific definition by typing help [COMMAND]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    Example: help filter  "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  NOTE: type \"full\" as the argument for a full list of commands"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    Example: help full"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "searching for a specific command"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help divider"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider: select a divider for customisation"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  dividers available:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1) SPARKLY ─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "2) PLAIN ----------------------------------------------"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "3) SIMPLE *---*---*---*---*---*---*---*---*---*---*---*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "4) DOUBLE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  divider DIVIDER_INDEX"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  divider 1"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Display file paths: `filepath` or `filepaths`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Display file paths of save files"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `filepath` or `filepaths`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The command can be spelled with or without the \u0027s\u0027 at the end"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filepath`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filepaths`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filepath"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "The list of saved tasks can be found at:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "C:/Users/Amelia/Documents/GitHub/ip/text-ui-test/data/allTasks.txt"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "The list of saved settings can be found at:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "C:/Users/Amelia/Documents/GitHub/ip/text-ui-test/data/tootieSettings.txt"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "OR"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filepaths"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "The list of saved tasks can be found at:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "C:/Users/Amelia/Documents/GitHub/ip/text-ui-test/data/allTasks.txt"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "The list of saved settings can be found at:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "C:/Users/Amelia/Documents/GitHub/ip/text-ui-test/data/tootieSettings.txt"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Manually save all tasks: `save`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Allows user to manually save all tasks in the list to the save file"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `save`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* It is not necessary to use this function as the list is automatically saved at the end of the program, but the user may do so anyway in case the program was closed accidentally."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`save`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "save"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "All tasks saved!"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Close the program: `bye`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Signals the end of the program use and automatically saves settings and tasks in the task list"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "bye"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Bye Sophia! Hope to see you again soon! (◠‿◠✿)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "All tasks saved."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "All settings saved."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 2) Add Task items"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Add a `todo`, `deadline` or`event` to the list of tasks."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Add a todo: `todo`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Adds a new todo task to the list of tasks."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `todo n/TASKNAME`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TODO_NAME` cannot contain slashes.  "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`todo n/Write the rest of the User Guide`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`todo n/Refactor the User Guide to remove passive voice`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo t/clean turtle tank"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "added todo: clean turtle tank"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Formatting errors caught:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Check todo input formatting!"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo: add a todo task to the list"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Parameters:  todo t/TASKNAME"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  Example:  todo t/clean room"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo t/"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo taskname is empty? (・∧‐)ゞ"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Add a deadline: `deadline`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Adds a new deadline task to the list of tasks."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `deadline t/TASKNAME d/DUE_DATE`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASKNAME` cannot contain slashes.  "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `DUE_DATE` can be of the format \"dd-MM-yyyy HH:mm\" with the time in 24-Hr format or \"dd-MM-yyyy\"."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `DUE_DATE` must be a valid calendar date. "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The parameters can be in any order"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`deadline t/write essay d/31-12-2020 04:55`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`deadline t/submit report d/30-10-2020`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`deadline d/30-10-2020 t/submit report `"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if no time is added the time defaults to 12:00AM"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline t/write essay d/31-12-2020"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "added deadline:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "write essay (by: Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "time entered should be in 24-Hr format"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline t/do project d/30-01-2020 04:55"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "added deadline:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "do project (by: Thu 30 Jan 2020 04:55 AM)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Add an event: `event`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Adds a new scheduled event task to the list of tasks."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `event t/TASKNAME s/START_TIME e/END_TIME`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASKNAME` cannot contain slashes.  "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `START_TIME` and `END_TIME` can be of the format \"dd-MM-yyyy HH:mm\" with the time in 24-Hr format or \"dd-MM-yyyy\"."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `START_TIME` should be before the `END_TIME`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The parameters can be in any order"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`event t/clean room s/31-12-2020 04:55 e/31-12-2020 05:45`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`event t/clean room s/31-12-2020 e/31-12-2020`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`event e/31-12-2020 t/clean room s/31-12-2020`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if no time is added the time defaults to 12:00AM"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean kitchen s/12-12-2020 e/31-12-2020"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "added event:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "clean kitchen (from: Sat 12 Dec 2020 12:00 AM to Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "time entered should be in 24-Hr format"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean shoes s/01-02-2020 e/31-12-2020 05:45"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "added event:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "clean shoes (from: Sat 1 Feb 2020 12:00 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Add tasks from existing file: `load`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Load tasks from an existing allTasks.txt file and add them to the list of tasks in the current session."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `load`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The user will be prompted to indicate the full file path of the existing file. "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The user may cancel the operation by typing `cancel` instead of the file path when prompted."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`load`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "load"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Loading allTasks.txt save file..."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Enter the full path to existing file (type \"cancel\" to cancel):"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "C:\\Users\\Sophie\\Documents\\GitHub\\ip\\text-ui-test\\data\\allTasks.txt"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "3 tasks expected from file."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "3 tasks read successfully!"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Total tasks in list: 11"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "It is possible to cancel the operation."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "load"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Loading allTasks.txt save file..."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Enter the full path to existing file (type \"cancel\" to cancel):"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "cancel"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Cancelled \"load save file\" operation"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 3) Modify task list"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Mark a task as `done` or `undone`, or `delete` the task from the list."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Mark a task done: `done`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Marks an indicated task done by index"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `done TASK_INDEX`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_INDEX` should be within range of tasks in the list"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    [E][✓] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if the task index is out of bounds this error would appear"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "No such task? (・∧‐)ゞ"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Mark a task undone: `undone`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Marks an indicated task undone by index"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `undone TASK_INDEX`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_INDEX` should be within range of tasks in the list"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`undone 1`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone 5"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Aww... I\u0027ve marked this task undone:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    [D][✗] write essay (by: Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "(╥﹏╥)"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if the task index is out of bounds this error would appear"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone 0"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "No such task? (・∧‐)ゞ"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Delete a task: `delete`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Delete a task from the task list by index"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `delete TASK_INDEX`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_INDEX` should be within range of tasks in the list"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Yay! I have deleted this task:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    [D][✓] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if the task index is out of bounds this error would appear"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "No such task? (・∧‐)ゞ"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 4) List view"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "View all tasks in the list, or run a filtered search for specific tasks"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### List all tasks: `list`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Displays all the tasks in the list"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "You have 10 tasks, 9 not done"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. [T][✗] clean shoes"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "2. [D][✗] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "3. [E][✓] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "4. [T][✗] clean turtle tank"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "5. [D][✗] write essay (by: Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "6. [D][✗] do project (by: Thu 30 Jan 2020 04:55 AM)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "7. [E][✗] clean house (from: Thu 31 Dec 2020 12:00 AM to Fri 5 Feb 2021 12:00 AM)"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "8. [E][✗] clean kitchen (from: Sat 12 Dec 2020 12:00 AM to Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "9. [E][✗] clean shoes (from: Sat 1 Feb 2020 12:00 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "10. [E][✗] clean socks (from: Sat 1 Feb 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Filtered search: `filter`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Filters out tasks from the list according to the parameters"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `filter st/SEARCH_TERM sb/START_BEFORE sa/START_AFTER eb/END_BEFORE ea/END_AFTER db/DUE_BEFORE da/DUE_AFTER tt/TASK_TYPES cs/COMPLETION_STATUS`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The parameters can be in any order."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The command should contain at least one search parameter."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `SEARCH_TERM` cannot contain slashes and is case-sensitive.  "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_TYPES` should not contain slashes, and should contain desired task types, which are `todo`, `deadline` and`event`."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  * If no `TASK_TYPES` parameter is specified, the function will filter for all 3 types, regardless of other filter parameters."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `TASK_TYPES` can be separated by any delimiter of your choice other than a `/`, and may be in any order, and is not case-sensitive. "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  * For example, `tt/event todo`, `tt/TODO,deadline` and `tt/eventdeadline` are all valid."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `START_BEFORE`, `START_AFTER`, `END_BEFORE`, `END_AFTER`, `DUE_BEFORE`, `DUE_AFTER`, are dates and can be of the format \"dd-MM-yyyy HH:mm\" with the time in 24-Hr format or \"dd-MM-yyyy\"."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `START_BEFORE` applies to `Event` tasks and filters for events which start time is before this date."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `START_AFTER` applies to `Event` tasks and filters for events which start time is after this date."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `END_BEFORE` applies to `Event` tasks and filters for events which end time is before this date."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `END_AFTER` applies to `Event` tasks and filters for events which end time is after this date."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `DUE_BEFORE` applies to `Deadline` tasks and filters for deadlines which due date is before this date."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  *  `DUE_AFTER` applies to `Deadline` and filters for deadlines which due date is after this date."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* If the \"before\" dates are after the \"after\" dates, they will be automatically swapped."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* For the `COMPLETION_STATUS`, passing the argument `done` filters for tasks that are done, while passing `undone` filters for arguments that are not done."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filter tt/event sb/13-01-2019 ea/31-01-2020`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filter tt/event todo st/homework`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filter tt/deadline,todo`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filter st/clean`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`filter cs/done`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter tt/event,todo"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. [T][✗] clean shoes"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "2. [E][✓] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "3. [T][✓] clean turtle tank"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "5. [E][✗] clean house (from: Thu 31 Dec 2020 12:00 AM to Fri 5 Feb 2021 12:00 AM)"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "6. [E][✗] clean kitchen (from: Sat 12 Dec 2020 12:00 AM to Thu 31 Dec 2020 12:00 AM)"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "7. [E][✗] clean shoes (from: Sat 1 Feb 2020 12:00 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "8. [E][✗] clean socks (from: Sat 1 Feb 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Filtered! 7 tasks found, 5 incomplete."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 5) Customisation"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Customise Tootie by changing your username, and the style of line divider used."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Change username: `username`"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Change username stored in system"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `username USERNAME`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `USERNAME` may have spaces"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`username Tootie`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "username Sophia"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Hello Sophia!(◠‿◠✿)"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Also the greeting and farewell will change accordingly"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Hello Ames! I\u0027m Tootie!"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Bye Sophia! Hope to see you again soon! (◠‿◠✿)"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Select a new divider: `divider`"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Select a divider from the list of dividers for customisation"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  dividers avaliable:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. SPARKLY ─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. PLAIN ----------------------------------------------"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. SIMPLE *---*---*---*---*---*---*---*---*---*---*---*"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. DOUBLE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `divider DIVIDER_INDEX`"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* The `DIVIDER_INDEX` should be a number from 1 to 4"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "`divider 1`"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 3"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider changed! (◠‿◠✿)"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "*---*---*---*---*---*---*---*---*---*---*---*"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 2"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "*---*---*---*---*---*---*---*---*---*---*---*"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider changed! (◠‿◠✿)"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "----------------------------------------------"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 4"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "----------------------------------------------"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider changed! (◠‿◠✿)"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 1"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider changed! (◠‿◠✿)"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "if the divider index is out of bounds this error would appear"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 6"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider choice not found? (・∧‐)ゞ"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "─────── ✱*.｡:｡✱*.:｡✧*.｡✰*.:｡✧*.｡:｡*.｡✱ ───────"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 6) Basic error handling"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "If an unrecognised command is used, Tootie will feedback to the user."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Unrecognised commands"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "blah"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Command not found? (・∧‐)ゞ"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Type \"help\" for a list of commands!"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### 7) Set up file paths"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Initial interaction with Tootie to set up allTasks.txt and tootieSettings.txt save locations"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Ask user for allTasks.txt absolute path"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**A**: Copy the allTasks.txt into a folder labelled \"data\" and state the absolute file path when prompted. The saved settings file is automatically generated."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**Q**: How do I find the save files for allTasks.txt and tootieSettings.txt?"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**A**: Use the `filepath` command in the program to retrieve the absolute file paths for both files. \\(Note: they may not be in the same location\\)"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**Q**: Can I change the Tootie logo at the start of the program?"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**A**: No. It is randomly decided by the program."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**Q**: Can I modify the saved list of tasks directly?"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**A**: Yes, follow the format indicated in the file header for tasks to be read correctly"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " Command | Purpose | Syntax"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "---------|---------|-------"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help|Bring up help guide|_help \\[COMMAND\\]_"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filepath|Display file paths|_filepath_ or _filepaths_ "
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "save|Save all tasks|_save_"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "bye|Close the program|_bye_ "
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo|Add a todo|_todo n/TASKNAME_"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline|Add a deadline|_deadline t/TASKNAME d/DUE_DATE_"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event|Add an event|_event t/TASKNAME s/START_TIME e/END_TIME_"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "load|Add tasks from existing file|_load_"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done|Mark a task done|_done 1_"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone|Mark a task undone|_undone 1_"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete|Delete a task|_delete 1_"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list |List all tasks|_list_"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter|Filtered search|_filter st/SEARCH_TERM sb/START_BEFORE sa/START_AFTER eb/END_BEFORE ea/END_AFTER db/DUE_BEFORE da/DUE_AFTER tt/TASK_TYPES_"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "username|Change username|_username Ames_"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider|Mark a task done|_divider 1_"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 731
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.DividerChoice;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieConstants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieFilePaths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.storage.AllTasksLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.storage.AllTasksSaver;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.storage.SettingsLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.storage.SettingsSaver;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.tootieFunctions.CommandExecutor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.ui.Printers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.ui.UserInputHandlers;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ALL_SETTINGS_SAVED_MSG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ALL_TASKS_SAVED_MSG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.parsers.Parsers.parseLineDividerFromString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.storage.SettingsLoader.addSavedSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Entry point of the Tootie Tasklist application."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Scanner to read input from the console"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * An array containing all tasks the user has input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static ArrayList\u003cTask\u003e allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Number of Tasks in the allTasks array"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static AtomicInteger numTasks \u003d new AtomicInteger(TootieConstants.INITIAL_NUMBER_OF_TASKS_IN_LIST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static AtomicInteger numTasksCompleted \u003d new AtomicInteger(TootieConstants.INITIAL_NUMBER_OF_TASKS_COMPLETED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * settings set to defaults"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String tootieSettingsFilePath \u003d TootieFilePaths.DEFAULT_TOOTIE_SETTINGS_FILE_PATH;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String allTasksFilePath \u003d TootieFilePaths.DEFAULT_ALL_TASKS_FILE_PATH;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static DividerChoice dividerChoice \u003d DividerChoice.SPARKLY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String username \u003d \"user\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static ArrayList\u003cString\u003e savedSettings \u003d new ArrayList\u003c\u003e(TootieConstants.NUMBER_OF_SETTINGS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        run();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void run() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        saveTasksAndSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Loads saved items, and prints the welcome message."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void start() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Printers.printTootieLogo();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Printers.printDivider();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        loadTasksAndSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Printers.printHelloMessage(username);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Loads all the saved Tasks and Settings"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void loadTasksAndSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        addSavedSettings(savedSettings, tootieSettingsFilePath, allTasksFilePath, dividerChoice, username);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SettingsLoader.loadTootieSettingsFile(savedSettings, tootieSettingsFilePath,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasksFilePath, dividerChoice, username);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        updateSettingsVariables(savedSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Printers.printDivider();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        ArrayList\u003cString\u003e allTasksFilePathReturn \u003d new ArrayList\u003c\u003e(TootieConstants.NUMBER_OF_FILE_PATHS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        AllTasksLoader.loadAllTasksFile(false, allTasks, SCANNER,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasksFilePath, numTasks, numTasksCompleted,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasksFilePathReturn);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Loads the saved settings variables into the current session"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings list of saved settings parsed from settings file"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void updateSettingsVariables(ArrayList\u003cString\u003e savedSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        tootieSettingsFilePath \u003d savedSettings.get(TootieConstants.SETTINGS_FILE_PATH_ARRAY_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasksFilePath \u003d savedSettings.get(TootieConstants.ALL_TASKS_FILE_PATH_ARRAY_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        dividerChoice \u003d parseLineDividerFromString(savedSettings.get(TootieConstants.DIVIDER_CHOICE_ARRAY_INDEX));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        username \u003d savedSettings.get(TootieConstants.USERNAME_ARRAY_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Reads user commands until the \"bye\" command is entered"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        CommandType commandType \u003d CommandType.START;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // process commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (commandType !\u003d CommandType.BYE) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            userInput \u003d UserInputHandlers.getUserInput(SCANNER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Printers.printDivider();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            commandType \u003d CommandExecutor.extractCommandType(userInput);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            CommandExecutor.executeCommand(savedSettings, commandType, userInput, allTasks, tootieSettingsFilePath,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    allTasksFilePath, numTasks, numTasksCompleted, username, SCANNER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // load settings if any were changed"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            updateSettingsVariables(savedSettings);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Printers.printDivider();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Saves all the updated list of Tasks and Settings into the .txt files"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void saveTasksAndSettings() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // Save tasks and settings"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            allTasksFilePath \u003d AllTasksSaver.saveAllTasks(allTasks, allTasksFilePath, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(ALL_TASKS_SAVED_MSG);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            SettingsSaver.saveTootieSettings(tootieSettingsFilePath, allTasksFilePath, username, dividerChoice);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(ALL_SETTINGS_SAVED_MSG);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Printers.printDivider();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 148,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/constants/CommandKeywords.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CommandKeywords {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Keywords used to indicate commands in user inputs */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELP_COMMAND_KEYWORD \u003d \"help\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TODO_COMMAND_KEYWORD \u003d \"todo\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEADLINE_COMMAND_KEYWORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String EVENT_COMMAND_KEYWORD \u003d \"event\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LIST_COMMAND_KEYWORD \u003d \"list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DONE_COMMAND_KEYWORD \u003d \"done\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BYE_COMMAND_KEYWORD \u003d \"bye\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DELETE_COMMAND_KEYWORD \u003d \"delete\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String UNDONE_COMMAND_KEYWORD \u003d \"undone\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DIVIDER_COMMAND_KEYWORD \u003d \"divider\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String USERNAME_COMMAND_KEYWORD \u003d \"username\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILTER_COMMAND_KEYWORD \u003d \"filter\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SAVE_COMMAND_KEYWORD \u003d \"save\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILEPATH_COMMAND_KEYWORD \u003d \"filepath\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LOAD_COMMAND_KEYWORD \u003d \"load\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELP_FULL_COMMAND_KEYWORD \u003d \"ful\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Filter command tags */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDTIME_AFTER_TAG \u003d \"ea\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDTIME_BEFORE_TAG \u003d \"eb\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String STARTTIME_AFTER_TAG \u003d \"sa\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String STARTTIME_BEFORE_TAG \u003d \"sb\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DUEDATE_AFTER_TAG \u003d \"da\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DUEDATE_BEFORE_TAG \u003d \"db\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SEARCH_TERM_TAG \u003d \"st\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASK_TYPE_TAG \u003d \"tt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Add tasks command tags */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASKNAME_TAG \u003d \"t\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String STARTTIME_TAG \u003d \"s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDTIME_TAG \u003d \"e\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DUEDATE_TAG \u003d \"d\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Divider type keywords */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SPARKLY_KEYWORD \u003d \"sparkly\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SIMPLE_KEYWORD \u003d \"simple\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String PLAIN_KEYWORD \u003d \"plain\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 42
    }
  },
  {
    "path": "src/main/java/duke/constants/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Types of commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    START,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    HELP,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    ADD_TODO,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    ADD_EVENT,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    ADD_DEADLINE,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    MARK_TASK_DONE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    BYE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    SAVE,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    DELETE_TASK,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    MARK_TASK_UNDONE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    CHOOSE_DIVIDER,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    SET_USERNAME,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    FILTER_TASKS,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    PRINT_FILE_PATHS,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    LOAD_MORE_TASKS,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    UNRECOGNISED"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 25
    }
  },
  {
    "path": "src/main/java/duke/constants/DateFormats.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Date formats for user inputs and file lines"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DateFormats {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Regex for date formats */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DATE_WITHOUT_TIME_REGEX \u003d \"([0-9]{2})-([0-9]{2})-([0-9]{4})\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DATE_WITH_TIME_REGEX \u003d \"([0-9]{2})-([0-9]{2})-([0-9]{4}) ([0-9]{2}):([0-9]{2})\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Date formats for parsers */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String USER_INPUT_DATE_WITH_TIME_FORMAT \u003d \"dd-MM-yyyy HH:mm\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String USER_INPUT_DATE_WITHOUT_TIME_FORMAT \u003d \"dd-MM-yyyy\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String OUTPUT_DATE_FORMAT \u003d \"EEE d MMM yyyy hh:mm aa\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEFAULT_COMPLEX_DATE_FORMAT \u003d \"EEE MMM d HH:mm:ss zzz yyyy\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 16
    }
  },
  {
    "path": "src/main/java/duke/constants/DividerChoice.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Types of dividers"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public enum DividerChoice {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    SPARKLY,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    PLAIN,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    SIMPLE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    DOUBLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 11
    }
  },
  {
    "path": "src/main/java/duke/constants/Tags.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Tags to mark arguments"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Tags {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Settings file loader tags */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LOADING_SETTINGS_MSG \u003d \"Loading tootieSettings.txt save file...\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TOOTIE_SETTINGS_FILEPATH_TAG \u003d \"+ Tootie settings:\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ALL_TASKS_FILEPATH_TAG \u003d \"+ All Tasks:\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DIVIDER_CHOICE_TAG \u003d \"+ Divider choice:\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String USERNAME_TAG \u003d \"+ Username:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** All tasks file loader tags */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASK_COMPLETED_FLAG \u003d \"1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NUM_TASKS_TAG \u003d \"Tasks:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Load file options */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LOAD_OPTION_1 \u003d \"1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LOAD_OPTION_2 \u003d \"2\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LOAD_OPTION_CANCEL \u003d \"cancel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Tags in parsers */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TOTAL_TASKS_TAG_FORMAT \u003d \"Total tasks: (\\\\d+)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 26
    }
  },
  {
    "path": "src/main/java/duke/constants/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Types of tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    TASK,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    INVALID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 12
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieConstants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Numerical constants used in program"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieConstants {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Number of variations on the Tootie logo  */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final int NUM_LOGOS_AVAILABLE \u003d 4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Number of settings saved  */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final int NUMBER_OF_SETTINGS \u003d 4;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final int ALL_TASKS_FILE_PATH_ARRAY_INDEX \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final int NUMBER_OF_FILE_PATHS \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final int SETTINGS_FILE_PATH_ARRAY_INDEX \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final int DIVIDER_CHOICE_ARRAY_INDEX \u003d 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final int USERNAME_ARRAY_INDEX \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final int INITIAL_NUMBER_OF_TASKS_IN_LIST \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final int INITIAL_NUMBER_OF_TASKS_COMPLETED \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 20
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieErrorMsgs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Error messages to indicate errors"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieErrorMsgs {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Newline object specific to system used  */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** User input wrong format error messages  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TODO_WRONG_FORMAT_MSG \u003d \"Check todo input formatting!\" + NEWLINE + NEWLINE + TootieNormalMsgs.TODO_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEADLINE_WRONG_FORMAT_MSG \u003d \"Check deadline input formatting!\" + NEWLINE + NEWLINE + TootieNormalMsgs.DEADLINE_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DUEDATE_WRONG_FORMAT_MSG \u003d \"Check due date formatting!\" + NEWLINE + NEWLINE + TootieNormalMsgs.DEADLINE_COMMAND_DESCRIPTION + NEWLINE + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE + NEWLINE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String EVENT_WRONG_FORMAT_MSG \u003d \"Check event input formatting!\" + NEWLINE + NEWLINE + TootieNormalMsgs.EVENT_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String STARTDATE_WRONG_FORMAT_MSG \u003d \"Check start date formatting!\" + NEWLINE + NEWLINE + TootieNormalMsgs.EVENT_COMMAND_DESCRIPTION + NEWLINE + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE + NEWLINE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDDATE_WRONG_FORMAT_MSG \u003d \"Check end date formatting!\" + NEWLINE + NEWLINE + TootieNormalMsgs.EVENT_COMMAND_DESCRIPTION + NEWLINE + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE + NEWLINE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Unrecognised command messages  */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String COMMAND_NOT_FOUND_MSG \u003d \"Command not found? \" + TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SUGGEST_HELP_OPTION_MSG \u003d \"Type \\\"help\\\" for a list of commands!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Error messages for invalid dates  */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String INVALID_DUE_DATE_MSG \u003d \"Invalid due date\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String INVALID_START_DATE_MSG \u003d \"Invalid start date\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String INVALID_END_DATE_MSG \u003d \"Invalid end date\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDTIME_BEFORE_STARTIME_ERROR_MSG \u003d \"Error! End time cannot be before start time!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Required field empty error  */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TODO_TASKNAME_EMPTY_MSG \u003d \"todo taskname is empty? \" + TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEADLINE_TASKNAME_EMPTY_MSG \u003d \"deadline taskname is empty? \" + TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String EVENT_TASKNAME_EMPTY_MSG \u003d \"event taskname is empty? \" + TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Error messages for task index out of bounds  */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASK_NOT_FOUND_ERROR_MSG \u003d \"No such task? \" + TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TasklistEmptyMsg \u003d \"No tasks found! \" + TootieSymbols.HAPPY_EMOTICON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 37
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieFileMsgs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Messages formatted to save files"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieFileMsgs {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Newline object specific to system used  */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Instructions header for Tasks save file  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String INDICATOR_INSTRUCTION \u003d \"Task completion status:\" + NEWLINE + \"0 is not done(\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            TootieSymbols.CROSS_SYMBOL + \"), 1 is done(\" + TootieSymbols.TICK_SYMBOL + \")\" + NEWLINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASK_TYPE_INSTRUCTION \u003d \"Task types (T,D,E):\" + NEWLINE +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"T is to-do, D is deadline, E is event\" + NEWLINE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String EXAMPLE_INSTRUCTION \u003d \"Examples:\" + NEWLINE + \"[T][0] clean shoes\" + NEWLINE +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"[D][0] do project (by: Thu 30 Jan 2020 04:55 PM)\" + NEWLINE + \"\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"[E][1] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)\" + NEWLINE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASK_LIST_START \u003d \"--------------------------------------------------------\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            NEWLINE+ \"Tasks:\" + NEWLINE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ALL_TASKS_FILE_INSTRUCTIONS_HEADER \u003d INDICATOR_INSTRUCTION + NEWLINE +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            TASK_TYPE_INSTRUCTION + NEWLINE + EXAMPLE_INSTRUCTION + NEWLINE + TASK_LIST_START;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TOTAL_TASKS_FILE_LINE \u003d \"Total tasks: %1$d\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASKS_COMPLETED_FILE_LINE \u003d \"Tasks completed: %1$d\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Instructions header for settings save file  */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TOOTIE_SETTINGS_FILE_DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TOOTIE_SETTINGS_FILE_INSTRUCTIONS_HEADER \u003d \"INFORMATION\" + NEWLINE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + TootieSymbols.VERSION + NEWLINE + NEWLINE + TOOTIE_SETTINGS_FILE_DIVIDER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TOOTIE_SETTINGS_FILE_PATHS_FORMAT \u003d \"FILE PATHS\" + NEWLINE + \"+ Tootie settings: %1$s\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + NEWLINE + \"+ All Tasks: %2$s\" + NEWLINE + NEWLINE + TOOTIE_SETTINGS_FILE_DIVIDER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TOOTIE_SETTINGS_USER_PREFERENCES_FORMAT \u003d \"USER PREFERENCES\" + NEWLINE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"+ Divider choice: %1$s\" + NEWLINE + \"+ Username: %2$s\" + NEWLINE + NEWLINE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + TOOTIE_SETTINGS_FILE_DIVIDER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 36
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieFilePaths.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Default file paths for save files"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieFilePaths {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Default path to file for saving tasks  */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEFAULT_ALL_TASKS_FILE_PATH \u003d \"data/allTasks.txt\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Default path to file for saving settings  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEFAULT_TOOTIE_SETTINGS_FILE_PATH \u003d \"data/tootieSettings.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 12
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieInputMarkers.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Special symbols to mark specific strings"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieInputMarkers {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Used to mark off comment lines in the text-ui-test input  */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String INPUT_COMMENT_MARKER \u003d \"#\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Markers to separate user input parameters */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASKNAME_MARKER \u003d \"t/\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String STARTTIME_MARKER \u003d \"s/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDTIME_MARKER \u003d \"e/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DUEDATE_MARKER \u003d \"d/\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 15
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieNormalMsgs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Messages printed to console"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieNormalMsgs {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Newline object specific to system used"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Help command descriptions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEADLINE_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"deadline: add a task with a deadline to the list\" + NEWLINE + \"  Parameters:  deadline t/TASKNAME \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"d/DUE_DATE\" + NEWLINE + \"  Example:  deadline t/write essay d/31-12-2020 04:55\" + NEWLINE + \"  \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"Example:  deadline t/submit report d/30-10-2020\" + NEWLINE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String EVENT_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"event: add a scheduled event task to the list\" + NEWLINE + \"  Parameters:  event t/TASKNAME \" + \"s\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    \"/START_TIME\" + \" \" + \"e/END_TIME\" + NEWLINE + \"  Example:  event t/clean room s/31-12-2020 \" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    \"04:55 e/31-12-2020 \" + \"05:45\" + NEWLINE + \"  Example:  event t/clean room s/31-12-2020 \" + \"e\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"/31-12-2020\" + NEWLINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DONE_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"done: marks indicated task done (choose number from list)\" + NEWLINE + \"  Parameters:  done TASK_INDEX\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + NEWLINE + \"  Example:  done 1\" + NEWLINE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String UNDONE_COMMAND_DESCRIPTION \u003d \"undone: marks indicated task undone (choose number from \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"list)\" + NEWLINE + \"  Parameters:  undone TASK_INDEX\" + NEWLINE + \"  Example:  undone 1\" + NEWLINE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DELETE_COMMAND_DESCRIPTION \u003d \"delete: deletes indicated task (choose number from list)\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + NEWLINE + \"  Parameters:  delete TASK_INDEX\" + NEWLINE + \"  Example:  delete 1\" + NEWLINE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LIST_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"list: displays the complete list of tasks entered\" + NEWLINE + \"  Example:  list\" + NEWLINE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BYE_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"bye: closes the program\" + NEWLINE + \"  Example:  bye\" + NEWLINE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DATE_FORMAT_MESSAGE \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"NOTE: datetime entries can be of the format\" + NEWLINE + \"    \" + \"\\\"dd-MM-yyyy \" + \"HH:mm\\\" with time \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"in 24-Hour format\" + NEWLINE + \"    OR \\\"dd-MM-yyyy\\\"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TODO_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"todo: add a todo task to the\" + \" list\" + NEWLINE + \"  \" + \"Parameters:  todo t/TASKNAME\" + NEWLINE + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \" Example:  todo t/clean room\" + NEWLINE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELP_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"help: displays a list of commands tootie understands\" + NEWLINE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  or search for a specific command for the command description\" + NEWLINE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  Parameters:  help [COMMAND]\" + NEWLINE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  Example:  help\" + NEWLINE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  Example:  help filter\" + NEWLINE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String USERNAME_COMMAND_DESCRIPTION \u003d \"username: allows user to set username\" + NEWLINE + \"  \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"Parameters:  username USERNAME\" + NEWLINE + \"  Example:  username Sophia\" + NEWLINE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DIVIDER_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"divider: select a divider for customisation\" + NEWLINE + \"  dividers available:\" + NEWLINE + \"1) SPARKLY\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \" \" + TootieSymbols.SPARKLY_TEXT_DIVIDER + NEWLINE + \"2) PLAIN \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + TootieSymbols.PLAIN_TEXT_DIVIDER + NEWLINE + \"3) SIMPLE \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + TootieSymbols.SIMPLE_TEXT_DIVIDER + NEWLINE + \"4) DOUBLE \" + TootieSymbols.DOUBLE_TEXT_DIVIDER"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + NEWLINE + \"  Parameters:  divider DIVIDER_INDEX\" + NEWLINE + \"  Example:  divider 1\" + NEWLINE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILEPATH_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"filepath: Display file paths of save files\" + NEWLINE + \"  Example:  filepath\" + NEWLINE + \"  Example:  \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"filepaths\" + NEWLINE + \"  Note: The command can be spelled with or without the \u0027s\u0027 at the end\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + NEWLINE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILTER_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"filter: filters out tasks from the list according to \" + \"the parameters\" + NEWLINE + \"  Parameters:  \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"filter st/SEARCH_TERM sb/START_BEFORE sa/START_AFTER eb/END_BEFORE\" + NEWLINE"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"        \" + \"ea/END_AFTER db/DUE_BEFORE da/DUE_AFTER tt/TASK_TYPES cs/COMPLETION_STATUS\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + NEWLINE"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  Example:  filter tt/event \" + \"sb/13-01-2019 ea/31-01-2020\" + NEWLINE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  Example:  filter tt/event todo \" + \"st/homework\" + NEWLINE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  Example:  filter tt/deadline,todo db/14-04-2020 16:40\" + NEWLINE + \"  Note: \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"Check user guide for more verbose description\" + NEWLINE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SAVE_COMMAND_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"save: manually save the list of tasks without closing \" + \"the\" + \" program\" + NEWLINE + \"  Example:  \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"save\" + NEWLINE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LOAD_COMMAND_DESCRIPTION \u003d \"load: add tasks from existing file\" + NEWLINE + \"  \" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Example:  load\" + NEWLINE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELP_COMMAND_TEXT \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"help: displays a list of commands tootie understands\" + NEWLINE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"filepath: Display file paths of save files\" + NEWLINE"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"save: manually save the list of tasks without closing\" + NEWLINE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"bye: closes the program\"  + NEWLINE"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"todo: add a todo task to the list\" + NEWLINE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"deadline: add a task with a deadline to the list\" + NEWLINE"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"event: add a scheduled event task to the list\" + NEWLINE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"load: add tasks from existing file\" + NEWLINE"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"done: marks indicated task done (choose number from list)\" + NEWLINE"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"undone: marks indicated task undone (choose number from list)\" + NEWLINE"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"delete: deletes indicated task (choose number from list)\" + NEWLINE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"list: displays the complete list of tasks entered\" + NEWLINE"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"filter: filters out tasks from the list according to the parameters\" + NEWLINE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"username: allows user to set username\" + NEWLINE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"divider: select a divider for customisation\" + NEWLINE + NEWLINE"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"-----\"  + NEWLINE"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  NOTE: search for a specific definition by typing help [COMMAND]\"  + NEWLINE"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"    Example: help filter\" + NEWLINE"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"  NOTE: type \\\"full\\\" as the argument for a full list of commands\" + NEWLINE"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    + \"    Example: help full\" ;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELP_FULL_COMMAND_TEXT \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            HELP_COMMAND_DESCRIPTION + NEWLINE + FILEPATH_COMMAND_DESCRIPTION + NEWLINE +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    SAVE_COMMAND_DESCRIPTION + NEWLINE + BYE_COMMAND_DESCRIPTION + NEWLINE +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    TODO_COMMAND_DESCRIPTION + NEWLINE + DEADLINE_COMMAND_DESCRIPTION + NEWLINE +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    EVENT_COMMAND_DESCRIPTION + NEWLINE + LOAD_COMMAND_DESCRIPTION + NEWLINE +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    DONE_COMMAND_DESCRIPTION + NEWLINE + UNDONE_COMMAND_DESCRIPTION + NEWLINE +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    DELETE_COMMAND_DESCRIPTION + NEWLINE +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    LIST_COMMAND_DESCRIPTION + NEWLINE + FILTER_COMMAND_DESCRIPTION + NEWLINE +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    USERNAME_COMMAND_DESCRIPTION + NEWLINE + DIVIDER_COMMAND_DESCRIPTION + NEWLINE +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    \"-----\" + NEWLINE + DATE_FORMAT_MESSAGE + NEWLINE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELP_INFO_MSG \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Here is the list of commands I understand:\" + NEWLINE + NEWLINE + HELP_COMMAND_TEXT;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NO_SUCH_COMMAND_IN_LIST_ERROR_MSG \u003d \"No such command in command list!\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Greetings"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FAREWELL_GREETING \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Bye %1$s! Hope to see you again soon! \" + TootieSymbols.FLOWER_SMILE_EMOTICON + NEWLINE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELLO_GREETING \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Hello %1$s! I\u0027m Tootie!\" + NEWLINE + \"What can I do for you?\" + NEWLINE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Task modification response messages"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASK_MARKED_DONE_RESPONSE_MSG \u003d \"Nice! I\u0027ve marked this task as done:\" + NEWLINE + \"  \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"  %1$s\" + TootieSymbols.TICK_SYMBOL + \" %2$s\" + NEWLINE + TootieSymbols.SPARKLY_EMOTICON;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASK_MARKED_UNDONE_RESPONSE_MSG \u003d \"Aww... I\u0027ve marked this task undone:\" + NEWLINE +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"    %1$s\" + TootieSymbols.CROSS_SYMBOL + \" %2$s\" + NEWLINE + TootieSymbols.SAD_EMOTICON;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASK_DELETED_RESPONSE_MSG \u003d \"Yay! I have deleted this task:\" + NEWLINE + \"    \" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"%1$s%2$s %3$s\" + NEWLINE + TootieSymbols.SPARKLY_EMOTICON;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Message formats"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LIST_TASK_FORMAT \u003d \"%1$d. %2$s%3$s %4$s\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ADDED_EVENT_FORMAT \u003d \"added event:\" + NEWLINE + \"%1$s\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ADDED_DEADLINE_FORMAT \u003d \"added deadline:\" + NEWLINE + \"%1$s\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ADDED_TODO_FORMAT \u003d \"added todo: \" + \"%1$s\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LOGO_PRINT_FORMAT \u003d \"Hello from\" + NEWLINE + \"%1$s\" + NEWLINE + TootieSymbols.VERSION;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NUMTASKS_PRINT_FORMAT \u003d \"You have %1$d task%2$s, %3$s not done\" + NEWLINE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASKS_ALL_DONE_MSG \u003d \"All done \" + TootieSymbols.HAPPY_EMOTICON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELLO_NAME_FORMAT \u003d \"Hello %1$s! \" + TootieSymbols.FLOWER_SMILE_EMOTICON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Command response messages"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ALL_TASKS_SAVED_MSG \u003d \"All tasks saved! \" + TootieSymbols.FLOWER_SMILE_EMOTICON;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ALL_SETTINGS_SAVED_MSG \u003d \"All settings saved! \" + TootieSymbols.FLOWER_SMILE_EMOTICON;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DIVIDER_CHANGED_MSG \u003d \"Divider changed! \" + TootieSymbols.FLOWER_SMILE_EMOTICON;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DIVIDER_CHOICE_NOT_FOUND_MSG \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Divider choice not found? \" + TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String USERNAME_COMMAND_INVALID_MSG \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Username command invalid! \" + TootieSymbols.ANGRY_EMOTICON;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String USERNAME_BLANK_MSG \u003d \"Username is blank? \" + TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILTER_COMMAND_MISSING_ARGS_MSG \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Filter command missing valid arguments? \" + TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILTER_COMMAND_PARAMS_UNMATCHED_MSG \u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"No tasks matching parameters found? \" + TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Filter function message formats"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILEPATH_PRINTER_FORMAT \u003d \"The list of saved tasks can be found at:\" + NEWLINE + \"%1$s\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + NEWLINE + \"The \" + \"list of saved settings can be found at:\" + NEWLINE + \"%2$s\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ALL_FILTERED_TASKS_COMPLETE_MSG_FORMAT \u003d \"Filtered! %1$s task%2$s found, all complete!\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + NEWLINE;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILTERED_TASKS_COUNT_MSG_FORMAT \u003d \"Filtered! %1$s task%2$s found, %3$s incomplete.\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + NEWLINE;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String COMPLETION_STATUS_PARAM_INVALID_ERROR_MSG \u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Completion status param invalid. Ignoring param.\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Filter date parameters error messages"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DUEDATE_BEFORE_WRONG_FORMAT_MSG \u003d \"Date for \\\"due date before\\\" wrongly \" +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"formatted\" + \". Ignoring param.\" + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DUEDATE_AFTER_WRONGLY_FORMATTED_MSG \u003d \"Date for \\\"due date after\\\" wrongly formatted. \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"Ignoring param.\" + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DUEDATES_MATCH_WARNING_MSG \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Warning: date for \\\"due date before\\\" is the same as \" + \"date for \\\"due date after\\\".\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DUEDATES_WRONG_ORDER_MSG \u003d \"Date for \\\"due date before\\\" is before date for \\\"due \" +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"date\" + \" after\\\".\" + NEWLINE + \"Automatically swapping the two...\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String STARTTIMES_WRONG_ORDER_MSG \u003d \"Date for \\\"start time before\\\" is before date for \" +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"\\\"start time after\\\".\" + NEWLINE + \"Automatically swapping the two...\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDTIMES_WRONG_ORDER_MSG \u003d \"Date for \\\"end time before\\\" is before date for \\\"end \" +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"time\" + \" after\\\".\" + NEWLINE + \"Automatically swapping the two...\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDDATES_MATCH_WARNING_MSG \u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Warning: date for \\\"end time before\\\" is the same as \" + \"date for \\\"end time after\\\".\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDDATE_AFTER_WRONG_FORMAT_MSG \u003d \"Date for \\\"end time after\\\" wrongly formatted. \" +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Ignoring param.\" + NEWLINE + TootieNormalMsgs.DATE_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDDATE_BEFORE_WRONG_FORMAT_MSG \u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Date for \\\"end time before\\\" wrongly formatted. Ignoring param.\" + NEWLINE +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    TootieNormalMsgs.DATE_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String STARTTIMES_MATCH_WARNING_MSG \u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Warning: date for \\\"start time before\\\" is the same as date for \\\"start time after\\\".\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String STARTTIME_AFTER_WRONG_FORMAT_MSG \u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Date for \\\"end time after\\\" wrongly formatted. Ignoring param.\" + NEWLINE +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    TootieNormalMsgs.DATE_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String STARTTIME_BEFORE_WRONG_FORMAT_MSG \u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Date for \\\"end time before\\\" wrongly formatted. Ignoring param.\" + NEWLINE +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    TootieNormalMsgs.DATE_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DUEDATE_BEFORE_DATE_INVALID_MSG \u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Date for \\\"due date before\\\" not real date. Ignoring param.\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DUEDATE_AFTER_DATE_INVALID_MSG \u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Date for \\\"due date after\\\" not real date. Ignoring param.\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String STARTTIME_BEFORE_DATE_INVALID_MSG \u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Date for \\\"start time before\\\" not real date. Ignoring param.\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String STARTTIME_AFTER_DATE_INVALID_MSG \u003d"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Date for \\\"start time after\\\" not real date. Ignoring param.\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDDATE_BEFORE_DATE_INVALID_MSG \u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Date for \\\"due date before\\\" not real date. Ignoring param.\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENDDATE_AFTER_DATE_INVALID_MSG \u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Date for \\\"due date after\\\" not real date. Ignoring param.\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * File creator msg"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEW_FILE_CREATED_MSG_FORMAT \u003d \"New file created: %1$s\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String IO_ERROR_WHEN_MAKING_FILE_MSG \u003d \"IO error when making file!\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_ALREADY_EXISTS_MSG \u003d \"File already exists.\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_CREATED_PATH_MSG \u003d \"File created: \";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DIRECTORY_CREATED_SUCCESSFULLY_MSG \u003d \"Directory created successfully \" +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            TootieSymbols.HAPPY_EMOTICON;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String COULD_NOT_CREATE_DIRECTORY_MSG \u003d \"Sorry, could not create specified directory\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_PATH_TO_DIRECTORY_INVALID_MSG \u003d \"File path to directory invalid!\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_NOT_FOUND_MSG \u003d \"File does not exist.\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_AUTO_CREATED_MSG \u003d \"Auto creating new file using path: %1$s\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Settings loader messages"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ERROR_READING_FILE_ON_LINE_MSG_FORMAT \u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Error reading settings file! Error on line:\" + NEWLINE + \"%1$s\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SETTINGS_FILE_EMPTY_MSG \u003d \"tootieSettings.txt save file empty\" + NEWLINE + \"No \" +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"previous settings loaded\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SETTINGS_FILE_NOT_FOUND_MSG \u003d \"tootieSettings.txt save file not found\" + NEWLINE +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Creating new file...\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * All tasks loader messages"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ERROR_READING_DUEDATE_FROM_FILE_MSG \u003d \"Error reading due date from line:\" + NEWLINE +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"  %1$s\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ERROR_READING_ENDTIME_FROM_FILE_MSG \u003d \"Error reading end time from line:\" + NEWLINE +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"  %1$s\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ERROR_READING_STARTTIME_FROM_FILE_MSG \u003d \"Error reading start time from line:\" + NEWLINE + \"  %1$s\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ERROR_READING_FILE_LINE_MSG \u003d \"Error reading file! Error on line:\" + NEWLINE + \"%1$s\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_PATH_NO_FILE_ERROR_MSG \u003d \"File not found uwu\" + NEWLINE +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Failed to read from: %1$s\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ALL_TASKS_LOAD_OPTIONS_MSG \u003d \"Options:\" + NEWLINE + \"(1)Find existing file\" + NEWLINE + \"(2)Automatically \" +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"create \" + \"directory and file\" + NEWLINE + \"(type \\\"1\\\" or \\\"2\\\")\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LOADING_ALL_TASKS_MSG \u003d \"Loading allTasks.txt save file...\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ALL_TASKS_FILE_NOT_FOUND_MSG \u003d \"Save file not found? \" + duke.constants.TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String CANCEL_LOAD_ALL_TASKS_OPERATION_MSG \u003d \"Cancelled \\\"load save file\\\" operation\";"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SAVE_FILE_EMPTY_MSG \u003d \"Save file empty? \" + duke.constants.TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ENTER_THE_FULL_PATH_TO_EXISTING_FILE_MSG \u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Enter the full path to existing file (type \\\"cancel\\\" to cancel):\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String AUTO_CREATE_DIRECTORY_AND_FILE_MSG \u003d \"Automatically creating directory and file\";"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String RESPONSE_NOT_RECOGNISED_MSG \u003d \"Response not recognised? \" + duke.constants.TootieSymbols.CONFUSED_EMOTICON;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASKS_EXPECTED_SUMMARY_FORMAT \u003d \"%1$s task%2$s expected from file.\";"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TASKS_READ_SUCCESSFULLY_SUMMARY_FORMAT \u003d \"%1$d task%2$s read successfully!\" + NEWLINE;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TOTAL_TASKS_LOADED_SUMMARY_FORMAT \u003d \"Total task%2$s in list: %1$d\" + NEWLINE;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_HEADER_INVALID_MSG \u003d \"File header invalid!\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 260
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieRegex.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Regex strings used for comparison and format checking"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieRegex {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Regex to detect a blank line */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BLANK_STRING_REGEX \u003d \"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Regex for loaded tasks */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String EVENT_FROM_FILE_REGEX \u003d \"\\\\[E\\\\]\\\\[([0-1])\\\\](.*)\\\\(from:(.*)to(.*)\\\\)\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEADLINE_FROM_FILE_REGEX \u003d \"\\\\[D\\\\]\\\\[([0-1])\\\\](.*)\\\\(by:(.*)\\\\)\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TODO_FROM_FILE_REGEX \u003d \"\\\\[T\\\\]\\\\[([0-1])\\\\](.*)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 14
    }
  },
  {
    "path": "src/main/java/duke/constants/TootieSymbols.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Class containing version number, logos, divider and emoticon ascii art"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TootieSymbols {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Newline object specific to system used  */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Different versions of the Tootie logo  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String THICK_TOOTIE_LOGO \u003d \"88888888888                888    d8b\" + NEWLINE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"    888                    \" + \"888\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"    Y8P\" + NEWLINE + \"    888                    888\" + NEWLINE + \"    \" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"888   .d88b.   .d88b.  888888 888  .d88b.\" + NEWLINE + \"    888  d88\\\"\\\"88b d88\\\"\\\"88b 888    888 \" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"d8P  Y8b\" + NEWLINE + \"    888  888  888 888  888 888    888 88888888\" + NEWLINE + \"    888  Y88.\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \".88P Y88..88P Y88b.  888 Y8b.\" + NEWLINE + \"    888   \\\"Y88P\\\"   \\\"Y88P\\\"   \\\"Y888 888  \\\"Y8888\" + NEWLINE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TRAIN_THEME_TOOTIE_LOGO \u003d \"  _____                    _        _\" + NEWLINE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \" |_   _|   ___     ___    \" + \"| \" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"|_     (_)     ___\" + NEWLINE + \"   | |    / _ \\\\   / _ \\\\  \" + \" |\" + \"  _|    | |   \" + \" /\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \" -_)\" + NEWLINE + \"  _|_|_   \\\\___/   \\\\___/   _\\\\__|   _|_|_   \\\\___|\" + NEWLINE + \"_\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_\" + \"|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|\" + NEWLINE +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\" + NEWLINE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BLOCKY_TOOTIE_LOGO \u003d \"\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\" + \"\\u2557\" + \"  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2588\\u2588\\u2588\" + \"\\u2588\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\" + \"\\u2588\\u2588\" + \"\\u2588\\u2557\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + NEWLINE + \"\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\" + \"\\u2588\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\" + \"\\u2551\\u2588\\u2588\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\" + NEWLINE + \"   \\u2588\" + \"\\u2588\\u2551   \\u2588\\u2588\\u2551\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \" + \"\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\" + \"\\u2588\\u2557\" + NEWLINE + \"   \\u2588\\u2588\\u2551 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"  \\u2588\\u2588\\u2551   \" + \"\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2551   \" + \"\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\" + NEWLINE + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"  \\u2588\" + \"\\u2588\\u2551   \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551   \" + \"\\u2588\\u2588\\u2551\\u2588\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\" + NEWLINE + \"   \\u255a\" + \"\\u2550\\u255d  \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d  \" + \"\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u255d    \\u255a\\u2550\\u255d   \" + \"\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2550\\u255d\" + NEWLINE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SIMPLE_TOOTIE_LOGO \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \" _____           _   _      \" + NEWLINE + \"|_   _|         | | (_)     \" + NEWLINE + \"  | | ___  \" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \" ___ | |_ _  ___ \" + NEWLINE + \"  | |/ _ \\\\ / _ \\\\| __| |/ _ \\\\\" + NEWLINE + \"  | | (_) | (_) | |_| \" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"|  __/\" + NEWLINE + \"  \\\\_/\\\\___/ \\\\___/ \\\\__|_|\\\\___|\" + NEWLINE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Task completion indication symbols  */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TICK_SYMBOL \u003d \"[\\u2713]\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String CROSS_SYMBOL \u003d \"[\\u2717]\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Emoticons in unicode  */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SPARKLY_EMOTICON \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"\\u0028\\uff89\\u25d5\\u30ee\\u25d5\\u0029\\uff89\\u002a\\u003a\\uff65\\uff9f\\u2727\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String CONFUSED_EMOTICON \u003d \"\\u0028\\u30fb\\u2227\\u2010\\u0029\\u309e\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HAPPY_EMOTICON \u003d \"\\uff08\\u00b4\\u30fb\\u03c9\\u30fb \\u0060\\uff09\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FLOWER_SMILE_EMOTICON \u003d \"(\\u25e0\\u203f\\u25e0\\u273f)\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ANGRY_EMOTICON \u003d \"\\u005b\\u25cb\\uff65\\uff40\\u0414\\u00b4\\uff65\\u25cb\\u005d\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SAD_EMOTICON \u003d \"\\u0028\\u2565\\ufe4f\\u2565\\u0029\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Line divider options  */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SPARKLY_TEXT_DIVIDER \u003d \"\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500 \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2731\\u002a\\u002e\\uff61\\u003a\\uff61\" + \"\\u2731\\u002a\\u002e\\u003a\\uff61\\u2727\\u002a\\u002e\\uff61\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"\\u2730\\u002a\\u002e\\u003a\\uff61\\u2727\" + \"\\u002a\\u002e\\uff61\\u003a\\uff61\\u002a\\u002e\\uff61\\u2731\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \" \" + \"\\u2500\\u2500\\u2500\\u2500\\u2500\" + \"\\u2500\\u2500\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String PLAIN_TEXT_DIVIDER \u003d \"----------------------------------------------\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DOUBLE_TEXT_DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SIMPLE_TEXT_DIVIDER \u003d \"*---*---*---*---*---*---*---*---*---*---*---*\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Version info of the program. */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String VERSION \u003d \"Tootie - Version 2.0\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 70
    }
  },
  {
    "path": "src/main/java/duke/exceptions/CancelLoadSavedTasksException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CancelLoadSavedTasksException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/CompletionStatusInvalidException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CompletionStatusInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DateAfterPreceedsDateBefore.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DateAfterPreceedsDateBefore extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DateBeforeMatchesAfterException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DateBeforeMatchesAfterException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DateWronglyFormattedError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DateWronglyFormattedError extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DeadlineInputWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DeadlineInputWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DividerNonexistantException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DividerNonexistantException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DueDateWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DueDateWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EndTimeBeforeStartTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class EndTimeBeforeStartTimeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EndTimeWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class EndTimeWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EventInputWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class EventInputWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/FileEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FileEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/FilePathInvalidException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FilePathInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class InvalidDateException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidDueDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class InvalidDueDateException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidEndTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class InvalidEndTimeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidStartTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class InvalidStartTimeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/MissingFilterOptionsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class MissingFilterOptionsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/MissingParamsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class MissingParamsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/NoTasksFilteredException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class NoTasksFilteredException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/SavedTaskFormatWrongException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class SavedTaskFormatWrongException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/SettingObjectWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class SettingObjectWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/StartTimeWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class StartTimeWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TaskNameEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TaskNameEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TaskNonexistantException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TaskNonexistantException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 5
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TaskTypeInvalidException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TaskTypeInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TasklistEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TasklistEmptyException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ToDoInputWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class ToDoInputWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TotalTasksNumInvalidException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class TotalTasksNumInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/UsernameCommandInvalidException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class UsernameCommandInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/exceptions/UsernameEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class UsernameEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/duke/parsers/Checks.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Checks {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * /check if the date entered is correctly formatted with a date but no time"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param timeUnformmated a string containing a date without the time included"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return true if it matches the correct format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static boolean isDateWithoutTime(String timeUnformmated) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return timeUnformmated.matches(duke.constants.DateFormats.DATE_WITHOUT_TIME_REGEX);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Check if the date entered is correctly formatted with a date and time"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param timeUnformmated a string containing a date with the time included"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return true if it matches the correct format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static boolean isDateWithTime(String timeUnformmated) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return timeUnformmated.matches(duke.constants.DateFormats.DATE_WITH_TIME_REGEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Replace \u0027\\\u0027 with \u0027/\u0027 characters in file paths variables"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param path a file path with illegal characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the path without illegal characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String pathReplaceIllegalCharacters(String path) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return path.replace(\u0027\\\\\u0027, \u0027/\u0027);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Check if the date after comes before the date before"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param containsDateBeforeParam the date for before was detected in the command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param containsDateAfterParam  the date for after was detected in the command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dateBefore              the date for before"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dateAfter               the date for after"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws DateAfterPreceedsDateBefore the date for after comes before the date for before"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void checkIfDateAfterPreceedsBefore(boolean containsDateBeforeParam, boolean containsDateAfterParam"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            , Date dateBefore, Date dateAfter)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws DateAfterPreceedsDateBefore {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (containsDateAfterParam \u0026\u0026 containsDateBeforeParam) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (dateBefore.compareTo(dateAfter) \u003c 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new DateAfterPreceedsDateBefore();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Check if the Date for Before is the same Date as the date for after"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param containsDateBeforeParam the date for before was found"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param containsDateAfterParam  the date for after was found"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dateBefore              the date for before"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dateAfter               the date for after"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws DateBeforeMatchesAfterException the date for before is the same as the date for after"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void checkIfBeforeAndAfterDatesMatch(boolean containsDateBeforeParam, boolean containsDateAfterParam, Date dateBefore, Date dateAfter)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws DateBeforeMatchesAfterException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (containsDateAfterParam \u0026\u0026 containsDateBeforeParam) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (dateBefore.compareTo(dateAfter) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new DateBeforeMatchesAfterException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 74
    }
  },
  {
    "path": "src/main/java/duke/parsers/Parsers.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.DividerChoice;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.CompletionStatusInvalidException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DateWronglyFormattedError;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DividerNonexistantException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidDateException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.MissingParamsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.SettingObjectWrongFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TotalTasksNumInvalidException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.DEADLINE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.DONE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.EVENT_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.PLAIN_KEYWORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.SIMPLE_KEYWORD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.SPARKLY_KEYWORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.TODO_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.UNDONE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.DateFormats.DEFAULT_COMPLEX_DATE_FORMAT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.DateFormats.OUTPUT_DATE_FORMAT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.DateFormats.USER_INPUT_DATE_WITHOUT_TIME_FORMAT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.DateFormats.USER_INPUT_DATE_WITH_TIME_FORMAT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.Tags.TOTAL_TASKS_TAG_FORMAT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.parsers.Checks.isDateWithTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.parsers.Checks.isDateWithoutTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Parse information from user inputs and file lines"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Parsers {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parse the dividerChoice enum from the string read from file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dividerChoiceString file line containing saved divider choice"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the DividerChoice enum from a given string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static DividerChoice parseDividerChoice(String dividerChoiceString) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (dividerChoiceString.trim().toLowerCase().equals(SPARKLY_KEYWORD)){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return DividerChoice.SPARKLY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (dividerChoiceString.trim().toLowerCase().equals(SIMPLE_KEYWORD)){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return DividerChoice.SIMPLE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (dividerChoiceString.trim().toLowerCase().equals(PLAIN_KEYWORD)){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return DividerChoice.PLAIN;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return DividerChoice.DOUBLE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Extract the value string from line in settings save file"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileLine    a line read from the file"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param objectTitle the string indicating the type of object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return returns the setting extracted from line in the settings file"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws SettingObjectWrongFormatException the linel in the settings file was wrongly formatted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String parseFileObject(String fileLine, String objectTitle)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws SettingObjectWrongFormatException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int settingTitleLength \u003d objectTitle.length();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileObject;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // identify placements"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int settingObjectPosition \u003d fileLine.indexOf(objectTitle);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if placement is correct"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (settingObjectPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new SettingObjectWrongFormatException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                fileObject \u003d fileLine.substring(settingObjectPosition + settingTitleLength).trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new SettingObjectWrongFormatException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileObject;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parses the default date format and returns a Date object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param unformattedDate the string containing an unformatted date"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return the date object extracted from the unformatted date"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date parseComplexDate(String unformattedDate) throws InvalidDateException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date formattedDate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SimpleDateFormat complexDateFormat \u003d new SimpleDateFormat(DEFAULT_COMPLEX_DATE_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            complexDateFormat.setLenient(false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            formattedDate \u003d complexDateFormat.parse(unformattedDate.trim());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return formattedDate;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parses the default date format and returns a Date object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param unformattedDate a string containing a date object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return date object parsed from the string"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidDateException date detected was invalid"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date parseSimpleDate(String unformattedDate) throws InvalidDateException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date formattedDate;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(OUTPUT_DATE_FORMAT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            simpleDateFormat.setLenient(false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            formattedDate \u003d simpleDateFormat.parse(unformattedDate.trim());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return formattedDate;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Extract the desired line divider from user input command"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input command"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return DividerChoice extracted from the user input"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws DividerNonexistantException an invalid divider choice was indicated"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static DividerChoice parseLineDividerFromUserInput(String userInput) throws DividerNonexistantException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int dividerIndex;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        DividerChoice newDividerChoice \u003d DividerChoice.SPARKLY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dividerIndex \u003d Integer.parseInt(userInput.replaceAll(\"[\\\\D]\", \"\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (dividerIndex \u003e 5 || dividerIndex \u003c 1) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new DividerNonexistantException();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new DividerNonexistantException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (dividerIndex) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.SPARKLY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.PLAIN;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.SIMPLE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.DOUBLE;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new DividerNonexistantException();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return newDividerChoice;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Extract the desired line divider from string"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileLine raw line read from file"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the DividerChoice enum extracted from the file"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static DividerChoice parseLineDividerFromString(String fileLine) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        DividerChoice newDividerChoice;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (fileLine.trim().toLowerCase().equals(SPARKLY_KEYWORD)){"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.SPARKLY;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (fileLine.trim().toLowerCase().equals(SIMPLE_KEYWORD)){"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.SIMPLE;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (fileLine.trim().toLowerCase().equals(PLAIN_KEYWORD)){"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.PLAIN;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newDividerChoice \u003d DividerChoice.DOUBLE;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return newDividerChoice;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * parse the date if time is not included in input"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param unformattedDate a string containing date information"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the date object extracted"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date parseDateWithoutTime(String unformattedDate) throws InvalidDateException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date formattedDate;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SimpleDateFormat dateWithoutTime \u003d new SimpleDateFormat(USER_INPUT_DATE_WITHOUT_TIME_FORMAT);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dateWithoutTime.setLenient(false);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            formattedDate \u003d dateWithoutTime.parse(unformattedDate);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return formattedDate;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parse the date if time is included in input"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param unformattedDate a string containing date information"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the date object extracted"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date parseDateWithTime(String unformattedDate) throws InvalidDateException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date formattedDate;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SimpleDateFormat dateWithTime \u003d new SimpleDateFormat(USER_INPUT_DATE_WITH_TIME_FORMAT);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dateWithTime.setLenient(false);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            formattedDate \u003d dateWithTime.parse(unformattedDate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return formattedDate;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parse parameters for double letter tags"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput    line read from the console"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param parsedParams parameters parsed from the line with the tag as key and argument as value"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws MissingParamsException line has no missing parameters"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void parseDoubleCharacterTaggedParamsFromUserInput(String userInput,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                                                     HashMap\u003cString, String\u003e parsedParams)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws MissingParamsException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String parsedOption;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String optionIndicator;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int startPositionIndex \u003d 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int endPositionIndex \u003d 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // clear filter options"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedParams.clear();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!userInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingParamsException();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (userInput.indexOf(\"/\", startPositionIndex) !\u003d -1) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // identify placement"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startPositionIndex \u003d userInput.indexOf(\"/\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endPositionIndex \u003d userInput.indexOf(\"/\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // if reached end of string"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (endPositionIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // extract the option"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedOption \u003d userInput.substring(startPositionIndex + 1, endPositionIndex - 2);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            optionIndicator \u003d userInput.substring(startPositionIndex - 2, startPositionIndex);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // store the option"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedParams.put(optionIndicator, parsedOption);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // extract the option"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedOption \u003d userInput.substring(startPositionIndex + 1);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        optionIndicator \u003d userInput.substring(startPositionIndex - 2, startPositionIndex);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // store the option"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedParams.put(optionIndicator.toLowerCase(), parsedOption);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parse parameters for single letter tags"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput    line read from the console"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param parsedParams parameters parsed from the line with the tag as key and argument as value"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws MissingParamsException line has no missing parameters"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void parseSingleCharacterTaggedParamsFromUserInput(String userInput,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                                                     HashMap\u003cString, String\u003e parsedParams)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws MissingParamsException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String parsedOption;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String optionIndicator;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int startPositionIndex \u003d 0;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int endPositionIndex \u003d 0;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // clear filter options"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedParams.clear();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!userInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingParamsException();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (userInput.indexOf(\"/\", startPositionIndex) !\u003d -1) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // identify placement"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startPositionIndex \u003d userInput.indexOf(\"/\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endPositionIndex \u003d userInput.indexOf(\"/\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // if reached end of string"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (endPositionIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // extract the option"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedOption \u003d userInput.substring(startPositionIndex + 1, endPositionIndex - 1);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            optionIndicator \u003d userInput.substring(startPositionIndex - 1, startPositionIndex);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // store the option"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedParams.put(optionIndicator, parsedOption);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // extract the option"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedOption \u003d userInput.substring(startPositionIndex + 1);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        optionIndicator \u003d userInput.substring(startPositionIndex - 1, startPositionIndex);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // store the option"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedParams.put(optionIndicator.toLowerCase(), parsedOption);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parses the string to return number of tasks as an int"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param totalTasks line containing total tasks in the save file"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return number of tasks in the save file"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TotalTasksNumInvalidException number of tasks cannot be parsed"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static int getNumTasks(String totalTasks) throws TotalTasksNumInvalidException {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(TOTAL_TASKS_TAG_FORMAT);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(totalTasks);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                return Integer.parseInt(matcher.group(1));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new TotalTasksNumInvalidException();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TotalTasksNumInvalidException();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Checks the task type for each task in the allTasks.txt file"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileInput line read from the file containing a saved task"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return task type detected"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static TaskType getTaskType(String fileInput) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (fileInput.trim().startsWith(\"[T]\")){"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return TaskType.TODO;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (fileInput.trim().startsWith(\"[D]\")){"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return TaskType.DEADLINE;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (fileInput.trim().startsWith(\"[E]\")){"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return TaskType.EVENT;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return TaskType.INVALID;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * convert the dividerChoice into a string to save in tootieSettings.txt"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dividerChoice          divider chosen by user"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the divider choice as a string"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String dividerChoiceToString(DividerChoice dividerChoice) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (dividerChoice){"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SIMPLE:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return \"SIMPLE\";"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SPARKLY:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return \"SPARKLY\";"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case DOUBLE:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return \"DOUBLE\";"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return \"PLAIN\";"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parse the task types from the task type param"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param taskTypesUserInput the user input for the parameter task types"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param taskTypes          the list of task types detected"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void parseTaskTypes(String taskTypesUserInput, ArrayList\u003cTaskType\u003e taskTypes) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String userInputLowerCase \u003d taskTypesUserInput.toLowerCase();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (userInputLowerCase.contains(EVENT_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskTypes.add(TaskType.EVENT);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (userInputLowerCase.contains(DEADLINE_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskTypes.add(TaskType.DEADLINE);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (userInputLowerCase.contains(TODO_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskTypes.add(TaskType.TODO);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Check if the param argument is done or undone"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param componentUserInput component of the user input that contains the argument"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return true if it contains done, and false if it contains undone"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws CompletionStatusInvalidException the completion status in the user input is invalid"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static boolean parseCompletionStatusOption(String componentUserInput)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws CompletionStatusInvalidException {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (componentUserInput.toLowerCase().trim().equals(DONE_COMMAND_KEYWORD)){"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (componentUserInput.toLowerCase().trim().equals(UNDONE_COMMAND_KEYWORD)){"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        throw new CompletionStatusInvalidException();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Check the date format and try to parse it"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dateUnformatted string containing the date"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return parsed Date object"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws DateWronglyFormattedError the string does not contain a correctly formatted date"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date parseDateIfExists(String dateUnformatted) throws DateWronglyFormattedError, InvalidDateException {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date dateObj;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check format of date"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isDateWithTimeBool \u003d isDateWithTime(dateUnformatted);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isDateWithoutTimeBool \u003d isDateWithoutTime(dateUnformatted);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse date"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (isDateWithTimeBool) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dateObj \u003d parseDateWithTime(dateUnformatted);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (isDateWithoutTimeBool) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dateObj \u003d parseDateWithoutTime(dateUnformatted);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new DateWronglyFormattedError();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return dateObj;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 438
    }
  },
  {
    "path": "src/main/java/duke/storage/AllTasksLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieFilePaths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieInputMarkers;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieRegex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieSymbols;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.parsers.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.ui.Printers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.ui.UserInputHandlers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.Tags.LOAD_OPTION_1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.Tags.LOAD_OPTION_2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.Tags.LOAD_OPTION_CANCEL;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.Tags.NUM_TASKS_TAG;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.Tags.TASK_COMPLETED_FLAG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ALL_TASKS_FILE_NOT_FOUND_MSG;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ALL_TASKS_LOAD_OPTIONS_MSG;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.AUTO_CREATE_DIRECTORY_AND_FILE_MSG;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.CANCEL_LOAD_ALL_TASKS_OPERATION_MSG;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ENTER_THE_FULL_PATH_TO_EXISTING_FILE_MSG;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ERROR_READING_DUEDATE_FROM_FILE_MSG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ERROR_READING_ENDTIME_FROM_FILE_MSG;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ERROR_READING_FILE_LINE_MSG;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ERROR_READING_STARTTIME_FROM_FILE_MSG;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.FILE_HEADER_INVALID_MSG;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.FILE_PATH_NO_FILE_ERROR_MSG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.LOADING_ALL_TASKS_MSG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.RESPONSE_NOT_RECOGNISED_MSG;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.SAVE_FILE_EMPTY_MSG;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.TASKS_EXPECTED_SUMMARY_FORMAT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.TASKS_READ_SUCCESSFULLY_SUMMARY_FORMAT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.TOTAL_TASKS_LOADED_SUMMARY_FORMAT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieRegex.DEADLINE_FROM_FILE_REGEX;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieRegex.EVENT_FROM_FILE_REGEX;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieRegex.TODO_FROM_FILE_REGEX;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.storage.fileFunctions.autoCreateNewFile;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Contains functions to find, check and process the allTasks.txt file"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class AllTasksLoader {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Search for the allTasks.txt file and try to load it"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all tasks"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param SCANNER           scanner to read from the console"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath  file path for the allTasks.txt file"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted total number of tasks in the list completed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void loadAllTasksFile(Boolean inLoadMoreMode, ArrayList\u003cTask\u003e allTasks, Scanner SCANNER,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                        String allTasksFilePath, AtomicInteger numTasks,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                        AtomicInteger numTasksCompleted, ArrayList\u003cString\u003e allTasksFilePathReturn) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isFileNotRead \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean isNewFilePathObtained \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Scanner allTasksFileScanner;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (inLoadMoreMode) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            isNewFilePathObtained \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(LOADING_ALL_TASKS_MSG);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (isFileNotRead) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                if (isNewFilePathObtained) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    File allTasksFile \u003d fileFunctions.getFileFromFilePath(allTasksFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    fileFunctions.checkFileExists(allTasksFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    allTasksFileScanner \u003d new Scanner(allTasksFile);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    readAllTasksFile(inLoadMoreMode, allTasks, allTasksFileScanner, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    isFileNotRead \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    throw new FileNotFoundException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                if (!inLoadMoreMode) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    System.out.println(ALL_TASKS_FILE_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                isNewFilePathObtained \u003d false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                while (!isNewFilePathObtained) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                        isNewFilePathObtained \u003d getNewAllTasksFilePath(inLoadMoreMode, SCANNER, allTasksFilePathReturn);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    } catch (CancelLoadSavedTasksException cancelLoadSavedTasksException) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                        System.out.println(CANCEL_LOAD_ALL_TASKS_OPERATION_MSG);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    allTasksFilePath \u003d allTasksFilePathReturn.get(0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    Printers.printDivider();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (FileEmptyException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(SAVE_FILE_EMPTY_MSG);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                isFileNotRead \u003d false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Get a new file path from user"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param SCANNER                scanner to read lines from the console"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePathReturn file path for the allTasks.txt file"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return true if a new file path for the allTasks.txt file was obtained"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static boolean getNewAllTasksFilePath(boolean loadMore, Scanner SCANNER,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                                  ArrayList\u003cString\u003e allTasksFilePathReturn)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws CancelLoadSavedTasksException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String path \u003d \"\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String response \u003d \"\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!loadMore) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(ALL_TASKS_LOAD_OPTIONS_MSG);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            response \u003d UserInputHandlers.getUserInput(SCANNER);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (loadMore || response.trim().equals(LOAD_OPTION_1)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(ENTER_THE_FULL_PATH_TO_EXISTING_FILE_MSG);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            path \u003d UserInputHandlers.getUserInput(SCANNER);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (path.trim().toLowerCase().equals(LOAD_OPTION_CANCEL)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new CancelLoadSavedTasksException();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (response.equals(LOAD_OPTION_2)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(AUTO_CREATE_DIRECTORY_AND_FILE_MSG);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            path \u003d autoCreateNewFile(TootieFilePaths.DEFAULT_ALL_TASKS_FILE_PATH);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(path + TootieSymbols.CONFUSED_EMOTICON);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(RESPONSE_NOT_RECOGNISED_MSG);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        path \u003d Checks.pathReplaceIllegalCharacters(path);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasksFilePathReturn.add(0, path);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if the file path is valid"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File allTasksFile \u003d fileFunctions.getFileFromFilePath(path);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileFunctions.checkFileExists(allTasksFile);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(String.format(FILE_PATH_NO_FILE_ERROR_MSG, path));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Try to read the allTasks.txt file into allTasks array"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks            complete list of all tasks"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFileScanner scanner to read lines from teh allTasks.txt file"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks            total number of tasks in the list"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted   total number of tasks in the list completed"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws FileEmptyException file found was empty"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void readAllTasksFile(boolean inLoadMoreMode, ArrayList\u003cTask\u003e allTasks,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                         Scanner allTasksFileScanner, AtomicInteger numTasks,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                         AtomicInteger numTasksCompleted) throws FileEmptyException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // get total number of tasks stored"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int numTasksInList;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        AtomicInteger newTasksRead \u003d new AtomicInteger(0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        numTasksInList \u003d getNumTasksInList(allTasksFileScanner);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(String.format(TASKS_EXPECTED_SUMMARY_FORMAT, numTasksInList, (numTasksInList \u003d\u003d 1 ?"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                \"\" : \"s\")));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SettingsLoader.readFileUntilLineContainsString(NUM_TASKS_TAG, allTasksFileScanner);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        addReadTasksToAllTasks(newTasksRead, allTasks, allTasksFileScanner, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf(String.format(TASKS_READ_SUCCESSFULLY_SUMMARY_FORMAT, newTasksRead.get(),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                (newTasksRead.get() \u003d\u003d 1 ? \"\" : \"s\")));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (inLoadMoreMode) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.printf(String.format(TOTAL_TASKS_LOADED_SUMMARY_FORMAT, numTasks.get(),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    (numTasks.get() \u003d\u003d 1 ? \"\" : \"s\")));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Read each task and add to the allTasks arraylist"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all tasks"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param FILE_SCANNER      scanner to read lines from the file"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted number of tasks in the list completed"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void addReadTasksToAllTasks(AtomicInteger newTasksRead, ArrayList\u003cTask\u003e allTasks,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                               Scanner FILE_SCANNER, AtomicInteger numTasks,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                               AtomicInteger numTasksCompleted) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (FILE_SCANNER.hasNext()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String fileInput \u003d getFileNextLine(FILE_SCANNER);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                addTaskToAllTasksArrayList(newTasksRead, allTasks, fileInput, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TaskTypeInvalidException | SavedTaskFormatWrongException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.printf(ERROR_READING_FILE_LINE_MSG, fileInput);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidStartTimeException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.printf(ERROR_READING_STARTTIME_FROM_FILE_MSG, fileInput);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDueDateException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.printf(ERROR_READING_DUEDATE_FROM_FILE_MSG, fileInput);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidEndTimeException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.printf(ERROR_READING_ENDTIME_FROM_FILE_MSG, fileInput);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Gets the number of tasks recorded in the allTasks.txt file from the header"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param FILE_SCANNER scanner to read lines from the file"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return number of tasks in the list as read from the file"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws FileEmptyException file found was empty"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static int getNumTasksInList(Scanner FILE_SCANNER) throws FileEmptyException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int numTasksInList \u003d 0;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (FILE_SCANNER.hasNext()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String totalTasks \u003d getFileNextLine(FILE_SCANNER);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                numTasksInList \u003d Parsers.getNumTasks(totalTasks);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TotalTasksNumInvalidException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(FILE_HEADER_INVALID_MSG);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new FileEmptyException();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return numTasksInList;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parses lines from the allTasks.txt file and adds the corresponding task to the allTasks ArrayList"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          complete list of all tasks"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileInput         line read from the file"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted number of tasks in the list completed"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskTypeInvalidException      task saved in the save file has an invalid Task type"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws SavedTaskFormatWrongException task saved in the save file was wrongly formatted"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidDueDateException       due date of a deadline task was invalid"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidEndTimeException       end time of an event task is invalid"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidStartTimeException     start time of an event task is invalid"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void addTaskToAllTasksArrayList(AtomicInteger newTasksRead, ArrayList\u003cTask\u003e allTasks,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                                   String fileInput, AtomicInteger numTasks,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                                   AtomicInteger numTasksCompleted) throws TaskTypeInvalidException,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            SavedTaskFormatWrongException, InvalidDueDateException, InvalidEndTimeException, InvalidStartTimeException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        TaskType taskType \u003d Parsers.getTaskType(fileInput);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            addToDoToList(newTasksRead, allTasks, fileInput, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            addDeadlineToList(newTasksRead, allTasks, fileInput, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            addEventToList(newTasksRead, allTasks, fileInput, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TaskTypeInvalidException();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Adds a ToDo task read from the file to the allTasks ArrayList"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all tasks"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileInput         line read from the file"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted number of tasks completed"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws SavedTaskFormatWrongException due date of a deadline task was invalid"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void addToDoToList(AtomicInteger newTasksRead, ArrayList\u003cTask\u003e allTasks, String fileInput,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                      AtomicInteger numTasks, AtomicInteger numTasksCompleted) throws SavedTaskFormatWrongException {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(TODO_FROM_FILE_REGEX);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(fileInput);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            allTasks.add(new ToDo(matcher.group(2).trim()));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (matcher.group(1).equals(TASK_COMPLETED_FLAG)) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(numTasks.get()).setComplete(true);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                numTasksCompleted.getAndIncrement();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numTasks.getAndIncrement();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newTasksRead.getAndIncrement();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new SavedTaskFormatWrongException();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Adds a Deadline task read from the file to the allTasks ArrayList"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all tasks"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileInput         line read from the file"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted number of tasks completed"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws SavedTaskFormatWrongException saved task in the list is of the wrong format"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidDueDateException       due date of deadline task was wrong format"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void addDeadlineToList(AtomicInteger newTasksRead, ArrayList\u003cTask\u003e allTasks, String fileInput,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                          AtomicInteger numTasks, AtomicInteger numTasksCompleted) throws SavedTaskFormatWrongException, InvalidDueDateException {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(DEADLINE_FROM_FILE_REGEX);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(fileInput);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Date dueDate;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dueDate \u003d Parsers.parseSimpleDate(matcher.group(3).trim());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new InvalidDueDateException();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            allTasks.add(new Deadline(matcher.group(2).trim(), dueDate));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (matcher.group(1).equals(TASK_COMPLETED_FLAG)) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(numTasks.get()).setComplete(true);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                numTasksCompleted.getAndIncrement();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numTasks.getAndIncrement();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newTasksRead.getAndIncrement();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new SavedTaskFormatWrongException();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Adds a Event task read from the file to the allTasks ArrayList"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all tasks"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileInput         line read from the file"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted number of tasks completed"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws SavedTaskFormatWrongException saved task in the list is of the wrong format"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidStartTimeException     start time of an event task is invalid"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidEndTimeException       end time of an event task is invalid"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void addEventToList(AtomicInteger newTasksRead, ArrayList\u003cTask\u003e allTasks, String fileInput,"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                       AtomicInteger numTasks, AtomicInteger numTasksCompleted) throws SavedTaskFormatWrongException, InvalidStartTimeException, InvalidEndTimeException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(EVENT_FROM_FILE_REGEX);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(fileInput);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Date startDate;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                startDate \u003d Parsers.parseSimpleDate(matcher.group(3).trim());"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new InvalidStartTimeException();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Date endDate;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                endDate \u003d Parsers.parseSimpleDate(matcher.group(4).trim());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new InvalidEndTimeException();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            allTasks.add(new Event(matcher.group(2).trim(), startDate, endDate));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (matcher.group(1).equals(TASK_COMPLETED_FLAG)) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(numTasks.get()).setComplete(true);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                numTasksCompleted.getAndIncrement();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numTasks.getAndIncrement();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            newTasksRead.getAndIncrement();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new SavedTaskFormatWrongException();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Read non-blank lines of the file"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param FILE_SCANNER scanner to read through lines in the file"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return a non blank line read from the file"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String getFileNextLine(Scanner FILE_SCANNER) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileInput;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileInput \u003d FILE_SCANNER.nextLine();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } while (fileInput.matches(TootieRegex.BLANK_STRING_REGEX) ||"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                fileInput.startsWith(TootieInputMarkers.INPUT_COMMENT_MARKER));"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileInput;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 398
    }
  },
  {
    "path": "src/main/java/duke/storage/AllTasksSaver.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieFileMsgs;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieFileMsgs.TASKS_COMPLETED_FILE_LINE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieFileMsgs.TOTAL_TASKS_FILE_LINE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.NEW_FILE_CREATED_MSG_FORMAT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class AllTasksSaver {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * saves all tasks from the allTasks ArrayList to the allTasks.txt file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath  file path for the allTasks.txt file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted total number of tasks in the list completed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return absolute path to the allTasks.txt file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws IOException unable to write to file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String saveAllTasks(ArrayList\u003cTask\u003e allTasks, String allTasksFilePath,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                      AtomicInteger numTasks, AtomicInteger numTasksCompleted)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File allTasksFile \u003d new File(allTasksFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"EEE d MMM yyyy hh:mm aa\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (allTasksFile.createNewFile()){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(String.format(NEW_FILE_CREATED_MSG_FORMAT, allTasksFile.getAbsolutePath()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // clear the file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        new FileWriter(allTasksFilePath, false).close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // write file header"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(String.format(TOTAL_TASKS_FILE_LINE, numTasks.get()), allTasksFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(NEWLINE, allTasksFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(String.format(TASKS_COMPLETED_FILE_LINE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                numTasksCompleted.get()), allTasksFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.writeDoubleNewlineToFile(allTasksFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(TootieFileMsgs.ALL_TASKS_FILE_INSTRUCTIONS_HEADER, allTasksFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String printOut \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (int i \u003d 0; i \u003c numTasks.get(); i++){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (allTasks.get(i) instanceof ToDo) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                printOut \u003d \"[T][\" + ((allTasks.get(i).getComplete()) ? 1 : 0) + \"] \" + allTasks.get(i).getTaskName();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (allTasks.get(i) instanceof Deadline) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                printOut \u003d \"[D][\" + ((allTasks.get(i).getComplete()) ? 1 : 0) + \"] \" + allTasks.get(i).getTaskName() +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                        \" (by: \" + dateFormat.format(((Deadline) allTasks.get(i)).getDueDate()) + \")\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (allTasks.get(i) instanceof Event) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                printOut \u003d \"[E][\" + ((allTasks.get(i).getComplete()) ? 1 : 0) + \"] \" + allTasks.get(i).getTaskName() +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                        \" (from: \" + dateFormat.format(((Event) allTasks.get(i)).getStartTime()) + \" to \" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                        dateFormat.format(((Event) allTasks.get(i)).getEndTime()) + \")\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileFunctions.appendsStringToFile(printOut,allTasksFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileFunctions.appendsStringToFile(NEWLINE, allTasksFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return allTasksFile.getAbsolutePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 75
    }
  },
  {
    "path": "src/main/java/duke/storage/SettingsLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.FileEmptyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.SettingObjectWrongFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.DividerChoice;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieFilePaths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.parsers.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.Tags.ALL_TASKS_FILEPATH_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.Tags.DIVIDER_CHOICE_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.Tags.LOADING_SETTINGS_MSG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.Tags.TOOTIE_SETTINGS_FILEPATH_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.Tags.USERNAME_TAG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ERROR_READING_FILE_ON_LINE_MSG_FORMAT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.SETTINGS_FILE_EMPTY_MSG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.SETTINGS_FILE_NOT_FOUND_MSG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.storage.AllTasksLoader.getFileNextLine;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.ui.Printers.changeDivider;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class SettingsLoader {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Attempts to load and store the tootieSettings.txt variables"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings          array of saved settings"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tootieSettingsFilePath file path to the settings save file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath       file path to the save file for all tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dividerChoice          divider chosen by user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username               user input name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void loadTootieSettingsFile(ArrayList\u003cString\u003e savedSettings, String tootieSettingsFilePath,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                              String allTasksFilePath, DividerChoice dividerChoice, String username) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(LOADING_SETTINGS_MSG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            File tootieSettingsFile \u003d fileFunctions.getFileFromFilePath(tootieSettingsFilePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileFunctions.checkFileExists(tootieSettingsFile);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            readTootieSettingsFile(savedSettings, tootieSettingsFile, tootieSettingsFilePath, allTasksFilePath,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    dividerChoice, username);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(SETTINGS_FILE_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            tootieSettingsFilePath \u003d fileFunctions.autoCreateNewFile(TootieFilePaths.DEFAULT_ALL_TASKS_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileEmptyException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(SETTINGS_FILE_EMPTY_MSG);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Read and parse all the settings from the tootieSettings.txt file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings          array of saved settings"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tootieSettingsFile     the save file containing the saved settings"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tootieSettingsFilePath file path to the settings save file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath       file path to the save file for all tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dividerChoice          divider chosen by user"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username               user input name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws FileEmptyException the settings file is empty"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws FileNotFoundException the settings file cannot be found"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void readTootieSettingsFile(ArrayList\u003cString\u003e savedSettings, File tootieSettingsFile,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                               String tootieSettingsFilePath, String allTasksFilePath,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                               DividerChoice dividerChoice, String username) throws FileEmptyException, FileNotFoundException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Scanner SETTINGS_FILE_SCANNER \u003d new Scanner(tootieSettingsFile);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileLine \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!SETTINGS_FILE_SCANNER.hasNext()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            setSavedSettings(savedSettings, tootieSettingsFilePath, allTasksFilePath, dividerChoice, username);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new FileEmptyException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String parsedString;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileLine \u003d readFileUntilLineContainsString(TOOTIE_SETTINGS_FILEPATH_TAG, SETTINGS_FILE_SCANNER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedString \u003d Parsers.parseFileObject(fileLine, TOOTIE_SETTINGS_FILEPATH_TAG);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                tootieSettingsFilePath \u003d parsedString;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileLine \u003d readFileUntilLineContainsString(ALL_TASKS_FILEPATH_TAG, SETTINGS_FILE_SCANNER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedString \u003d Parsers.parseFileObject(fileLine, ALL_TASKS_FILEPATH_TAG);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasksFilePath \u003d parsedString;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileLine \u003d readFileUntilLineContainsString(DIVIDER_CHOICE_TAG, SETTINGS_FILE_SCANNER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedString \u003d Parsers.parseFileObject(fileLine, DIVIDER_CHOICE_TAG);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dividerChoice \u003d Parsers.parseDividerChoice(parsedString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            changeDivider(dividerChoice);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileLine \u003d readFileUntilLineContainsString(USERNAME_TAG, SETTINGS_FILE_SCANNER);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedString \u003d Parsers.parseFileObject(fileLine, USERNAME_TAG);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                username \u003d parsedString;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            setSavedSettings(savedSettings, tootieSettingsFilePath, allTasksFilePath, dividerChoice, username);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (SettingObjectWrongFormatException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.printf(ERROR_READING_FILE_ON_LINE_MSG_FORMAT, fileLine);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Adds the default settings to saved settings array"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings          array of saved settings"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tootieSettingsFilePath file path to the settings save file"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath       file path to the save file for all tasks"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dividerChoice          divider chosen by user"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username               user input name"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void addSavedSettings(ArrayList\u003cString\u003e savedSettings, String tootieSettingsFilePath,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                        String allTasksFilePath, DividerChoice dividerChoice, String username) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.add(Checks.pathReplaceIllegalCharacters(tootieSettingsFilePath));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.add(Checks.pathReplaceIllegalCharacters(allTasksFilePath));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.add(dividerChoice.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.add(username);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Sets the default settings to saved settings array"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings          array of saved settings"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tootieSettingsFilePath file path to the settings save file"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath       file path to the save file for all tasks"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dividerChoice          divider chosen by user"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username               user input name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void setSavedSettings(ArrayList\u003cString\u003e savedSettings, String tootieSettingsFilePath,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                        String allTasksFilePath, DividerChoice dividerChoice, String username) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.set(0, Checks.pathReplaceIllegalCharacters(tootieSettingsFilePath));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.set(1, Checks.pathReplaceIllegalCharacters(allTasksFilePath));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.set(2, dividerChoice.toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.set(3, username);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * continue reading through a file until a specific string is found"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param stringSearched indicator string"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileScanner    scanner for scanning a file"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the line the string is on"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String readFileUntilLineContainsString(String stringSearched, Scanner fileScanner) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileInput \u003d \"\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // read each setting and return the variables accordingly"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileInput \u003d getFileNextLine(fileScanner);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (fileInput.contains(stringSearched)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileInput;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 165
    }
  },
  {
    "path": "src/main/java/duke/storage/SettingsSaver.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.DividerChoice;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieFileMsgs;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.parsers.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.NEW_FILE_CREATED_MSG_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class SettingsSaver {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * save settings to tootieSettings.txt file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tootieSettingsFilePath file path to the settings save file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath  file path for the allTasks.txt file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username               user input name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dividerChoice          divider chosen by user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws IOException error writing to the saved settings file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void saveTootieSettings(String tootieSettingsFilePath, String allTasksFilePath, String username,DividerChoice dividerChoice) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File tootieSettingsFile \u003d new File(tootieSettingsFilePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (tootieSettingsFile.createNewFile()){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(String.format(NEW_FILE_CREATED_MSG_FORMAT, tootieSettingsFile.getAbsolutePath()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // clear the file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        new FileWriter(tootieSettingsFilePath, false).close();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(TootieFileMsgs.TOOTIE_SETTINGS_FILE_INSTRUCTIONS_HEADER, tootieSettingsFilePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(NEWLINE, tootieSettingsFilePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(String.format(TootieFileMsgs.TOOTIE_SETTINGS_FILE_PATHS_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                tootieSettingsFile.getAbsolutePath(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasksFilePath), tootieSettingsFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(NEWLINE, tootieSettingsFilePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String dividerChoiceString \u003d Parsers.dividerChoiceToString(dividerChoice);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fileFunctions.appendsStringToFile(String.format(TootieFileMsgs.TOOTIE_SETTINGS_USER_PREFERENCES_FORMAT, dividerChoiceString,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                username), tootieSettingsFilePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 46
    }
  },
  {
    "path": "src/main/java/duke/storage/fileFunctions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.FilePathInvalidException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.COULD_NOT_CREATE_DIRECTORY_MSG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.DIRECTORY_CREATED_SUCCESSFULLY_MSG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.FILE_ALREADY_EXISTS_MSG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.FILE_AUTO_CREATED_MSG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.FILE_CREATED_PATH_MSG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.FILE_NOT_FOUND_MSG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.FILE_PATH_TO_DIRECTORY_INVALID_MSG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.IO_ERROR_WHEN_MAKING_FILE_MSG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.NEW_FILE_CREATED_MSG_FORMAT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.parsers.Checks.pathReplaceIllegalCharacters;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Functions to modify and create files to write to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class fileFunctions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * check if a file exists"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param file a given file to check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws FileNotFoundException the file to check was not found"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void checkFileExists(File file) throws FileNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!file.exists()){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * create a new file at the specified file path"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath specified file path"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return absolute path of the new path"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String autoCreateNewFile(String filePath) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(String.format(FILE_AUTO_CREATED_MSG, newFile.getAbsolutePath()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        filePath \u003d pathReplaceIllegalCharacters(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            checkFileExists(newFile);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(FILE_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // make the directory"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String directoryPath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String txtFileName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // identify placements"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            int endOfDirectoryName \u003d filePath.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            int endOfFileName \u003d filePath.indexOf(\".txt\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // check if placement is correct"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (endOfDirectoryName \u003d\u003d -1 || endOfFileName \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new FilePathInvalidException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    directoryPath \u003d filePath.substring(0, endOfDirectoryName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    txtFileName \u003d filePath.substring(endOfDirectoryName + 1, endOfFileName).trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    throw new FilePathInvalidException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //Creating a File object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            File file \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //Creating the directory"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isFileCreated \u003d file.mkdir();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if(isFileCreated){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(DIRECTORY_CREATED_SUCCESSFULLY_MSG);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                filePath \u003d filePath + \"/\" + txtFileName + \".txt\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(COULD_NOT_CREATE_DIRECTORY_MSG);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FilePathInvalidException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(FILE_PATH_TO_DIRECTORY_INVALID_MSG);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // make the file"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (newFile.createNewFile()){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(String.format(FILE_CREATED_PATH_MSG, newFile.getAbsolutePath()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(FILE_ALREADY_EXISTS_MSG);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(IO_ERROR_WHEN_MAKING_FILE_MSG);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(String.format(NEW_FILE_CREATED_MSG_FORMAT, newFile.getAbsolutePath()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return newFile.getAbsolutePath();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Checks if the file with the given file path exists"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath given file path"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return file object retrieved from the given file path"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static File getFileFromFilePath(String filePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File allTasksFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return allTasksFile;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * writes a double new line to the file to create one blank line of space"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath given file path"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws IOException unable to write to file"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void writeDoubleNewlineToFile(String filePath) throws IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        appendsStringToFile(NEWLINE, filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        appendsStringToFile(NEWLINE, filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * appends the string to the given file specified by filePath"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param textToAppend string to be appended to the file"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath filepath to the file"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws IOException unable to write to file"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void appendsStringToFile(String textToAppend, String filePath) throws IOException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, true); // create a FileWriter in append mode"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fw.write(textToAppend);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 146
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    protected Date dueDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"EEE d MMM yyyy hh:mm aa\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Constructs Deadline task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Deadline(String taskName, Date dueDate) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        super(taskName, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setDueDate(dueDate);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Setter for dueDate"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setDueDate(Date dueDate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Getter for dueDate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Date getDueDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return \"[D]\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return super.getTaskName() + \" (by: \" + dateFormat.format(dueDate) + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 42
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    protected Date startTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    protected Date endTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"EEE d MMM yyyy hh:mm aa\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Constructs Event task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Event(String taskName, Date startTime, Date endTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        super(taskName, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setStartTime(startTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setEndTime(endTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Getter for startTime"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Date getStartTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Getter for endTime"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Date getEndTime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Setter for startTime"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setStartTime(Date startTime) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Setter for endTime"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setEndTime(Date endTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return \"[E]\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return super.getTaskName() + \" (from: \" + dateFormat.format(startTime) + \" to \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                + dateFormat.format(endTime) + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 59
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieSymbols.CROSS_SYMBOL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieSymbols.TICK_SYMBOL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private boolean isComplete;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Basic task constructor"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Task(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this(\"no name\", false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Basic task constructor with parameters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Task(String taskName, boolean isComplete) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setTaskName(taskName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setComplete(isComplete);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Setter for taskName"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setTaskName(String taskName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Setter for completion status"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setComplete(boolean isComplete) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Getter for taskName"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskName(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Getter for completion status"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public boolean getComplete(){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return isComplete;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Basic getter for taskType"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskType(){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return \"[?]\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Basic printer for task description string"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskDescription(){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return getTaskName();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Basic printer for completion indication string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getCompletionIndicator (){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (isComplete) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return TICK_SYMBOL;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CROSS_SYMBOL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 78
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Todo class, only contains taskname with no due date"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Constructs Todo task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public ToDo(String taskName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        super(taskName, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return \"[T]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 20
    }
  },
  {
    "path": "src/main/java/duke/tootieFunctions/AddNewTasks.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.tootieFunctions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieInputMarkers;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieNormalMsgs;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieRegex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DateWronglyFormattedError;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DeadlineInputWrongFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DueDateWrongFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.EndTimeBeforeStartTimeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.EndTimeWrongFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.EventInputWrongFormatException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidDateException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidDueDateException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidEndTimeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidStartTimeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.MissingParamsException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.StartTimeWrongFormatException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TaskNameEmptyException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.ToDoInputWrongFormatException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.DUEDATE_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.ENDTIME_TAG;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.STARTTIME_TAG;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.TASKNAME_TAG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.parsers.Parsers;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.parsers.Parsers.parseSingleCharacterTaggedParamsFromUserInput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Add new Events, Todos or Deadlines to the list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class AddNewTasks {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Adds an event task to the allTasks list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks  list of all Tasks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks  total number of tasks in the list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws EventInputWrongFormatException  the command for adding event was wrongly formatted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidStartTimeException       the start time entered is invalid"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidEndTimeException         the end time entered is invalid"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws StartTimeWrongFormatException   the start time entered has formatting errors"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws EndTimeWrongFormatException     the end time entered has formatting errors"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws EndTimeBeforeStartTimeException the end time entered should not be before the start time"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskNameEmptyException          the task name field is empty"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void addEvent(String userInput, ArrayList\u003cTask\u003e allTasks, AtomicInteger numTasks) throws EventInputWrongFormatException, InvalidStartTimeException, InvalidEndTimeException, StartTimeWrongFormatException, EndTimeWrongFormatException, EndTimeBeforeStartTimeException, TaskNameEmptyException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date startTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date endTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // for returning filter options parsed from the user input"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cString, String\u003e filterOptions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // parse filter command into segments"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parseSingleCharacterTaggedParamsFromUserInput(userInput, filterOptions);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (MissingParamsException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new EventInputWrongFormatException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check that it has all necessary arguments"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!filterOptions.containsKey(TASKNAME_TAG) ||"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                !filterOptions.containsKey(STARTTIME_TAG) ||"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                !filterOptions.containsKey(ENDTIME_TAG)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new EventInputWrongFormatException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String taskName;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String startTimeUnformatted;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String endTimeUnformatted;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        taskName \u003d filterOptions.get(TASKNAME_TAG).trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        startTimeUnformatted \u003d filterOptions.get(STARTTIME_TAG).trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        endTimeUnformatted \u003d filterOptions.get(ENDTIME_TAG).trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startTime \u003d Parsers.parseDateIfExists(startTimeUnformatted);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateWronglyFormattedError e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new StartTimeWrongFormatException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new InvalidStartTimeException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new StartTimeWrongFormatException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endTime \u003d Parsers.parseDateIfExists(endTimeUnformatted);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateWronglyFormattedError e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new StartTimeWrongFormatException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new InvalidEndTimeException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new EndTimeWrongFormatException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if start and end time are in chronological order"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (startTime.after(endTime)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new EndTimeBeforeStartTimeException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskName.isBlank()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TaskNameEmptyException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // add event to list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.add(new Event(taskName.trim(), startTime, endTime));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf((TootieNormalMsgs.ADDED_EVENT_FORMAT) + \"%n\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(numTasks.get()).getTaskDescription());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        numTasks.getAndIncrement();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Adds a deadline task to the allTasks list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks  list of all Tasks"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks  total number of tasks in the list"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws DeadlineInputWrongFormatException the deadline command was wrongly formatted"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws DueDateWrongFormatException       the due date is wrongly formatted"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskNameEmptyException            the task name field is empty"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws InvalidDueDateException           due date entered wrong format"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void addDeadline(String userInput, ArrayList\u003cTask\u003e allTasks, AtomicInteger numTasks) throws DeadlineInputWrongFormatException, DueDateWrongFormatException, TaskNameEmptyException, InvalidDueDateException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date dueDate;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // for returning filter options parsed from the user input"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cString, String\u003e filterOptions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // parse filter command into segments"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parseSingleCharacterTaggedParamsFromUserInput(userInput, filterOptions);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (MissingParamsException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new DeadlineInputWrongFormatException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!filterOptions.containsKey(TASKNAME_TAG) || !filterOptions.containsKey(DUEDATE_TAG)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new DeadlineInputWrongFormatException();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String taskName;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String dueDateUnformatted;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        taskName \u003d filterOptions.get(TASKNAME_TAG).trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        dueDateUnformatted \u003d filterOptions.get(DUEDATE_TAG).trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dueDate \u003d Parsers.parseDateIfExists(dueDateUnformatted);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateWronglyFormattedError e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new DueDateWrongFormatException();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new InvalidDueDateException();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (dueDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new DueDateWrongFormatException();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskName.isBlank()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TaskNameEmptyException();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // add event to list"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.add(new Deadline(taskName.trim(), dueDate));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf((TootieNormalMsgs.ADDED_DEADLINE_FORMAT) + \"%n\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(numTasks.get()).getTaskDescription());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        numTasks.getAndIncrement();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Adds a toto task to the allTasks list"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks  list of all Tasks"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks  total number of tasks in the list"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws ToDoInputWrongFormatException the format of the todo command is incorrect"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskNameEmptyException        the task name field is empty"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void addToDo(String userInput, ArrayList\u003cTask\u003e allTasks, AtomicInteger numTasks)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws ToDoInputWrongFormatException, TaskNameEmptyException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // identify placements"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int taskNamePosition \u003d userInput.indexOf(TootieInputMarkers.TASKNAME_MARKER);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskNamePosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new ToDoInputWrongFormatException();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String taskName \u003d userInput.substring(taskNamePosition + 2);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (taskName.isBlank()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TaskNameEmptyException();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // add task to list"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.add(new ToDo(taskName.trim()));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        numTasks.getAndIncrement();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf((TootieNormalMsgs.ADDED_TODO_FORMAT) + \"%n\", taskName.trim());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 213
    }
  },
  {
    "path": "src/main/java/duke/tootieFunctions/CommandExecutor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.tootieFunctions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DeadlineInputWrongFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DividerNonexistantException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DueDateWrongFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.EndTimeBeforeStartTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.EndTimeWrongFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.EventInputWrongFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidDueDateException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidEndTimeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidStartTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.MissingFilterOptionsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.NoTasksFilteredException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.StartTimeWrongFormatException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TaskNameEmptyException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TaskNonexistantException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TasklistEmptyException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.ToDoInputWrongFormatException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.UsernameCommandInvalidException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.UsernameEmptyException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.parsers.Parsers;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.storage.AllTasksSaver;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.ui.Printers;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.BYE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.DEADLINE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.DELETE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.DIVIDER_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.DONE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.EVENT_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.FILEPATH_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.FILTER_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.HELP_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.LIST_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.LOAD_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.SAVE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.TODO_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.UNDONE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.USERNAME_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieConstants.NUMBER_OF_FILE_PATHS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieErrorMsgs.TASK_NOT_FOUND_ERROR_MSG;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ALL_TASKS_SAVED_MSG;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.DIVIDER_CHANGED_MSG;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.DIVIDER_CHOICE_NOT_FOUND_MSG;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.FILTER_COMMAND_MISSING_ARGS_MSG;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.FILTER_COMMAND_PARAMS_UNMATCHED_MSG;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.HELLO_NAME_FORMAT;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.USERNAME_BLANK_MSG;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.USERNAME_COMMAND_INVALID_MSG;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.storage.AllTasksLoader.loadAllTasksFile;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.tootieFunctions.Filters.filterTasks;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Contains functions that detect and execute commands"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CommandExecutor {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * figure out the command type from userInput"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return command type object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static CommandType extractCommandType(String userInput) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (userInput.toLowerCase().trim().startsWith(HELP_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.HELP;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(TODO_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.ADD_TODO;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(DEADLINE_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.ADD_DEADLINE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(EVENT_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.ADD_EVENT;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(LIST_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.LIST;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(DONE_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.MARK_TASK_DONE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(BYE_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.BYE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(DELETE_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.DELETE_TASK;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(UNDONE_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.MARK_TASK_UNDONE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(DIVIDER_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.CHOOSE_DIVIDER;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(USERNAME_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.SET_USERNAME;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(FILTER_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.FILTER_TASKS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(SAVE_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.SAVE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(FILEPATH_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.PRINT_FILE_PATHS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(LOAD_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.LOAD_MORE_TASKS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandType.UNRECOGNISED;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parses the user command and executes it"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings     array containing saved settings for updates"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param commandType       command type detected"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput         raw user input"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all Tasks"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath  file path to allTasks.txt"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted total number of tasks completed"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username          user provided name"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void executeCommand(ArrayList\u003cString\u003e savedSettings, CommandType commandType, String userInput,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                      ArrayList\u003cTask\u003e allTasks, String tootieSettingsFilePath,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                      String allTasksFilePath, AtomicInteger numTasks,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                      AtomicInteger numTasksCompleted, String username, Scanner SCANNER) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            GetHelp.getHelp(userInput);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case ADD_TODO:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                AddNewTasks.addToDo(userInput, allTasks, numTasks);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (ToDoInputWrongFormatException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.TODO_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TaskNameEmptyException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.TODO_TASKNAME_EMPTY_MSG);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case ADD_DEADLINE:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                AddNewTasks.addDeadline(userInput, allTasks, numTasks);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (DeadlineInputWrongFormatException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.DEADLINE_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (DueDateWrongFormatException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.DUEDATE_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TaskNameEmptyException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.DEADLINE_TASKNAME_EMPTY_MSG);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDueDateException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.INVALID_DUE_DATE_MSG);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case ADD_EVENT:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                AddNewTasks.addEvent(userInput, allTasks, numTasks);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (EventInputWrongFormatException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.EVENT_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidStartTimeException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.INVALID_START_DATE_MSG);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidEndTimeException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.INVALID_END_DATE_MSG);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (StartTimeWrongFormatException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.STARTDATE_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (EndTimeWrongFormatException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.ENDDATE_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (EndTimeBeforeStartTimeException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.ENDTIME_BEFORE_STARTIME_ERROR_MSG);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TaskNameEmptyException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.EVENT_TASKNAME_EMPTY_MSG);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                Printers.printAllTasks(allTasks, numTasks.get(), numTasksCompleted.get());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TasklistEmptyException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TootieErrorMsgs.TasklistEmptyMsg);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case MARK_TASK_DONE:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                ModifyTasks.markTaskComplete(userInput, allTasks, numTasksCompleted, numTasks);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TaskNonexistantException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TASK_NOT_FOUND_ERROR_MSG);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case MARK_TASK_UNDONE:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                ModifyTasks.markTaskIncomplete(userInput, allTasks, numTasksCompleted, numTasks);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TaskNonexistantException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TASK_NOT_FOUND_ERROR_MSG);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Printers.printFarewellMessage(username);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SAVE:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                AllTasksSaver.saveAllTasks(allTasks, allTasksFilePath, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(ALL_TASKS_SAVED_MSG);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case DELETE_TASK:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                ModifyTasks.deleteTask(userInput, allTasks, numTasks, numTasksCompleted);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (TaskNonexistantException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(TASK_NOT_FOUND_ERROR_MSG);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case CHOOSE_DIVIDER:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                DividerChoice dividerChoice \u003d Parsers.parseLineDividerFromUserInput(userInput);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                Printers.changeDivider(dividerChoice);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                savedSettings.set(2, dividerChoice.toString());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(DIVIDER_CHANGED_MSG);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (DividerNonexistantException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(DIVIDER_CHOICE_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SET_USERNAME:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                username \u003d SetPreferences.setUsername(userInput);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(String.format(HELLO_NAME_FORMAT, username));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                savedSettings.set(3, username);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (UsernameCommandInvalidException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(USERNAME_COMMAND_INVALID_MSG);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (UsernameEmptyException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(USERNAME_BLANK_MSG);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case FILTER_TASKS:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                filterTasks(userInput, allTasks);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (MissingFilterOptionsException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(FILTER_COMMAND_MISSING_ARGS_MSG);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (NoTasksFilteredException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(FILTER_COMMAND_PARAMS_UNMATCHED_MSG);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case PRINT_FILE_PATHS:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Printers.printFilePaths(tootieSettingsFilePath, allTasksFilePath);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case LOAD_MORE_TASKS:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            ArrayList\u003cString\u003e allTasksFilePathReturn \u003d new ArrayList\u003c\u003e(NUMBER_OF_FILE_PATHS);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            loadAllTasksFile(true, allTasks, SCANNER, allTasksFilePath, numTasks, numTasksCompleted,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    allTasksFilePathReturn);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Printers.printConfusedMessage();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 251
    }
  },
  {
    "path": "src/main/java/duke/tootieFunctions/Filters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.tootieFunctions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.CompletionStatusInvalidException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DateAfterPreceedsDateBefore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DateBeforeMatchesAfterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.DateWronglyFormattedError;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.InvalidDateException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.MissingFilterOptionsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.MissingParamsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.NoTasksFilteredException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.parsers.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.ui.Printers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.DUEDATE_AFTER_TAG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.DUEDATE_BEFORE_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.ENDTIME_AFTER_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.ENDTIME_BEFORE_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.SEARCH_TERM_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.STARTTIME_AFTER_TAG;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.STARTTIME_BEFORE_TAG;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.TASK_TYPE_TAG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.COMPLETION_STATUS_PARAM_INVALID_ERROR_MSG;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.DUEDATES_MATCH_WARNING_MSG;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.DUEDATES_WRONG_ORDER_MSG;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.DUEDATE_AFTER_DATE_INVALID_MSG;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.DUEDATE_AFTER_WRONGLY_FORMATTED_MSG;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.DUEDATE_BEFORE_DATE_INVALID_MSG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.DUEDATE_BEFORE_WRONG_FORMAT_MSG;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ENDDATES_MATCH_WARNING_MSG;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ENDDATE_AFTER_DATE_INVALID_MSG;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ENDDATE_AFTER_WRONG_FORMAT_MSG;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ENDDATE_BEFORE_DATE_INVALID_MSG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ENDDATE_BEFORE_WRONG_FORMAT_MSG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ENDTIMES_WRONG_ORDER_MSG;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.STARTTIMES_MATCH_WARNING_MSG;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.STARTTIMES_WRONG_ORDER_MSG;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.STARTTIME_AFTER_DATE_INVALID_MSG;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.STARTTIME_AFTER_WRONG_FORMAT_MSG;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.STARTTIME_BEFORE_DATE_INVALID_MSG;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.STARTTIME_BEFORE_WRONG_FORMAT_MSG;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.parsers.Parsers.parseDoubleCharacterTaggedParamsFromUserInput;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Filters the tasks in the list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Filters {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** dates for any of the indicators */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date dueDateBefore \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date dueDateAfter \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date startTimeBefore \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date startTimeAfter \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date endTimeBefore \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static Date endTimeAfter \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parse the user input and filter out the suitable tasks"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput user input strings"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks  list of all tasks"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws MissingFilterOptionsException the filter command has no parameters"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws NoTasksFilteredException      the filter returned no tasks with desired parameters"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void filterTasks(String userInput, ArrayList\u003cTask\u003e allTasks) throws MissingFilterOptionsException,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            NoTasksFilteredException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // flags for filters"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean hasAtLeastOneFilterOption \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsSearchTerm \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean taskTypeIndicated \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsStartTimeBeforeParam \u003d false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsEndTimeBeforeParam \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsDueDateBeforeParam \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsStartTimeAfterParam \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsEndTimeAfterParam \u003d false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsDueDateAfterParam \u003d false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsCompletionStatusParam \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        ArrayList\u003cTaskType\u003e taskTypes \u003d new ArrayList\u003c\u003e(2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String componentUserInput;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String searchTerm \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean completionStatus \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cInteger, Task\u003e filteredTasks \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // for returning filter options parsed from the user input"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cString, String\u003e filterOptions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // parse filter command into segments"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parseDoubleCharacterTaggedParamsFromUserInput(userInput, filterOptions);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (MissingParamsException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingFilterOptionsException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if there is task type param"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(TASK_TYPE_TAG)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            componentUserInput \u003d filterOptions.get(TASK_TYPE_TAG);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskTypeIndicated \u003d true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Parsers.parseTaskTypes(componentUserInput, taskTypes);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check for completion status param"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(\"cs\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            componentUserInput \u003d filterOptions.get(\"cs\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                completionStatus \u003d Parsers.parseCompletionStatusOption(componentUserInput);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                containsCompletionStatusParam \u003d true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (CompletionStatusInvalidException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(COMPLETION_STATUS_PARAM_INVALID_ERROR_MSG);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(SEARCH_TERM_TAG)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            containsSearchTerm \u003d true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            searchTerm \u003d filterOptions.get(SEARCH_TERM_TAG).trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(DUEDATE_BEFORE_TAG)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String dueDateUnformatted \u003d filterOptions.get(DUEDATE_BEFORE_TAG).trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dueDateBefore \u003d Parsers.parseDateIfExists(dueDateUnformatted);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                containsDueDateBeforeParam \u003d true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (DateWronglyFormattedError e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(DUEDATE_BEFORE_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(DUEDATE_BEFORE_DATE_INVALID_MSG);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(DUEDATE_AFTER_TAG)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String dueDateUnformatted \u003d filterOptions.get(DUEDATE_AFTER_TAG).trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                dueDateAfter \u003d Parsers.parseDateIfExists(dueDateUnformatted);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                containsDueDateAfterParam \u003d true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (DateWronglyFormattedError e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(DUEDATE_AFTER_WRONGLY_FORMATTED_MSG);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(DUEDATE_AFTER_DATE_INVALID_MSG);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // compare dates before and after"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Checks.checkIfDateAfterPreceedsBefore("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    containsDueDateBeforeParam, containsDueDateAfterParam, dueDateBefore, dueDateAfter);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Checks.checkIfBeforeAndAfterDatesMatch("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    containsDueDateBeforeParam, containsDueDateAfterParam, dueDateBefore, dueDateAfter);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateBeforeMatchesAfterException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(DUEDATES_MATCH_WARNING_MSG);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateAfterPreceedsDateBefore dateAfterPreceedsDateBefore) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(DUEDATES_WRONG_ORDER_MSG);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Date temp \u003d dueDateAfter;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dueDateAfter \u003d dueDateBefore;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dueDateBefore \u003d temp;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(STARTTIME_BEFORE_TAG)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String startTimeUnformatted \u003d filterOptions.get(STARTTIME_BEFORE_TAG).trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                startTimeBefore \u003d Parsers.parseDateIfExists(startTimeUnformatted);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                containsStartTimeBeforeParam \u003d true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (DateWronglyFormattedError e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(STARTTIME_BEFORE_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(STARTTIME_BEFORE_DATE_INVALID_MSG);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(STARTTIME_AFTER_TAG)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String startTimeUnformatted \u003d filterOptions.get(STARTTIME_AFTER_TAG).trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                startTimeAfter \u003d Parsers.parseDateIfExists(startTimeUnformatted);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                containsStartTimeAfterParam \u003d true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (DateWronglyFormattedError e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(STARTTIME_AFTER_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(STARTTIME_AFTER_DATE_INVALID_MSG);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // compare dates before and after"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Checks.checkIfDateAfterPreceedsBefore("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    containsStartTimeBeforeParam, containsStartTimeAfterParam,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    startTimeBefore, startTimeAfter);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Checks.checkIfBeforeAndAfterDatesMatch("
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    containsStartTimeBeforeParam, containsStartTimeAfterParam,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    startTimeBefore, startTimeAfter);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateBeforeMatchesAfterException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(STARTTIMES_MATCH_WARNING_MSG);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateAfterPreceedsDateBefore dateAfterPreceedsDateBefore) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(STARTTIMES_WRONG_ORDER_MSG);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Date temp \u003d startTimeAfter;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startTimeAfter \u003d startTimeBefore;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startTimeBefore \u003d temp;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(ENDTIME_BEFORE_TAG)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String endTimeUnformatted \u003d filterOptions.get(ENDTIME_BEFORE_TAG).trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                endTimeBefore \u003d Parsers.parseDateIfExists(endTimeUnformatted);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                containsEndTimeBeforeParam \u003d true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (DateWronglyFormattedError e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(ENDDATE_BEFORE_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(ENDDATE_BEFORE_DATE_INVALID_MSG);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(ENDTIME_AFTER_TAG)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String endTimeUnformatted \u003d filterOptions.get(ENDTIME_AFTER_TAG).trim();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                endTimeAfter \u003d Parsers.parseDateIfExists(endTimeUnformatted);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                containsEndTimeAfterParam \u003d true;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (DateWronglyFormattedError e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(ENDDATE_AFTER_WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println(ENDDATE_AFTER_DATE_INVALID_MSG);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // compare dates before and after"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Checks.checkIfDateAfterPreceedsBefore("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    containsEndTimeBeforeParam, containsEndTimeAfterParam, endTimeBefore, endTimeAfter);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Checks.checkIfBeforeAndAfterDatesMatch("
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    containsEndTimeBeforeParam, containsEndTimeAfterParam, endTimeBefore, endTimeAfter);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateBeforeMatchesAfterException e) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(ENDDATES_MATCH_WARNING_MSG);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (DateAfterPreceedsDateBefore dateAfterPreceedsDateBefore) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(ENDTIMES_WRONG_ORDER_MSG);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Date temp \u003d endTimeAfter;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endTimeAfter \u003d endTimeBefore;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endTimeBefore \u003d temp;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!hasAtLeastOneFilterOption) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingFilterOptionsException();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cInteger, Task\u003e numberedTasks \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Set\u003cMap.Entry\u003cInteger, Task\u003e\u003e entries \u003d numberedTasks.entrySet();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // add all the numbered tasks to a hashmap"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (i \u003d 1; i \u003c\u003d allTasks.size(); i++) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numberedTasks.put(i, allTasks.get(i - 1));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // make filters final for filtering"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String finalSearchTerm \u003d searchTerm;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date finalDueDateBefore \u003d dueDateBefore;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date finalDueDateAfter \u003d dueDateAfter;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date finalStartTimeAfter \u003d startTimeAfter;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date finalStartTimeBefore \u003d startTimeBefore;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date finalEndTimeBefore \u003d endTimeBefore;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Date finalEndTimeAfter \u003d endTimeAfter;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean finalCompletionStatus \u003d completionStatus;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // then filter for todo specifications, add to list"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!taskTypeIndicated || taskTypes.contains(TaskType.TODO)) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Stream\u003cMap.Entry\u003cInteger, Task\u003e\u003e entriesStream \u003d entries.stream();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            entriesStream.filter(entry -\u003e entry.getValue() instanceof ToDo).filter(containsSearchTerm ?"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            entry -\u003e entry.getValue().getTaskName().contains(finalSearchTerm) : entry -\u003e true)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsCompletionStatusParam ?"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            entry -\u003e entry.getValue().getComplete() \u003d\u003d finalCompletionStatus : entry -\u003e true)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .forEach(entry -\u003e filteredTasks.put(entry.getKey(), entry.getValue()));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // then filter for deadline specifications, add to list"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!taskTypeIndicated || taskTypes.contains(TaskType.DEADLINE)) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Stream\u003cMap.Entry\u003cInteger, Task\u003e\u003e entriesStream \u003d entries.stream();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            entriesStream.filter(entry -\u003e entry.getValue() instanceof Deadline).filter(containsSearchTerm ?"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            entry -\u003e entry.getValue().getTaskName().contains(finalSearchTerm) : entry -\u003e true)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsDueDateBeforeParam ? entry -\u003e ((Deadline) entry.getValue()).getDueDate()"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            .compareTo(finalDueDateBefore) \u003c 0 : entry -\u003e true)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsDueDateAfterParam ? entry -\u003e ((Deadline) entry.getValue()).getDueDate()"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            .compareTo(finalDueDateAfter) \u003e 0 : entry -\u003e true)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsCompletionStatusParam ?"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            entry -\u003e entry.getValue().getComplete() \u003d\u003d finalCompletionStatus : entry -\u003e true)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .forEach(entry -\u003e filteredTasks.put(entry.getKey(), entry.getValue()));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // then filter for event specifications, add to list"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!taskTypeIndicated || taskTypes.contains(TaskType.EVENT)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Stream\u003cMap.Entry\u003cInteger, Task\u003e\u003e entriesStream \u003d entries.stream();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            entriesStream.filter(entry -\u003e entry.getValue() instanceof Event).filter(containsSearchTerm ?"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            entry -\u003e entry.getValue().getTaskName().contains(finalSearchTerm) : entry -\u003e true)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsStartTimeBeforeParam ? entry -\u003e ((Event) entry.getValue()).getStartTime()"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            .compareTo(finalStartTimeBefore) \u003c 0 : entry -\u003e true)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsStartTimeAfterParam ? entry -\u003e ((Event) entry.getValue()).getStartTime()"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            .compareTo(finalStartTimeAfter) \u003e 0 : entry -\u003e true)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsEndTimeBeforeParam ? entry -\u003e ((Event) entry.getValue()).getEndTime()"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            .compareTo(finalEndTimeBefore) \u003c 0 : entry -\u003e true)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsEndTimeAfterParam ? entry -\u003e ((Event) entry.getValue()).getEndTime()"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            .compareTo(finalEndTimeAfter) \u003e 0 : entry -\u003e true)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .filter(containsCompletionStatusParam ?"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                            entry -\u003e entry.getValue().getComplete() \u003d\u003d finalCompletionStatus : entry -\u003e true)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    .forEach(entry -\u003e filteredTasks.put(entry.getKey(), entry.getValue()));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filteredTasks.isEmpty()) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new NoTasksFilteredException();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Printers.printFilteredTasks(allTasks.size(), filteredTasks);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 338
    }
  },
  {
    "path": "src/main/java/duke/tootieFunctions/GetHelp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.tootieFunctions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.ui.Printers;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.BYE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.DEADLINE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.DELETE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.DIVIDER_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.DONE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.EVENT_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.FILEPATH_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.FILTER_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.HELP_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.HELP_FULL_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.LIST_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.SAVE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.TODO_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.UNDONE_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.USERNAME_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.BYE_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.DEADLINE_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.DELETE_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.DIVIDER_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.DONE_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.EVENT_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.FILEPATH_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.FILTER_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.HELP_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.HELP_FULL_COMMAND_TEXT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.LIST_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.LOAD_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.NO_SUCH_COMMAND_IN_LIST_ERROR_MSG;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.SAVE_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.TODO_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.UNDONE_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.USERNAME_COMMAND_DESCRIPTION;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Functions for the user get command descriptions"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class GetHelp {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Get command description for a specific command or the whole command list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput user input command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    static void getHelp(String userInput) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // identify placements"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int helpCommandArgsPosition \u003d userInput.indexOf(HELP_COMMAND_KEYWORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String helpCommandArgs \u003d userInput.substring(helpCommandArgsPosition + HELP_COMMAND_KEYWORD.length()).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (helpCommandArgs.toLowerCase().trim().startsWith(HELP_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(HELP_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().trim().contains(TODO_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(TODO_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().trim().contains(DEADLINE_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(DEADLINE_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().trim().contains(EVENT_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(EVENT_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().trim().contains(LIST_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(LIST_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().trim().contains(DONE_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(DONE_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().trim().contains(BYE_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(BYE_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().trim().contains(DELETE_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(DELETE_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().trim().contains(UNDONE_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(UNDONE_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().trim().contains(DIVIDER_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(DIVIDER_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().trim().contains(USERNAME_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(USERNAME_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().trim().contains(FILTER_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(FILTER_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().trim().contains(SAVE_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(SAVE_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().trim().contains(FILEPATH_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(FILEPATH_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().contains(LOAD_COMMAND_DESCRIPTION)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(LOAD_COMMAND_DESCRIPTION);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.toLowerCase().contains(HELP_FULL_COMMAND_KEYWORD)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(HELP_FULL_COMMAND_TEXT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (helpCommandArgs.isBlank()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            Printers.printHelpInfo();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(NO_SUCH_COMMAND_IN_LIST_ERROR_MSG);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 92
    }
  },
  {
    "path": "src/main/java/duke/tootieFunctions/ModifyTasks.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.tootieFunctions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TaskNonexistantException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieNormalMsgs;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Modifies the tasks in the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class ModifyTasks {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * deletes the selected task based on user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput         raw user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all Tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted total number of tasks completed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskNonexistantException cannot delete nonexistant task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void deleteTask(String userInput, ArrayList\u003cTask\u003e allTasks, AtomicInteger numTasks,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                  AtomicInteger numTasksCompleted) throws TaskNonexistantException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int taskNum;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse task and check if it exists"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        taskNum \u003d getTaskNumFromInput(userInput, numTasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // print response"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf((TootieNormalMsgs.TASK_DELETED_RESPONSE_MSG) + \"%n\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(taskNum - 1).getTaskType(), allTasks.get(taskNum - 1).getCompletionIndicator(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(taskNum - 1).getTaskDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (allTasks.get(taskNum - 1).getComplete()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numTasksCompleted.getAndDecrement();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.remove(taskNum - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        numTasks.getAndDecrement();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * process the user input and mark the task complete"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput         raw user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all Tasks"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted total number of tasks completed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskNonexistantException cannot mark nonexistant task complete"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void markTaskComplete(String userInput, ArrayList\u003cTask\u003e allTasks, AtomicInteger numTasksCompleted,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                        AtomicInteger numTasks) throws TaskNonexistantException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int taskNum;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse task and check if it exists"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        taskNum \u003d getTaskNumFromInput(userInput, numTasks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!allTasks.get(taskNum - 1).getComplete()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numTasksCompleted.getAndIncrement();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.get(taskNum - 1).setComplete(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // print response"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf((TootieNormalMsgs.TASK_MARKED_DONE_RESPONSE_MSG) + \"%n\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(taskNum - 1).getTaskType(), allTasks.get(taskNum - 1).getTaskDescription());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Extract the task number from the user input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks  total number of tasks in the list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return task number as indicated by user"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskNonexistantException task number indicated by user out of range"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static int getTaskNumFromInput(String userInput, AtomicInteger numTasks) throws TaskNonexistantException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int taskNum;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            taskNum \u003d Integer.parseInt(userInput.replaceAll(\"[\\\\D]\", \"\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (taskNum \u003e numTasks.get() || taskNum \u003c 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new TaskNonexistantException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TaskNonexistantException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return taskNum;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * process the user input and mark the task incomplete"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput         raw user input"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all Tasks"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted total number of tasks completed"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TaskNonexistantException cannot mark nonexistant task incomplete"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void markTaskIncomplete(String userInput, ArrayList\u003cTask\u003e allTasks, AtomicInteger numTasksCompleted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            , AtomicInteger numTasks) throws TaskNonexistantException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int taskNum;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse task and check if it exists"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        taskNum \u003d getTaskNumFromInput(userInput, numTasks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (allTasks.get(taskNum - 1).getComplete()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numTasksCompleted.getAndDecrement();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        allTasks.get(taskNum - 1).setComplete(false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // print response"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf((TootieNormalMsgs.TASK_MARKED_UNDONE_RESPONSE_MSG) + \"%n\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                allTasks.get(taskNum - 1).getTaskType(), allTasks.get(taskNum - 1).getTaskDescription());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 117
    }
  },
  {
    "path": "src/main/java/duke/tootieFunctions/SetPreferences.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.tootieFunctions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.UsernameCommandInvalidException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.UsernameEmptyException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.CommandKeywords.USERNAME_COMMAND_KEYWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Functions for the user to set preferences such as"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class SetPreferences {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Extracts the username from the raw user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return updated username"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws UsernameCommandInvalidException username command incorrectly formatted"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws UsernameEmptyException user name field should not be empty"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String setUsername(String userInput) throws UsernameCommandInvalidException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            UsernameEmptyException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // identify placements"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int usernamePosition \u003d userInput.indexOf(USERNAME_COMMAND_KEYWORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (usernamePosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new UsernameCommandInvalidException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String usernameInput \u003d userInput.substring(usernamePosition + USERNAME_COMMAND_KEYWORD.length()).trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (usernameInput.isBlank()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new UsernameEmptyException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return usernameInput;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 37
    }
  },
  {
    "path": "src/main/java/duke/ui/Printers.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.DividerChoice;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieConstants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieErrorMsgs;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieNormalMsgs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieSymbols;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.exceptions.TasklistEmptyException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.ALL_FILTERED_TASKS_COMPLETE_MSG_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.FILEPATH_PRINTER_FORMAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static duke.constants.TootieNormalMsgs.FILTERED_TASKS_COUNT_MSG_FORMAT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Functions to print to the console as part of the UI"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Printers {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Line divider set to default before settings are loaded"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String currentLineDivider \u003d TootieSymbols.DOUBLE_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Changes the line divider to the option chosen by user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param dividerChoice divider chosen by user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void changeDivider(DividerChoice dividerChoice) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (dividerChoice) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SIMPLE:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            currentLineDivider \u003d TootieSymbols.SIMPLE_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SPARKLY:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            currentLineDivider \u003d TootieSymbols.SPARKLY_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case DOUBLE:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            currentLineDivider \u003d TootieSymbols.DOUBLE_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            currentLineDivider \u003d TootieSymbols.PLAIN_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints the line divider to the console"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(currentLineDivider);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints the personalised hello message"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username user input name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printHelloMessage(String username) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf(TootieNormalMsgs.HELLO_GREETING, username);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints the personalised farewell message"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username user indicated name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printFarewellMessage(String username) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf(TootieNormalMsgs.FAREWELL_GREETING, username);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints a randomised version of the Tootie logo"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printTootieLogo() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String[] logos \u003d new String[TootieConstants.NUM_LOGOS_AVAILABLE];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        logos[0] \u003d TootieSymbols.SIMPLE_TOOTIE_LOGO;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        logos[1] \u003d TootieSymbols.BLOCKY_TOOTIE_LOGO;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        logos[2] \u003d TootieSymbols.TRAIN_THEME_TOOTIE_LOGO;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        logos[3] \u003d TootieSymbols.THICK_TOOTIE_LOGO;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Random rand \u003d new Random(System.currentTimeMillis());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(String.format(TootieNormalMsgs.LOGO_PRINT_FORMAT, logos[Math.abs(rand.nextInt() % 4)]));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints message when command is not understood by the program"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printConfusedMessage() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(TootieErrorMsgs.COMMAND_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(TootieErrorMsgs.SUGGEST_HELP_OPTION_MSG);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints list of commands and example usage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printHelpInfo() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(TootieNormalMsgs.HELP_INFO_MSG);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints all list items with index and completion indicator"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasks          list of all Tasks"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks          total number of tasks in the list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasksCompleted total number of tasks completed"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws TasklistEmptyException cannot print empty task list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printAllTasks(ArrayList\u003cTask\u003e allTasks, int numTasks, int numTasksCompleted)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws TasklistEmptyException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (numTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new TasklistEmptyException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf(String.format(TootieNormalMsgs.NUMTASKS_PRINT_FORMAT, numTasks, (numTasks \u003d\u003d 1 ? \"\" : \"s\"),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                numTasks - numTasksCompleted));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (int i \u003d 0; i \u003c numTasks; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.printf((TootieNormalMsgs.LIST_TASK_FORMAT) + \"%n\", (i + 1), allTasks.get(i).getTaskType(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    allTasks.get(i).getCompletionIndicator(), allTasks.get(i).getTaskDescription());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (numTasks \u003d\u003d numTasksCompleted) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println(TootieNormalMsgs.TASKS_ALL_DONE_MSG);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Print out the file paths for the allTasks.txt file and tootieSettings.txt file"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tootieSettingsFilePath file path to the tootieSettings.txt file"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param allTasksFilePath       file path to the allTasks.txt file"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printFilePaths(String tootieSettingsFilePath, String allTasksFilePath) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(String.format(FILEPATH_PRINTER_FORMAT, allTasksFilePath, tootieSettingsFilePath));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Print filter summary"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tasksFound    number of tasks filtered in total"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param tasksComplete number of tasks filtered that were complete"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printFilterSummary(int tasksFound, int tasksComplete) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (tasksComplete \u003d\u003d tasksFound) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.printf(String.format(ALL_FILTERED_TASKS_COMPLETE_MSG_FORMAT,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    tasksFound, (tasksFound \u003d\u003d 1 ? \"\" : \"s\")));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.printf(String.format(FILTERED_TASKS_COUNT_MSG_FORMAT,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    tasksFound,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    (tasksFound \u003d\u003d 1 ? \"\" : \"s\"),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    tasksFound - tasksComplete));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Print the list of filtered tasks"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param numTasks      total number of tasks in"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filteredTasks list of filtered tasks"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printFilteredTasks(int numTasks, HashMap\u003cInteger, Task\u003e filteredTasks) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int tasksFound \u003d 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int tasksComplete \u003d 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (i \u003d 1; i \u003c\u003d numTasks; i++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (filteredTasks.containsKey(i)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.printf((TootieNormalMsgs.LIST_TASK_FORMAT) + \"%n\", i, filteredTasks.get(i).getTaskType(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                        filteredTasks.get(i).getCompletionIndicator(), filteredTasks.get(i).getTaskDescription());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                tasksFound++;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                if (filteredTasks.get(i).getComplete()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    tasksComplete++;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printFilterSummary(tasksFound, tasksComplete);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 186
    }
  },
  {
    "path": "src/main/java/duke/ui/UserInputHandlers.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieInputMarkers;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import duke.constants.TootieRegex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * For user input detection and echoing"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class UserInputHandlers {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Gets user input, ignore comments and blank lines"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param SCANNER Scanner object for console inputs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return raw user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String getUserInput(Scanner SCANNER) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            userInput \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } while (userInput.matches(TootieRegex.BLANK_STRING_REGEX)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                || userInput.startsWith(TootieInputMarkers.INPUT_COMMENT_MARKER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Echos the userInput for testing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void echoUserInput(String userInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 35
    }
  },
  {
    "path": "text-ui-test/data/allTasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Total tasks: 3"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tasks completed: 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Task completion status:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "0 is not done([✗]), 1 is done([✓])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Task types (T,D,E):"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "T is to-do, D is deadline, E is event"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[T][0] clean shoes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][1] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tasks:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[T][0] clean shoes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[D][0] do project (by: Thu 30 Jan 2020 04:55 PM)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "[E][1] clean kitchen (from: Thu 31 Dec 2020 04:55 AM to Thu 31 Dec 2020 05:45 AM)"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 19
    }
  },
  {
    "path": "text-ui-test/data/tootieSettings.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "INFORMATION"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Tootie - Version 1.6"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "FILE PATHS"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Tootie settings: C:\\Users\\Amelia\\Documents\\GitHub\\ip\\text-ui-test\\data\\tootieSettings.txt"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ All Tasks: C:\\Users\\Amelia\\Documents\\GitHub\\ip\\text-ui-test\\data\\allTasks.txt"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "USER PREFERENCES"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Divider choice: DOUBLE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+ Username: Ames"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 14
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# automatically create new allTasks.txt file"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test help function"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test unrecognised command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "blah"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test todo versions/ error handling"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo t/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "todo t/clean turtle tank"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test deadline versions/ error handling"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline t/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline t/write essay d/31-12-2020"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "deadline t/do project d/30-01-2020 04:55"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test event versions/ error handling"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean house s/31-12-2020 e/31-02-2020"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean house s/31-12-2020 e/05-02-2021"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean cupboard e/31-12-2020 s/05-02-2021"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean kitchen s/12-12-2020 e/31-12-2021"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean shoes s/01-02-2020 e/31-12-2021 05:45"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "event t/clean socks s/01-02-2020 04:55 e/31-12-2020 05:45"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test done function"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 11"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test undone function"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone 11"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone 5"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "undone 0"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test delete function"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete 12"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test divider function"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 3"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 2"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 4"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 1"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test username function"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "username Sophia"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test filter function"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter tt/event,todo"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter tt/deadline"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter st/clean"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter st/Mop"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter tt/event sb/13-03-2020"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter tt/event sa/13-03-2020"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter tt/event eb/13-01-2021"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter tt/event ea/13-01-2021"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter tt/deadline da/13-02-2020"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter tt/deadline db/13-02-2020"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter tt/deadline db/13-02-2000"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter cs/done"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filter cs/undone"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test load function"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "load"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "C:\\Users\\Amelia\\Documents\\GitHub\\ip\\data\\allTasksTemplate.txt"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "load"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "cancel"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test filepath function"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filepath"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "filepaths"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test save function"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "save"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "# test bye function"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 91
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "javac -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\storage\\*.java ..\\src\\main\\java\\duke\\exceptions\\*.java ..\\src\\main\\java\\duke\\tootieFunctions\\*.java ..\\src\\main\\java\\duke\\parsers\\*.java ..\\src\\main\\java\\duke\\constants\\*.java ..\\src\\main\\java\\duke\\ui\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "java -Dfile.encoding\u003dUTF8 -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "REM compare the output to the expected output USE INTELLIJ INSTEAD FC BAD :("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "echo -------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "echo check output by selecting both files in intellij"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "echo and then right click and find compare files"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "echo or press ctrl + D after selecting"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "REM FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 9,
      "-": 18
    }
  }
]
