{
  "authorDailyContributionsMap": {
    "AndreWongZH": [
      {
        "date": "2020-08-29",
        "commitResults": [
          {
            "hash": "2c2b4480894237184e6c3f8d9de473180f9b3669",
            "messageTitle": "Add skeletal version of Duke",
            "messageBody": "Lets add in code to make the program greet the user\nand then exits.\n",
            "tags": [
              "Level-0"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 11,
                "deletions": 0
              }
            }
          },
          {
            "hash": "6c0352e21e83dddb4629776014c24253da592a4f",
            "messageTitle": "Add user interactions to program",
            "messageBody": "Duke class: greet and say bye to user\n\nDuke class needs more functionality to interact with users. It does\nnot allow users to enter any inputs.\n\nLets add in the functionality of echoing commands that\nusers has entered.\nThe program will exit when user enters \"bye\" to prevent it from\nrunning indefinitely.\n",
            "tags": [
              "Level-1"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 40,
                "deletions": 14
              }
            }
          },
          {
            "hash": "637a898ff88c1a5584889f68c81a3887db26eea2",
            "messageTitle": "Add the ability to store text by user",
            "messageBody": "Duke class: echo messages entered by user\n\nWe need to have the ability to store texts entered by user.\n\nLets create a new class called Items to keep a record of texts\nentered by user up to a maximum of 100 texts.\n\nIt has a public method addToList to add a text entered by user.\nIt has a public method printList to display all the text entered.\n",
            "tags": [
              "Level-2"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 26,
                "deletions": 5
              }
            }
          },
          {
            "hash": "0b0524daf436cf3e590f6539b791ae6180e1663a",
            "messageTitle": "Add the ability to mark tasks as done",
            "messageBody": "Items class: keep track of the list of user text inputs\n\nWe need a way for the Item class to keep track of the status of the\ntask.\n\nLets rename the Items class to be called TaskManager and it\u0027s\nmethods to better reflect the purpose of the class.\nAdded setTaskDone method to TaskManager class.\n\nI also added a new class called Task to keep track of the task\ndescription and whether if it is done or not.\nThe Task class has a public method getTaskStatus to return the done\nstatus and description of the task as a string.\n",
            "tags": [
              "Level-3"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 59,
                "deletions": 25
              }
            }
          },
          {
            "hash": "72acc18c984d2ad8c6e0e40cfe98c7ddcd1be4ec",
            "messageTitle": "Refactor code to comply with coding standards",
            "messageBody": "Classes Duke, Task and TaskManager currently comply with the coding\nstandards.\n\nThis can affect the readability of the code.\n\nLets update all the classes and public methods to include a javadoc\nand ensure that scope of the variables are defined at the smallest\nscope possible.\nI also ensured that whitespaces are used in statements to improve\nreadability.\n",
            "tags": [
              "A-CodingStandard"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 54,
                "deletions": 22
              }
            }
          },
          {
            "hash": "b46fb243c87e6223ea4d4448c8fa0a735cc4ebeb",
            "messageTitle": "Add support for tracking todos, deadlines and events",
            "messageBody": "Task class: records the description and isDone boolean\nTaskManager class: keep tracks of the list of task class\n\nThe task class needs to be split into todos, deadlines, and events.\nEach class will have additional attributes: deadlines will have a\nby attribute and events will have an at attribute.\n\nLets have our Task class be the parent class and todo, deadline and\nevent class will inherit from it.\nWe will also have a new method splitItem for the TaskManager class\nto handle the separation of user input into task and date/time.\nWe will also have a TaskType enumeration as currently there is only\ntodo, deadline and event type of tasks, more can be added in the\nfuture.\n\nUsing inheritance here is preferred because all three class types\nhave description and isDone attributes and this reduces repetition.\n",
            "tags": [
              "Level-4"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 97,
                "deletions": 20
              }
            }
          },
          {
            "hash": "f77a94ff5250d7315b32dd9bf0a0c06050851ad1",
            "messageTitle": "Add new text automation testing",
            "messageBody": "Lets create tests for our program using I/O redirection technique.\n\nThis is because in the future we can be notified if any of our test\nfailed due to new changes being made.\n",
            "tags": [
              "A-TextUiTesting"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 8,
                "deletions": 0
              },
              "java": {
                "insertions": 2,
                "deletions": 2
              },
              "bat": {
                "insertions": 10,
                "deletions": 2
              }
            }
          },
          {
            "hash": "94dae75eefc790304022fb5711b0b8527edaf65a",
            "messageTitle": "Refactor Duke class for readability",
            "messageBody": "Duke class: extract methods from Duke main class\n\nDuke class now have varying levels of abstraction within the main\nmethod.\n\nLets make the main method in Duke class to have the same level of\nabstraction by extracting out lines of code into a method.\nI also added static string constants for greetings and named\nconstants to avoid magic numbers.\n\nHave the same level of abstraction allows us to adhere to SLAP\nprinciple.\nNot having magic numbers increases readability\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 62,
                "deletions": 39
              }
            }
          },
          {
            "hash": "c09dcd3bbb7107a0c39fc51d8c6ef9ed3e6ea36c",
            "messageTitle": "Refactor Task, Todo, Deadline and Event class for readability",
            "messageBody": "There are many single strings that are scattered about in the print\nstatements, causing code to be hard to read\n\nLets have named constants for opening and closing of strings to be\nprinted out. We also have constants for the tick and cross icons.\nWe also have constants for task tags.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 24,
                "deletions": 11
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-30",
        "commitResults": [
          {
            "hash": "308fa228194429bb9f997f1bbc21ee4d66a1296c",
            "messageTitle": "Refactor TaskManager class",
            "messageBody": "Extracted methods from other methods to ensure SLAP principle is\nmaintained.\nMagic literals are extracted out as named constants.\nOverload deadline and event class\u0027s constructors to make it possible\nto pass in one argument instead, improves readability.\nAdded comments to private methods.\n",
            "tags": [
              "A-CodeQuality"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 76,
                "deletions": 38
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-04",
        "commitResults": [
          {
            "hash": "85d28729484c0d00cd9ccde05643e0177211c80c",
            "messageTitle": "Fix TaskManager class to follow code standards",
            "messageBody": "Lets add a default case to adhere with the code standards for the\nsplitItem method.\nI renamed the descAndTime variable to taskParameters for better\nreadability.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 11,
                "deletions": 9
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-06",
        "commitResults": [
          {
            "hash": "51c4d80f023b90654235bac5e68069525a6843a0",
            "messageTitle": "Add handling of exceptions for Duke class",
            "messageBody": "Duke class does not handle invalid commands and empty commands which\nrequires parameters.\n\nLets create a new method under the Duke class to extract out the\ncommand. If no command is extracted, method will throw an\nIllegalCommandException.\n\nLets also have a new method to extract out the parameters after the\ncommands. If no parameters are entered, the method will throw an\nIndexOutOfBoundsException.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 88,
                "deletions": 9
              }
            }
          },
          {
            "hash": "aeb3a21fe4f27d62063e27ef8a35de54fb574c7a",
            "messageTitle": "Add handling of exceptions for TaskManager class",
            "messageBody": "TaskManager does not handle invalid or missing user parameters.\n\nLets throw a MissingTaskLiteralException if the program does not\ndetect a /at or /by and prompts the user to re enter a new command.\n\nFor setting task to be done, we also handled cases where parameter\npassed in is not a integer or the integer is out of range of the\navailable list.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 75,
                "deletions": 30
              }
            }
          },
          {
            "hash": "1c9dbb6a42e5af9267ca32e1b40177ea59065865",
            "messageTitle": "Fix exceptions in Duke and TaskManager class",
            "messageBody": "Duke class: Bye command does not exit the program.\nTaskManager class: Does not handle situation where list if full.\n\nLets add in a new BYE enum for extractCommand method to check for\nbye command. I also extracted out the error messages as static\nstring constants. I also changed checking of user input to use\n.startsWith() rather than .contains() as it prevents inputs like\n\"event done\" to give a wrong error.\n\nLets also handle IndexOutOfBoundsException when the program tries to\nadd a task to a full list.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 36,
                "deletions": 18
              }
            }
          },
          {
            "hash": "b309a3769011d0b053f0d357eeaa3bbe4c627ee0",
            "messageTitle": "Fix and add more test cases",
            "messageBody": "Updated runtext.bat file to complile all my java files.\nAdded in more test cases where error in user input occur and\nhandled.\n",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 18,
                "deletions": 0
              },
              "java": {
                "insertions": 6,
                "deletions": 6
              },
              "bat": {
                "insertions": 13,
                "deletions": 4
              }
            }
          },
          {
            "hash": "4077abf0db69d9ce0e7909576fc4099d717df29e",
            "messageTitle": "Divide classes into packages",
            "messageBody": "Currently the classes do not belong to any packages.\n\nLets group the classes into 2 different packages under the duke\npackage, the command and task package.\n\nI also extracted out methods in Duke class that pertains to commands\nand made a new class called CommandManager.\n\nI also updated the runtest.bat file to ensure that compile path is\ncorrect.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 117,
                "deletions": 87
              },
              "bat": {
                "insertions": 11,
                "deletions": 10
              }
            }
          }
        ]
      }
    ]
  },
  "authorFileTypeContributionMap": {
    "AndreWongZH": {
      "java": 458,
      "md": 0,
      "sh": 0,
      "bat": 22,
      "gradle": 0,
      "txt": 26
    }
  },
  "authorContributionVariance": {
    "AndreWongZH": 21532.002
  },
  "authorDisplayNameMap": {
    "AndreWongZH": "CS2113T-W12-4 ANDR.. HUA"
  }
}
