[
  {
    "path": "data/Duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "T|1| stuff"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": "T|1| someetht 2020-01-01"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "E|1| something |2010-01-01 time is 09:50"
      }
    ],
    "authorContributionMap": {
      "jazhten": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": "For DukeWars"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "### Add Tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Add a task to the current tasklist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "#### Types of tasks : "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    todo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    deadline"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    event"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "### List Tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Lists the current tasks and their state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "### Delete Tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Delete a task from the task list, ignores completion status"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "### Complete Tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Marks the targeted task as completed. Shown in list command as a tick or cross. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "### Find Tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Find tasks in the tasklist. \u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Searches for instance of word input and returns it in the form of a list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "### Find Tasks by Date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Find tasks in the tasklist in the date input. \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Searches for tasks on/before/after the specified date and returns it in the form of a list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003e Example usage : `date before 2020-01-01`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "### Find Tasks by Time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Find tasks in the tasklist in the time input. \u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Searches for tasks on/before/after the specified time and returns it in the form of a list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003e Example usage : `time on 12:01`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "### Save taskList state"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "__Handled by program__ \u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Saves the current state of the tasklist to the disk."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "### Load saved taskList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "__Handled by program__ \u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Loads the previously written state of the taskList to the current instance. "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "### `Keyword` - Feature Name in lower case"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Insert `keyword` followed by the desired action like \u0027find\u0027 or \u0027add\u0027."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": "`event project meeting /at Aug 6th 2-4pm`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "`Got it. I\u0027ve added this task:` \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": " `[E][âœ˜]  project meeting  (at: Aug 6th 2-4pm)`"
      }
    ],
    "authorContributionMap": {
      "jazhten": 42,
      "-": 13
    }
  },
  {
    "path": "src/main/java/Commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Parent class of the commands"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Handles basic commands (like list) which does not require state"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Command(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Overwritten in the individual commands"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void process() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Prints all the tasks in the taskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void listCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Ui.printList(TaskList.getTaskList(), TaskList.getTaskIndex());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 30
    }
  },
  {
    "path": "src/main/java/Commands/DateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import TaskClasses.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Date command. Used to find tasks {before/on/after} the date searched"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * input format : `date {before/on/after} 1900-01-01`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class DateCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    String searchDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    String cmd;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    ArrayList\u003cTask\u003e dateSearchResults;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public boolean isValidInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    int numDateResults;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public DateCommand(String input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        numDateResults \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        extractCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Extracts the command {before/on/after} and the searchedDate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Also verifies if the input is valid before allowing the process() to run"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private void extractCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String[] splitInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            cmd \u003d splitInput[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            searchDate \u003d splitInput[2];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            isValidInput \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printInvalidInputDateException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            isValidInput \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            isValidInput \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printInvalidDateInputFormatException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *  Search for the tasks with date {before/on/after} the input date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void process() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            switch (cmd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            case \"before\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                dateSearchResults \u003d TaskList.getTasksBeforeDate(searchDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            case \"after\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                dateSearchResults \u003d TaskList.getTasksAfterDate(searchDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            case \"on\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                dateSearchResults \u003d TaskList.getTasksOnDate(searchDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printInvalidInputDateException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            numDateResults \u003d dateSearchResults.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (numDateResults \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Ui.printSearchedList(dateSearchResults, numDateResults);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 78
    }
  },
  {
    "path": "src/main/java/Commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import TaskClasses.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Handles `deadline` command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    String deadlineOperation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    String cmd;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public DeadlineCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        cmd \u003d input.split(\" \")[0];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Processes the deadline to be added to the tasklist"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Adds deadline to the taskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Prints responses to the user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void process() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            deadlineOperation \u003d StringOperations.getTimeline(input, cmd);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printBasicDukeException(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String deadlineInputDescription \u003d StringOperations.getDescription(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        TaskList.insertTask(new Deadline(deadlineInputDescription, deadlineOperation));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Ui.printAddResponse(TaskList.queryLatestTask(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                TaskList.getTaskIndex() + 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        TaskList.incrementIndex();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Storage.saveData(TaskList.getTaskList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 39
    }
  },
  {
    "path": "src/main/java/Commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import TaskClasses.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Handles `deadline` command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public DeleteCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.index \u003d Integer.parseInt(input.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Delete the process specified by the index input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Calls the ui functions to respond to the user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void process() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Task targetTask;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            targetTask \u003d TaskList.queryTask(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            TaskList.deleteTask(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            TaskList.decrementIndex();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printTaskIndexErrorException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Ui.deleteTask(targetTask, TaskList.getNumTasks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Storage.saveData(TaskList.getTaskList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 36
    }
  },
  {
    "path": "src/main/java/Commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Handles the `done` command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public DoneCommand(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.index \u003d Integer.parseInt(input.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Marks the task specified at the index as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Calls ui functions that responds to the user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void process() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            TaskList.completeTask(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printTaskIndexErrorException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Ui.completeTask(TaskList.getTaskList(), index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Storage.saveData(TaskList.getTaskList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 33
    }
  },
  {
    "path": "src/main/java/Commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import TaskClasses.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    String eventOperation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    String cmd;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Handles `event` command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public EventCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        cmd \u003d input.split(\" \")[0];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Processes the event to be added to the tasklist"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Adds event to the taskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Prints responses to the user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void process() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            eventOperation \u003d StringOperations.getTimeline(input, cmd);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printBasicDukeException(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String eventInputDescription \u003d StringOperations.getDescription(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        TaskList.insertTask(new Event(eventInputDescription, eventOperation));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Ui.printAddResponse(TaskList.queryLatestTask(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                TaskList.getTaskIndex() + 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        TaskList.incrementIndex();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Storage.saveData(TaskList.getTaskList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 39
    }
  },
  {
    "path": "src/main/java/Commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import TaskClasses.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.StringOperations;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Handles the `find` command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    String searchString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    int numResults;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public FindCommand(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        numResults \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Finds the tasks in the taskList which contains the searchString"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Calls Ui functions to respond top the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void process() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            searchString \u003d input.substring(StringOperations.getFirstSpace(input));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printBasicDukeException(e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cTask\u003e searchResults;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        searchResults \u003d TaskList.findTasks(searchString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            numResults \u003d searchResults.size();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (numResults \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Ui.printSearchedList(searchResults, numResults);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 49
    }
  },
  {
    "path": "src/main/java/Commands/TimeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import TaskClasses.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Time command. Used to find tasks {before/on/after} the time searched"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * input format : `time {before/on/after} 12:25`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class TimeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private String searchTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private int numTimeResults;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private String cmd;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public boolean isValidInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private ArrayList\u003cTask\u003e timeSearchResults;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public TimeCommand(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        numTimeResults \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        extractCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Extracts the command {before/on/after} and the searchedTime"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Also verifies if the input is valid before allowing the process() to run"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private void extractCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String[] splitInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            cmd \u003d splitInput[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            searchTime \u003d splitInput[2];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            isValidInput \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printInvalidInputDateException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            isValidInput \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            isValidInput \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printInvalidTimeInputFormatException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *  Search for the tasks with time {before/on/after} the input time"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void process() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            switch (cmd) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            case \"before\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                timeSearchResults \u003d TaskList.getTasksBeforeTime(searchTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            case \"after\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                timeSearchResults \u003d TaskList.getTasksAfterTime(searchTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            case \"on\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                timeSearchResults \u003d TaskList.getTasksOnTime(searchTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printInvalidInputTimeException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            numTimeResults \u003d timeSearchResults.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (numTimeResults \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Ui.printSearchedList(timeSearchResults, numTimeResults);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 79
    }
  },
  {
    "path": "src/main/java/Commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import TaskClasses.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Handles `todo` command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public TodoCommand(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        description \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Processes the todo to be added to the tasklist"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Adds todo to the taskList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Prints responses to the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void process() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            description \u003d input.substring(StringOperations.getFirstSpace(input));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printBasicDukeException(e);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        TaskList.insertTask(new Todo(description));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Ui.printAddResponse(TaskList.queryLatestTask(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                TaskList.getTaskIndex() + 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        TaskList.incrementIndex();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Storage.saveData(TaskList.getTaskList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 36
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Utility.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Duke, the friendly ChatBot that handles your tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        new Duke(\"data/Duke.txt\").run();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Main running body of the program"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Handles the scanning of input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Waits for getTerminationStatus from the parser before ending the program"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ui.startUpDuke();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Scanner inputScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Parser parseManager \u003d new Parser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        while (!parseManager.getTerminationStatus()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            System.out.print(\"\\u2658 : \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            parseManager.handleInput(inputScanner.nextLine());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Inits Ui, Storage and taskList objects"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param filePath which is where the save data is loaded on disk"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            new TaskList(storage.loadSaveFile());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 46,
      "-": 4
    }
  },
  {
    "path": "src/main/java/TaskClasses/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package TaskClasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Describes the properties of the deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Able to override the toString() method to return a more informative description"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Ensures the data for Deadlines are saved correctly"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Important as the save file loader uses regex and chars must be in the right place"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return Formatted description of deadline for saving"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String saveValue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            result \u003d \"E|1|\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            result \u003d \"E|0|\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        result +\u003d (this.taskName + \"|\" + this.by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return Formatted description of deadline"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 40
    }
  },
  {
    "path": "src/main/java/TaskClasses/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package TaskClasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Class to describe the attributes in an Event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Includes toString() override and a wrapper to help save the event to the data file"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    String timeFrame;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Event(String description, String timeFrame) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.timeFrame \u003d timeFrame;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String saveValue() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            result \u003d \"E|1|\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            result \u003d \"E|0|\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        result +\u003d (this.taskName + \"|\" + this.timeFrame);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + timeFrame + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 31
    }
  },
  {
    "path": "src/main/java/TaskClasses/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package TaskClasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Parent class of all the various tasks Duke handles"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Describes teh various names and status of the tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Provides the basic toString() and saveValue() methods which wil be overwritten in the children classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected final String taskName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.taskName \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String saveValue() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void MarkDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return ((isDone ? \"[\\u2713] \" : \"[\\u2718] \") + taskName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 34
    }
  },
  {
    "path": "src/main/java/TaskClasses/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package TaskClasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Describes the most basic todo task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Includes the toString() and saveValue() methods for proper formatting"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String saveValue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            result \u003d \"T|1|\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            result \u003d \"T|0|\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        result +\u003d this.taskName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 29
    }
  },
  {
    "path": "src/main/java/Utility/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Handles the various exceptions which may be encountered during the program\u0027s lifetime."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Some are slightly unnecessary but were included for the \u0027personality\u0027 of the Duke Bot"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public enum ExceptionResponse {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_NO_DESCRIPTION(\"\\tMissed the Description you have, young padawan...\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_NO_TIME_DATA(\"\\tOopsies! Mesa thinksa yousa missed the time\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_NO_FORMAT_IDENTIFIER(\"\\tThe force requires you provide the correct identifier (/by /at).\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_COMPLETE_UNDEFINED_TASK(\"\\tToo hasty you are, the task has not been defined yet\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_UNIDENTIFIED_INPUT(\"\\tThese are not the inputs you are looking for...Please input something\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_IO_EXCEPTION(\"\\tHmmm, it seems there has been an IO Error, why don\u0027t you give it another try\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_INVALID_SEARCH_DATE(\"\\tWhen is that???!!! Please put in a proper date in the format : \u0027yyyy-mm-dd\u0027\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_INVALID_SEARCH_DATE_FORMAT(\"\\tWhen is that?! Example command : \u0027date before 2020-01-01\u0027\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_INVALID_SEARCH_TIME(\"\\tIs time measured in parsecs? Please input a proper time format HH:MM\u0027\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_INVALID_SEARCH_TIME_FORMAT(\"\\t 12 parsecs is a unit of distance!! Example command : \u0027time after 01:00\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_NOT_FOUND_EXCEPTION(\"\\tHey buddy, it seems like we don\u0027t have what you\u0027re looking for!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        private String exception;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ExceptionResponse(String exceptionMessage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            this.exception \u003d exceptionMessage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return exception;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public DukeException(ExceptionResponse exception) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(exception.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 37
    }
  },
  {
    "path": "src/main/java/Utility/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import Commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Used to parse all the user input"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Tracks if the \u0027bye\u0027 command has been sent and sends the signal to Duke to terminate"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public boolean getTerminationStatus() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Main \u0027body\u0027 of the chatbot"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Identifies the nature of the input and passes off the inputs to the various Command classes to handle"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param input which is keyed in by the user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void handleInput(String input) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String cmd \u003d input.split(\" \")[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        switch (cmd) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Command.listCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.endProgram();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            this.isExit \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            DoneCommand doneCmd \u003d new DoneCommand(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            doneCmd.process();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            DeleteCommand deleteCmd \u003d new DeleteCommand(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            deleteCmd.process();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            TodoCommand todoCmd \u003d new TodoCommand(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            todoCmd.process();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            DateCommand dateCmd \u003d new DateCommand(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            if (dateCmd.isValidInput) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                dateCmd.process();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"time\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            TimeCommand timeCmd \u003d new TimeCommand(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            if (timeCmd.isValidInput) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                timeCmd.process();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            FindCommand findCmd \u003d new FindCommand(input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            findCmd.process();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            DeadlineCommand deadlineCmd \u003d new DeadlineCommand(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            deadlineCmd.process();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            EventCommand eventCmd \u003d new EventCommand(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            eventCmd.process();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printUnknownInputException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printUnknownInputException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 93
    }
  },
  {
    "path": "src/main/java/Utility/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import TaskClasses.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import TaskClasses.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import TaskClasses.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import TaskClasses.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Handles the saving and loading operations of the taskList from disk"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * 2 main methods included, save and load"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected static String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Loads the saved file (if any) from the filePath described"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return ArrayList\u003cTask\u003e taskList which is the previously saved tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @throws FileNotFoundException if file is not found and Duke will then create a fresh one"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static ArrayList\u003cTask\u003e loadSaveFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        File directory \u003d new File(\"data\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cTask\u003e loadedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String[] entry \u003d s.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            switch (entry[0]) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                loadedTasks.add(new Todo(entry[2]));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                if (entry[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                    loadedTasks.get(index).MarkDone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                loadedTasks.add(new Event(entry[2], entry[3]));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                if (entry[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                    loadedTasks.get(index).MarkDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                loadedTasks.add(new Deadline(entry[2], entry[3]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                if (entry[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                    loadedTasks.get(index).MarkDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            index +\u003d 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return loadedTasks;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Writes the current state of taskList to the disk"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param taskList the current state of the tasks"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void saveData(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"data/Duke.txt\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            for (Task taskItem : taskList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                fw.write(taskItem.saveValue() + System.lineSeparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printIOException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 86
    }
  },
  {
    "path": "src/main/java/Utility/StringOperations.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Used to handle the more complicated operations regarding string manipulation"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Extracted from the parser class for readability"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class StringOperations {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Finds the first occurrence of the space \u0027 \u0027 character in the input string"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param input the input by the user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return index of first space"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @throws DukeException in the case of empty input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static int getFirstSpace(String input) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int index \u003d input.indexOf(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new DukeException(DukeException.ExceptionResponse.EXCEPTION_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Function to find the starting index of the description in events/deadlines where they"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * the start of the timing details are denoted by a \"/\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param input by the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return String which is the deadline or event time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static String getDescription(String input) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int startPoint \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            output \u003d input.substring(getFirstSpace(input), startPoint);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Used to find the timeframe of the current tasks. T"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * This is referenced using the /at or /by identifier"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Checks for the correct identifier based on the taskType input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Searches for the corresponding timeframe"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Assumes the identifier only is valid on first appearance"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param input    by the user in which the \u0027event\u0027 or \u0027deadline\u0027 has been cleaned"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param taskType the nature of the tasks, event or deadline etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return deadline or timeframe for event"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @throws DukeException if the format identifier is missing or time data is missing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static String getTimeline(String input, String taskType) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String searchString \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (taskType.equals(\"event\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            searchString \u003d \"/at\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else if (taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            searchString \u003d \"/by\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int startPoint \u003d input.indexOf(searchString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (startPoint \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new DukeException(DukeException.ExceptionResponse.EXCEPTION_NO_FORMAT_IDENTIFIER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String fullDeadline \u003d input.substring(startPoint);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        fullDeadline \u003d fullDeadline.replace(searchString, \"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (fullDeadline.isBlank()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new DukeException(DukeException.ExceptionResponse.EXCEPTION_NO_TIME_DATA);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return fullDeadline.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 75
    }
  },
  {
    "path": "src/main/java/Utility/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import TaskClasses.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * The list of tasks that are currently assigned to the user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Performs all the necessary functions like incrementing task index and retrieving tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Includes the funcitons that require querying of the taskList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private static int currentTaskIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Used when no prior save data is found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        currentTaskIndex \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Overloading the constructor"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param tasks which is an arraylist of saved tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        taskList \u003d tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        currentTaskIndex \u003d taskList.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static int getTaskIndex() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return currentTaskIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void incrementIndex() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        currentTaskIndex +\u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void decrementIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        currentTaskIndex -\u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static int getNumTasks() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Marks the task referenced by the taskNum as completed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param taskNum the task which is to be marked as completed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void completeTask(int taskNum) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        taskList.get(taskNum).MarkDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Deletes the current task from the taskList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Expects the target index or taskNum to be found beforehand."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param targetTaskNum the index of task to be deleted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void deleteTask(int targetTaskNum) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        taskList.remove(queryTask(targetTaskNum));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Returns the Task object at the taskIndex specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param taskIndex"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return Task object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static Task queryTask(int taskIndex) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return taskList.get(taskIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Query the latest task that has been added to the taskList"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Used mainly for printing out responses after commands by the user"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return Task object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static Task queryLatestTask() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return taskList.get(currentTaskIndex);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void insertTask(Task inputTask) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        taskList.add(inputTask);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Finds all the tasks with the searchString inside the taskList"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param searchString"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return ArrayList\u003cTask\u003e which contains the searchString"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static ArrayList\u003cTask\u003e findTasks(String searchString) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cTask\u003e taskResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (Task currentTask : taskList) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            if (currentTask.getDescription().contains(searchString)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                taskResults.add(currentTask);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return taskResults;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Queries taskList for all tasks after (exclusive) the specified searchDate"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param searchedDate"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return ArrayList of tasks that have dates in the description after searchedDate or empty list if none found"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @throws NullPointerException if input date format is wrong"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTasksAfterDate(String searchedDate) throws NullPointerException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cTask\u003e taskResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        LocalDate targetDate \u003d findDate(searchedDate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (targetDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (Task currentTask : taskList) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            LocalDate taskDate \u003d findDate(currentTask.toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            if (taskDate !\u003d null \u0026\u0026 taskDate.isAfter(targetDate)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                taskResults.add(currentTask);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return taskResults;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Queries taskList for all tasks before (exclusive) the specified searchDate"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param searchedDate"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return ArrayList of tasks that have dates in the description after searchedDate or empty list if none found"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @throws NullPointerException if input date format is wrong"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTasksBeforeDate(String searchedDate) throws NullPointerException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cTask\u003e taskResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        LocalDate targetDate \u003d findDate(searchedDate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (targetDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (Task currentTask : taskList) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            LocalDate taskDate \u003d findDate(currentTask.toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            if (taskDate !\u003d null \u0026\u0026 taskDate.isBefore(targetDate)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                taskResults.add(currentTask);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return taskResults;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Queries taskList for all tasks on the specified searchDate"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param searchedDate"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return ArrayList of tasks that have dates in the description after searchedDate or emptylist if none found"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @throws NullPointerException if input date format is wrong"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTasksOnDate(String searchedDate) throws NullPointerException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cTask\u003e taskResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        LocalDate targetDate \u003d findDate(searchedDate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (targetDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (Task currentTask : taskList) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            LocalDate taskDate \u003d findDate(currentTask.toString());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            if (taskDate !\u003d null \u0026\u0026 taskDate.isEqual(targetDate)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                taskResults.add(currentTask);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return taskResults;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Queries taskList for all tasks after (exclusive) the specified searchTime"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param searchedTime"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return ArrayList of tasks that have dates in the description after searchedTime or emptylist if none found"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @throws NullPointerException if input date format is wrong"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTasksAfterTime(String searchedTime) throws NullPointerException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cTask\u003e taskResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        LocalTime targetTime \u003d findTime(searchedTime);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (targetTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (Task currentTask : taskList) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            LocalTime taskTime \u003d findTime(currentTask.toString());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            if (taskTime !\u003d null \u0026\u0026 taskTime.isAfter(targetTime)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                taskResults.add(currentTask);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return taskResults;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Queries taskList for all tasks before (exclusive) the specified searchTime"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param searchedTime"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return ArrayList of tasks that have dates in the description after searchedTime or emptylist if none found"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @throws NullPointerException if input date format is wrong"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTasksBeforeTime(String searchedTime) throws NullPointerException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cTask\u003e taskResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        LocalTime targetTime \u003d findTime(searchedTime);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (targetTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (Task currentTask : taskList) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            LocalTime taskTime \u003d findTime(currentTask.toString());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            if (taskTime !\u003d null \u0026\u0026 taskTime.isBefore(targetTime)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                taskResults.add(currentTask);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return taskResults;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Queries taskList for all tasks at the specified searchTime"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param searchedTime"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return ArrayList of tasks that have dates in the description after searchedTime or emptylist if none found"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @throws NullPointerException if input date format is wrong"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTasksOnTime(String searchedTime) throws NullPointerException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cTask\u003e taskResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        LocalTime targetTime \u003d findTime(searchedTime);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (targetTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (Task currentTask : taskList) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            LocalTime taskTime \u003d findTime(currentTask.toString());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            if (taskTime !\u003d null \u0026\u0026 taskTime.equals(targetTime)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                taskResults.add(currentTask);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return taskResults;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Returns any date in the format of \u0027YYYY-MM-DD\u0027 found in the inputString using regex"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * If none found, null is returned"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param inputString"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return LocalDate, date found in string"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static LocalDate findDate(String inputString) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\");  //Extracts in the form yyyy-mm-dd"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(inputString);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        LocalDate date \u003d null;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            if (matcher.find()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                date \u003d LocalDate.parse(matcher.group());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            date \u003d null;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Returns any time in the format of \u0027HH:MM\u0027 found in the inputString using regex"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * If none found, null is returned"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param inputString"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @return LocalTime, time found in string"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static LocalTime findTime(String inputString) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        LocalTime time \u003d null;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"\\\\d{2}:\\\\d{2}\"); //Extracts time in the format HH:MM"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(inputString);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            if (matcher.find()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                time \u003d LocalTime.parse(matcher.group());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            time \u003d null;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 293
    }
  },
  {
    "path": "src/main/java/Utility/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package Utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import TaskClasses.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Handles all the user facing responses by the bot"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Also includes wrapper for error messages"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Familiar welcoming logo for Duke which portrays the iconic scene in Star Wars"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void startUpDuke() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        final String YODA_LOGO \u003d \"                    .\u003d\u003d.\\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                \"                   ()\u0027\u0027()-.\\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                \"        .---.       ;--; /\\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                \"      .\u0027_:___\\\". _..\u0027.  __\u0027.\\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                \"      |__ --\u003d\u003d|\u0027-\u0027\u0027\u0027 \\\\\u0027...;\\n\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                \"      [  ]  :[|       |---\\\\\\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                \"      |__| I\u003d[|     .\u0027    \u0027.\\n\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                \"      / / ____|     :       \u0027._\\n\" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                \"     |-/.____.\u0027      | :       :\\n\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                \"    /___\\\\ /___\\\\      \u0027-\u0027._----\u0027\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(YODA_LOGO);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"Hello there General Kenobi. You are our last hope.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Function to print response when new tasks are added to the list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printAddResponse(Task task, int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"\\tGot it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"\\t\" + task.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"\\tNow you have \" + index + \" tasks in the list\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Prints all the current tasks in the taskList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Includes the letter heading ([D], [E] etc) and their status of completion."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Completion status signified by a cross of a tick."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param tasks     list of tasks at the current program state"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param taskIndex number of tasks, the index to loop to while printing"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printList(ArrayList\u003cTask\u003e tasks, int taskIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (taskIndex \u003e 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            System.out.println(\"\\tHere are the tasks in your list:\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            for (int i \u003d 0; i \u003c taskIndex; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                System.out.println(\"\\t\" + (i + 1) + \". \" + tasks.get(i).toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            System.out.println(\"\\tHey there young Padawan, your list seems to be empty!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Prints the list fed in through the parameter tasks. Used for find, date and time functions"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param taskIndex"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printSearchedList(ArrayList\u003cTask\u003e tasks, int taskIndex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"\\tHere are tasks matching the description we found in your list:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (int i \u003d 0; i \u003c taskIndex; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            System.out.println(\"\\t\" + (i + 1) + \". \" + tasks.get(i).toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Prints the response when a task is marked as completed by a user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param tasks     ArrayList of tasks at the current program state"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param taskIndex the index of the task which has been marked as completed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void completeTask(ArrayList\u003cTask\u003e tasks, int taskIndex) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"\\tNice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"\\t  \" + tasks.get(taskIndex).toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Prints the response when a task is deleted by a user"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param numTaskRemaining"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void deleteTask(Task tasks, int numTaskRemaining) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"\\tHmmm removed this task, I have:\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"\\t  \" + tasks.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"\\t Only \" + numTaskRemaining + \" tasks remain...\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printIOException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(DukeException.ExceptionResponse.EXCEPTION_IO_EXCEPTION);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printBasicDukeException(DukeException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printUnknownInputException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(DukeException.ExceptionResponse.EXCEPTION_UNIDENTIFIED_INPUT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printTaskIndexErrorException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(DukeException.ExceptionResponse.EXCEPTION_COMPLETE_UNDEFINED_TASK);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printNotFoundException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(DukeException.ExceptionResponse.EXCEPTION_NOT_FOUND_EXCEPTION);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void endProgram() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"Goodbye. May the Force be with you.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printInvalidInputTimeException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(DukeException.ExceptionResponse.EXCEPTION_INVALID_SEARCH_TIME);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printInvalidInputDateException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(DukeException.ExceptionResponse.EXCEPTION_INVALID_SEARCH_DATE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printInvalidDateInputFormatException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(DukeException.ExceptionResponse.EXCEPTION_INVALID_SEARCH_DATE_FORMAT);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printInvalidTimeInputFormatException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(DukeException.ExceptionResponse.EXCEPTION_INVALID_SEARCH_TIME_FORMAT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 137
    }
  },
  {
    "path": "text-ui-test/data/Duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "T|1| read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": "E|0| project meeting |Aug 6th 2-4pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "T|1| join sports club"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "T|0| borrow book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "E|0| return book |Sunday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "E|0| project meeting |Mon 2-4pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "E|0| submit iP |2020-10-02 at time 23:59"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "E|0| celebrate |2020-10-03 at 08:00"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "T|0| study really hard before 2020-12-01 10:15"
      }
    ],
    "authorContributionMap": {
      "jazhten": 9
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "deadline submit iP /by 2020-10-02 at time 23:59"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "event celebrate /at 2020-10-03 at 08:00"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "todo study really hard before 2020-12-01 10:15"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "date on 2020-10-03"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "time after 12:00"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "time on 08:00"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "date before 2020-10-15"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jazhten": 21
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "REM run the program, feed TaskClasses from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "jazhten": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "if [ -e \"./data/Duke.txt\" ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    rm data/Duke.txt"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "fi"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "if ! javac -cp ../src/main/java/ -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jazhten": 5,
      "-": 37
    }
  }
]
