[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * This is a Personal Assistant Chatbot that helps a person to keep track of various tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                ui.showError(e.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        new Duke(\"data\").run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 41,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Handles Exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * E.g. wrong commands, missing description of tasks, no date / time for deadlines and event."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private boolean hasTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public DukeException(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        if (!command.contains(\"/at\") || !command.contains(\"/by\")) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            hasTime \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String error() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return \"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String incompleteMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return \"â˜¹ OOPS!!! The description of a \" + command + \" cannot be empty.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String noTiming() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return \"â˜¹ OOPS!!! Please specify a date and time.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        if (command.equals(\"todo\") || command.equals(\"done\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                || command.equals(\"deadline\") || command.equals(\"event\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            message \u003d incompleteMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else if (command.startsWith(\"deadline\") || command.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            if (hasTime) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                message \u003d incompleteMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                message \u003d noTiming();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            message \u003d error();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 47
    }
  },
  {
    "path": "src/main/java/duke/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Contains the messages that are shown to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static final String DIVIDER_LINE \u003d \"_________________________________________\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static final String WELCOME \u003d \"Hello! I\u0027m duke.Duke\\nWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static final String BYE \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static final String ADD \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static final String MARK_AS_DONE \u003d \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static final String DELETE_TASK \u003d \"Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static final String LIST_TASK \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static final String LIST_IS_EMPTY \u003d \"You have no task in the list.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static final String TRY_AGAIN \u003d \"Please enter your task again.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static final String LOADING_ERROR \u003d \"Loading error\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static final String FINDING_RESULTS \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 18
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Deals with making sense of the user command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static final String BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static final String DONE \u003d \"done\\\\s\\\\d*\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static final String FIND \u003d \"find\\\\s(.*)\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static final String DELETE \u003d \"delete\\\\s\\\\d*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static final String TODO \u003d \"todo\\\\s.*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static final String DEADLINE \u003d \"deadline\\\\s(.*)/by(.*)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static final String EVENT \u003d \"event\\\\s(.*)/at(.*)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method is used to determine type of command that needs to be executed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param command This is the parameter that contains user command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @return This returns the command that shall be executed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static Command parse(String command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        if (command.matches(BYE)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            return new Exit();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else if (command.matches(LIST)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            return new PrintList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else if (command.matches(DONE)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            return new DoneTask(command.substring(5));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else if (command.matches(DELETE)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            return new DeleteTask(command.substring(7));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else if (command.matches(FIND)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            return new Find(command.substring(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else if (command.matches(TODO)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            return new AddTodo(command.substring(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else if (command.matches(DEADLINE)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            return new AddDeadline(command.substring(9));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else if (command.matches(EVENT)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            return new AddEvent(command.substring(6));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            return new ErrorCommand(command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 44
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * The main operations are read file, append file and edit file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static String fileName \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This constructor will create a new file path is the path does not exist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param filePath This is the file directory that will be created."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            File directory \u003d new File(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            boolean isDirectory \u003d directory.mkdir();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            if (isDirectory) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                System.out.println(\"directory is created\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                System.out.println(\"directory exists\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            File file \u003d new File(fileName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            boolean isCreated \u003d file.createNewFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            if (isCreated) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                System.out.println(\"file is created\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                System.out.println(\"file exists\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method is to write new contents to the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param content This is the content that will be written."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @throws IOException If the writing of file content fails."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private void writeFile(String content) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        FileWriter fw \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        fw.write(content + System.lineSeparator());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method is to append file content."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param content This is the content added to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @throws IOException If the appending of file content fails."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private void appendFile(String content) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        FileWriter fw \u003d new FileWriter(fileName, true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        fw.write(content + System.lineSeparator());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method is to add a todo task to the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param taskType This is the type of the task added."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param detail This is the description of the task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void addFileContent(String taskType, String detail) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            appendFile(taskType + \" | \" + \"\\u2718\" + \" | \" + detail);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method is to add a deadline / event to the file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param taskType This is the type of task added."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param detail This is the description of the task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param time This is the deadline / event date of the task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void addFileContent(String taskType, String detail, String time) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            appendFile(taskType + \" | \" + \"\\u2718\" + \" | \" + detail + \"|\" + time);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method will load the file content when the program starts."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @return This returns a list of tasks that was saved in the file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @throws DukeException If file fails to load."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        File file \u003d new File(fileName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            Scanner scan \u003d new Scanner(file);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            while (scan.hasNext()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                String content \u003d scan.nextLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                String[] taskTypes \u003d content.split(\" \\\\| \", 3);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                switch (taskTypes[0]) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    Task t \u003d new Todo(taskTypes[2]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    if (taskTypes[1].equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                        t.isDone \u003d true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    taskList.add(t);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    String[] message \u003d taskTypes[2].split(\"\\\\|\", 2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    Task d \u003d new Deadline(message[0], message[1]);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    if (taskTypes[1].equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                        d.isDone \u003d true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    taskList.add(d);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    message \u003d taskTypes[2].split(\"\\\\|\", 2);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    Task e \u003d new Event(message[0], message[1]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    if (taskTypes[1].equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                        e.isDone \u003d true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    taskList.add(e);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    throw new DukeException(\"loading error\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method will edit the current file content when a task is marked as done or deleted."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param tasks This is the list of the updated tasks that is to be saved in the file."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void editFileContent(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            String description \u003d task.toString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            String content \u003d description.substring(8);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            char taskType \u003d description.charAt(2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            char taskStatus \u003d description.charAt(5);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            if (description.contains(\"(by\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                content \u003d content.substring(0, content.length() - 1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                String[] dateTimes \u003d content.split(\"\\\\(by:\\\\s\", 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                LocalDateTime time \u003d LocalDateTime.parse(dateTimes[1], DateTimeFormatter"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                        .ofPattern(\"MMM d yyyy, h.mm a\").withLocale(Locale.ENGLISH));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                dateTimes[1] \u003d time.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                content \u003d dateTimes[0] + \"| \" + dateTimes[1];"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            } else if (description.contains(\"(at\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                content \u003d content.substring(0, content.length() - 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                String[] dateTimes \u003d content.split(\"\\\\(at:\\\\s\", 2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                LocalDateTime time \u003d LocalDateTime.parse(dateTimes[1], DateTimeFormatter"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                        .ofPattern(\"MMM d yyyy, h.mm a\").withLocale(Locale.ENGLISH));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                dateTimes[1] \u003d time.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                content \u003d dateTimes[0] + \"| \" + dateTimes[1];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                if (task \u003d\u003d tasks.get(0)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    writeFile(taskType + \" | \" + taskStatus + \" | \" + content);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                    appendFile(taskType + \" | \" + taskStatus + \" | \" + content);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 189
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Contains the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * It has the operations to add/delete/find tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * It can show the size of the task list or the last task in the list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This constructor will load the task list that was stored in the task.txt."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * It will create a new task list from the task.txt."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param taskList This is the parameter that contains the task list stored in the task.txt"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method will add a todo task into the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param task This is the description of the task added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void addTodo(String task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        Task todo \u003d new Todo(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        taskList.add(todo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method will add a deadline task into the task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param task This is the description of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param time This is the deadline of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @throws DukeException If the format of the deadline task is wrong."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void addDeadline(String task, String time) throws DukeException{"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        Task deadline \u003d new Deadline(task, time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        taskList.add(deadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method will add a event task into the task list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param task This is the description of the task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param time This is the date / time of the event."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @throws DukeException If the format of the event task is wrong."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void addEvent(String task, String time) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        Task event \u003d new Event(task, time);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        taskList.add(event);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method will mark the task as done"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param index This is the index of the task that should be marked as done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void done(int index) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        taskList.get(index).isDone \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method will delete a task from the task list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param taskNumber This is the index of the task that should be deleted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void delete(int taskNumber) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        taskList.remove(taskNumber);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method gives users a way to find a task by searching for a keyword."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param keyword This is the keyword to be searched."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @return This returns a list of tasks that contains the keyword."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public List\u003cTask\u003e findTask(String keyword) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        List\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        for (Task t: taskList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            if (t.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                resultList.add(t);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return resultList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method gets the latest task added into the task list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @return This returns the last task in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public Task getTask() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return taskList.get(taskList.size() - 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method gives the total number of tasks in the task list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @return This returns the size of task list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method is to get the current task list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @return This returns a task list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 117
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import static duke.Messages.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Deals with interactions with the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private Scanner scan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method is to show welcome message by duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.print(DIVIDER_LINE + WELCOME + DIVIDER_LINE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method is to show exit message by duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.print(DIVIDER_LINE + BYE + DIVIDER_LINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method is to read the user command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @return This returns a string of command entered by the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return scan.nextLine().trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method is to show a message that a task is added successfully."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * It also shows the updates of the new number of tasks in the task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param t This is the task that is added."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param numberOfTasks This is the total number of tasks in the task list after added."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void showAdded(Task t, int numberOfTasks) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.println(DIVIDER_LINE + ADD + \" \" + t);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.printf(\"Now you have %d tasks in the list.\\n\", numberOfTasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.print(DIVIDER_LINE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method shows each description of the task in the task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param taskList This is the list of tasks that is to be shown."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void showTaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.print(DIVIDER_LINE + LIST_TASK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            System.out.println(i + \".\" + taskList.get(i - 1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.print(DIVIDER_LINE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This shows a message that the task list is currently empty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void showEmptyList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.print(LIST_IS_EMPTY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method shows a message that a task is marked as done."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param t This is the task that is marked as done."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void showDone(Task t) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.print(DIVIDER_LINE + MARK_AS_DONE + \" \" + t + \"\\n\" + DIVIDER_LINE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method shows a message that a task is deleted successfully."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * It also updates the number of tasks currently in the task list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param t This is the task that is deleted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param numberOfTasks This is the new number of tasks in the task list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void showDeleted(Task t, int numberOfTasks) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.println(DIVIDER_LINE + DELETE_TASK + \" \" + t);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.printf(\"Now you have %d tasks in the list.\\n\", numberOfTasks);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.print(DIVIDER_LINE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method shows a list of tasks that matches the user\u0027s search."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param results This is the list of searched results."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void showFindResults(List\u003cTask\u003e results) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.print(DIVIDER_LINE + FINDING_RESULTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d results.size(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            System.out.println(i + \".\" + results.get(i - 1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.print(DIVIDER_LINE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method shows a error message when the user enter the wrong command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param errorMessage This is the message that is to be shown."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.print(errorMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.print(TRY_AGAIN);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method shows an error when the file could not be loaded."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        System.out.print(LOADING_ERROR);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 120
    }
  },
  {
    "path": "src/main/java/duke/commands/AddDeadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Adds a deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class AddDeadline extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String[] content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public AddDeadline(String content) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.content \u003d content.split(\"/by\",2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            tasks.addDeadline(content[0], content[1]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            ui.showAdded(tasks.getTask(), tasks.getSize());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            storage.addFileContent(\"D\", content[0], content[1]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            ui.showError(\"please enter in yyyy-mm-dd HHmm format\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 32
    }
  },
  {
    "path": "src/main/java/duke/commands/AddEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Adds an event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class AddEvent extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String[]  content;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public AddEvent(String content) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.content \u003d content.split(\"/at\",2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            tasks.addEvent(content[0], content[1]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            ui.showAdded(tasks.getTask(), tasks.getSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            storage.addFileContent(\"E\", content[0], content[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            ui.showError(\"please enter in yyyy-mm-dd HHmm format\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 35
    }
  },
  {
    "path": "src/main/java/duke/commands/AddTodo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Adds a todo."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class AddTodo extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public AddTodo(String content) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        tasks.addTodo(content);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        ui.showAdded(tasks.getTask(), tasks.getSize());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        storage.addFileContent(\"T\", content);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 28
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 11
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Deletes a task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class DeleteTask extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public DeleteTask(String index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.index \u003d Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        if (index \u003e tasks.getSize() - 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            ui.showError(\"No such task.\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            ui.showDeleted(tasks.getTask(), tasks.getSize() - 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            tasks.delete(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            storage.editFileContent(tasks.getTaskList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 32
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Marks a task as done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class DoneTask extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public DoneTask(String index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.index \u003d Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        if (index \u003e tasks.getSize() - 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            ui.showError(\"No such task.\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            tasks.done(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            ui.showDone(tasks.getTaskList().get(index));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            storage.editFileContent(tasks.getTaskList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 32
    }
  },
  {
    "path": "src/main/java/duke/commands/ErrorCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Handles an error command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class ErrorCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public ErrorCommand(String content) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        throw new DukeException(content);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 27
    }
  },
  {
    "path": "src/main/java/duke/commands/Exit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Exits the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class Exit extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        ui.showExit();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 20
    }
  },
  {
    "path": "src/main/java/duke/commands/Find.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Finds tasks that contains the keyword entered by the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class Find extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public Find(String content) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        ui.showFindResults(tasks.findTask(content));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 26
    }
  },
  {
    "path": "src/main/java/duke/commands/PrintList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Prints out the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class PrintList extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        if (tasks.getSize() \u003e 0) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            ui.showTaskList(tasks.getTaskList());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            ui.showEmptyList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 24
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Creates a Deadline task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This constructor creates a deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param description This is the description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param by This is the deadline of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @throws DukeException If the date / time format is wrong."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        time \u003d by.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        if (description.trim().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            throw new DukeException(\"deadline\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return \" [D]\" + super.toString() + \"(by: \" + timeFormat() + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String timeFormat() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        String newTimeFormat;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        LocalDateTime time \u003d LocalDateTime"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                .parse(this.time, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        newTimeFormat \u003d time.format(DateTimeFormatter"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                .ofPattern(\"MMM d yyyy, h.mm a\").withLocale(Locale.ENGLISH));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return newTimeFormat;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 43
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Create an Event task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This constructor creates an event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param description This is the description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @param at This is the deadline of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @throws DukeException If the date / time format is wrong."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public Event(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        time \u003d at.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        if (description.trim().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            throw new DukeException(\"deadline\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return \" [E]\" + super.toString() + \"(at: \" + timeFormat() + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String timeFormat() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        String newTimeFormat;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        LocalDateTime time \u003d LocalDateTime"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                .parse(this.time, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        newTimeFormat \u003d time.format(DateTimeFormatter"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                .ofPattern(\"MMM d yyyy, h.mm a\").withLocale(Locale.ENGLISH));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return newTimeFormat;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 43
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Creates a Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "         this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "         this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method shows the status of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @return This returns tick or X symbols."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * This method shows the description of the task and the current status of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     * @return This returns a string of the task description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 30
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": " * Creates a Todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return \" [T]\" + super.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "todo homework"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "deadline project /by Sat"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "event meeting /at 5pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "hi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "pinfang": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "chcp 65001"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\tasks\\*.java ..\\src\\main\\java\\duke\\commands\\*.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "pinfang": 4
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "pinfang": 2
    }
  }
]
