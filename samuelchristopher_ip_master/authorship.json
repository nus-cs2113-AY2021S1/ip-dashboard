[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "## For Testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "run `sh ../path/to/runtest.sh`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "note, ensure that dos2unix is install (`brew install dos2unix`)"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 3,
      "-": 26
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "### List Tasks Stored"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Display tasks in an ordered list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "### `list` - List all the tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "This command will display all the tasks in the form of an ordered list. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "```"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " 1. [T][✓] read book"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " 2. [D][✗] return book (by: June 6th)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " ____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "### Add a todo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Add a todo item to the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "### `todo` - Add a todo"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "This command will add a todo to the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "`todo \u003cdescription\u003e`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "  [T][✗] one"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "### Add an event"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Add an event item to the task list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "### `event` - Add a event"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "This command will add a event to the task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "`event \u003cdescription\u003e /at \u003ctiming\u003e`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "  [E][✗] one (at: 5pm)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "### Add a deadline"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Add a deadline item to the task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "### `deadline` - Add a deadline"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "This command will add a deadline to the task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "`deadline \u003cdescription\u003e /by \u003cdeadline\u003e`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "  [D][✗] two (by: thursday)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "### Mark a task as done"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Indicate that a task has been completed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "### `done` - Mark a task as completed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "This command will add mark the task as completed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "`done \u003ctaskId as seen on the list command\u003e`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " [D][✓] two (by: thursday)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "### Delete a task"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Remove the task from the task list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "### `delete` - Delete a task"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "This command will delete the task."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "`delete \u003ctaskId as seen on the list command\u003e`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " [D][✓] two (by: thursday)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "```"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "### Find a task"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Allow the user to search for tasks."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "### `find` - Find a task"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "This command will search for tasks that match the user\u0027s input."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "`find \u003csearch string\u003e`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "find urn"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "1. [D][✓] return book (by: June 6th)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 149,
      "-": 14
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        ui.start();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        while(!isExit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void main(String[] args) throws DukeException{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        new Duke(\"tasks.txt\").run();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 40,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/command/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Deadline(String title, String deadline) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        super(title);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"D | \" + (this.getSaveStatus()) + \" | \" + title + \" | \" + deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String formattedDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String[] dateComponents \u003d deadline.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            LocalDate deadlineDate \u003d LocalDate.parse(dateComponents[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return deadlineDate.format(formatter) + (dateComponents.length \u003e 1 ? (\" \" + dateComponents[1]) : \"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return this.getType() + this.getStatus() + \" \" + title + \" \" + this.getByString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"[D]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String getByString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"(by: \" + this.formattedDate() + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 43
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.exception.EmptyDeadlineException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public DeadlineCommand(String fullCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        userInput \u003d fullCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            int deadlineDateIndex \u003d userInput.indexOf(\"/by\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String title \u003d userInput.substring(0, deadlineDateIndex).replace(\"deadline\", \"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String deadlineDate \u003d userInput.substring(deadlineDateIndex + 3, userInput.length());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String deadline \u003ddeadlineDate.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                String[] dateComponents \u003d deadline.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                LocalDate testDate \u003d LocalDate.parse(dateComponents[0]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                Ui.showError(\"Note you can use the format YYYY-MM-DD for deadlines\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            Task newTask \u003d tasks.addDeadline(title.trim(), deadline);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ui.printSuccessfulAddMessage(newTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ui.showError(EmptyDeadlineException.errorMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 41
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private String[] userInputArray;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public DeleteCommand(String fullCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        userInput \u003d fullCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        userInputArray \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            tasks.delete(Integer.parseInt(userInputArray[1]));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ui.showError(\"☹ OOPS!!! A task with that ID does not exist.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 28
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private String[] userInputArray;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public DoneCommand(String fullCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        userInput \u003d fullCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        userInputArray \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            int taskId \u003d Integer.parseInt(userInputArray[1]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            tasks.markAsDone(taskId);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ui.showError(\"☹ OOPS!!! A task with that ID does not exist.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }  catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ui.showError(\"☹ OOPS!!! A task with that ID does not exist.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 31
    }
  },
  {
    "path": "src/main/java/duke/command/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String at;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Event(String title, String at) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        super(title);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"E | \" + (this.getSaveStatus()) + \" | \" + title + \" | \" + at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return this.getType() + this.getStatus() + \" \" + title + \" \" + this.getAtString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"[E]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String getAtString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"(at: \" + at + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 25
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.exception.EmptyEventException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public EventCommand(String fullCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        userInput \u003d fullCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            int atIndex \u003d userInput.indexOf(\"/at\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String title \u003d userInput.substring(0, atIndex).replace(\"event\", \"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String atDate \u003d userInput.substring(atIndex+3, userInput.length());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            Task newTask \u003d tasks.addEvent(title.trim(), atDate.trim());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ui.printSuccessfulAddMessage(newTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ui.showError(EmptyEventException.errorMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 31
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Ui.exit();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 16
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Ui.printList(tasks.getTasks(), \"Here are the tasks:\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 12
    }
  },
  {
    "path": "src/main/java/duke/command/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static int numberOfTasks \u003d 0;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static Task[] all \u003d new Task[100];"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public boolean isCompleted \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String title \u003d \"\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Task(String title) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        numberOfTasks++;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public int getSaveStatus() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return isCompleted ? 1 : 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void markAsCompleted() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"[\"+ (isCompleted ? \"✓\" : \"✗\") +\"]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \" \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String getByString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \" \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 41
    }
  },
  {
    "path": "src/main/java/duke/command/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return this.getType() + this.getStatus() + \" \" + title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"[T]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"T | \" + (this.getSaveStatus()) + \" | \" + title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 20
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.components.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public TodoCommand(String fullCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        userInput \u003d fullCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        String todo \u003d userInput.replace(\"todo\", \"\").trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        if (todo.isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ui.showError(\"Please supply a name for the todo\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Task newTask \u003d TaskList.addTodo(todo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Ui.printSuccessfulAddMessage(newTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 28
    }
  },
  {
    "path": "src/main/java/duke/components/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * Command represents a command that user has input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * Each command has an execute function that will be called."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * The isExit flag is to identify the exit command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 23
    }
  },
  {
    "path": "src/main/java/duke/components/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.command.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.exception.EmptyEventException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public FindCommand(String fullCommand) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        userInput \u003d fullCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String toFind \u003d userInput.replace(\"find\", \"\").trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            for (Task task: tasks.getTasks()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                if (task.getTitle().contains(toFind)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    matchingTasks.add(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            if (matchingTasks.size() \u003c 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                ui.showError(\"No tasks matching \u0027\" + toFind + \"\u0027\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                ui.printList(matchingTasks, \"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ui.showError(EmptyEventException.errorMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 34
    }
  },
  {
    "path": "src/main/java/duke/components/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * Parser class that determines which command to execute"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * based on the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Determines which command to call based on the user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param fullCommand user input that has been read"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return Command command which needs to be executed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static Command parse(String fullCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        String[] userInputArray \u003d (fullCommand.split(\" \"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        String command \u003d userInputArray[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } else if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return new TodoCommand(fullCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } else if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return new EventCommand(fullCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return new DeadlineCommand(fullCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } else if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return new DeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return new DoneCommand(fullCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } else if (command.equals(\"find\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return new FindCommand(fullCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                Ui.showError(InvalidCommandException.errorMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return new Command();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 47
    }
  },
  {
    "path": "src/main/java/duke/components/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.command.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.command.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.command.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.command.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * Storage class handles Duke\u0027s file interactions (to ensure persistence"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * of data). These include the initialisation of Duke (reading from the text file)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * and the saving of data (writing and updating the text file)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private static File f;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private static ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        f \u003d new File(\"tasks.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Loads all the tasks that have been stored on the text file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * into an ArrayList of tasks that can be used to initialize the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * TaskList. load() is called at the start of every instance of Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return ArrayList\u003cTask\u003e this ArrayList is used to initialize the TaskList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                String currentLine \u003d s.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                String[] items \u003d currentLine.split(\" | \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                String typeOfTask \u003d items[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                boolean isCompleted \u003d items[2].equals(\"1\") ? true : false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                Task newTask \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                // remove \"T |\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                currentLine \u003d currentLine.replace(typeOfTask + \" | \", \"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                // remove completed status"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                currentLine \u003d currentLine.replace(items[2] + \" | \", \"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                if (typeOfTask.trim().equalsIgnoreCase(\"T\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    newTask \u003d new Todo(currentLine);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                } else if (typeOfTask.trim().equalsIgnoreCase(\"E\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    int atIndex \u003d currentLine.indexOf(\"|\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    String title \u003d currentLine.substring(0, atIndex - 1).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    String at \u003d currentLine.substring(atIndex + 1).trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    newTask \u003d new Event(title, at);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                } else if (typeOfTask.trim().equalsIgnoreCase(\"D\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    int byIndex \u003d currentLine.indexOf(\"|\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    String title \u003d currentLine.substring(0, byIndex - 1).trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    String by \u003d currentLine.substring(byIndex + 1).trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    newTask \u003d new Deadline(title, by);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                temp.add(newTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                if (isCompleted) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    newTask.markAsCompleted();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Saves the current tasks in TaskList into the text file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * save() is called at the end of every instance of Duke."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param items the ArrayList\u003cTask\u003e of current tasks in the TaskList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void save(ArrayList\u003cTask\u003e items) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            // empty current saved items;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            FileWriter clear \u003d new FileWriter(f);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            clear.write(\"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            clear.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            for(i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                Task task \u003d items.get(i);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                FileWriter fw \u003d new FileWriter(f, true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                fw.write(task.saveFormat() + \"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 102
    }
  },
  {
    "path": "src/main/java/duke/components/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.command.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.command.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.command.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.command.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.exception.EmptyTodoException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * TaskList handles all the interactions pertaining to tasks during run time"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * which include adding tasks (todos, events and deadlines), marking them as done,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * and deleting tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * In short, TaskList manages tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private static ArrayList\u003cTask\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Initialises TaskList items"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param savedItems  comes from Storage.load() which returns"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *                    tasks from the text file in the form of"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *                    ArrayList\u003cTask\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e savedItems) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        for (Task task : savedItems) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            items.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Adds a Todo to TaskList with the option of setting the status"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * of the Todo immediately"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param item the Todo\u0027s title"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param isCompleted the status of the Todo"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void addTodo(String item, boolean isCompleted) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Task newTask \u003d addTodo(item);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            newTask.markAsCompleted();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Adds a Todo to TaskList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param item the Todo\u0027s title"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return Task the new Todo that has been added"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @throws EmptyTodoException if there is no description / title provided"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static Task addTodo(String item) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            if (item.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                throw new EmptyTodoException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            Task newTask \u003d new Todo(item);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            items.add(newTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return newTask;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (EmptyTodoException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "//            separator();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            System.out.println(EmptyTodoException.errorMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "//            separator();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return new Task(\"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Adds a Deadline to TaskList with the option of setting the status"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * of the Deadline immediately"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param item the Deadline\u0027s title"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param deadline the deadline for the Task (\"/by\" field)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param isCompleted the status of the Deadline"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void addDeadline(String item, String deadline, boolean isCompleted) throws StringIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Task newTask \u003d addDeadline(item, deadline);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            newTask.markAsCompleted();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Adds a Deadline to TaskList"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param item the Deadline\u0027s title"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param deadline the deadline for the Task (\"/by\" field)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return Task the deadline that has been newly added"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @throws StringIndexOutOfBoundsException if title or \"/by\" is not provided"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static Task addDeadline(String item, String deadline) throws StringIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Task newTask \u003d new Deadline(item, deadline);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        items.add(newTask);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Adds a Event to TaskList with the option of setting the status"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * of the Event immediately"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param item the Event\u0027s title"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param at the timing for the Event (\"/at\" field)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param isCompleted the status of the Event"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void addEvent(String item, String at, boolean isCompleted) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Task newTask \u003d addEvent(item, at);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            newTask.markAsCompleted();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Adds a Event to TaskList"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param item the Event\u0027s title"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param at the timing for the Event (\"/at\" field)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return Task the event that has been newly added"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static Task addEvent(String item, String at) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Task newTask \u003d new Event(item, at);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        items.add(newTask);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Deletes a task with taskId and prints a message"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * to inform user that the task has been deleted"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param taskId ID of the task to be deleted"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void delete(int taskId) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Task task \u003d items.get(taskId - 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        items.remove(task);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(\" \" + task.getTitle());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(\"Now you have \" + items.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Marks a task with taskId as done and prints a message"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * to inform the user that the status of the task has"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * been updated"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param taskId ID of the task to be marked \u0027done\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void markAsDone(int taskId) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Task selectedTask \u003d items.get(taskId - 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        selectedTask.markAsCompleted();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(\" \" + selectedTask.getTitle());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 173
    }
  },
  {
    "path": "src/main/java/duke/components/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import duke.command.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * Ui class that handles all user interaction aspect of Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * These include reading input and also printing different"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " * forms of output."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private static Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Prints \"hello from duke\" welcome message to start"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * interaction with user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void start() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        greet();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Used to print successful message when a Task (Todo, Event or Deadline)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * has been successfully added to the TaskList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param newTask  Task object that has just been added"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void printSuccessfulAddMessage(Task newTask) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(\"  \" + newTask.getTitle());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(\"Now you have \" + Task.numberOfTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Prints ordered lists of tasks (1,2,3 ...)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param items  ArrayList of tasks to be printed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message String message that will be"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void printList(ArrayList\u003cTask\u003e items, String message) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        if (Task.numberOfTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            System.out.println(\"No tasks have been added\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            System.out.println(message);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            for (Task currentTask : items) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                System.out.println((items.indexOf(currentTask) + 1) + \". \" + currentTask.getTitle());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Prints out the command that has just been keyed in by user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param command String which is the command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void echo(String command) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Reads the next line of user input to help"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * help Duke determine which command should be executed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return String line that has been read"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static String readCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Helper function that can be used to print"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * \"_______\" line in the console"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void showLine() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Prints the greeting to the user"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void greet() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke \\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Prints the exit message when the user wants to exit Duke"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void exit() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Helper function to inform user that there has been"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * a loading error"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void showLoadingError() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(\"Error\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * Helper function to print error messages with lines (______)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * above and below the error message"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @param message String which is the error message"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     * @return void"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static void showError(String message) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 144,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static String errorMessage() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class EmptyDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static String errorMessage() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"☹ OOPS!!! Deadline description or due date cannot be empty. \\n\" +"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                \"Please use deadline \u003ctask name\u003e /by \u003cdeadline\u003e.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class EmptyEventException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static String errorMessage() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"☹ OOPS!!! Event description or timing cannot be empty. \\n\" +"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                \"Please use event \u003cevent name\u003e /at \u003cevent timing\u003e.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class EmptyTodoException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static String errorMessage() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"☹ OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static String errorMessage() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 7
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 7
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "#if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 2,
      "-": 37
    }
  }
]
