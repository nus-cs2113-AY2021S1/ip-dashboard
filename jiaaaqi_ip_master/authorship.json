[
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Duke is a scheduling platform where users can use it to keep a record of tasks that they have to do "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "or has already done. User can classify their tasks into 3 types: Todo, Deadline and Event. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "The app is to be meant used on a Command Line Interface (CLI) with Java 11 installed in your computer."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "#### Table of Contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* [Quick start](#quick-start) "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* [Features](#features) "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    * [Add task](#add-task) `todo, deadline, event`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    * [Print list of tasks](#print-list-of-tasks) `list`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    * [Mark task as done](#mark-task-as-done) `done` "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    * [Delete task](#delete-task) `delete` "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    * [Save data](#save-data) "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    * [Find task using keywords](#find-task-using-keywords) `find` "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    * [View help message](#view-help-message) `help`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    * [Exit the app](#exit-the-app) `bye`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* [Things to note](#things-to-note)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* [Command summary](#command-summary)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Step 1: Ensure you have `Java 11` or above installed in your computer. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eStep 2: Download the latest `duke.jar` from here."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eStep 3: Copy the file into the folder that you want to use as your home folder. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eStep 4: Copy the file path of the jar file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eStep 5: Open command line and key in the following commands to run the app: `java -jar filePath`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eStep 6: Type in any commands to start. Please refer to [command summary](#command-summary) for help."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003eIf setup correctly, this will be displayed: "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     Hello! I\u0027m Duke."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "### Add Task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Adds a _normal task_ to task list. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eFormat: `todo TASKDESCRIPTION`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExample: `todo buy bread`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExpected outcome: "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "      [T][✘] buy bread"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Add a _task with a deadline_ to task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eFormat: `deadline TASKDESCRIPTION /by DATE`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExample: `deadline project /by 2020-10-02`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExpected outcome: "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "      [D][✘] project (by: Oct 02 2020)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Add a _event_ to task list. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eFormat: `event TASKDESCRIPTION /on YYYY-MM-DD`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExample: `event examination /on 2020-11-27`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExpected outcome: "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "      [E][✘] examination (on: Nov 27 2020)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "### Print List of Tasks"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Shows list of all tasks recorded. "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eFormat : `list`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExpected outcome: "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     1. [T][✘] buy bread"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     2. [D][✘] project (by: Oct 02 2020)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     3. [E][✘] examination (on: Nov 27 2020)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "### Mark Task as Done"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Marks task at the index as done. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eFormat: `done INDEX`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExample: `done 2`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExpected outcome: "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "      [D][✓] project (by: Oct 02 2020)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "### Delete Task "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Removes task at the index from the list. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eFormat: `delete INDEX`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExample: `delete 1`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExpected outcome: "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "      [T][✘] buy bread"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "### Save Data "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Whenever a change is made to the list of tasks, the app will automatically save the updated task list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "into a text file (`duke.txt`) in the data directory of the folder. When the app restarts, the data"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "in the file will be loaded into the task list. "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "### Find Task Using Keywords"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Find task that contains the typed in words. "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eFormat: `find KEYWORD`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExample: `find left`, `find project`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExpected outcome: "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "find left"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     Sorry, there are no matching tasks."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "find project"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     1.[D][✓] project (by: Oct 02 2020)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "### View Help Message "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Shows a message that gives location to user guide "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "and some commands to start with "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eFormat: `help`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExpected outcome: "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     Here are some commands you can start with: "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "      list: list all tasks"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "      done 2: mark 2nd task in current list as done"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "      delete 4: delete 4th task in current list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "      bye: exit the app"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     For more help: https://jiaaaqi.github.io/ip/"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "### Exit the App"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Exits the program. "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eFormat: `bye`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eExpected outcome: "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    ——————————————————————————————————————————————————"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "## Things to Note"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* __Date__ for events and deadlines must be in the format YYYY-MM-DD. "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* `duke.txt` file that stores saved data will be created in the upper directory. Please do not change its location."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "## Command Summary "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Action | Format"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Add | todo: `todo TASKDESCRIPTION` \u003cbr\u003edeadline: `deadline TASKDESCRIPTION /by DATE` \u003cbr\u003eevent: `event TASKDESCRIPTION /on DATE`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Mark task as done | `done INDEX`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Delete | `delete INDEX`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Find tasks | `find KEYWORDS`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "List tasks | `list`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Help | `help`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Exit | `bye`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "jiaaaqi": 166
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private static final String filePath \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected static TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected static Storage storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        ui.printStartMessage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        run();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        ui.printExitMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method reads user inputs as commands and executes them accordingly."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * It starts off by scanning for a duke text file to check for any saved data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * Then it will go into a command loop of waiting for the next command and executing it."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * To exit the loop, the user would have to type \"bye\"."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private static void run() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            taskList \u003d new TaskList(storage.load(), storage.getTaskCounter());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            storage.createFile(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            taskList \u003d new TaskList(new ArrayList\u003cTask\u003e(), storage.getTaskCounter());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        // command loop"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String command \u003d in.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        Parser parser \u003d new Parser(command);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        while (!command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            ui.printDivider();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String typeOfCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                typeOfCommand \u003d parser.verifyCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                System.out.println(\"     Oops! I\u0027m sorry, but I don\u0027t know what that means. \" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                        \"Please refer to the user guide (https://jiaaaqi.github.io/ip/) if you need any help.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                ui.printDivider();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                command \u003d in.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                parser.setCommand(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            switch(typeOfCommand) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                taskList.printTasks();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                parser.help();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                taskList.find(parser.extractKeywordsFromCommand());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                int taskIndex \u003d Integer.parseInt(command.substring(command.length()-1)) - 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                taskList.markTaskAsDone(taskIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                taskIndex \u003d Integer.parseInt(command.substring(command.length()-1)) - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                taskList.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case \"task\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                if (parser.extractTaskFromCommand() !\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    taskList.addTask(parser.extractTaskFromCommand());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            ui.printDivider();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            command \u003d in.nextLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            parser.setCommand(command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "jiaaaqi": 81
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 5
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * This class will handle user commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * Handling includes check if the command is valid, returning the type of command,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * and also extracting the data from commands to return to the run method in Duke.java."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Parser(String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void setCommand(String command) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method checks if a task command has a task description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param command command string to be checked"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @return taskArray string array which splits the type of task and its description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @throws DukeException if the description is not found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private String[] checkTaskDescription(String command) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        // taskArray: 0-\u003etype of task, 1-\u003edescription and date if applicable"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String[] taskArray \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        if (taskArray.length\u003c2 || taskArray[1]\u003d\u003dnull) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        taskArray[0] \u003d taskArray[0].toLowerCase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return taskArray;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method checks if the date for the task is present for deadlines and events."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param taskArray string array that stores task\u0027s type and whatever is behind"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @return taskArrayWithDate string array that stores the task\u0027s type, description and date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @throws DukeException if date is not found for deadlines and events"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private String[] checkTaskDate(String[] taskArray) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        // newTaskArray: 0 -\u003e type of task, 1 -\u003e description, 2 -\u003e date if applicable"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String[] newTaskArray \u003d new String[3];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        newTaskArray[0] \u003d taskArray[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        if (newTaskArray[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            return taskArray;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (taskArray[0].equals(\"deadline\") \u0026\u0026 !taskArray[1].contains(\"/by\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                throw new DukeException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            } else if (taskArray[0].equals(\"event\") \u0026\u0026 !taskArray[1].contains(\"/on\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                throw new DukeException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            int index \u003d taskArray[1].indexOf(\"/\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            newTaskArray[1] \u003d taskArray[1].substring(0, index-1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            newTaskArray[2] \u003d taskArray[1].substring(index+4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return newTaskArray;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method splits the given task command into type of task, description and date"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * It also checks if the command has all the requirements to create a task, and creates the task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * If it does not meet the requirements, a null task will be returned."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @return task task that is created"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Task extractTaskFromCommand() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String[] taskArray \u003d new String[2];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            taskArray \u003d checkTaskDescription(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(\"     Oops! The description of \" + taskArray[0] + \" cannot be empty. :(\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String[] taskArrayWithDate;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            taskArrayWithDate \u003d checkTaskDate(taskArray);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(\"     Oops! The date of \" + taskArray[0] + \" cannot be empty!!!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        switch (taskArrayWithDate[0]) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            task \u003d new Todo(taskArrayWithDate[1]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                task \u003d new Deadline(taskArrayWithDate[1], taskArrayWithDate[2]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                System.out.println(\"     Please input the date in the format: YYYY-MM-DD.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                task \u003d new Event(taskArrayWithDate[1], taskArrayWithDate[2]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                System.out.println(\"     Please input the date in the format: YYYY-MM-DD.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            task \u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String extractKeywordsFromCommand() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String[] keywords \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return keywords[1];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method checks if the input command is valid and returns the type of command as a string."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * If invalid, \"invalid\" will be returned instead."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @return typeOfCommand type of command"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String verifyCommand() throws DukeException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } else if (command.equals(\"help\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } else if (command.contains(\"todo\") || command.contains(\"event\") || command.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            return \"task\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } else if (command.contains(\"done\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            return \"done\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } else if (command.contains(\"delete\")) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            return \"delete\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } else if (command.contains(\"find\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            return \"find\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void help() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"     Here are some commands you can start with: \");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"      list: list all tasks\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"      done 2: mark 2nd task in current list as done\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"      delete 4: delete 4th task in current list\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"      bye: exit the app\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"     For more help: https://jiaaaqi.github.io/ip/\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 157
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * This class handles saving data to file whenever the current task list is edited."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * It also read any data that is previously saved and adds them to the task list at the start of the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * If there is no data file, it will create one."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private int taskCounter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.taskCounter \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public int getTaskCounter() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return taskCounter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method creates a new file with the given file path."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * An IO exception error is thrown in the method, in case the file cannot be created."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param filePath  file path of where the file is supposed to be created"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void createFile(String filePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (f.createNewFile()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                // System.out.println(\"File created: \" + f.getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(\"cannot create file: \" + e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method reads the duke text file present in ip/data,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * and it loads data from the file into a Task ArrayList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * Returns the collected data in the ArrayList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @return tasks an ArrayList of tasks recorded in the data file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @throws FileNotFoundException If the file to be read from cannot be found"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        ArrayList\u003cString\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            taskList.add(s.nextLine());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        for (String saved : taskList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            // Array Index -\u003e 0: type, 1: description, 2: date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String[] task \u003d saved.split(\"/\", 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            switch (task[0]) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    tasks.add(new Todo(task[2]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    tasks.add(new Deadline(task[2], task[3]));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    tasks.add(new Event(task[2], task[3]));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            int done \u003d Integer.parseInt(task[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (done\u003d\u003d1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                tasks.get(taskCounter).markAsDone();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            // System.out.println(\"added: \" + task[2]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            taskCounter++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method makes the necessary edits to the duke text file"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * whenever a task is marked as done or is deleted from the task list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * To do this, it creates a temporary file and loop through the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * original file to find the line that needs to be edited."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * Then it will replace the original file with the temporary file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param line Previous version of task that is saved in the file"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param action Changes that is made to the task (deleted or done)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param task Task that is changed"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @throws IOException if the function is unable to scan the original file"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void editFile(String line, String action, Task task) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        File originalFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        Scanner s \u003d new Scanner(originalFile);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        createFile(\"temp.txt\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        File tempFile \u003d new File(\"temp.txt\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        FileWriter writer \u003d new FileWriter(tempFile, true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            // scan the file for the task line and edit accordingly"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (input.equals(line)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                if (action.equals(\"delete\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    // skip this line"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                } else if (action.equals(\"done\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    writer.write(task.getSavedLine() + \"\\n\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                // else copy line into temp file"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                writer.write(input + \"\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        // delete original file and rename temp file to be original file"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        if (!originalFile.delete()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(\"Cannot delete original\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        if (!tempFile.renameTo(originalFile)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(\"Cannot rename temp file\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method adds a line to the duke text file whenever a new task is added"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param task New task that is added"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void updateSavedData(Task task) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String savedData \u003d task.getSavedLine();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        // System.out.println(\"saved line: \" + savedData);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            fw.write(savedData + \"\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(\"Error updating saved data: \" + e.getMessage());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 155
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import static duke.Duke.storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import static duke.Duke.ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * This class holds the ArrayList of task and the actions that can be done on it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * It will also call methods that edit data in the text file when actions are called."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected int taskCounter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks, int taskCounter) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.taskCounter \u003d taskCounter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method adds a task to the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * It also calls the methods to edit the duke text file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param task task to be added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected void addTask(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String fullDescription \u003d task.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String type \u003d fullDescription.substring(1,2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            tasks.add(new Todo(task.getDescription()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            tasks.add(new Deadline(task.getDescription(), String.valueOf(task.getDate())));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            tasks.add(new Event(task.getDescription(), String.valueOf(task.getDate())));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(ui.indentation() + \" Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        storage.updateSavedData(tasks.get(taskCounter));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(ui.indentation() + \"  \" + tasks.get(taskCounter));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        taskCounter++;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method deletes the task at the given index, and calls the method to edit the duke text file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param index index of task to be deleted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected void deleteTask(int index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        Task deleted \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        taskCounter--;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(ui.indentation() + \" Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(ui.indentation() + \"  \" + deleted);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        printNumOfTasks();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        // remove from file"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String lineToDelete \u003d deleted.getSavedLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            storage.editFile(lineToDelete, \"delete\" ,deleted);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(\"Unable to edit file: \" +e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method marks the task as done and prints out the relevant messages to show that it is marked as done."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * It also calls methods to edit the duke text file accordingly."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param index index of task to be marked as done"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected void markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        Task taskDone \u003d tasks.get(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String originalLine \u003d taskDone.getSavedLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        taskDone.markAsDone();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"     Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"      \" + taskDone.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            storage.editFile(originalLine, \"done\", taskDone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(\"Unable to edit file: \" +e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected void find(String keywords) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        ArrayList\u003cInteger\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (description.contains(keywords)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                matchingTasks.add(tasks.indexOf(task));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        if (matchingTasks.size()\u003d\u003d0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(ui.indentation() + \" Sorry, there are no matching tasks.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(ui.indentation() + \" Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        for (int i : matchingTasks) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(ui.indentation() + \" \" + (i+1) + \".\" + tasks.get(i));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method prints the number of tasks in the task list as a statement for reference."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void printNumOfTasks() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(ui.indentation() + \" Now you have \" + taskCounter + (taskCounter \u003c\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method prints the tasks in a list form when \"list\" is called by the user."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void printTasks() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        if (taskCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(ui.indentation() + \" There is no task in the list yet.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCounter; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(ui.indentation() + \" \" + (i+1) + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 134
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * This class represents the user interface."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * It holds methods that prints messages and dividers to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method returns the fixed indentation for the divider and to separate user inputs from system outputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @return indentation spaces for indentation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected String indentation() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"    \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method prints a divider to divide the user inputs from system outputs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected void printDivider() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(indentation() + \"——————————————————————————————————————————————————\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method prints the starting logo and message when the user first start the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void printStartMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(indentation() + \" Hello! I\u0027m Duke.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(indentation() + \" What can I do for you?\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method prints the ending message after the user types \"bye\" which stops the program."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void printExitMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(indentation() + \" Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 50
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.date \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return (\"[D]\" + super.toString() + \" (by: \" + super.printDate() + \")\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String getSavedLine() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String done \u003d isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"D/\" + done + \"/\" + description + \"/\" + getDate();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 20
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Event(String description, String on) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.date \u003d LocalDate.parse(on);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"[E]\" + super.toString() + \" (on: \" + super.printDate() + \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String getSavedLine() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String done \u003d isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"E/\" + done + \"/\" + description + \"/\" + getDate();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 20
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * This class represents the tasks that is to be recorded in the scheduler."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * The subclasses of this class includes Todo, Deadline, and Event."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * The subclasses represents the different types of tasks which the program can record."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String printDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method returns the status icon based on boolean value of if a task is done"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @return icon status icon of the task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        // return tick or cross symbol"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method returns the line of the task which is to be printed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * It includes the type of task in the subclasses, status icon, description and date if applicable."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @return line string which describes the task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * This method is used in the subclasses. It will return the line that is to be saved to the duke text file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @return savedLine line to be saved into text file"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String getSavedLine() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 70
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String getSavedLine() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String done \u003d isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"T/\" + done + \"/\" + description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 18
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "deadline assignment /by tue"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "event presentation /on fri"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "todo buy bread"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 8
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/task/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "jiaaaqi": 1
    }
  }
]
