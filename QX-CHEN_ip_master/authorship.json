[
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Duke is a desktop app for managing tasks, optimized for use via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "It allows users to add different types of task and provides convenient commands to modify and "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "view the tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [Quick start](#quick-start)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [Features](#features)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Adding Todo](#adding-a-todo-task--todo)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Adding Event](#adding-an-event-task--event)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Adding Deadline](#adding-a-deadline-task--deadline)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Displaying tasks](#displaying-tasks--list)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Marking task as done](#changing-status-of-a-task--done)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Removing task](#removing-a-task--delete)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Searching task](#searching-relevant-tasks--find)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Exiting program](#exiting-program--bye)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [FAQ](#faq)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [Command summary](#command-summary)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "1. Download and install Java 11 in your Computer."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "2. Download the latest \"Duke.jar\" from [here](https://github.com/QX-CHEN/ip/releases/download/A-Jar/Duke.jar)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "3. To use existing data file (optional):"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - Create a \"data\" folder in the same folder as \"Duke.jar\"."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - Copy existing to \"data\" folder and name it \"Duke.txt\"."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "4. Open terminal/command prompt and run \"Duke.jar\" with following command:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    `java -jar Duke.jar`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "5. Type a command in terminal/command prompt and press Enter to execute it."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "6. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Notes about command format:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- Words in UPPER_CASE are the parameters to be supplied by the user. "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - e.g. in \"todo DESCRIPTION\", DESCRIPTION is a parameter which can be used "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "      as \"todo user guide\"."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- Input date format is dd/MM/yyyy."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - e.g. 20/02/2020"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- Input time format is HHmm in 24-hrs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - e.g. 1830"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Adding a Todo task : `todo`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Add a Todo task to the task list and display a message."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`todo user guide`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t Got it. I\u0027ve added: this task:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t   [T][X] user guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t Now you have 1 task(s) in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Adding an Event task : `event`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Add an Event task to the task list and display a message."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `event DESCRIPTION /at DATE START_TIME-END_TIME`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`event project meeting /at 20/02/2020 1800-2000`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t Got it. I\u0027ve added: this task:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t   [E][X] project meeting (at: 2020-02-20 1800-2000)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t Now you have 2 task(s) in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Adding a Deadline task : `deadline`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Add a Deadline task to the task list and display a message."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `deadline DESCRIPTION /by DATE TIME`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`deadline report /by 20/02/2020 2359`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t Got it. I\u0027ve added: this task:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t   [D][X] report (by: 2020-02-20 2359)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t Now you have 3 task(s) in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Displaying tasks : `list` "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Display all tasks in the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t Here are the tasks in your list:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t 1. [T][X] user guide"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t 2. [E][X] project meeting (at: 2020-02-20 1800-2000)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t 3. [D][X] report (by: 2020-02-20 2359)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Changing status of a task : `done`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Mark a task as done and display a message."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t   [E][T] project meeting (at: 2020-02-20 1800-2000)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Removing a task : `delete`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Delete a task from the task list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t   [E][T] project meeting (at: 2020-02-20 1800-2000)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t Now you have 2 task(s) in the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Searching relevant task(s) : `find`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Find and display task(s) with given keyword."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`find report`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t Here are the matching task(s) in your list:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t 1. [D][X] report (by: 2020-02-20 2359)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Exiting program : `bye`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Display a message and exits the program."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\t"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Saving data to file"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Data will be automatically saved after modification commands like "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`todo`, `delete`, `done` and so forth."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Action | Format | Example"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "------ | ------ | -------"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "todo | `todo DESCRIPTION` | `todo user guide`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "event | `event DESCRIPTION /at DATE START-END` | `event meeting 20/02/2020 1700-1900`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "deadline | `deadline DESCRIPTION /by DATE TIME` | `deadline report 24/10/2020 2359`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "done | `done INDEX` | `done 1`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "delete | `delete INDEX` | `delete 2`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "find | `find KEYWORD` | `find meet`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "list | `list` | `list`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "bye | `bye` | `bye`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 189,
      "-": 22
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import commands.ByeCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static common.Message.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Duke class starts, runs and stops the main program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * @author Chen Qixing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * @since 16 AUG 2020"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Reads data from file and runs main program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Storage.loadTasks(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            run();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (NumberFormatException | InvalidTaskNumberException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Ui.printMessageWithHorizontalLines(INVALID_TASK_NUMBER_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (UnknownCommandException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Ui.printMessageWithHorizontalLines(UNKNOWN_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Ui.printMessageWithHorizontalLines(INVALID_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (TaskDoneException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Ui.printMessageWithHorizontalLines(TASK_ALREADY_DONE_MESSAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (UnknownDateFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Ui.printMessageWithHorizontalLines(UNKNOWN_DATE_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Ui.printMessageWithHorizontalLines(FILE_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Ui.printMessageWithHorizontalLines(UNKNOWN_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static void run() throws NumberFormatException, InvalidTaskNumberException,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            UnknownCommandException, InvalidCommandException, TaskDoneException, UnknownDateFormatException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Ui.greet();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        boolean running \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        while (running) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Command command \u003d Parser.processInput(scanner.nextLine());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            CommandResult result \u003d command.execute(tasks);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Ui.printCommandResult(result);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            if (command instanceof ByeCommand) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                running \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 61,
      "-": 4
    }
  },
  {
    "path": "src/main/java/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static common.Message.BYE_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Representation of command that stops the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class ByeCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Executes the command by printing a bye message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param tasks runtime storage of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new CommandResult(BYE_MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 22
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.TaskDoneException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.UnknownDateFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Representation of generic command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Execute the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public abstract CommandResult execute(TaskList tasks)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throws InvalidTaskNumberException, TaskDoneException, UnknownDateFormatException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 17
    }
  },
  {
    "path": "src/main/java/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private TaskList tasks \u003d null;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private Task task \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private int numOfTasks \u003d -1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult(String message, Task task, int numOfTasks) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.numOfTasks \u003d numOfTasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult(String message, Task task) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult(String message, TaskList tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult(String message) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Task getTask() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public int getNumOfTasks() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return numOfTasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 47
    }
  },
  {
    "path": "src/main/java/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.UnknownDateFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static common.Message.ADD_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Representation of command that adds a Deadline task to TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    // pattern: deadline description /by dd/mm/yyyy HHmm"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final Pattern COMMAND_PATTERN \u003d Pattern.compile(COMMAND_WORD + \" (?\u003cdescription\u003e(\\\\w+\\\\s*)+\\\\w*)\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            \" /by (?\u003cdate\u003e\\\\d{2}/\\\\d{2}/\\\\d{4}) (?\u003ctime\u003e\\\\d{4})\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creates a AddDeadline Command with trimmed input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param trimmedInput raw input without leading and trailing white space."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @throws InvalidCommandException if the trimmed input format does not match with the pattern."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public DeadlineCommand(String trimmedInput) throws InvalidCommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Matcher matcher \u003d COMMAND_PATTERN.matcher(trimmedInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            description \u003d matcher.group(\"description\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            date \u003d matcher.group(\"date\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            time \u003d matcher.group(\"time\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Executes the command by creating a Deadline task and add it to TaskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param tasks runtime storage of tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(TaskList tasks) throws UnknownDateFormatException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, date, time);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.add(deadline);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Storage.updateFile(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new CommandResult(ADD_MESSAGE, deadline, tasks.size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 55
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static common.Message.DELETE_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Representation of command that deletes a task from TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class DeleteCommand extends Command{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final Pattern COMMAND_PATTERN \u003d Pattern.compile(COMMAND_WORD + \" (?\u003ctaskNum\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static int taskNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creates a DeleteCommand with trimmed input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param trimmedInput raw input without leading and trailing white space."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public DeleteCommand(String trimmedInput) throws InvalidCommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Matcher matcher \u003d COMMAND_PATTERN.matcher(trimmedInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            taskNum \u003d Integer.parseInt(matcher.group(\"taskNum\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Executes the command by deleting task of given index."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param tasks runtime storage of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(TaskList tasks) throws InvalidTaskNumberException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Task task \u003d tasks.deleteTask(taskNum);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Storage.updateFile(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new CommandResult(DELETE_MESSAGE, task, tasks.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 47
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.TaskDoneException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static common.Message.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Representation of command that marks a task in TaskList as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class DoneCommand extends Command{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final Pattern COMMAND_PATTERN \u003d Pattern.compile(COMMAND_WORD + \" (?\u003ctaskNum\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static int taskNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creates a DoneCommand with trimmed input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param trimmedInput raw input without leading and trailing white space."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public DoneCommand(String trimmedInput) throws InvalidCommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Matcher matcher \u003d COMMAND_PATTERN.matcher(trimmedInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            taskNum \u003d Integer.parseInt(matcher.group(\"taskNum\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Executes the command by marking task of given index as done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param tasks runtime storage of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(TaskList tasks) throws InvalidTaskNumberException, TaskDoneException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Task task \u003d tasks.markAsDone(taskNum);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Storage.updateFile(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new CommandResult(MARK_AS_DONE_MESSAGE, task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 47
    }
  },
  {
    "path": "src/main/java/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.UnknownDateFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static common.Message.ADD_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Representation of command that adds a Event task to TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    // pattern: event description /at dd/mm/yyyy HHmm"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final Pattern COMMAND_PATTERN \u003d Pattern.compile(COMMAND_WORD + \" (?\u003cdescription\u003e(\\\\w+\\\\s*)+\\\\w*)\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            \" /at (?\u003cdate\u003e\\\\d{2}/\\\\d{2}/\\\\d{4}) (?\u003cstart\u003e\\\\d{4})-(?\u003cend\u003e\\\\d{4})\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String start;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String end;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creates a AddEvent Command with trimmed input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param trimmedInput raw input without leading and trailing white space."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @throws InvalidCommandException if the trimmed input format does not match with the pattern."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public EventCommand(String trimmedInput) throws InvalidCommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Matcher matcher \u003d COMMAND_PATTERN.matcher(trimmedInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            description \u003d matcher.group(\"description\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            date \u003d matcher.group(\"date\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            start \u003d matcher.group(\"start\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            end \u003d matcher.group(\"end\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Executes the command by creating a Event task and add it to TaskList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param tasks runtime storage of tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(TaskList tasks) throws UnknownDateFormatException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Event event \u003d new Event(description, date, start, end);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.add(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Storage.updateFile(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new CommandResult(ADD_MESSAGE, event, tasks.size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 57
    }
  },
  {
    "path": "src/main/java/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static common.Message.FIND_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final Pattern COMMAND_PATTERN \u003d Pattern.compile(COMMAND_WORD + \"(?\u003ckeyword\u003e.*\\\\s.*)\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public FindCommand(String trimmedInput) throws InvalidCommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Matcher matcher \u003d COMMAND_PATTERN.matcher(trimmedInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            keyword \u003d matcher.group(\"keyword\").trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        TaskList filteredTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            if (tasks.get(i).getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                filteredTasks.add(tasks.get(i));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new CommandResult(FIND_MESSAGE, tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 35
    }
  },
  {
    "path": "src/main/java/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static common.Message.LIST_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Representation of command that list all the tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Executes the command by listing all the tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param tasks runtime storage of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new CommandResult(LIST_MESSAGE, tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 21
    }
  },
  {
    "path": "src/main/java/commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static common.Message.ADD_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Representation of command that adds a Todo task to TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final Pattern COMMAND_PATTERN \u003d Pattern.compile(COMMAND_WORD + \"(.*\\\\S.*)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creates a AddTodo Command with trimmed input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param trimmedInput raw input without leading and trailing white space."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public TodoCommand(String trimmedInput) throws InvalidCommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Matcher matcher \u003d COMMAND_PATTERN.matcher(trimmedInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            description \u003d matcher.group(1).trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Executes the command by creating a Todo task and add it to TaskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param tasks runtime storage of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Storage.updateFile(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new CommandResult(ADD_MESSAGE, todo, tasks.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 47
    }
  },
  {
    "path": "src/main/java/common/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String HORIZONTAL_LINE \u003d \"\\t______________________________\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + \"______________________________\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String GREET_MESSAGE \u003d \"\\t Hello! I\u0027m Duke\" + System.lineSeparator()"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + \"\\t What can I do for you?\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String BYE_MESSAGE \u003d \"\\t Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ADD_MESSAGE \u003d \"\\t Got it. I\u0027ve added: this task:\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String LIST_MESSAGE \u003d \"\\t Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String FIND_MESSAGE \u003d \"\\t Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String DELETE_MESSAGE \u003d \"\\t Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String MARK_AS_DONE_MESSAGE \u003d \"\\t Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String INVALID_TASK_NUMBER_MESSAGE \u003d \"\\t Invalid task number!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String TASK_ALREADY_DONE_MESSAGE \u003d \"\\t Task already done!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String INVALID_COMMAND_MESSAGE \u003d \"\\t Check command format!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String UNKNOWN_COMMAND_MESSAGE \u003d \"\\t Check command word!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String UNKNOWN_DATE_FORMAT_MESSAGE \u003d \"\\t Unknown date format!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String FILE_NOT_FOUND_MESSAGE \u003d \"\\t File not found!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String UNKNOWN_ERROR_MESSAGE \u003d \"\\t Unknown error!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 21
    }
  },
  {
    "path": "src/main/java/common/Utils.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.UnknownDateFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static LocalDate dateStringToDate(String dateString) throws UnknownDateFormatException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (dateString \u003d\u003d null) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (dateString.contains(\"/\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return LocalDate.parse(dateString, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (dateString.contains(\"-\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return LocalDate.parse(dateString, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new UnknownDateFormatException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static LocalTime timeStringToTime(String timeString) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (timeString \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int time \u003d Integer.parseInt(timeString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int hour \u003d time / 100;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int minute \u003d time % 100;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static String dateToString(LocalDate date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static String timeToString(LocalTime time) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return time.format(DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 49
    }
  },
  {
    "path": "src/main/java/data/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.TaskDoneException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Storage of tasks during runtime and its operations."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Add a task to TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param task new task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get current size of TaskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return size of TaskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get task from TaskList using index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return task of given index in the TaskList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Remove task from TaskList using index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Task deleteTask(int taskNum) throws InvalidTaskNumberException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (taskNum \u003c\u003d 0 || taskNum \u003e tasks.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return tasks.remove(taskNum - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Mark task as done using index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Task markAsDone(int taskNum) throws InvalidTaskNumberException, TaskDoneException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (taskNum \u003c\u003d 0 || taskNum \u003e tasks.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (tasks.get(taskNum - 1).isDone()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new TaskDoneException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.get(taskNum - 1).setDone(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return tasks.get(taskNum - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 65
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * InvalidCommandException is thrown when input format"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * does not match with available commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 7
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidTaskNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class InvalidTaskNumberException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 4
    }
  },
  {
    "path": "src/main/java/exceptions/TaskDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class TaskDoneException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 4
    }
  },
  {
    "path": "src/main/java/exceptions/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * UnknownCommandException is thrown when input"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * does not start with available command words."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class UnknownCommandException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 8
    }
  },
  {
    "path": "src/main/java/exceptions/UnknownDateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class UnknownDateFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 4
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Parser class handles raw input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * This method creates and returns a command based on the raw input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param rawInput message to be printed in between the lines."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return a Command based on the raw input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @throws InvalidCommandException if the trimmed input format does not match with the command pattern."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @throws UnknownCommandException if the raw input does not start with one the command words."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static Command processInput(String rawInput) throws InvalidCommandException, UnknownCommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String trimmedInput \u003d rawInput.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (trimmedInput.startsWith(TodoCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new TodoCommand(trimmedInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (trimmedInput.startsWith(EventCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new EventCommand(trimmedInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (trimmedInput.startsWith(DeadlineCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new DeadlineCommand(trimmedInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (trimmedInput.startsWith(DoneCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new DoneCommand(trimmedInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (trimmedInput.startsWith(DeleteCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new DeleteCommand(trimmedInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (trimmedInput.startsWith(FindCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new FindCommand(trimmedInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (trimmedInput.startsWith(ListCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (trimmedInput.startsWith(ByeCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 42
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.UnknownDateFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Storage class handles loading of data from file and saving of data to file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final String DIRECTORY_NAME \u003d \"data\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final String FILE_NAME \u003d \"Duke.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Write to file the latest data of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param tasks latest TaskList object after modification."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static void updateFile(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        writeTasksToFile(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static void writeTasksToFile(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        FileWriter file \u003d new FileWriter(DIRECTORY_NAME + \"/\" + FILE_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (int i \u003d 0; tasks.size() \u003e i; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            file.write(tasks.get(i).getCode() + \"|\" + (tasks.get(i).isDone() ? \"1\" : \"0\") + \"|\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    tasks.get(i).getDescription() + \"|\" + tasks.get(i).getDatetime() + System.lineSeparator());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Load data from file and add tasks to TaskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param tasks empty TaskList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static void loadTasks(TaskList tasks) throws FileNotFoundException, UnknownDateFormatException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (!createDirectory()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            readTasksFromFile(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static boolean createDirectory() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        File directory \u003d new File(DIRECTORY_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        boolean directoryCreated \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            if (!directory.exists()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                directoryCreated \u003d directory.mkdir();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            e.getStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return directoryCreated;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static void readTasksFromFile(TaskList tasks) throws FileNotFoundException, UnknownDateFormatException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        File file \u003d new File(DIRECTORY_NAME + \"/\" + FILE_NAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            processLine(tasks, scanner.nextLine());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static void processLine(TaskList tasks, String line) throws UnknownDateFormatException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String[] parts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        boolean done \u003d (\"1\".equals(parts[1]));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        switch (parts[0]) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            String todoDescription \u003d parts[2];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            tasks.add(new Todo(done, todoDescription));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            String eventDescription \u003d parts[2];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            String eventDate \u003d parts[3];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            String eventStart \u003d parts[4];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            String eventEnd \u003d parts[5];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            tasks.add(new Event(done, eventDescription, eventDate, eventStart, eventEnd));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            String deadlineDescription \u003d parts[2];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            String deadlineDate \u003d parts[3];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            String deadlineTime \u003d parts[4];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            tasks.add(new Deadline(done, deadlineDescription, deadlineDate, deadlineTime));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 97
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.UnknownDateFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static common.Utils.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Representation of a type of task with description and deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final String CODE \u003d \"D\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creates a Deadline task with description and deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param description description of a task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param dateString date of a deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param timeString time of a deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Deadline(String description, String dateString, String timeString) throws UnknownDateFormatException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        date \u003d dateStringToDate(dateString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        time \u003d timeStringToTime(timeString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creates a Deadline task with status, description and deadline."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param done status of a task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param description description of a deadline."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param dateString date of a deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param timeString time of a deadline."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Deadline(boolean done, String description, String dateString, String timeString)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throws UnknownDateFormatException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        super(done, description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        date \u003d dateStringToDate(dateString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        time \u003d timeStringToTime(timeString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get date of a deadline."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return date of a deadline."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Set date of a deadline."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param date of a deadline."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get time of a deadline."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return time of a deadline."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Set time of a deadline."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param time of a deadline."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return CODE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String getDatetime() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return dateToString(getDate()) + \"|\" + timeToString(getTime());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return \"[\" + getCode() + \"]\" + getStatusIcon() + \" \" +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                getDescription() + \" (by: \" + dateToString(getDate()) + \" \" + timeToString(getTime()) + \")\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 106
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import exceptions.UnknownDateFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static common.Utils.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Representation of a type of task with description and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final String CODE \u003d \"E\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private LocalTime start;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private LocalTime end;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creates a Event task with description and time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param description description of a event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param dateString date of a event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param startString start time of a event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param endString end time of a event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Event(String description, String dateString, String startString, String endString)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throws UnknownDateFormatException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        date \u003d dateStringToDate(dateString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        start \u003d timeStringToTime(startString);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        end \u003d timeStringToTime(endString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creates a Event task with status, description and time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param done status of a task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param description description of a task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param dateString date of a event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param startString start time of a event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param endString end time of a event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Event(boolean done, String description, String dateString, String startString, String endString)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throws UnknownDateFormatException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        super(done, description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        date \u003d dateStringToDate(dateString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        start \u003d timeStringToTime(startString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        end \u003d timeStringToTime(endString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get date of an event."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return date of an event."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Set date of an event."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param date date of an event."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get start time of an event."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return start time of an event."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Set start time of an event."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param start start time of an event."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setStartTime(LocalTime start) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get end time of an event."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return end time of an event."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Set end time of an event."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param end  end time of an event."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setEndTime(LocalTime end) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return CODE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String getDatetime() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return dateToString(getDate()) + \"|\" + timeToString(getStartTime()) + \"|\" + timeToString(getEndTime());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return \"[\" + getCode() + \"]\" + getStatusIcon() + \" \" +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                getDescription() + \" (at: \" + dateToString(getDate()) +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                \" \" + timeToString(getStartTime()) + \"-\" + timeToString(getEndTime()) + \")\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 131
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Representation of a generic task object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final String TICK_ICON \u003d \"[T]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final String CROSS_ICON \u003d \"[X]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creates a Task instance with description only."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param description description of a task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        setDone(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creates a Task instance with description and its status."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param done status of a task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param description description of a task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Task(boolean done, String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        setDone(done);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get description of a task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return description of a task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Set description of a task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param description description of a task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get status of a task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return status of a task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Set status of a task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param done status of a task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get status icon of a task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return status icon of a task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return isDone() ? TICK_ICON : CROSS_ICON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get code of a task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return code of a task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public abstract String getCode();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get datetime of a task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return datetime of a task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public abstract String getDatetime();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get string representation of a task."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return string representation of a task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 100
    }
  },
  {
    "path": "src/main/java/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Representation of a type of task with description only."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final String CODE \u003d \"T\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creates a Todo task with description only."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param description description of a task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creates a Todo task with description and status."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param done status of a task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param description description of a task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Todo(boolean done, String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        super(done, description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return CODE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String getDatetime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return \"[\" + getCode() + \"]\" + getStatusIcon() + \" \" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                getDescription();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 52
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static common.Message.GREET_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static common.Message.HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Ui class handles printing of messages."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Prints a dash line."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static void printHorizontalLine() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        System.out.println(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Prints a message in between two dash lines."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param message message to be printed in between the lines."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static void printMessageWithHorizontalLines(String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Prints greeting message."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static void greet() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        printMessageWithHorizontalLines(GREET_MESSAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static void printCommandResult(CommandResult commandResult) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        System.out.println(commandResult.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        TaskList tasks \u003d commandResult.getTasks();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Task task \u003d commandResult.getTask();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int numOfTasks \u003d commandResult.getNumOfTasks();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (tasks !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                System.out.print(\"\\t \" + (i + 1) + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                System.out.println(tasks.get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (task !\u003d null){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            System.out.println(\"\\t   \" + task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            if (numOfTasks \u003e\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                System.out.println(\"\\t Now you have \" + numOfTasks + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 59
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "deadline return book /by 19/01/2020 1700"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "event project meeting /at 20/03/2019 1500-1530"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "add"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "dsajkld"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "todo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "todo abc"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "event    /at 3pm"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "event games /by 5pm"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "event meeting /at TUE 4pm"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "event meeting /at 20/03/2020 1700-1900"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "lsit"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "dealine foo /by 8pm"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "deadline      /by 9pm"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "deadline abba /at 6pm"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "deadline Report /by 10pm"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "deadline Report /by 20/09/2020 2200"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "done"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "done two"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "done 7423897482937489230461947238647218364781964423179347"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "delete"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "delete two"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "delete 87329163232132173862178648932314723891647326472"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 44
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "if exist .\\data rmdir .\\data /s /q"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "if exist ACUTUAL.TXT del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 4,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 1,
      "-": 37
    }
  }
]
