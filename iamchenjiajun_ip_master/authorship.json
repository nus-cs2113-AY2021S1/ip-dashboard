[
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Duke is an interactive task management program which allows the user to store and manage tasks using a command-line"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "interface."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Launching Duke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Requirements: `Java 11`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "After navigating to the folder containing `duke.jar` in the shell, run the following command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`java -jar duke.jar`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Duke saves the task lists to a file with the relative directory `./data/duke.txt`."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "If the directory and/or file does not exist when Duke launches, Duke creates the directory and/or file before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "loading the file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Adding Tasks: `todo`/`deadline`/`event`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Adds a task to the list of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "There are several types of tasks that can be added, such as a Todo, Deadline or Event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`todo \u003cdescription\u003e` - Adds a todo to the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`deadline \u003cdescription\u003e /by \u003cyyyy-MM-dd HH:mm\u003e` - Adds a deadline to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`event \u003cdescription\u003e /at \u003cyyyy-MM-dd HH:mm\u003e` - Adds an event to the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of adding a Todo:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`todo read book`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Added read book as a Todo."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "[T][✗] read book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of adding a Deadline:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`deadline ip final submission /by 2020-10-02 23:59`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Added ip final submission as a Deadline."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "[D][✗] ip final submission (by: Oct 02 2020 23:59)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of adding an Event:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`event consultation meeting with prof /at 2020-10-07 16:00`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Added consultation meeting with prof as an Event."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "[E][✗] consultation meeting with prof (at: Oct 07 2020 16:00)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Listing Tasks: `list`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Lists all the tasks that are tracked by Duke."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`list` - Lists all tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1.[E][✓] cs2113 meeting (at: Dec 05 2020 11:30)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "2.[E][✗] consultation meeting with prof (at: Oct 07 2020 16:00)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "3.[T][✗] set up a meeting with academic advisor"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "4.[T][✓] submit budget request"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "5.[D][✗] ip final submission (by: Oct 02 2020 23:59)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Marking Tasks as \"Done\": `done`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Marks a task as \"Done\" at a given index."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ":triangular_flag_on_post: The list is **one-indexed** and corresponds to the indexes on `list` command output."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`done \u003cindex\u003e` - Marks the task at the given index as \"Done\"."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "[E][✓] cs2113 meeting (at: Dec 05 2020 11:30)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Deleting Tasks: `delete`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Deletes a task at a given index."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ":triangular_flag_on_post: The list is **one-indexed** and corresponds to the indexes on `list` command output."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`delete \u003cindex\u003e` - Deletes the task at the given index."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`delete 7`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "[T][✗] read book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Now you have 8 tasks in the list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Finding Tasks: `find`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Prints a list of tasks with description matching a keyword."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ":triangular_flag_on_post: The command uses **case-insensitive** matching."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`find \u003csearch string\u003e` - Searches the list for tasks that contains the search string in the description."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`find meeting`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Here\u0027s the tasks containing \u0027meeting\u0027:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1.[E][✓] cs2113 meeting (at: Dec 05 2020 11:30)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "2.[E][✗] consultation meeting with prof (at: Oct 07 2020 16:00)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "3.[T][✗] set up a meeting with academic advisor"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Listing tasks with given date: `date`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Prints an overview of tasks matching the given date."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`date \u003cyyyy-MM-dd\u003e` - Searches the list for tasks that has a date yyyy-MM-dd."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`date 2020-10-07`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Here\u0027s an overview of Oct 07 2020"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "[E][✗] consultation meeting with prof (at: Oct 07 2020 16:00)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "[E][✗] collect lab kit (at: Oct 07 2020 14:00)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Exiting Duke: `bye`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Saves the existing list of tasks to a file and terminates the program."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`bye` - Saves the task list and exits the program."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003e\u003e\u003e\u003e++----------------------------------"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Quick Command Reference"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Action | Command | Example"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "------------ | ------------ | -------------"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Add todo | `todo \u003cdescription\u003e` | `todo read book`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Add deadline | `deadline \u003cdescription\u003e /by \u003cyyyy-MM-dd HH:mm\u003e` | `deadline ip final submission /by 2020-10-02 23:59`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Add event | `event \u003cdescription\u003e /at \u003cyyyy-MM-dd HH:mm\u003e` | `event consultation meeting with prof /at 2020-10-07 16:00`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Listing tasks | `list` | `list`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Mark task as done | `done \u003cindex\u003e` | `done 1`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Delete task | `delete \u003cindex\u003e` | `delete 7`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Finding tasks | `find \u003csearch string\u003e` | `find meeting`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Date overview | `date \u003cyyyy-MM-dd\u003e` | `date 2020-10-7`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Exit Duke | `bye` | `bye`"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 209,
      "-": 15
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.DateTimeFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.FileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.InvalidArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.taskmanager.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents the entry point of the Duke program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Initializes and manages the TaskManager, Ui and Storage, and handles user interaction."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String FILE_LOCATION \u003d \"./data/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String FILE_NAME \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Starts the program by greeting the user and loading existing tasks from file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        storage \u003d new Storage(FILE_LOCATION, FILE_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            storage.checkFileExists();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            taskManager \u003d new TaskManager(storage.loadTasks());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            ui.showLoadSuccessful();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            ui.showLoadError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (FileFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            ui.showFileFormatError();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (DateTimeFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            System.out.println(e.getErrorMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            ui.showDivider();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Starts the read-evaluate-print loop to read, parse and execute user input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean isBye \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String line \u003d ui.readCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            ui.showDivider();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                Command command \u003d parser.parseCommand(line);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                command.execute(taskManager, ui, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                isBye \u003d command.isBye();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            } catch (UnknownCommandException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                System.out.println(e.getErrorMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            } catch (InvalidArgumentException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                System.out.println(e.getErrorMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            } catch (InvalidIndexException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                System.out.println(e.getErrorMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            } catch (DateTimeFormatException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                System.out.println(e.getErrorMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            ui.showDivider();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } while (!isBye);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 82,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.DateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.taskmanager.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command for adding a {@code Deadline}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int MIN_ARGUMENT_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    String by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public AddDeadlineCommand(String description, String by) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Adds a {@code Deadline} to the list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskManager Object managing the list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param ui Object representing the user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param storage A file storing the tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(TaskManager taskManager, Ui ui, Storage storage) throws DateTimeFormatException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        taskManager.addDeadline(description, by);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        saveTasks(taskManager, ui, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 33
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.DateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.taskmanager.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command for adding an {@code Event}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int MIN_ARGUMENT_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    String at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public AddEventCommand(String description, String at) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Adds an {@code Event} to the list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskManager Object managing the list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param ui Object representing the user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param storage A file storing the tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DateTimeFormatException If the command provides a date in an invalid format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(TaskManager taskManager, Ui ui, Storage storage) throws DateTimeFormatException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        taskManager.addEvent(description, at);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        saveTasks(taskManager, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 34
    }
  },
  {
    "path": "src/main/java/duke/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.taskmanager.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command for adding a {@code Todo}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int MIN_ARGUMENT_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public AddTodoCommand(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Adds a {@code Todo} to the list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskManager Object managing the list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param ui Object representing the user interface."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param storage A file storing the tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(TaskManager taskManager, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        taskManager.addTodo(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        saveTasks(taskManager, ui, storage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 30
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.taskmanager.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command that terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Saves the list of tasks to the file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskManager Object managing the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param ui Object representing the user interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param storage A file storing the tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(TaskManager taskManager, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ui.showByeMessage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        saveTasks(taskManager, ui, storage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns true to indicate that this represents an instance of {@code ByeCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Boolean indicating that this is an instance of {@code ByeCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 33
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.DateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.taskmanager.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command with parameters corresponding to user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_ADD_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_ADD_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_ADD_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_DATE \u003d \"date\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskManager Object managing the list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param ui Object representing the user interface."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param storage A file storing the tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidIndexException If the command tries to access an invalid index in the list of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DateTimeFormatException If the command provides a date in an invalid format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public abstract void execute(TaskManager taskManager, Ui ui, Storage storage) throws InvalidIndexException,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            DateTimeFormatException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Saves the tasks to file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskManager Object managing the list of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param ui Object representing the user interface."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param storage A file storing the tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void saveTasks(TaskManager taskManager, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            storage.saveTasks(taskManager.getTasks());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            ui.showSaveError();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns true if the {@code Command} is a {@code ByeCommand}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Boolean value showing whether the {@code Command} is the {@code ByeCommand}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 60
    }
  },
  {
    "path": "src/main/java/duke/command/DateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.DateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.taskmanager.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command that lists tasks with a given date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class DateCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int EXPECTED_ARGUMENT_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public DateCommand(String date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Lists the tasks with a given date."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskManager Object managing the list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param ui Object representing the user interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param storage A file storing the tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DateTimeFormatException If the command provides a date in an invalid format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(TaskManager taskManager, Ui ui, Storage storage) throws DateTimeFormatException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        taskManager.printTasksOnDate(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.taskmanager.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command that deletes a task from the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int EXPECTED_ARGUMENT_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Deletes the task from the list at the given index."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskManager Object managing the list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param ui Object representing the user interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param storage A file storing the tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidIndexException If the index of the task is out of range."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(TaskManager taskManager, Ui ui, Storage storage) throws InvalidIndexException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        taskManager.deleteTask(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        saveTasks(taskManager, ui, storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 32
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.taskmanager.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command that marks a task as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int EXPECTED_ARGUMENT_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Marks a task as done from the list at the given index."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskManager Object managing the list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param ui Object representing the user interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param storage A file storing the tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidIndexException If the index of the task is out of range."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(TaskManager taskManager, Ui ui, Storage storage) throws InvalidIndexException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        taskManager.markAsDone(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        saveTasks(taskManager, ui, storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 32
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.taskmanager.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command for printing tasks containing a search string in the list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int MIN_ARGUMENT_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final String searchString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public FindCommand(String searchString) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.searchString \u003d searchString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints a list of tasks containing the search string in their description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskManager Object managing the list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param ui Object representing the user interface."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param storage A file storing the tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(TaskManager taskManager, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        taskManager.findTask(searchString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 29
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.taskmanager.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command that prints the list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskManager Object managing the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param ui Object representing the user interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param storage A file storing the tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(TaskManager taskManager, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        taskManager.printTasks();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 22
    }
  },
  {
    "path": "src/main/java/duke/exception/DateTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents an exception thrown when the date is in the wrong format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class DateTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private String errorMessage \u003d null;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public DateTimeFormatException(String errorMessage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Error message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 21
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents an exception from the Duke program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Indicates that an error has occurred in the Duke program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * This is the class of exceptions thrown within the Duke program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/FileFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents an exception thrown when there is an error in the formatting of file contents."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class FileFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents an exception thrown when the user input contains invalid arguments."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class InvalidArgumentException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private String errorMessage \u003d null;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public InvalidArgumentException(String errorMessage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Error message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 21
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents an exception thrown when accessing an invalid index in the Duke program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private String errorMessage \u003d null;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public InvalidIndexException(String errorMessage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Error message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 21
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents an exception thrown when the user input contains an unknown command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return Ui.ERROR_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 17
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.command.DateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.InvalidArgumentException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Parses inputs from the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Parses a line of input from the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param line String containing user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return An initialized command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws UnknownCommandException If the user command is unrecognized."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidArgumentException If the arguments are invalid for the given command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public Command parseCommand(String line) throws UnknownCommandException, InvalidArgumentException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String[] arguments \u003d line.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String rootCommand \u003d arguments[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String argumentString \u003d line.replaceFirst(rootCommand + \" \", \"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        // Solution for refactoring to obtain Commands from separate functions adapted from"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        // https://github.com/se-edu/addressbook-level2"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (rootCommand) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case Command.COMMAND_LIST:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            command \u003d new ListCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case Command.COMMAND_BYE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            command \u003d new ByeCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case Command.COMMAND_DONE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            command \u003d createDoneCommand(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case Command.COMMAND_DELETE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            command \u003d createDeleteCommand(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case Command.COMMAND_DATE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            command \u003d createDateCommand(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case Command.COMMAND_ADD_TODO:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            command \u003d createAddTodoCommand(arguments, argumentString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case Command.COMMAND_ADD_DEADLINE:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            command \u003d createAddDeadlineCommand(arguments, argumentString);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case Command.COMMAND_ADD_EVENT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            command \u003d createAddEventCommand(arguments, argumentString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case Command.COMMAND_FIND:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            command \u003d createFindCommand(arguments, argumentString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns an instance of {@code DoneCommand} initialized by parsed arguments."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param arguments Array containing arguments."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Initialized DoneCommand."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidArgumentException If the arguments are invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private Command createDoneCommand(String[] arguments) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        checkExactArgumentLength(arguments.length, DoneCommand.EXPECTED_ARGUMENT_LENGTH);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        checkValidInteger(arguments[1], Ui.ERROR_DONE_ARGUMENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int doneIndex \u003d Integer.parseInt(arguments[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return new DoneCommand(doneIndex - 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns an instance of {@code DeleteCommand} initialized by parsed arguments."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param arguments Array containing arguments."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Initialized DeleteCommand."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidArgumentException If the arguments are invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private Command createDeleteCommand(String[] arguments) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        checkExactArgumentLength(arguments.length, DeleteCommand.EXPECTED_ARGUMENT_LENGTH);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        checkValidInteger(arguments[1], Ui.ERROR_DELETE_ARGUMENT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int deleteIndex \u003d Integer.parseInt(arguments[1]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return new DeleteCommand(deleteIndex - 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns an instance of {@code DateCommand} initialized by parsed arguments."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param arguments Array containing arguments."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Initialized DateCommand."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidArgumentException If the arguments are invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private Command createDateCommand(String[] arguments) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        checkExactArgumentLength(arguments.length, DateCommand.EXPECTED_ARGUMENT_LENGTH);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return new DateCommand(arguments[1]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns an instance of {@code AddTodoCommand} initialized by parsed arguments."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param arguments Array containing arguments."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentString String containing arguments."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Initialized AddTodoCommand."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidArgumentException If the arguments are invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private Command createAddTodoCommand(String[] arguments, String argumentString) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        checkMinArgumentLength(arguments.length, AddTodoCommand.MIN_ARGUMENT_LENGTH, Ui.ERROR_TODO_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return new AddTodoCommand(argumentString);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns an instance of {@code AddDeadlineCommand} initialized by parsed arguments."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param arguments Array containing arguments."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentString String containing arguments."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Initialized AddDeadlineCommand."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidArgumentException If the arguments are invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private Command createAddDeadlineCommand(String[] arguments, String argumentString)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String[] deadlineDetails \u003d argumentString.split(\" /by \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        checkMinArgumentLength(arguments.length, AddDeadlineCommand.MIN_ARGUMENT_LENGTH,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                Ui.ERROR_DEADLINE_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        checkMinArgumentLength(deadlineDetails.length, AddDeadlineCommand.MIN_ARGUMENT_LENGTH, Ui.ERROR_NO_DEADLINE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d argumentString.replace(\" /by \" + deadlineDetails[1], \"\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return new AddDeadlineCommand(description, deadlineDetails[1]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns an instance of {@code AddEventCommand} initialized by parsed arguments."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param arguments Array containing arguments."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentString String containing arguments."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Initialized AddEventCommand."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidArgumentException If the arguments are invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private Command createAddEventCommand(String[] arguments, String argumentString) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String[] eventDetails \u003d argumentString.split(\" /at \");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        checkMinArgumentLength(arguments.length, AddEventCommand.MIN_ARGUMENT_LENGTH, Ui.ERROR_EVENT_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        checkMinArgumentLength(eventDetails.length, AddEventCommand.MIN_ARGUMENT_LENGTH, Ui.ERROR_NO_EVENT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d argumentString.replace(\" /at \" + eventDetails[1], \"\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return new AddEventCommand(description, eventDetails[1]);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns an instance of {@code FindCommand} initialized by parsed arguments."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param arguments Array containing arguments."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentString String containing arguments."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Initialized FindCommand."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidArgumentException If the arguments are invalid."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private Command createFindCommand(String[] arguments, String argumentString) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        checkMinArgumentLength(arguments.length, FindCommand.MIN_ARGUMENT_LENGTH, Ui.ERROR_FIND_ARGUMENT);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return new FindCommand(argumentString);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if the argument length matches the expected argument length."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentLength Actual argument length."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param expectedLength Expected argument length."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidArgumentException If the argument length does not match the expected argument length."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private void checkExactArgumentLength(int argumentLength, int expectedLength)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentLength !\u003d expectedLength) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new InvalidArgumentException(Ui.ERROR_INVALID_ARGUMENT_LENGTH);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if the argument length exceeds the minimum required argument length."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentLength Actual argument length."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param minimumLength Minimum argument length."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param errorMessage Error message passed to the exception."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidArgumentException If the argument length is less than the minimum argument length."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private void checkMinArgumentLength(int argumentLength, int minimumLength, String errorMessage)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentLength \u003c minimumLength) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new InvalidArgumentException(errorMessage);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if a String represents a valid integer."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param integerString String representing the integer."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param errorMessage Error message passed to the exception."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidArgumentException If the String cannot be parsed to an integer."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private void checkValidInteger(String integerString, String errorMessage) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Integer.parseInt(integerString);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new InvalidArgumentException(errorMessage);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 222
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.DateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.FileFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a file used to store the tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final String fileLocation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final String fileName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Initializes the location and name of the file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param fileLocation Location of the directory containing the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param fileName Name of the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public Storage(String fileLocation, String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.fileLocation \u003d fileLocation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if the file named fileName exists at fileLocation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * If the directories or file do not exist, the directories and file will be created."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws IOException when creation of directories or file fails"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void checkFileExists() throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!Files.exists(Path.of(fileLocation))) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Files.createDirectories(Path.of(fileLocation));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!Files.exists(Path.of(fileLocation + fileName))) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Files.createFile(Path.of(fileLocation + fileName));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Loads and parses the file into an ArrayList of tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the ArrayList containing the tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return ArrayList containing Tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws FileNotFoundException If the file does not exist at fileLocation."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws FileFormatException If the tasks stored in the file do not adhere to the given format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DateTimeFormatException If the dates are in an invalid format."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTasks() throws FileNotFoundException, FileFormatException, DateTimeFormatException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        File file \u003d new File(fileLocation + fileName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Scanner in \u003d new Scanner(file);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        while (in.hasNext()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String line \u003d in.nextLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String[] taskDetails \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            // add the existing tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            switch (taskDetails[0]) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                tasks.add(new Todo(taskDetails[2]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                tasks.add(new Deadline(taskDetails[2], taskDetails[3]));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                tasks.add(new Event(taskDetails[2], taskDetails[3]));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new FileFormatException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (taskDetails[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                tasks.get(tasks.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Saves an ArrayList of tasks to the file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param tasks ArrayList containing Tasks."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws IOException If there are write errors."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void saveTasks(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        FileWriter fw \u003d new FileWriter(fileLocation + fileName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            fw.write(task.toSaveString() + System.lineSeparator());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 107
    }
  },
  {
    "path": "src/main/java/duke/task/DatedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a {@code Task} that contains a LocalDateTime field."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public interface DatedTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns a LocalDate object obtained from the LocalDateTime field."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return LocalDate object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    LocalDate getLocalDate();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 15
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.DateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a deadline created by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class Deadline extends Task implements DatedTask {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected LocalDateTime byDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public Deadline(String description, String by) throws DateTimeFormatException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            this.byDateTime \u003d LocalDateTime.parse(by, DATETIME_PARSE_FORMATTER);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DateTimeFormatException(Ui.ERROR_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the string representation of the {@code Deadline} to be saved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return String representation of the {@code Deadline} to be saved."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String isDoneString \u003d (isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String dateTimeString \u003d byDateTime.format(DATETIME_PARSE_FORMATTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return \"D | \" + isDoneString + \" | \" + description + \" | \" + dateTimeString;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the string representation of the {@code Deadline} to be displayed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return String representation of the {@code Deadline} to be displayed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String dateTimeString \u003d byDateTime.format(DATETIME_PRINT_FORMATTER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateTimeString + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns a LocalDate object obtained from the LocalDateTime field."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return LocalDate object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public LocalDate getLocalDate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return byDateTime.toLocalDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 57
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.DateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents an event created by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class Event extends Task implements DatedTask {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected LocalDateTime atDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public Event(String description, String at) throws DateTimeFormatException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            this.atDateTime \u003d LocalDateTime.parse(at, DATETIME_PARSE_FORMATTER);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DateTimeFormatException(Ui.ERROR_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the string representation of the {@code Event} to be saved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return String representation of the {@code Event} to be saved."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String isDoneString \u003d (isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String dateTimeString \u003d atDateTime.format(DATETIME_PARSE_FORMATTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return \"E | \" + isDoneString + \" | \" + description + \" | \" + dateTimeString;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the string representation of the {@code Event} to be displayed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return String representation of the {@code Event} to be displayed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String dateTimeString \u003d atDateTime.format(DATETIME_PRINT_FORMATTER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateTimeString + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns a LocalDate object obtained from the LocalDateTime field."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return LocalDate object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public LocalDate getLocalDate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return atDateTime.toLocalDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 57
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a task created by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final DateTimeFormatter DATE_PARSE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final DateTimeFormatter DATE_PRINT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final DateTimeFormatter DATETIME_PARSE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final DateTimeFormatter DATETIME_PRINT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Initializes the description of the {@code Task}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param description Description of the {@code Task}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the String representing the state of the {@code Task}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * A tick is returned if the {@code Task} is done,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * and a cross is returned if the {@code Task} is not done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return String showing if the {@code Task} was done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return (isDone ? \"[✓]\" : \"[✗]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Marks the {@code Task} as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the description of the {@code Task}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Description of the {@code Task}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the string representation of the {@code Task} to be saved."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return String representation of the {@code Task} to be saved."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public abstract String toSaveString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the string representation of the {@code Task} to be displayed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return String representation of the {@code Task} to be displayed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return getStatusIcon() + \" \" + getDescription();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 70
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a todo created by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the string representation of the {@code Todo} to be saved."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return String representation of the {@code Todo} to be saved."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String isDoneString \u003d (isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return \"T | \" + isDoneString + \" | \" + description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the string representation of the {@code Todo} to be displayed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return String representation of the task {@code Todo} be displayed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 31
    }
  },
  {
    "path": "src/main/java/duke/taskmanager/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.taskmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.DateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.task.DatedTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * An object which manages a list of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates a TaskManager object with an empty list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates a TaskManager object with an existing list of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param tasks An ArrayList containing tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public TaskManager(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints a numbered list of the tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void printTasks() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int index \u003d i + 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            System.out.println(index + \".\" + tasks.get(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints a list of tasks on a given date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param date Date to print the tasks from."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DateTimeFormatException If the date is in an invalid format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void printTasksOnDate(String date) throws DateTimeFormatException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        LocalDate targetDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            targetDate \u003d LocalDate.parse(date, Task.DATE_PARSE_FORMATTER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DateTimeFormatException(Ui.ERROR_DATE_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String dateString \u003d targetDate.format(Task.DATE_PRINT_FORMATTER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(\"Here\u0027s an overview of \" + dateString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter((task) -\u003e task instanceof DatedTask)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter((task) -\u003e targetDate.equals(((DatedTask) task).getLocalDate()))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .forEach(System.out::println);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Deletes the task at the given index."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param index Index referring to the task to be deleted."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidIndexException If the index is out of range."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void deleteTask(int index) throws InvalidIndexException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Task removedTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            tasks.remove(index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            System.out.println(removedTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            System.out.println(\"Now you have \" + getTasksCount() + \" tasks in the list\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new InvalidIndexException(Ui.ERROR_DELETE_ARGUMENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints a list of tasks with description matching the search string."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param searchString Search string to match description of tasks."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void findTask(String searchString) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(\"Here\u0027s the tasks containing \u0027\" + searchString + \"\u0027:\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks \u003d (ArrayList\u003cTask\u003e) tasks.stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter((task) -\u003e task.getDescription().toLowerCase().contains(searchString.toLowerCase()))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredTasks.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int index \u003d i + 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            System.out.println(index + \".\" + filteredTasks.get(i));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Marks the task at the given index as done."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param index Index referring to the task to be marked."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws InvalidIndexException If the index is out of range."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void markAsDone(int index) throws InvalidIndexException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            tasks.get(index).markAsDone();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            System.out.println(tasks.get(index));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new InvalidIndexException((Ui.ERROR_DONE_ARGUMENT));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Adds a {@code Deadline} to the list of tasks."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param description Description of the deadline."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param by Date of the deadline."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void addDeadline(String description, String by) throws DateTimeFormatException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.add(new Deadline(description, by));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(\"Added \" + description + \" as a Deadline.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(tasks.get(tasks.size() - 1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Adds a {@code Todo} to the list of tasks."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param description Description of the todo."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void addTodo(String description) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.add(new Todo(description));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(\"Added \" + description + \" as a Todo.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(tasks.get(tasks.size() - 1));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Adds an {@code Event} to the list of tasks."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param at Date of the event."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void addEvent(String description, String at) throws DateTimeFormatException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.add(new Event(description, at));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(\"Added \" + description + \" as an Event.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(tasks.get(tasks.size() - 1));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns the length of the list containing the tasks."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Length of the list containing the tasks."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public int getTasksCount() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns an ArrayList containing the tasks."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return ArrayList containing the tasks."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 177
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents the user interface that interacts with the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String DUKE_DIVIDER \u003d \"\u003e\u003e\u003e\u003e++----------------------------------\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String DUKE_GREETINGS \u003d \"Hello! I\u0027m Duke!\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"What can I do for you?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String DUKE_LOGO \u003d \"Hello from\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \" ____        _        \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String DUKE_BYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String TASK_LOAD_SUCCESSFUL \u003d \"Tasks loaded successfully.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_TODO_NO_DESCRIPTION \u003d \"☹ OOPS!!! The description of a Todo cannot be empty.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_DEADLINE_NO_DESCRIPTION \u003d \"☹ OOPS!!! The description of a Deadline cannot be\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            \" empty.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_EVENT_NO_DESCRIPTION \u003d \"☹ OOPS!!! The description of an Event cannot be empty.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_NO_DEADLINE \u003d \"☹ OOPS!!! Your Deadline doesn\u0027t contain a deadline!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_NO_EVENT \u003d \"☹ OOPS!!! Your Event doesn\u0027t contain a date\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_DONE_ARGUMENT \u003d \"☹ OOPS!!! Your done argument is invalid!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_DELETE_ARGUMENT \u003d \"☹ OOPS!!! Your delete argument is invalid!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_INVALID_ARGUMENT_LENGTH \u003d \"☹ OOPS!!! You have an invalid number of arguments!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_UNKNOWN_COMMAND \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_TASK_LOAD \u003d \"☹ OOPS!!! I\u0027m sorry, but I couldn\u0027t load the tasks :-(\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_TASK_FORMAT \u003d \"☹ OOPS!!! Your tasks are in the wrong format :-(\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_TASK_SAVE \u003d \"☹ OOPS!!! I\u0027m sorry, but I couldn\u0027t save the tasks :-(\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_FIND_ARGUMENT \u003d \"☹ OOPS!!! You need a search string to find!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_DATETIME_FORMAT \u003d \"☹ OOPS!!! Your date/time is in the wrong format :-(\\n\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            \"The correct format is \u0027yyyy-MM-dd HH:mm\u0027!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ERROR_DATE_FORMAT \u003d \"☹ OOPS!!! Your date is in the wrong format :-(\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            \"The correct format is \u0027yyyy-MM-dd\u0027!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints a divider."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void showDivider() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(DUKE_DIVIDER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints a greeting message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(DUKE_LOGO);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        showDivider();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(DUKE_GREETINGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        showDivider();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints a bye message."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void showByeMessage() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(DUKE_BYE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints a message indicating a successful load."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void showLoadSuccessful() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(TASK_LOAD_SUCCESSFUL);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints a message indicating a load error."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void showLoadError() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(ERROR_TASK_LOAD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints a message indicating an error with the formatting of the file contents."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void showFileFormatError() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(ERROR_TASK_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints a message indicating a save error."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void showSaveError() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println(ERROR_TASK_SAVE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns a string representing a line of input from the user."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Line of input from user."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 106
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "deadline do homework /by 2020-09-27 23:59"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "event go to school /at 2020-09-29 07:30"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "blah"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "deadline write user stories"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "deadline write user stories /by"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "deadline write user stories /by 2359"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "deadline write user stories /by 2020-10-03 23:59"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "deadline /by 2020-10-03 23:59"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "event meet up with cs2113 group"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "event meet up with cs2113 group /at"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "event meet up with cs2113 group /at 11am"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "event meet up with cs2113 group /at 2020-09-29 11:00"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "event /at 2020-09-29 11:00"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "hello world"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done 6"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done x"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done 2x"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "delete 6"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "find"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "find x"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "find home"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "find WORK"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "find meet up"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "find e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "date 2020-09-29"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "date 2020-09-29 a"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "date 2020"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 52
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\ui\\*.java ..\\src\\main\\java\\duke\\storage\\*.java ..\\src\\main\\java\\duke\\parser\\*.java ..\\src\\main\\java\\duke\\command\\*.java ..\\src\\main\\java\\duke\\taskmanager\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 2,
      "-": 19
    }
  }
]
