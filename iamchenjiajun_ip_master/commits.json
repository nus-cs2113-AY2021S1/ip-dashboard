{
  "authorDailyContributionsMap": {
    "iamchenjiajun": [
      {
        "date": "2020-08-17",
        "commitResults": [
          {
            "hash": "b9ae495fc0ffe9af0be74de88202f3035d00556f",
            "messageTitle": "Add greeting on launch (Level-0)",
            "messageBody": "",
            "tags": [
              "Level-0"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 21,
                "deletions": 0
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-26",
        "commitResults": [
          {
            "hash": "265e9180516268bf149944feddb8e9bf38b2cab4",
            "messageTitle": "Add REPL to process user input Echoes all user commands except \"bye\" which terminates the program.",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 27,
                "deletions": 3
              }
            }
          },
          {
            "hash": "a988b12cb03767f9525613fceabdca8760522962",
            "messageTitle": "Update divider text This is done to customize the chatbot.",
            "messageBody": "",
            "tags": [
              "Level-1"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "8746fe885eac43652b67bb5ba50483f8a3e92b79",
            "messageTitle": "Add ability to store and list text",
            "messageBody": "",
            "tags": [
              "Level-2"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 15,
                "deletions": 1
              }
            }
          },
          {
            "hash": "014136acb8391e0c11141c07efcb8ab91e3499d2",
            "messageTitle": "Move logo display string into greet()",
            "messageBody": "Greeting logo string is in the main function, which has similar\nfunctionality as greet().\n\nThis groups the greetings into a single function for improved\nreadability in the main function.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 6,
                "deletions": 7
              }
            }
          },
          {
            "hash": "fbe41fd4878247ee2d4094d729c9e14ea61ea3ed",
            "messageTitle": "Add the ability to mark tasks as done",
            "messageBody": "Tasks are represented by strings stored in an array.\n\nFunctionality and data of tasks are separated and hard to extend.\n\nAbstracting each task into the Task class allows functionality to be\ngrouped with data. This improves code readability and makes it easier\nto add tasks related features.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 33,
                "deletions": 13
              }
            }
          },
          {
            "hash": "20cc37110cae8bf2120ed71bdce1447d857a1597",
            "messageTitle": "Remove unused function echo()",
            "messageBody": "",
            "tags": [
              "Level-3"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 0,
                "deletions": 4
              }
            }
          },
          {
            "hash": "076985ddb5a55361273e42bcebd4d2ac8a96746e",
            "messageTitle": "Update code to comply with standard",
            "messageBody": "",
            "tags": [
              "A-CodingStandard"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 5,
                "deletions": 5
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-02",
        "commitResults": [
          {
            "hash": "bf6dcba55c4df67d1ec8a4655464e15f12d46a28",
            "messageTitle": "Add toString() method to Task",
            "messageBody": "There are instances where Task needs to be printed with\nthe same formatting.\n\nBy using overriding toString() method, the string\u0027s formatting is\nrefactored to a single function in the codebase.\n\nThis reduces code duplication and enhances code readability,\nallowing it to be modified from a single function in the code.\nIt can also be overridden by subclasses for different formatting.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 7,
                "deletions": 2
              }
            }
          },
          {
            "hash": "2dd55b41aeceb29bd9ad274d39097a9415edd4c6",
            "messageTitle": "Add support for tracking three types of tasks.",
            "messageBody": "Task is being used to to track user\u0027s tasks.\n\nThere may be different types of tasks that users want to store,\nsuch as todos, deadlines and events.\n\nThree different types of tasks are added as subclasses to Task.\nThese classes are Todo, Deadline and Event, which has additional\nproperties to track additional information about these Tasks.\n\nPolymorphic code allows us to use a single collection to store\nall the user\u0027s Tasks, and use the call the same methods, thus\nsimplifying the code.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 65,
                "deletions": 7
              }
            }
          },
          {
            "hash": "dce5f37e956b647945b4abb70acedb6199da29bb",
            "messageTitle": "Add automated text UI testing with I/O redirection",
            "messageBody": "Symbols that indicate status icons for Tasks are emojis, which\ncaused encoding errors in testing output.\n\nThe symbols have been replaced with other characters to remove\nthe cause of these errors.\n",
            "tags": [
              "A-TextUiTesting"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 12,
                "deletions": 0
              },
              "java": {
                "insertions": 1,
                "deletions": 1
              },
              "bat": {
                "insertions": 2,
                "deletions": 2
              }
            }
          },
          {
            "hash": "704e5c0e557ab1427b3f3ace26885b4be642ff01",
            "messageTitle": "Update REPL to use switch statement for commands",
            "messageBody": "The loop uses if-else statements to match user commands. As\nmore commands are added, the structure starts to become messy.\n\nUsing a switch statement to match the first word allows us to label\neach part of the code more clearly to improve code readability.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 19,
                "deletions": 10
              }
            }
          },
          {
            "hash": "655477c8f7cc61df04a881066d9c113955415049",
            "messageTitle": "Update print statement for event",
            "messageBody": "Expected test output was also updated to match the\nupdated print statement.\n",
            "tags": [
              "Level-4"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "386e31abb1b58d45c2cdd1ea3cbbfa73367f0ccd",
            "messageTitle": "Move Task related functionality into TaskManager",
            "messageBody": "Both REPL and Task related functionality and data exists in the Duke\nclass, making the code disorganized.\n\nTask related functionality and data has been abstracted into\nTaskManager, which manages all Task functionality, such as adding\nTasks.\n\nBy abstracting code into Task Manager, the main function is cleaned\nup and related functionality is grouped into a single class.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 58,
                "deletions": 29
              }
            }
          },
          {
            "hash": "a91bfb694e7793296bb6c5b0cbd8892a92ed5e08",
            "messageTitle": "Refactor max tasks size as a constant",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 2,
                "deletions": 1
              }
            }
          },
          {
            "hash": "f4a0cede447a1c5f1c784694b614118e2c4d6da1",
            "messageTitle": "Refactor command strings as constants",
            "messageBody": "",
            "tags": [
              "A-CodeQuality"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 13,
                "deletions": 6
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-09",
        "commitResults": [
          {
            "hash": "af8ea5664868227a7ec97d054a39b8e9bc3dbd42",
            "messageTitle": "Refactor Duke\u0027s output strings as constants",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 15,
                "deletions": 10
              }
            }
          },
          {
            "hash": "953bfcbb8fa223aa929a47acb8ca060debbbdaf7",
            "messageTitle": "Add error handling for incorrect inputs",
            "messageBody": "The program has no way of handling invalid input from users, and usually\nresults in the program crashing. We want Duke to handle expected invalid\nuser input, so that the program can continue to run. Incorrect inputs by\nusers are invalid commands, invalid argument length, and invalid\narguments (such as giving \u0027done\u0027 followed by a non-integer, or an out of\nrange value).\n\nThree exception classes were added, two of which extends DukeException.\nInvalidArgumentException is thrown when the user\u0027s argument is invalid,\nand UnknownCommandException is thrown when the user\u0027s command is\ninvalid. The switch statement for handling commands has been moved to\nparseCommand().\n\nThis allows us to separate the main working code from the error handling\ncode which maintains code readability and better follow the SLAP\nprinciples.\n\nA getter function was also added to get the current tasks count in\nTaskManager.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 111,
                "deletions": 37
              }
            }
          },
          {
            "hash": "4581caa7b238db7f4f42b94f9ca541fe704ea2db",
            "messageTitle": "Update Task to abstract class",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 1,
                "deletions": 8
              }
            }
          },
          {
            "hash": "260a81191da9e74eaa583dad357c303e2837f863",
            "messageTitle": "Refactor error string into Duke as constant",
            "messageBody": "This puts all the error strings into one place in the code, making the\nstrings easier to modify.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 3,
                "deletions": 3
              }
            }
          },
          {
            "hash": "4cbc63eaa1525afb4e1d83484afe86221d398063",
            "messageTitle": "Update error strings in Duke",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 7,
                "deletions": 4
              }
            }
          },
          {
            "hash": "7ba911e994d392a4627fc15b5a1d032992eb0231",
            "messageTitle": "Update tests to test error handling",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 22,
                "deletions": 0
              }
            }
          },
          {
            "hash": "ab2047e1f01719e511298cc006b3380e75d0f0d4",
            "messageTitle": "Divide classes into packages",
            "messageBody": "All classes are not under any packages, and there is a moderate amount\nof files in the same directory.\n\nThis makes the code hard to manage as files and the directory structure\ndoes not give any indication to the classes that are being used in the\nproject.\n\nA duke package is created, which contains two other packages: duke.task\nand duke.exceptions, to contain the two classes, Task and DukeException,\nas well as their subclasses, that are being used in the main Duke\nprogram.\n\nThis allows the classes to be organised into packages for easier\nmanagement and the directory structure gives us information about the\nclasses being used in the project. By grouping related classes together,\nthe code is easier to navigate, maintain and extend.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 28,
                "deletions": 0
              }
            }
          },
          {
            "hash": "d1cf1c206ac8ef57338b246c443fe4c6a07ae842",
            "messageTitle": "Update runtest.bat to match new file structure",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "bat": {
                "insertions": 1,
                "deletions": 1
              }
            }
          }
        ]
      }
    ]
  },
  "authorFileTypeContributionMap": {
    "iamchenjiajun": {
      "java": 293,
      "md": 0,
      "sh": 0,
      "bat": 2,
      "gradle": 0,
      "txt": 34
    }
  },
  "authorContributionVariance": {
    "iamchenjiajun": 4459.649
  },
  "authorDisplayNameMap": {
    "iamchenjiajun": "CS2113-T14-3 CHEN.. JUN"
  }
}
