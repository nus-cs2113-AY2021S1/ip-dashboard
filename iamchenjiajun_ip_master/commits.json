{
  "authorDailyContributionsMap": {
    "iamchenjiajun": [
      {
        "date": "2020-08-17",
        "commitResults": [
          {
            "hash": "b9ae495fc0ffe9af0be74de88202f3035d00556f",
            "messageTitle": "Add greeting on launch (Level-0)",
            "messageBody": "",
            "tags": [
              "Level-0"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 21,
                "deletions": 0
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-26",
        "commitResults": [
          {
            "hash": "265e9180516268bf149944feddb8e9bf38b2cab4",
            "messageTitle": "Add REPL to process user input Echoes all user commands except \"bye\" which terminates the program.",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 27,
                "deletions": 3
              }
            }
          },
          {
            "hash": "a988b12cb03767f9525613fceabdca8760522962",
            "messageTitle": "Update divider text This is done to customize the chatbot.",
            "messageBody": "",
            "tags": [
              "Level-1"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "8746fe885eac43652b67bb5ba50483f8a3e92b79",
            "messageTitle": "Add ability to store and list text",
            "messageBody": "",
            "tags": [
              "Level-2"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 15,
                "deletions": 1
              }
            }
          },
          {
            "hash": "014136acb8391e0c11141c07efcb8ab91e3499d2",
            "messageTitle": "Move logo display string into greet()",
            "messageBody": "Greeting logo string is in the main function, which has similar\nfunctionality as greet().\n\nThis groups the greetings into a single function for improved\nreadability in the main function.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 6,
                "deletions": 7
              }
            }
          },
          {
            "hash": "fbe41fd4878247ee2d4094d729c9e14ea61ea3ed",
            "messageTitle": "Add the ability to mark tasks as done",
            "messageBody": "Tasks are represented by strings stored in an array.\n\nFunctionality and data of tasks are separated and hard to extend.\n\nAbstracting each task into the Task class allows functionality to be\ngrouped with data. This improves code readability and makes it easier\nto add tasks related features.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 33,
                "deletions": 13
              }
            }
          },
          {
            "hash": "20cc37110cae8bf2120ed71bdce1447d857a1597",
            "messageTitle": "Remove unused function echo()",
            "messageBody": "",
            "tags": [
              "Level-3"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 0,
                "deletions": 4
              }
            }
          },
          {
            "hash": "076985ddb5a55361273e42bcebd4d2ac8a96746e",
            "messageTitle": "Update code to comply with standard",
            "messageBody": "",
            "tags": [
              "A-CodingStandard"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 5,
                "deletions": 5
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-02",
        "commitResults": [
          {
            "hash": "bf6dcba55c4df67d1ec8a4655464e15f12d46a28",
            "messageTitle": "Add toString() method to Task",
            "messageBody": "There are instances where Task needs to be printed with\nthe same formatting.\n\nBy using overriding toString() method, the string\u0027s formatting is\nrefactored to a single function in the codebase.\n\nThis reduces code duplication and enhances code readability,\nallowing it to be modified from a single function in the code.\nIt can also be overridden by subclasses for different formatting.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 7,
                "deletions": 2
              }
            }
          },
          {
            "hash": "2dd55b41aeceb29bd9ad274d39097a9415edd4c6",
            "messageTitle": "Add support for tracking three types of tasks.",
            "messageBody": "Task is being used to to track user\u0027s tasks.\n\nThere may be different types of tasks that users want to store,\nsuch as todos, deadlines and events.\n\nThree different types of tasks are added as subclasses to Task.\nThese classes are Todo, Deadline and Event, which has additional\nproperties to track additional information about these Tasks.\n\nPolymorphic code allows us to use a single collection to store\nall the user\u0027s Tasks, and use the call the same methods, thus\nsimplifying the code.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 65,
                "deletions": 7
              }
            }
          },
          {
            "hash": "dce5f37e956b647945b4abb70acedb6199da29bb",
            "messageTitle": "Add automated text UI testing with I/O redirection",
            "messageBody": "Symbols that indicate status icons for Tasks are emojis, which\ncaused encoding errors in testing output.\n\nThe symbols have been replaced with other characters to remove\nthe cause of these errors.\n",
            "tags": [
              "A-TextUiTesting"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 12,
                "deletions": 0
              },
              "java": {
                "insertions": 1,
                "deletions": 1
              },
              "bat": {
                "insertions": 2,
                "deletions": 2
              }
            }
          },
          {
            "hash": "704e5c0e557ab1427b3f3ace26885b4be642ff01",
            "messageTitle": "Update REPL to use switch statement for commands",
            "messageBody": "The loop uses if-else statements to match user commands. As\nmore commands are added, the structure starts to become messy.\n\nUsing a switch statement to match the first word allows us to label\neach part of the code more clearly to improve code readability.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 19,
                "deletions": 10
              }
            }
          },
          {
            "hash": "655477c8f7cc61df04a881066d9c113955415049",
            "messageTitle": "Update print statement for event",
            "messageBody": "Expected test output was also updated to match the\nupdated print statement.\n",
            "tags": [
              "Level-4"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "386e31abb1b58d45c2cdd1ea3cbbfa73367f0ccd",
            "messageTitle": "Move Task related functionality into TaskManager",
            "messageBody": "Both REPL and Task related functionality and data exists in the Duke\nclass, making the code disorganized.\n\nTask related functionality and data has been abstracted into\nTaskManager, which manages all Task functionality, such as adding\nTasks.\n\nBy abstracting code into Task Manager, the main function is cleaned\nup and related functionality is grouped into a single class.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 58,
                "deletions": 29
              }
            }
          },
          {
            "hash": "a91bfb694e7793296bb6c5b0cbd8892a92ed5e08",
            "messageTitle": "Refactor max tasks size as a constant",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 2,
                "deletions": 1
              }
            }
          },
          {
            "hash": "f4a0cede447a1c5f1c784694b614118e2c4d6da1",
            "messageTitle": "Refactor command strings as constants",
            "messageBody": "",
            "tags": [
              "A-CodeQuality"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 13,
                "deletions": 6
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-09",
        "commitResults": [
          {
            "hash": "af8ea5664868227a7ec97d054a39b8e9bc3dbd42",
            "messageTitle": "Refactor Duke\u0027s output strings as constants",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 15,
                "deletions": 10
              }
            }
          },
          {
            "hash": "953bfcbb8fa223aa929a47acb8ca060debbbdaf7",
            "messageTitle": "Add error handling for incorrect inputs",
            "messageBody": "The program has no way of handling invalid input from users, and usually\nresults in the program crashing. We want Duke to handle expected invalid\nuser input, so that the program can continue to run. Incorrect inputs by\nusers are invalid commands, invalid argument length, and invalid\narguments (such as giving \u0027done\u0027 followed by a non-integer, or an out of\nrange value).\n\nThree exception classes were added, two of which extends DukeException.\nInvalidArgumentException is thrown when the user\u0027s argument is invalid,\nand UnknownCommandException is thrown when the user\u0027s command is\ninvalid. The switch statement for handling commands has been moved to\nparseCommand().\n\nThis allows us to separate the main working code from the error handling\ncode which maintains code readability and better follow the SLAP\nprinciples.\n\nA getter function was also added to get the current tasks count in\nTaskManager.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 111,
                "deletions": 37
              }
            }
          },
          {
            "hash": "4581caa7b238db7f4f42b94f9ca541fe704ea2db",
            "messageTitle": "Update Task to abstract class",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 1,
                "deletions": 8
              }
            }
          },
          {
            "hash": "260a81191da9e74eaa583dad357c303e2837f863",
            "messageTitle": "Refactor error string into Duke as constant",
            "messageBody": "This puts all the error strings into one place in the code, making the\nstrings easier to modify.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 3,
                "deletions": 3
              }
            }
          },
          {
            "hash": "4cbc63eaa1525afb4e1d83484afe86221d398063",
            "messageTitle": "Update error strings in Duke",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 7,
                "deletions": 4
              }
            }
          },
          {
            "hash": "7ba911e994d392a4627fc15b5a1d032992eb0231",
            "messageTitle": "Update tests to test error handling",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 22,
                "deletions": 0
              }
            }
          },
          {
            "hash": "ab2047e1f01719e511298cc006b3380e75d0f0d4",
            "messageTitle": "Divide classes into packages",
            "messageBody": "All classes are not under any packages, and there is a moderate amount\nof files in the same directory.\n\nThis makes the code hard to manage as files and the directory structure\ndoes not give any indication to the classes that are being used in the\nproject.\n\nA duke package is created, which contains two other packages: duke.task\nand duke.exceptions, to contain the two classes, Task and DukeException,\nas well as their subclasses, that are being used in the main Duke\nprogram.\n\nThis allows the classes to be organised into packages for easier\nmanagement and the directory structure gives us information about the\nclasses being used in the project. By grouping related classes together,\nthe code is easier to navigate, maintain and extend.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 28,
                "deletions": 0
              }
            }
          },
          {
            "hash": "d1cf1c206ac8ef57338b246c443fe4c6a07ae842",
            "messageTitle": "Update runtest.bat to match new file structure",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "bat": {
                "insertions": 1,
                "deletions": 1
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-15",
        "commitResults": [
          {
            "hash": "02e8fe92d2a37197fe7f5da9076f17e24f12cb01",
            "messageTitle": "Update runtest.bat to match file structure",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "bat": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "26794bbd38b3f1e3504743bc93afa6aa0f21ddc4",
            "messageTitle": "Update TaskManager to use ArrayList to store Tasks",
            "messageBody": "Tasks are stored in a fixed size Array, and only allows the user to\nstore a limted amount of tasks.\n\nTaskManager is updated to store Tasks with an ArrayList.\n\nBy storing Tasks with an ArrayList, the user is able to store an\nindefinite amount of Tasks. It also removes the need to store the\nsize of the Array with tasksCount, as the ArrayList provides a\nmethod to access the current size of the list.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 15,
                "deletions": 19
              }
            }
          },
          {
            "hash": "a4f0b4874859900aed4c44a7b7f601a5529a81a4",
            "messageTitle": "Add support for deleting tasks from the list",
            "messageBody": "TaskManager does not have support for deleting Tasks.\n\nA new method for deleting Tasks was added to TaskManager, which removes\nthe Task using ArrayList\u0027s remove method. A new command was added to\nDuke, which calls the new method in TaskManager to remove the Task\nat the given index.\n\nThis allows the user to remove the task, and TaskManager handles the\nTasks related functionality, while Duke handles the command related\nfunctionality.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 18,
                "deletions": 3
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-16",
        "commitResults": [
          {
            "hash": "df97e7a1f5f71f49f44eeb6be06494c2dff0657d",
            "messageTitle": "Add saving and loading tasks from file",
            "messageBody": "FileFormatException is thrown when the user\u0027s file format is invalid\nTask class has an abstract method toSaveString, which is called\nduring saving of data to file.\nloadTasks, saveTasks and checkFileExists are new methods in TaskManager\nthat handle the loading, saving and creation of data files.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 128,
                "deletions": 16
              }
            }
          },
          {
            "hash": "00b4dc7744e6ab503f7c449db5b1610bbf498dd9",
            "messageTitle": "Update test expected input and output",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 4,
                "deletions": 0
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-24",
        "commitResults": [
          {
            "hash": "8aeda5b0e1172c495a0418d135cb8b38feec5c60",
            "messageTitle": "Refactor Duke to run on an instance in main",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 5,
                "deletions": 1
              }
            }
          },
          {
            "hash": "b565b0b5344331f0e895a17e3c8b7697dd621ff4",
            "messageTitle": "Update methods in Duke to non-static",
            "messageBody": "Currently, methods in Duke are static, and static methods should be\navoided in an OOP application as they are considered to be procedural.\n\nThe static keyword has been removed from all methods in the Duke class.\n\nAs code has been previously refactored into the run method, and Duke\nruns in an instance, we no longer need static methods and static\nvariables, which makes the code more testable.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 12,
                "deletions": 8
              }
            }
          },
          {
            "hash": "9c437ba19689226c3f96cf63c6359d556ec029dd",
            "messageTitle": "Refactor Ui class to deal with user interaction",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 47,
                "deletions": 32
              }
            }
          },
          {
            "hash": "cba8ab71250e7e9ecfb4f1a2374d75615e150cb7",
            "messageTitle": "Update build directories in runtest.bat",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "bat": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "523f9d6572adb3f34e7471596fb5da1ec7e0b6dc",
            "messageTitle": "Refactor Storage class to load and save tasks",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 106,
                "deletions": 74
              }
            }
          },
          {
            "hash": "510df58b5963931b6241b99e36d60672ee3e5de6",
            "messageTitle": "Update build directories in runtest.bat",
            "messageBody": "This is done to include the new package that contains the Storage class\n",
            "fileTypesAndContributionMap": {
              "bat": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "61594d2bfc23021c2fba43941c29af2ed57b2374",
            "messageTitle": "Refactor error strings and read command into Ui",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 51,
                "deletions": 33
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-25",
        "commitResults": [
          {
            "hash": "6a8a77564092e9ea3345d1cb556e6496884ec043",
            "messageTitle": "Refactor Parser class to parse user input",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 114,
                "deletions": 92
              }
            }
          },
          {
            "hash": "717c8750866533456b0ceb516ddfdd91d8f395f4",
            "messageTitle": "Update build directories in runtest.bat",
            "messageBody": "This includes the package containing the new Parser class.\n",
            "fileTypesAndContributionMap": {
              "bat": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "2c604b713feb1d6fbb19883cdcbd8a32814927c7",
            "messageTitle": "Refactor commands into Command classes",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 184,
                "deletions": 36
              }
            }
          },
          {
            "hash": "8442de1ff8fc5fd2966c37d188caebe871431df1",
            "messageTitle": "Refactor TaskManager into its own package",
            "messageBody": "This makes the entry point of the program more obvious as there is now\nonly 1 file in the highest package directory. The imports in other\nsource files are also updated to the correct package.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 11,
                "deletions": 10
              }
            }
          },
          {
            "hash": "87137f4406e53ab54ffe09d628dacc6bd914d829",
            "messageTitle": "Update build directories in runtest.bat",
            "messageBody": "This includes the package containing the new Command class and its\nsubclasses, as well as the new package containing TaskManager.\n",
            "fileTypesAndContributionMap": {
              "bat": {
                "insertions": 1,
                "deletions": 1
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-26",
        "commitResults": [
          {
            "hash": "01bda51219fd5be163b726c6cd56fe80abe7723c",
            "messageTitle": "Refactor creating commands into separate functions",
            "messageBody": "The switch statement in Parser.parseCommand is too long, and thus the\nreadability of the code is reduced. This also causes the function to\nbe lengthy.\n\nLet\u0027s refactor non-trivial functionality of the switch statement into\nits own function that returns a Command.\n\nThis makes the code more readable and adhere to SLAP principles.\n\nChecking of validity of indexes in arguments such as done and delete is\nrefactored into TaskManager from Parser as it is a functionality that\nshould be managed by the TaskManager instead.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 75,
                "deletions": 61
              }
            }
          },
          {
            "hash": "fbe6855dda50ea2fba11771174fd7c86a942a5e1",
            "messageTitle": "Remove redundant parameters in TaskManager methods",
            "messageBody": "Some functions in TaskManager methods have a boolean parameter\nshouldPrintMessage that decides if the output should be printed to the\nuser. This was previously added as loading from file uses these methods\nand thus the output should not be shown to the user. However, this is\nnow deprecated and should be removed from the code.\n\nThis boolean parameter has been removed from methods in TaskManager that\ncontain it.\n\nThe removal of deprecated code leads to better readability.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 19,
                "deletions": 26
              }
            }
          },
          {
            "hash": "2fa93c1e95759721eec01e805dc8349e32fed230",
            "messageTitle": "Add Parser method to check exact argument length",
            "messageBody": "checkArgumentsLength has been renamed to checkMinimumArgumentsLength to\nmake the method name more descriptive.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 16,
                "deletions": 9
              }
            }
          },
          {
            "hash": "2f59dfeff120941cf56fb87c4f6da98313cd95c4",
            "messageTitle": "Add new strings for errors when deleting tasks",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 8,
                "deletions": 7
              }
            }
          },
          {
            "hash": "9a19ea4dc38d63d61fbdedcff55bd0e0821c2e10",
            "messageTitle": "Add exception to handle invalid indexes",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 27,
                "deletions": 11
              }
            }
          },
          {
            "hash": "7863808d04425d5485b1010f7a27322317d17b23",
            "messageTitle": "Refactor expected/min argument length as constants",
            "messageBody": "Expected and minimum argument length for each command are used in the\ncode as magic numbers, which may confuse readers of the code.\n\nThese have been refactored as constants in their corresponding Command\nsubclass.\n\nThis improves readability of the code by removing magic numbers.\n\ncheckMinimumArgumentsLength and checkExactArgumentsLength has been\nrenamed to checkMinArgumentLength and checkExactArgumentLength to\nbetter reflect checking a singular argument string, and to make the\nvariable name shorter.\n",
            "tags": [
              "A-MoreOOP"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 15,
                "deletions": 9
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-27",
        "commitResults": [
          {
            "hash": "51f060cb58b9746d360a06a48034fa0065576c33",
            "messageTitle": "Update Deadline and Event to accept date and time",
            "messageBody": "Deadline and Event stores the deadline and event as strings, which is\nfine for the current set of functionality but may be hard to extend the\nprogram to emulate calendar functionality.\n\nThe String field in Deadline and Event were changed to LocalDateTime\nobjects, and the string containing the date and time is parsed in the\nconstructor of the Deadline and Event objects before they are stored.\n\nThis allows the Deadline and Event objects to store LocalDateTime\nobjects, which allows more functionality to be added by using the\nLocalDateTime API. By parsing the LocalDateTime in the constructors,\nwe can prevent code duplication as Storage calls the constructor when\nloading Tasks from file. This is achieved by storing the LocalDateTime\nin the same string format as it was parsed from.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 23,
                "deletions": 9
              }
            }
          },
          {
            "hash": "57d935035469350fffbcf722c037a40267b7f0e0",
            "messageTitle": "Add exceptions for date time and handle them",
            "messageBody": "DateTimeFormatException is a subclass of DukeException and is thrown\nwhen the user enters a wrong format for the LocalDateTime field during\nparsing. This exception is handled in the main Duke class.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 54,
                "deletions": 10
              }
            }
          },
          {
            "hash": "eb87a1931de815a5d41d0904d07024414e2d0ba6",
            "messageTitle": "Update whitespace between methods",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 1,
                "deletions": 0
              }
            }
          },
          {
            "hash": "58da62adfcc0ff3b601cb599f8896fbdc52a46d1",
            "messageTitle": "Add DatedTask interface for tasks with datetime",
            "messageBody": "Filtering is needed to check if a Task is a Deadline or Event to extract\nLocalDateTime objects from them. This makes the code hard to extend when\nadding new functionality to dated Tasks, or when checking if a Task has\na LocalDateTime field.\n\nAn interface called DatedTask has been added which is implemented by\nTasks with a LocalDateTime field.\n\nThis enables easier checking of Tasks with LocalDateTime fields and\nmethods can be added to the interface to extract the field from objects\nthat implement this interface.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 21,
                "deletions": 2
              }
            }
          },
          {
            "hash": "e513b906b93220341c9b1a487423e7706956396a",
            "messageTitle": "Add date command to filter tasks on a given date",
            "messageBody": "DateCommand is the command executed when user is searching for a date.\nDateCommand calls TaskManager.printTasksOnDate, which filters dates\nfrom DatedTasks and prints the tasks.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 59,
                "deletions": 3
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-28",
        "commitResults": [
          {
            "hash": "f7cb3775ef7f738d6c8971da202404985aa32b39",
            "messageTitle": "Update test input/output for new commands",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 12,
                "deletions": 5
              }
            }
          },
          {
            "hash": "bbae596a663d5c9e212e2ab7d4de418c0ef5c7cb",
            "messageTitle": "Add find command to search for tasks",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 44,
                "deletions": 0
              }
            }
          },
          {
            "hash": "101bbd0551c25f0595cf0b36ec873e1085f2ddfc",
            "messageTitle": "Add error string for no find argument",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 2,
                "deletions": 1
              }
            }
          },
          {
            "hash": "bf8e43130ffec61aca085efd1bdf58166376422c",
            "messageTitle": "Update find command to be case insensitive",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "88e33d944ed81fd00a840f668a14e1bc33432d78",
            "messageTitle": "Update test input/output for find command",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 7,
                "deletions": 0
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-29",
        "commitResults": [
          {
            "hash": "6dfcc868da4fba3f2f4c93d8bcceb6c95868caf4",
            "messageTitle": "Add JavaDoc for Storage class.",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 29,
                "deletions": 0
              }
            }
          },
          {
            "hash": "f7baa71047b0b197ba2871bcd3eb100e5844e239",
            "messageTitle": "Add JavaDoc for Parser class.",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 71,
                "deletions": 0
              }
            }
          },
          {
            "hash": "809521eb5f4739edbba9d1694cbb4eb4fd47299b",
            "messageTitle": "Add JavaDoc for TaskManager class.",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 53,
                "deletions": 0
              }
            }
          },
          {
            "hash": "77ed31a8696f5c4cb0d5ff053fb13bee24a04e7b",
            "messageTitle": "Add JavaDoc for Ui class.",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 29,
                "deletions": 0
              }
            }
          },
          {
            "hash": "4e0a8b4e03606b9b12811e7b89a5f959554f3bb3",
            "messageTitle": "Add JavaDoc for Task class.",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 33,
                "deletions": 0
              }
            }
          },
          {
            "hash": "7213bbc4aad15dd95d1c0aa049e5528c7f2aacb2",
            "messageTitle": "Add JavaDoc for DukeException and its subclasses.",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 32,
                "deletions": 1
              }
            }
          },
          {
            "hash": "531fda65a0516a73eae7dc420552f07e7bbe228e",
            "messageTitle": "Add JavaDoc for Command and its subclasses.",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 95,
                "deletions": 0
              }
            }
          },
          {
            "hash": "0293c72ac4b0d7eae62c817cb9e96778a5351b16",
            "messageTitle": "Add JavaDoc for Duke class.",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 10,
                "deletions": 0
              }
            }
          },
          {
            "hash": "5f452ce474770d5d1695c08eea83bb5aa36299ff",
            "messageTitle": "Add JavaDoc for Task subclasses.",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 12,
                "deletions": 0
              }
            }
          },
          {
            "hash": "18acccdf561cc26964f56c40bd55ca2d6544a138",
            "messageTitle": "Update JavaDoc for Task and its subclasses.",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 43,
                "deletions": 13
              }
            }
          },
          {
            "hash": "2b4937aa93b005aac39b03580db7d883482e9e73",
            "messageTitle": "Update test cases",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "fe682717c3ff8b9324c1c82b731bc48b0b4c18d7",
            "messageTitle": "Remove unused import.",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 0,
                "deletions": 2
              }
            }
          },
          {
            "hash": "70b8dd90cab4638978123ba413d9aaa69dc76e95",
            "messageTitle": "Update JavaDoc for new merged classes.",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 35,
                "deletions": 0
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-30",
        "commitResults": [
          {
            "hash": "e6c3b43ed8df2c4bfa30169a15850570b6c784a4",
            "messageTitle": "Update JavaDoc for new merged methods",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 13,
                "deletions": 0
              }
            }
          },
          {
            "hash": "ff15a5c8816240e6a83801d672ed7f07c947a5df",
            "messageTitle": "Fix typo in JavaDoc in Parser",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "38c7a37a772824aae1ad6d61100545ec056c8f71",
            "messageTitle": "Update JavaDoc in DatedTask interface",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 15,
                "deletions": 0
              }
            }
          },
          {
            "hash": "c46cbc1d9543afa97a1d9612376b7b55b3fbee40",
            "messageTitle": "Add JavaDoc in FindCommand class",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 11,
                "deletions": 2
              }
            }
          },
          {
            "hash": "5613fd30e87c2e484c999a813297d8d754d8ed0a",
            "messageTitle": "Update User Guide to include features",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "md": {
                "insertions": 144,
                "deletions": 10
              }
            }
          }
        ]
      }
    ]
  },
  "authorFileTypeContributionMap": {
    "iamchenjiajun": {
      "java": 1340,
      "md": 144,
      "sh": 0,
      "bat": 2,
      "gradle": 0,
      "txt": 52
    }
  },
  "authorContributionVariance": {
    "iamchenjiajun": 14623.042
  },
  "authorDisplayNameMap": {
    "iamchenjiajun": "CS2113-T14-3 CHEN.. JUN"
  }
}
