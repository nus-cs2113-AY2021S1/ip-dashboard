[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "# This is Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "There are many dukes like it but this one is mine."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JohnNub": 2,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(\"Hello! I\u0027m duke.main.Duke\\n\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                \"What can I do for you?\", true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (userInput.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (userInput.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                listTasks(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (userInput.toLowerCase().startsWith(\"done \")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                setDone(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (userInput.toLowerCase().startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                createDeadline(userInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (userInput.toLowerCase().startsWith(\"event\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                createEvent(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (userInput.toLowerCase().startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                createTodo(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                printOutput(\"Commands: bye list todo deadline event\", false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(\"Bye. Hope to see you again soon!\", true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void listTasks(String userInput) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops the list is empty!\", false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String tl \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Task t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            tl +\u003d (i + 1) + \". \" + t.toString() + System.lineSeparator();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(tl, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void setDone(String userInput) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String taskStr \u003d userInput.substring(4).strip();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Task t \u003d taskList.get(Integer.parseInt(taskStr) - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            t.setDone(true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Nice! I\u0027ve marked this task as done:\\n\\t\" + t.toString(), false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! Please enter a number for the task!\", true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! We couldn\u0027t find that entry in the list!\", true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (Exception e){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! That didn\u0027t work, please check your input and try again!\", true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void createDeadline(String userInput) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (!userInput.toLowerCase().contains(\"/by\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"usage: deadline \u003cname of item\u003e /by \u003cdd-MMM-yyyy HH:mm:ss OR next [weekday]\u003e\", true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String[] taskArgs \u003d userInput.substring(8).strip().split(\"/by\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Deadline d \u003d new Deadline(taskArgs[0].strip(), taskArgs[1].strip());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            taskList.add(d);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Added new deadline: \" + taskArgs[0] + System.lineSeparator() + \"\\tDue by: \" + d.getDue());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Unable to parse date! Please try again.\", true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void createTodo(String userInput) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String taskString \u003d userInput.substring(4).strip();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        ToDo t \u003d new ToDo(taskString);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(\"Added new todo: \" + t.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void createEvent(String userInput) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (!userInput.toLowerCase().contains(\"/at\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"usage: event \u003cname of item\u003e /at \u003cdd-MMM-yyyy HH:mm:ss OR next [weekday]\u003e\", true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String[] taskArgs \u003d userInput.substring(5).strip().split(\"/at\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Event e \u003d new Event(taskArgs[0].strip(), taskArgs[1].strip());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            taskList.add(e);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Added new event: \" + taskArgs[0] + System.lineSeparator() + \"\\tStart at: \" + e.getStart());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Unable to parse date! Please try again.\", true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void printOutput(String text) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(text, false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Prints the output with the divider lines and the supplied text"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Option to make the text non instant for extra effect"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param text string to be printed"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param instant whether the string is printed instantly"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void printOutput(String text, boolean instant) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        final String UNDERSCORES \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        System.out.println(UNDERSCORES);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        //Split text according to the lines to format"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String[] lines \u003d text.split(\"\\\\r?\\\\n\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (String s : lines) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (instant) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                System.out.println(\"  \" + s);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                System.out.print(\"  \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                //charAt is constant time lookup so we do that instead of splitting strings"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                for (int i \u003d 0; i \u003c s.length(); i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    char c \u003d s.charAt(i);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    System.out.print(c);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        Thread.sleep(5);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                System.out.print(System.lineSeparator());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        System.out.println(UNDERSCORES);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 140,
      "-": 10
    }
  },
  {
    "path": "src/main/java/duke/main/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import duke.main.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.next;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private LocalDateTime due;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static final DateTimeFormatter FORMAT_LIST[] \u003d {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"MM dd, yyyy\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm:ss\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MMM-yyyy HH:mm:ss\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yy\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MMM-yy\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Deadline(String s, String deadline) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        tryReadDate(deadline);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * tryReadDate - Attempts to convert the user supplied date string to a machine date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param dateStr The string to be converted"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private void tryReadDate(String dateStr) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        LocalDateTime result \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (DateTimeFormatter dtf : FORMAT_LIST) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                result \u003d LocalDateTime.parse(dateStr, dtf);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (result !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d result;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        //Still failed to read date, try grammar interpretation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (dateStr.toLowerCase().contains(\"next\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (dateStr.toLowerCase().matches(\"next\\\\s*mon.*\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*tue.*\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*wed.*\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*thu.*\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*fri.*\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*sat.*\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*sun.*\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (this.due \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public LocalDateTime getDue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return due;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setDue(LocalDateTime due) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.due \u003d due;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"[D]\" + super.toString() + \" Due: \" + due;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 81
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import duke.main.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.next;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static final DateTimeFormatter FORMAT_LIST[] \u003d {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"MM dd, yyyy\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm:ss\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MMM-yyyy HH:mm:ss\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yy\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MMM-yy\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Event(String s, String startStr) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        tryReadDate(startStr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        end \u003d start;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * tryReadDate - Attempts to convert the user supplied date string to a machine date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * TODO implement end time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param dateStr The string to be converted"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private void tryReadDate(String dateStr) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        LocalDateTime result \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (DateTimeFormatter dtf : FORMAT_LIST) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                result \u003d LocalDateTime.parse(dateStr, dtf);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (result !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d result;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        //Still failed to read date, try grammar interpretation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (dateStr.toLowerCase().contains(\"next\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (dateStr.toLowerCase().matches(\"next\\\\s*mon.*\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*tue.*\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*wed.*\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*thu.*\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*fri.*\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*sat.*\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*sun.*\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (this.start \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"[E]\" + super.toString() + \" Starts: \" + start;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setStart(LocalDateTime start) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setEnd(LocalDateTime end) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 92
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 36
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public ToDo(String s) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "deAdLine do homework /by next thursday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "event new atapon /at next Sat"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "toDo your mom"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "done haha"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "done 30"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "deadline submit report /by next MoN"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 16
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\main\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin duke.main.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 2,
      "-": 19
    }
  }
]
