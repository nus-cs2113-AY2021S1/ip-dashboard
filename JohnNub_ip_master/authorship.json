[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "# This is Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "User guide: https://johnnub.github.io/ip/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JohnNub": 2,
      "-": 2
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### 3 Different Type of Tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Todo - For the most simple of tasks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Deadline - For tasks with a due date"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Event - For tasks with a start and end time"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### Automatic Save and Load"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Application will automatically save all your data after every command and load it on startup. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "No user setup required means it\u0027s simple and easy to use!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### Advanced relative dates"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Instead of entering a date format, specify a day relative to today with simple wording like \"next friday\" or \"end sun\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "to quickly fill up your tasks instead of spending time entering time formats. This provides a great efficiency boost"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "compared to other applications."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### Find that Task!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "With a case insensitive search feature, you can find any task you create by name with convenience. Even if the list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "of tasks get long, you can always find the specific task that you want."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### `bye` - Quits the app"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Stops the application naturally"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "  Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### `list` - Shows list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shows all the tasks in the list along with some information about each task\u0027s status."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "```"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "  1. [D][✘] CS2113T IP Due: 2020-09-18T23:49:01.706936800"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "  2. [T][✘] Another Project"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "  3. [D][✘] something Due: 2020-10-02T17:54:12.952375400"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "  4. [E][✘] something Starts: 2020-10-02T17:58:35.609400800 Ends: 2020-10-02T17:58:35.609400800"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### `delete \u003ctaskIndex\u003e` - Removes task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Removes the specified task by index.  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Index should be an integer larger than 1 representing the index of the item reflected by `list`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`delete 5`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "  Noted! I\u0027ve removed this task from the list:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "  \t[E][✓] Leave Starts: 2020-10-03T21:37:05.966028700 Ends: 2020-10-04T21:37:05.966028700"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### `find \u003cfindString\u003e` - Finds a task by name"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shows all tasks that match the specified argument `findString`  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Returns a list showing the number of items matching the criteria. Or an empty list if there are no matching items"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Find is case insensitive. The returned list preserves the original indexes of the items, allowing you to use find"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "to identify the index of any task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`find some`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "  3. [D][✘] something Due: 2020-10-02T17:54:12.952375400"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "  4. [E][✘] something Starts: 2020-10-02T17:58:35.609400800 Ends: 2020-10-02T17:58:35.609400800"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "```"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### `todo \u003ctaskName\u003e` - Create todo"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Adds a new todo to the list with the specified name"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`todo My Todo`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "  Added new todo: [T][✘] My Todo"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### `deadline \u003cdeadlineName\u003e /by \u003ctime\u003e` - Create deadline"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Adds a new deadline to the list with the specified date and time.  "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Time supports formats like dd/MM/yyyy and dd-MMM-yyyy HH:mm:ss.  "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Alternatively, you may use shorthand terms like \"next friday\" or \"end saturday\" to specify time relative to now."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`deadline my deadline /by next friday`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "  Added new deadline: my deadline"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "\tDue by: 2020-09-10T13:36:29.396448400"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### `event \u003cdeadlineName\u003e /at \u003cstartTime\u003e /to \u003cendTime\u003e` - Create event"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Adds a new event to the list with the specified date and time for starting and ending.  "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Time supports formats like dd/MM/yyyy and dd-MMM-yyyy HH:mm:ss.  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Alternatively, you may use shorthand terms like \"next friday\" or \"end saturday\" to specify time relative to now."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "When using relative time for end time, it will find the next weekday relative to the start time.  "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "The call will fail if the start time is after the end time."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`event vactaion /at next friday /to end thurs`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "```"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "  Added new event: vactaion"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "  \tStart at: 2020-10-02T22:02:28.094886900 Ends : 2020-10-08T23:59:59"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 135,
      "-": 21
    }
  },
  {
    "path": "src/main/java/duke/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        Storage s \u003d new Storage(\"data.duke\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Attempt to load the saved data"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String outcome \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            taskList \u003d s.read();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            outcome \u003d \"I found your saved list of tasks and successfully loaded them!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            outcome \u003d \"I couldn\u0027t find any previously saved data.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            outcome \u003d \"I couldn\u0027t read your saved data! Did you give me read permissions?\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            outcome \u003d \"I couldn\u0027t parse your saved data! Could it be corrupted?\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        Ui ui \u003d new Ui(taskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        ui.printError(outcome);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        while (!ui.shouldShutdown()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui.run();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String writeResult \u003d writeToFile(s, taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (!writeResult.equals(\"\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.printError(writeResult);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        ui.printError(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Routine for writing to file using the Storage object and handling exceptions"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param s Storage object to do the writing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param taskList Task list to be written"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return The output message depending on the result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static String writeToFile(Storage s, ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            s.save(taskList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"I couldn\u0027t save your data to file! Did you give me write permissions?\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"I couldn\u0027t perform the write operation!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 62,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/main/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/duke/main/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    Scanner in;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Given a string input, returns a sanitized and pre-processed UserInput object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param input The string to be processed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return UserInput object containing the command and all arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public UserInput parse(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        userInput \u003d sanitize(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Regex looks silly, you  have to escape the / so you type double \\ to escape the \\ used to escape the /"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String[] output \u003d userInput.split(\"\\\\/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (output.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // There are no arguments supplied"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // Check if the input has any other arguments"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String tmp \u003d output[0].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String cmd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (tmp.indexOf(\u0027 \u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String arg \u003d tmp.substring(tmp.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                cmd \u003d tmp.substring(0, tmp.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                map.put(\"\", arg);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                cmd \u003d tmp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui \u003d new UserInput(cmd, map);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String base \u003d output[0].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (base.indexOf(\u0027 \u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String arg \u003d base.substring(base.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                base \u003d base.substring(0, base.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                map.put(\"\", arg);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            for (int i \u003d 1; i \u003c output.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String tmp \u003d output[i].trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String key;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String val;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (tmp.indexOf(\u0027 \u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    val \u003d tmp.substring(tmp.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    key \u003d tmp.substring(0, tmp.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    val \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    key \u003d tmp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                map.put(key.trim().toLowerCase(), val.trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui \u003d new UserInput(base, map);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * TODO implement string sanitization"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Cleans up the string to ensure that anything else is safe for the rest of the program to handle"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param s String to be sanitized"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return Sanitized string S"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String sanitize(String s) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 76
    }
  },
  {
    "path": "src/main/java/duke/main/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    String path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Reads the saved file and returns the arraylist of tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return ArrayList containing tasks if file is found"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws IOException File is not found or no permission to read"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws ClassNotFoundException Error with casting the serialized object to class"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public ArrayList\u003cTask\u003e read() throws IOException, ClassNotFoundException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        FileInputStream fis \u003d new FileInputStream(path);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        ObjectInputStream ois \u003d new ObjectInputStream(fis);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d (ArrayList\u003cTask\u003e) ois.readObject();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        ois.close();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        fis.close();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Save the provided arraylist of task to file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param taskList ArrayList containing tasks to be saved"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws IOException Error performing write"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e taskList) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        FileOutputStream fos \u003d new FileOutputStream(path);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        oos.writeObject(taskList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        oos.close();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 45
    }
  },
  {
    "path": "src/main/java/duke/main/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private Scanner in;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private boolean shutdown \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Initializes a new UI and prints greeting message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param taskList The Task List if any saved data was found"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Ui(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        System.out.println(\"Hello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(\"Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                \"What can I do for you?\", true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * UI Execution routine. Fetches command from scanner, calls parser and sends the command to the correct function"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String inStr \u003d in.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput userInput \u003d parser.parse(inStr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (userInput.getCommand().equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            shutdown \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else if (userInput.getCommand().equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            listTasks(userInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else if (userInput.getCommand().equalsIgnoreCase(\"done\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            setDone(userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else if (userInput.getCommand().equalsIgnoreCase(\"deadline\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            createDeadline(userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else if (userInput.getCommand().equalsIgnoreCase(\"event\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            createEvent(userInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else if (userInput.getCommand().equalsIgnoreCase(\"todo\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            createTodo(userInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else if (userInput.getCommand().equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            deleteTask(userInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else if (userInput.getCommand().equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            findTask(userInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Commands: bye list done delete todo deadline event find\", false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Lists all the tasks that are currently available"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param userInput UserInput object for command processing (Args ignored for this command)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void listTasks(UserInput userInput) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops the list is empty!\", false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String taskString \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Task t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            taskString +\u003d (i + 1) + \". \" + t.toString() + System.lineSeparator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(taskString, false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Marks the given task as done. requires key \"\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param userInput UserInput object for command processing"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void setDone(UserInput userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (userInput.getNumArgs() \u003c 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! You didn\u0027t provide at least 1 argument!\", true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String arg \u003d userInput.getArg(\"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Task t \u003d taskList.get(Integer.parseInt(arg) - 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            t.setDone(true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Nice! I\u0027ve marked this task as done:\\n\\t\" + t.toString(), false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! Please enter a number for the task!\", true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! We couldn\u0027t find that entry in the list!\", true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! That didn\u0027t work, please check your input and try again!\", true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Creates a new deadline task. Requires key \"\" and \"by\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param userInput UserInput object for command processing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void createDeadline(UserInput userInput) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (userInput.getNumArgs() \u003c 2) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! You didn\u0027t provide at least 2 arguments!\", true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String by \u003d userInput.getArg(\"by\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (by \u003d\u003d null || by.equals(\"\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"usage: deadline \u003cname of item\u003e /by \u003cdd-MMM-yyyy HH:mm:ss OR next [weekday]\u003e\", true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String base \u003d userInput.getArg(\"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (base \u003d\u003d null || base.equals(\"\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! Please provide a name for the deadline!\", true);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Deadline d \u003d new Deadline(base, by);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            taskList.add(d);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Added new deadline: \" + d.getDescription() + System.lineSeparator()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    + \"\\tDue by: \" + d.getDue());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Unable to parse date! Please try again.\", true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Creates a new ToDo task. Requires key \"\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param userInput UserInput object for command processing"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void createTodo(UserInput userInput) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (userInput.getNumArgs() \u003c 1) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! You didn\u0027t provide at least 1 argument!\", true);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String taskString \u003d userInput.getArg(\"\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (taskString \u003d\u003d null || taskString.equals(\"\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! Please provide a name for the ToDo!\", true);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        ToDo t \u003d new ToDo(taskString);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(\"Added new todo: \" + t.toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Creates a new event. Requires key \"\", \"at\" and \"to\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param userInput UserInput object for command processing"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void createEvent(UserInput userInput) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (userInput.getNumArgs() \u003c 3) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! You didn\u0027t provide at least 3 arguments!\", true);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String at \u003d userInput.getArg(\"at\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (at \u003d\u003d null || at.equals(\"\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"usage: event \u003cname of item\u003e /at \u003cdd-MMM-yyyy HH:mm:ss OR next [weekday]\u003e \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    + \"/to \u003cdd-MMM-yyyy HH:mm:ss OR next [weekday]\u003e\", true);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String base \u003d userInput.getArg(\"\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (base \u003d\u003d null || base.equals(\"\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! Please provide a name for the deadline!\", true);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String to \u003d userInput.getArg(\"to\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (to \u003d\u003d null || to.equals(\"\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"usage: event \u003cname of item\u003e /at \u003cdd-MMM-yyyy HH:mm:ss OR next [weekday]\u003e \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    + \"/to \u003cdd-MMM-yyyy HH:mm:ss OR next [weekday]\u003e\", true);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Event e \u003d new Event(base, at, to);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            taskList.add(e);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Added new event: \" + e.getDescription() + System.lineSeparator()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    + \"\\tStart at: \" + e.getStart() + \" Ends : \" + e.getEnd());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Unable to parse date! Please try again.\", true);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Deletes the tasks by index. Requires key \"\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param userInput UserInput object for command processing"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void deleteTask(UserInput userInput) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (userInput.getNumArgs() \u003c 1) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! You didn\u0027t provide at least 1 argument!\", true);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String arg \u003d userInput.getArg(\"\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Task t \u003d taskList.get(Integer.parseInt(arg) - 1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Noted! I\u0027ve removed this task from the list:\\n\\t\" + t.toString(), false);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            taskList.remove(t);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! Please enter a number for the task!\", true);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! We couldn\u0027t find that entry in the list!\", true);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! That didn\u0027t work, please check your input and try again!\", true);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Finds the task specified by the user. Requires key \"\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param userInput UserInput object for command processing"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void findTask(UserInput userInput) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (userInput.getNumArgs() \u003c 1) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! You didn\u0027t provide at least 1 argument!\", true);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops the list is empty!\", false);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String base \u003d userInput.getArg(\"\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (base \u003d\u003d null || base.equals(\"\")) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Oops! Please provide a string to search for!\", true);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String taskString \u003d \"\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Task t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (t.getDescription().toLowerCase().contains(base.toLowerCase())) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                taskString +\u003d (i + 1) + \". \" + t.toString() + System.lineSeparator();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if(taskString.equals(\"\")){"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            taskString \u003d \"Oops! There were no tasks matching your specification!\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(taskString, false);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Returns if the loop should exit"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return true if the program should terminate"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public boolean shouldShutdown() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return shutdown;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Utility function for printing errors triggered by other classes"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param text The string to be printed"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void printError(String text) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(text, true);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void printOutput(String text) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(text, false);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Prints the output with the divider lines and the supplied text"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Option to make the text non instant for extra effect"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param text string to be printed"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param isInstant whether the string is printed instantly"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void printOutput(String text, boolean isInstant) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        final String UNDERSCORES \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        System.out.println(UNDERSCORES);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Split text according to the lines to format."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String[] lines \u003d text.split(\"\\\\r?\\\\n\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (String s : lines) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (isInstant) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                System.out.println(\"  \" + s);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                System.out.print(\"  \");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                // charAt is constant time lookup so we do that instead of splitting strings."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                for (int i \u003d 0; i \u003c s.length(); i++) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    char c \u003d s.charAt(i);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    System.out.print(c);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        Thread.sleep(5);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                System.out.print(System.lineSeparator());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        System.out.println(UNDERSCORES);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 294
    }
  },
  {
    "path": "src/main/java/duke/main/UserInput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class UserInput {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private Map\u003cString, String\u003e args;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public UserInput(String c, Map\u003cString, String\u003e a) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        command \u003d c;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        args \u003d a;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setCommand(String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Map\u003cString, String\u003e getArgs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return args;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setArgs(Map\u003cString, String\u003e args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getArg(String s) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return args.get(s);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public int getNumArgs() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return args.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 37
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import duke.main.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.next;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private LocalDateTime due;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static final DateTimeFormatter FORMAT_LIST[] \u003d {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"MM dd, yyyy\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm:ss\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MMM-yyyy HH:mm:ss\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yy\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MMM-yy\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Deadline(String s, String deadline) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        tryReadDate(deadline);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Attempts to convert the user supplied date string to a machine date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param dateStr The string to be converted"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private void tryReadDate(String dateStr) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        LocalDateTime result \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (DateTimeFormatter dtf : FORMAT_LIST) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                result \u003d LocalDateTime.parse(dateStr, dtf);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (result !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d result;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        //Still failed to read date, try grammar interpretation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (dateStr.toLowerCase().contains(\"next\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (dateStr.toLowerCase().matches(\"next\\\\s*mon.*\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*tue.*\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*wed.*\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*thu.*\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*fri.*\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*sat.*\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*sun.*\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (dateStr.toLowerCase().contains(\"end\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (dateStr.toLowerCase().matches(\"end\\\\s*mon.*\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*tue.*\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*wed.*\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*thu.*\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*fri.*\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*sat.*\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*sun.*\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d LocalDateTime.now().with(next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if(this.due !\u003dnull){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.due \u003d this.due.withHour(23).withMinute(59).withSecond(59).withNano(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (this.due \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public LocalDateTime getDue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return due;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setDue(LocalDateTime due) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.due \u003d due;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"[D]\" + super.toString() + \" Due: \" + due;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 101
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import duke.main.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.ZoneOffset;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.next;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static final DateTimeFormatter FORMAT_LIST[] \u003d {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"MM dd, yyyy\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm:ss\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MMM-yyyy HH:mm:ss\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yy\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MMM-yy\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    };"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Event(String s, String startStr, String endStr) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        tryReadDate(startStr, endStr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Attempts to convert the user supplied date string to a machine date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Both dates are required as we have to parse relative dates sequentially and also check if range is valid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param dateStr The string to be converted"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param date2 The end date to be converted"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws DukeException if there was an error with the date parsing or the date overlap is incorrect"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private void tryReadDate(String dateStr, String date2) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        LocalDateTime result \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (DateTimeFormatter dtf : FORMAT_LIST) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                result \u003d LocalDateTime.parse(dateStr, dtf);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (result !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d result;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        //Still failed to read date, try grammar interpretation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (dateStr.toLowerCase().contains(\"next\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (dateStr.toLowerCase().matches(\"next\\\\s*mon.*\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*tue.*\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*wed.*\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*thu.*\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*fri.*\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*sat.*\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*sun.*\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (dateStr.toLowerCase().contains(\"end\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (dateStr.toLowerCase().matches(\"end\\\\s*mon.*\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*tue.*\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*wed.*\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*thu.*\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*fri.*\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*sat.*\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*sun.*\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d LocalDateTime.now().with(next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (this.start !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.start \u003d this.start.withHour(23).withMinute(59).withSecond(59).withNano(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (this.start \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Parse Date2. relative timing now reflects \"next weekday after start\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (DateTimeFormatter dtf : FORMAT_LIST) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                result \u003d LocalDateTime.parse(date2, dtf);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (result !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d result;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        //Still failed to read date, try grammar interpretation"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (date2.toLowerCase().contains(\"next\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (date2.toLowerCase().matches(\"next\\\\s*mon.*\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d start.with(next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (date2.toLowerCase().matches(\"next\\\\s*tue.*\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d start.with(next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (date2.toLowerCase().matches(\"next\\\\s*wed.*\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d start.with(next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (date2.toLowerCase().matches(\"next\\\\s*thu.*\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d start.with(next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (date2.toLowerCase().matches(\"next\\\\s*fri.*\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d start.with(next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (date2.toLowerCase().matches(\"next\\\\s*sat.*\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d start.with(next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (date2.toLowerCase().matches(\"next\\\\s*sun.*\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d start.with(next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (date2.toLowerCase().contains(\"end\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (date2.toLowerCase().matches(\"end\\\\s*mon.*\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d start.with(next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (date2.toLowerCase().matches(\"end\\\\s*tue.*\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d start.with(next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (date2.toLowerCase().matches(\"end\\\\s*wed.*\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d start.with(next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (date2.toLowerCase().matches(\"end\\\\s*thu.*\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d start.with(next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (date2.toLowerCase().matches(\"end\\\\s*fri.*\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d start.with(next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (date2.toLowerCase().matches(\"end\\\\s*sat.*\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d start.with(next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (date2.toLowerCase().matches(\"end\\\\s*sun.*\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d start.with(next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (this.end !\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                this.end \u003d this.end.withHour(23).withMinute(59).withSecond(59).withNano(0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (this.end \u003d\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (this.end.toEpochSecond(ZoneOffset.UTC) \u003c this.start.toEpochSecond(ZoneOffset.UTC)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // An event cannot end before it starts"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"[E]\" + super.toString() + \" Starts: \" + start + \" Ends: \" + end;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setStart(LocalDateTime start) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setEnd(LocalDateTime end) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 171
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 38
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public ToDo(String s) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "deAdLine do homework /by next thursday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "event new atapon /at next Sat"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "toDo your mom"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "done haha"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "done 30"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "deadline submit report /by next MoN"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 16
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\main\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin duke.main.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 2,
      "-": 19
    }
  }
]
