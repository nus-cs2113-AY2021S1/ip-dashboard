[
  {
    "path": "data/out.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1.[T][0] test"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "2.[E][1] test (at: Jan 1 2020 18:00)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "3.[D][0] test (by: Dec 20 2020 12:15)"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Add Task"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "User is able to add a task to Duke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### Add ToDo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "User is able to add a `ToDo`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### Add Event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "User is able to add an `Event` with the Date and Time"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### Add Deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "User is able to add a `Deadline` with the Date and Time"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Delete Task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "User is able to delete a task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### List Task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "User is able to list out all tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Done Task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "User is able to mark a task as done"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Find Task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "User is able to list out all tasks that match the search term specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### `todo \u003cdesc\u003e`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Add a `ToDo` task to Duke"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u003eExample of usage:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "todo read math notes"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u003eExpected outcome:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "   [T][✘] read math notes"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " Remember, you can enter \"list\" to view all tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### `event \u003cdesc\u003e /at \u003cdate\u003e \u003ctime\u003e`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Add an `Event` task to Duke"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u003eExample of usage:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "event prom /at 20-2-2020 1800"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u003eExpected outcome:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "   [E][✘] prom (at: Feb 20 2020 18:00)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " Remember, you can enter \"list\" to view all tasks"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### `deadline \u003cdesc\u003e /by \u003cdate\u003e \u003ctime\u003e`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Add a `Deadline` task to Duke"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u003eExample of usage:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "deadline do math quiz /by 2-12-2020 1215"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u003eExpected outcome:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "   [D][✘] do quiz (by: Dec 2 2020 12:15)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " Remember, you can enter \"list\" to view all tasks"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### `delete \u003ctask_index\u003e`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Delete a `Task`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u003eExample of usage:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u003eExpected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " Ok! I have removed this task!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "   [T][✘] read math notes"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### `list`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "List all the `Task` entered"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u003eExample of usage:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u003eExpected outcome:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1.[E][✘] prom (at: Feb 20 2020 18:00)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "2.[D][✓] do quiz (by: Dec 2 2020 12:15)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### `done \u003ctask_index\u003e`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Mark a `Task` as Done"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u003eExample of usage:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u003eExpected outcome:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "   [D][✓] do quiz (by: Dec 2 2020 12:15)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### `find \u003csearch_term\u003e`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "List all of the `Task` that matches the search"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u003eExample of usage:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "find book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u003eExpected outcome:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1.[T][✓] read book"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "2.[D][✓] return book (by: June 6th)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "Aseanseen": 129
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.io.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Entry point of the Duke application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        new Duke().run(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Sets up the storage, loads up the data from the storage file, and prints the welcome message.  */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void start(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Storage.start();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskList.loadTasks();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Ui.printGreeting();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Runs the program until termination.  */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void run(String[] args) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        start(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Reads the user command and parses it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * The parser creates a Command object and executes it"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * until the user issues the exit command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String commandString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            commandString \u003d Ui.getUserCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Ui.printLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            // Try to create the specified command object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            // Catches null if the input is empty"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            // Catches a command where the root is correct but something else is wrong"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command.execute();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                Ui.printEmptyCommandException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } catch (NoSuchElementException exception) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                Ui.printPartiallyCorrectCommandException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                Ui.printLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } while (!ExitCommand.isExit(command));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "Aseanseen": 58
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.exception.IllegalDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a AddCommand class to handle all creation of Tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Guarantees: Task to be added obeys all restrictions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    final static int LENGTH_TODO \u003d 4;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    final static int LENGTH_DEADLINE \u003d 8;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    final static int LENGTH_EVENT \u003d 5;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private TaskList.typeOfTasks typeOfTask;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private LocalDateTime taskAtOrBy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d-M-yyyy HHmm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Tests the creation of the tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param commandStr String of user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param typeOfTask Enum of the types of Task (TODO, EVENT, DEADLINE)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DukeException if the test to add the Task fails."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public AddCommand(String commandStr,TaskList.typeOfTasks typeOfTask) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        switch (typeOfTask) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            testEvent(commandStr, typeOfTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            testToDo(commandStr, typeOfTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            testDeadline(commandStr, typeOfTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.typeOfTask \u003d typeOfTask;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Overrides the execute() of the Command class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Adds the respective tasks to the tasks list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Prints an acknowledgement of the added Task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws IllegalStateException in the event that the enum typeOfTask has an external value."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        switch (typeOfTask) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            task \u003d addEvent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            task \u003d addToDo();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            task \u003d addDeadline();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            throw new IllegalStateException(\"Unexpected type of task: \" + typeOfTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Ui.acknowledgeTaskAdded(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void testEvent(String command, TaskList.typeOfTasks typeOfTask) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        testTask(command, typeOfTask, \"/at\", LENGTH_EVENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void testToDo(String command, TaskList.typeOfTasks typeOfTask) throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        testTask(command, typeOfTask,null, LENGTH_TODO);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void testDeadline(String command, TaskList.typeOfTasks typeOfTask) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        testTask(command, typeOfTask, \"/by\", LENGTH_DEADLINE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Combines the test for ToDo, Event, Deadline."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param command String of user input."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param typeOfTask Enum of the types of Task (TODO, EVENT, DEADLINE)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param splitter String that splits up the description and DateTime."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param lengthOfRootCommand Length of the root command string."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DukeException if there is IllegalDateTime or IllegalDescription."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void testTask(String command, TaskList.typeOfTasks typeOfTask, String splitter, int lengthOfRootCommand) throws DukeException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Only Event and Deadline checks for /at or /by in the input"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (typeOfTask \u003d\u003d TaskList.typeOfTasks.TODO){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String taskDescription \u003d command.substring(lengthOfRootCommand).stripLeading().stripTrailing();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            checkDukeException(typeOfTask, taskDescription, null, null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            int indexOfAtOrBy \u003d command.indexOf(splitter);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            // Command /at or /by not found"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            if (indexOfAtOrBy \u003c 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                throw new DukeException(typeOfTask.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String taskDescription \u003d command.substring(lengthOfRootCommand, indexOfAtOrBy).stripLeading().stripTrailing();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String taskAtOrBy \u003d command.substring(indexOfAtOrBy + splitter.length()).stripLeading().stripTrailing();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            checkDukeException(typeOfTask, taskDescription, taskAtOrBy, formatter);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            this.taskAtOrBy \u003d LocalDateTime.parse(taskAtOrBy, formatter);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Task addEvent() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Event event \u003d new Event(taskDescription, taskAtOrBy);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskList.addTask(event);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Task addDeadline() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Deadline deadline \u003d new Deadline(taskDescription, taskAtOrBy);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskList.addTask(deadline);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Task addToDo() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ToDo toDo \u003d new ToDo(taskDescription);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskList.addTask(toDo);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return toDo;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Combines checkDateTime and checkDescription and throws DukeException."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param entryType Type of Task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskDescription Description of Task."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskDateTime DateTime of Task."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param formatter DateTimeFormatter of Task."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DukeException if there is IllegalDateTime or IllegalDescription."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static void checkDukeException(TaskList.typeOfTasks entryType, String taskDescription, String taskDateTime, DateTimeFormatter formatter) throws DukeException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (!entryType.equals(TaskList.typeOfTasks.TODO)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            checkDateTime(entryType, taskDateTime, formatter);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        checkDescription(entryType, taskDescription);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Checks for empty date/time"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param entryType Type of Task."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskDateTime DateTime of Task."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param formatter DateTimeFormatter of Task."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws IllegalDateTimeException if the DateTime entered does not fit the DateTime format."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static void checkDateTime(TaskList.typeOfTasks entryType, String taskDateTime, DateTimeFormatter formatter) throws IllegalDateTimeException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (taskDateTime.isEmpty()){"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            throw new IllegalDateTimeException(entryType.toString());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                LocalDateTime.parse(taskDateTime, formatter);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } catch (DateTimeParseException dateTimeException) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                throw new IllegalDateTimeException(entryType.toString());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Checks for empty description."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param entryType Type of Task."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskDescription Description of Task."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws IllegalDescriptionException if the description entered is empty."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static void checkDescription(TaskList.typeOfTasks entryType, String taskDescription) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (taskDescription.isEmpty()){"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            throw new IllegalDescriptionException(entryType.toString());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 187
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a Command object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Command object is created only when the root command is correct."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Returns an exception to be caught by Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Tells the user that the root command is correct but something else is wrong."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws NoSuchElementException Since execute should be implemented by child classes"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        throw new NoSuchElementException();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 19
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a DeleteCommand class to handle all deletion of Tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Task taskToBeDeleted;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private int taskArrayNum;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Gets the Task to be deleted and throws exception if it does not exist."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskObj Scanner of the user input after delete."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws IndexOutOfBoundsException if the taskArrayNum is out of bounds."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public DeleteCommand(Scanner taskObj) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        taskArrayNum \u003d Integer.parseInt(taskObj.next()) - 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        taskToBeDeleted \u003d TaskList.getTaskList().get(taskArrayNum);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Overrides the execute() of the Command class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Deletes the respective tasks from the tasks list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Prints an acknowledgement of the deleted Task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskList.removeTask(taskArrayNum);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Ui.acknowledgeTaskRemoved(taskToBeDeleted);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 36
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a DoneCommand class to handle the done status of Tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Task taskToBeDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Gets the Task to be done and throws exception if it does not exist."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskObj Scanner of the user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws IndexOutOfBoundsException if the taskArrayNum is out of bounds."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public DoneCommand(Scanner taskObj) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int taskArrayNum \u003d Integer.parseInt(taskObj.next()) - 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        taskToBeDone \u003d TaskList.getTaskList().get(taskArrayNum);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Overrides the execute() of the Command class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Marks the respective tasks as done if possible."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Prints an acknowledgement of the done Task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (taskToBeDone.getIsDone()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Ui.printTaskAlrDone(taskToBeDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            TaskList.markTaskAsDone(taskToBeDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Ui.acknowledgeTaskDone(taskToBeDone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 39
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a ExitCommand class to handle the exit of Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public ExitCommand(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Overrides the execute() of the Command class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Prints an acknowledgement of the added Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Exits Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Ui.printBye();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Checks if the Command object is a ExitCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param command Command object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return Boolean, True if Command is instance of ExitCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return command instanceof ExitCommand; // instanceof returns false if it is null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 31
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a FindCommand class to handle all searches of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private String filterString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Gets the filter String and throws exception if it does not exist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskObj Scanner of the user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws IndexOutOfBoundsException if the user input is empty."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public FindCommand(Scanner taskObj) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (taskObj.hasNext()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            filterString \u003d taskObj.nextLine().stripLeading().stripTrailing();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Overrides the execute() of the Command class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Gets the matched tasks as a String."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Prints the matched tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d TaskList.getTaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        List\u003cTask\u003e matchedTasks \u003d tasks.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                                        .filter((match) -\u003e match.getDescription().contains(filterString))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String matchedTaskAsString \u003d getTaskListAsString(matchedTasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Ui.printMatchTaskList(matchedTaskAsString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Converts task list to String to be printed out."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param matchedTasks List of Task that matched the filterString."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return String of the matchedTask list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static String getTaskListAsString(List\u003cTask\u003e matchedTasks) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int size \u003d matchedTasks.size();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (size !\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                String line \u003d i + 1 + \".\" + matchedTasks.get(i).toString() + System.lineSeparator();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                s +\u003d line;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 63
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a ListCommand class to list out the tasks in Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Overrides the execute() of the Command class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Gets all of the tasks in Duke as a String."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Prints the tasks list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d TaskList.getTaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String taskListAsString \u003d getTaskListAsString(tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Ui.printTaskList(taskListAsString);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Converts task list to String to be printed out."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param tasks ArrayList of Task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return String of the tasks list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static String getTaskListAsString(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int size \u003d TaskList.getTotalNumOfTasks();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (size !\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                String line \u003d i + 1 + \".\" + tasks.get(i).toString() + System.lineSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                s +\u003d line;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 44
    }
  },
  {
    "path": "src/main/java/duke/command/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a UnknownCommand class to take care of entries that cannot be understood by the Parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class UnknownCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public UnknownCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Overrides the execute() of the Command class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Prints to the user that the command entered is not supported."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Ui.printUnsupportedCommandException();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a DukeException class to handle custom exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Error message for DukeException"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return String containing the type of Task user attempted to add."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return \" Bad command! \" + getMessage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a IllegalDateTimeException class to handle missing or wrong date / time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Exception can be thrown during the creation of Event and Deadline tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class IllegalDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public IllegalDateTimeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Overrides the toString() of the DukeException class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Specifies date time error."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return String with date time error message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return super.toString() + \" needs the date and time!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 22
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a IllegalDescriptionException class to handle missing descriptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Exception can be thrown during the creation of any tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class IllegalDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public IllegalDescriptionException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Overrides the toString() of the DukeException class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Specifies description error."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return String with description error message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return super.toString() + \" needs the description!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 22
    }
  },
  {
    "path": "src/main/java/duke/io/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.command.UnknownCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a Parser class to make sense of the user\u0027s input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Parses the user\u0027s input and decides on the Command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Returns null only if user input is empty."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param commandStr String of user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return Command object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Command parseCommand(String commandStr) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command \u003d new Command();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            command \u003d testCommand(commandStr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            // Illegal command parameters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Ui.printOutOfIndexCommandException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (DukeException exception) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Ui.printDukeException(exception);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Ui.printNumberException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Creates the command objects if possible."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param commandStr String of user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return Command object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DukeException if IllegalDateTime / IllegalDescription."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static Command testCommand(String commandStr) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Scanner taskObj \u003d new Scanner(commandStr);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Initialisation of enum"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskList.typeOfTasks typeOfTask;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (taskObj.hasNext()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            switch (taskObj.next()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d new ListCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d new DoneCommand(taskObj);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d new DeleteCommand(taskObj);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                typeOfTask \u003d TaskList.typeOfTasks.TODO;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d new AddCommand(commandStr, typeOfTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                typeOfTask \u003d TaskList.typeOfTasks.DEADLINE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d new AddCommand(commandStr, typeOfTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                typeOfTask \u003d TaskList.typeOfTasks.EVENT;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d new AddCommand(commandStr, typeOfTask);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d new FindCommand(taskObj);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d new UnknownCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 90
    }
  },
  {
    "path": "src/main/java/duke/io/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents an abstract Ui class to handle interactions between the user and Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public abstract class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    final static int SIZE_LINE \u003d 90;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static String getUserCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void printLine() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String dash \u003d \"\\u2500\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(dash.repeat(SIZE_LINE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void printInstructions() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" - Add a todo e.g. todo read book\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" - Add a deadline e.g. deadline do quiz /by 2-12-2020 1215\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" - Add an event e.g. event prom /at 20-2-2020 1800\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" - List all added tasks e.g. list\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" - Complete a task e.g. done 1\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" - Delete a task e.g. delete 1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" - Find a task e.g. find book\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" - Say bye to me e.g. bye\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void printGreeting() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" What can I do for you?\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        printInstructions();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void printBye() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void printTaskList(String taskListAsString) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.print(taskListAsString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void printMatchTaskList(String taskListAsString) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.print(taskListAsString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void acknowledgeTaskDone(Task task) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\"   \" + task.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void printTaskAlrDone (Task task) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" This task has already been marked as done!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\"   \" + task.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void acknowledgeTaskAdded (Task task) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" Got it. I\u0027ve added this task: \" + System.lineSeparator() + \"   \" + task.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" Now you have \" + TaskList.getTotalNumOfTasks() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" Remember, you can enter \\\"list\\\" to view all tasks\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void acknowledgeTaskRemoved (Task task) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" Ok! I have removed this task!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\"   \" + task.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void printFileException(IOException exception) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println (\" Error updating Task list.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        exception.printStackTrace ();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void printDukeException(DukeException exception) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(exception.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void printOutOfIndexCommandException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" Stop feeding me things that do not exist!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void printUnsupportedCommandException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" Command\u0027s power level too high! Please try something else or improve my power level!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void printNumberException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" I can only take a number!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void printEmptyCommandException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" Stop feeding me emptiness\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void printPartiallyCorrectCommandException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.println(\" Correct root command but something is wrong\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 106
    }
  },
  {
    "path": "src/main/java/duke/storage/ReadFromFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents an abstract class to read Tasks from Storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Requirements: Needs an output file in the data folder."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public abstract class ReadFromFile{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    final static int LENGTH_BY \u003d 4;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    final static int LENGTH_AT \u003d 4;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Gets the file paths specified in an OS-independent way.  */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    final static String root \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    final static java.nio.file.Path filePath \u003d java.nio.file.Paths.get(root, \"data\", \"out.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    final private static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Checks if the output file exists and if it exists, reads it."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param tasks ArrayList of Task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void readMem(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        boolean fileExists \u003d java.nio.file.Files.exists(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (fileExists) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                scanMem(tasks, i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } catch (IOException exception) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                exception.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Reads the output file into tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param tasks ArrayList of Task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param i Int iterator to go through each line of file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static void scanMem(ArrayList\u003cTask\u003e tasks, int i) throws FileNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        File file \u003d new File(String.valueOf(filePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Scanner fileObj \u003d new Scanner(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Goes through every line of out.txt"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        while (fileObj.hasNextLine()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String task \u003d fileObj.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            if (!task.isBlank()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                addToMem(tasks, task, i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Converts a line in out.txt to be added to tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param tasks ArrayList of Task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param task String of a line in out.txt."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param i Int iterator to go through each task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static void addToMem(ArrayList\u003cTask\u003e tasks, String task, int i) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int indexOfTaskType \u003d task.indexOf(\"[\") + 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int indexOfTaskState \u003d task.indexOf(\"[\",indexOfTaskType) + 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int indexOfTaskDescription \u003d task.indexOf(\"]\",indexOfTaskState) + 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String taskType \u003d task.substring(indexOfTaskType,indexOfTaskType+1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String taskIsDone \u003d task.substring(indexOfTaskState,indexOfTaskState+1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String taskDescription \u003d task.substring(indexOfTaskDescription);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Adds Task based on the taskType"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Updates the isDone of every Task"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        switch(taskType){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String toDoDescription \u003d taskDescription.stripLeading().stripTrailing();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            tasks.add(new ToDo(toDoDescription));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            updateIsDone(tasks, i, taskIsDone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            int indexOfAt \u003d task.indexOf(\"(at:\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String eventDescription \u003d task.substring(indexOfTaskDescription, indexOfAt).stripLeading().stripTrailing();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String eventAt \u003d task.substring(indexOfAt + LENGTH_AT).stripLeading().stripTrailing();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            eventAt \u003d eventAt.substring(0,eventAt.length()-1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            tasks.add(new Event(eventDescription, LocalDateTime.parse(eventAt,formatter)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            updateIsDone(tasks, i, taskIsDone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            int indexOfBy \u003d task.indexOf(\"(by:\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String deadlineDescription \u003d task.substring(indexOfTaskDescription, indexOfBy).stripLeading().stripTrailing();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String deadlineBy \u003d task.substring(indexOfBy + LENGTH_BY).stripLeading().stripTrailing();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            deadlineBy \u003d deadlineBy.substring(0,deadlineBy.length()-1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            tasks.add(new Deadline(deadlineDescription,LocalDateTime.parse(deadlineBy,formatter)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            updateIsDone(tasks, i, taskIsDone);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void updateIsDone(ArrayList\u003cTask\u003e tasks, int i, String taskIsDone) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (taskIsDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            tasks.get(i).markAsDone();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 114
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents the Storage of Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Guarantees: Directory is made."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static String root \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static java.nio.file.Path dirPath \u003d java.nio.file.Paths.get(root, \"data\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Updates the output file to add, remove or mark a Task as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param tasks ArrayList of Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param totalNumOfTasks int of total number of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void updateFile(ArrayList\u003cTask\u003e tasks, int totalNumOfTasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            WriteToFile.writeList(tasks, totalNumOfTasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Ui.printFileException(exception);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Creates the output directory if it has not been created  */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void start() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        boolean isDirMade \u003d Files.exists(dirPath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Check if directory exists, if not create it"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (!isDirMade){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            File dir \u003d new File(String.valueOf(dirPath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            isDirMade \u003d dir.mkdir();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Called by TaskList to read from memory  */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void loadMem(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ReadFromFile.readMem(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 46
    }
  },
  {
    "path": "src/main/java/duke/storage/WriteToFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents an abstract class to write to the Storage of Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Guarantees: Output file is made."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public abstract class WriteToFile {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static String root \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static java.nio.file.Path dirPath \u003d java.nio.file.Paths.get(root, \"data\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static java.nio.file.Path filePath \u003d java.nio.file.Paths.get(String.valueOf(dirPath), \"out.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Called by Storage to make a FileWriter that writes to the output file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param tasks ArrayList of Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param totalNumOfTasks int of total number of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws IOException On file error"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void writeList(ArrayList\u003cTask\u003e tasks, int totalNumOfTasks) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        FileWriter fw \u003d new FileWriter(String.valueOf(filePath));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Writes task list to file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        for (int i \u003d 0; i \u003c totalNumOfTasks; i ++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String toSave \u003d tasks.get(i).toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            // Replaces the ✓ with 1, ✘ with 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            if (toSave.contains(\"\\u2713\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                toSave \u003d toSave.replace(\"\\u2713\",\"1\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } else if (toSave.contains(\"\\u2718\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                toSave \u003d toSave.replace(\"\\u2718\",\"0\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            fw.write(i+1 + \".\" + toSave);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 41
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a Deadline Task in Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Guarantees: Deadline description, Date and Time is present."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    final private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Overrides the toString() of the Task class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return String containing type of Task and amended DateTime format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(formatter) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 28
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a Event Task in Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Guarantees: Event description, Date and Time is present."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    final private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Overrides the toString() of the Task class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return String containing type of Task and amended DateTime format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(formatter) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 28
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a Task in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Guarantees: Task description is present and not null."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Assumption: Description must be present and not null."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return ✓ or ✘ symbols"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Returns a String with the status of the task and the description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 42
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a list of tasks in Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Guarantees: Only Task objects are in the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Anything that requires the task list must go through this class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public enum typeOfTasks{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TODO, EVENT, DEADLINE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Loads the Tasks into the ArrayList tasks from Storage */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void loadTasks() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Storage.loadMem(tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static int getTotalNumOfTasks() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void addTask(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Storage.updateFile(tasks, TaskList.getTotalNumOfTasks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void removeTask(int taskNum) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        tasks.remove(taskNum);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Storage.updateFile(tasks, TaskList.getTotalNumOfTasks());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void markTaskAsDone(Task task) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Storage.updateFile(tasks, TaskList.getTotalNumOfTasks());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 45
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Represents a ToDo Task in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Guarantees: ToDo description is present."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class ToDo extends Task{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Overrides the toString() of the Task class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return String containing type of Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 22
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "deadline return book /by 2-12-2020 1215"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "event project meeting /at 20-2-2020 1800"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "deadline do homework /by 2-12-2020 1205"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "find book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\command\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\io\\*.java ..\\src\\main\\java\\duke\\storage\\*.java ..\\src\\main\\java\\duke\\task\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "Aseanseen": 2
    }
  }
]
