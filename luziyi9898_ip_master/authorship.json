[
  {
    "path": "docs/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "[T][✓] bbb"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "[T][✘] ccc"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "[D][✓] whatdeadline (by:sometime)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "[E][✘] what event (at:sometimeelse)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "[T][✘] eee"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 5
    }
  },
  {
    "path": "src/main/java/Duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class Deadline extends Todo{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected String dateBy;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public Deadline(String description, String dateBy) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.dateBy \u003d dateBy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.letterRepresentingTask \u003d \"[D]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public String getDateBy() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return dateBy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public void setDate(String dateBy) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.dateBy \u003d dateBy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return this.letterRepresentingTask + \"[\" + this.getStatusIcon() +\"] \" + this.description +\" (by:\"+ this.getDateBy()+\")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 25
    }
  },
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String inputStatement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        boolean hasEnded \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String separatingLine \u003d \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String defaultPath \u003d \"docs/duke.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        ArrayList\u003cTask\u003e listOfItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int listWordCount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        printWelcomeText(separatingLine);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        printBetweenLines(separatingLine, \"Greetings, care for a cup of coffee?\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            loadSavedText(defaultPath, listOfItems);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(\"Previous entries uploaded.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(separatingLine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }catch (FileNotFoundException e){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "           File f \u003dnew File(defaultPath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "           f.createNewFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "           System.out.println(\"Save not detected, creating new save file.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "           System.out.println(separatingLine);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        listWordCount \u003d listOfItems.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        //loop begins:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        while (!hasEnded) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            inputStatement \u003d in.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (inputStatement.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                //signals end of programme"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                hasEnded \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } else if (inputStatement.equalsIgnoreCase(\"list\") ){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                System.out.println(separatingLine);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                //print out list of items"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    printArrangedList(listOfItems);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                } catch (IllegalCommandsException e){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    //throws exception when list is empty."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    System.out.println(\"Your list is empty, no lollygagging\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                System.out.println(separatingLine);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } else if(inputStatement.startsWith(\"done\")){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                System.out.println(separatingLine);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    markAsDone(inputStatement, listOfItems);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                } catch (IllegalCommandsException e){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    //throws exception when doing task that is already done."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    System.out.println(\"Calm done mate, you finished that already.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                }catch (NumberFormatException e){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    //throws exception when done command is not followed by a number."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    System.out.println(\"Tip of the day: End your done command with a number next time\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                }catch (ArrayIndexOutOfBoundsException | NullPointerException e){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    //throws exception when done command is followed by an empty task or task outside of array."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    System.out.println(\"You can\u0027t do something that doesn\u0027t exist, or can you?\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                System.out.println(separatingLine);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } else if(inputStatement.startsWith(\"delete\")){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                System.out.println(separatingLine);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    deleteItem(inputStatement, listOfItems);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    listWordCount \u003d listWordCount - 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    System.out.println(\"Now you have \" + (listWordCount) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                }catch(IndexOutOfBoundsException|NumberFormatException e){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    System.out.println(\"You can\u0027t delete that!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                System.out.println(separatingLine);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }else if(inputStatement.startsWith(\"todo\")|inputStatement.startsWith(\"event\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    |inputStatement.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                //proceeds to add task if task is valid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    listWordCount \u003d classifyAndAddTask(inputStatement, separatingLine, listOfItems, listWordCount);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                }catch (StringIndexOutOfBoundsException | IllegalCommandsException e){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    //throws exception when adding invalid tasks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    printBetweenLines(separatingLine, \"That\u0027s not a valid task!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } else{"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                //throws exception when inputting invalid commands."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                printBetweenLines(separatingLine, \"That\u0027s not a valid command!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            //update the text document"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                writeToFile(\"docs/duke.txt\", listOfItems);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        //ending messages"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        printBetweenLines(separatingLine, \"We shall meet again...\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static void printWelcomeText(String separatingLine) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(separatingLine);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"Hey, welcome to my version of Duke and please make good use of it.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"The bot is meant to be a bit cheeky at times so don\u0027t mind it.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"Here is a list of commands you can try out:\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"\\u2022[todo ___] adds a todo task to your list.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"\\u2022[deadline ___ /by ___] adds a deadline task to your list with a deadline.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"\\u2022[event ___ /at ___] adds a event task to your list with a duration.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"\\u2022[done (index of task)] marks a task as done in your list.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"\\u2022[list] prints out your current list and status of tasks.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"\\u2022[bye] exits the programme.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static int classifyAndAddTask(String inputStatement, String separatingLine"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            , ArrayList\u003cTask\u003e listOfItems, int listWordCount) throws IllegalCommandsException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        //determines what type of task is inputted, before add it to listOfItems and then incrementing listWordCount"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int indexOfSlash \u003d inputStatement.indexOf(\"/\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String numberOfTasks \u003d \"\\nNow you have \" + (listWordCount+1) + \" tasks in the list.\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if(inputStatement.startsWith(\"todo\")){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listOfItems.add(new Todo(inputStatement.substring(4).trim()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            printBetweenLines(separatingLine, \"More work ay? Here\u0027s what you need to do: \\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    + listOfItems.get(listWordCount).getTaskDescription() + numberOfTasks);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listWordCount++;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else  if(inputStatement.startsWith(\"deadline\")){"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if(!inputStatement.contains(\"/by\")){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                //throws exception when deadline commands are not followed with /by"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                throw new IllegalCommandsException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listOfItems.add(new Deadline(getDescriptionFromInput(inputStatement, 8),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    getTimeFromInput(inputStatement, indexOfSlash + 3)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            printBetweenLines(separatingLine, \"More work ay? Here\u0027s what you need to do: \\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    + listOfItems.get(listWordCount).getTaskDescription() + numberOfTasks);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listWordCount++;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        else if(inputStatement.startsWith(\"event\")){"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if(!inputStatement.contains(\"/at\")){"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                //throws exception when event commands are not followed with /at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                throw new IllegalCommandsException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listOfItems.add(new Event(getDescriptionFromInput(inputStatement, 5)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    , getTimeFromInput(inputStatement, indexOfSlash + 3)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            printBetweenLines(separatingLine, \"More work ay? Here\u0027s what you need to do: \\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    + listOfItems.get(listWordCount).getTaskDescription() + numberOfTasks);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listWordCount++;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return listWordCount;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static String getTimeFromInput(String inputStatement, int i) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        //i represents default letters in command i.e. (/at )"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return inputStatement.substring(i).trim();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static String getDescriptionFromInput(String inputStatement, int i) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        //i represents the number of letters in the command"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return inputStatement.substring(i, inputStatement.indexOf(\"/\")).trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static void markAsDone(String inputStatement, ArrayList\u003cTask\u003e listOfItems) throws IllegalCommandsException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int indexOfItem \u003d Integer.parseInt(inputStatement.substring(4).trim());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if(listOfItems.get(indexOfItem - 1).getStatus()){"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            //checks if the completed item is already done."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            throw new IllegalCommandsException();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"One more down, but at what cost...\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        listOfItems.get(indexOfItem - 1).markAsDone();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(listOfItems.get(indexOfItem - 1).getTaskDescription());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static void printBetweenLines(String separatingLine, String s) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(separatingLine);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(separatingLine);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static void printArrangedList(ArrayList\u003cTask\u003e list) throws IllegalCommandsException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        //throws an error exception if list is empty"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            throw new IllegalCommandsException();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        //a function that prints the array without returning any values"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"Here\u0027s what you have:\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String[] newList \u003d new String[list.size()];"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int listIndex \u003d 0;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        for(Task item: list ) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (item !\u003d null) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                newList[listIndex] \u003d (listIndex+1)  + \". \"+ item.getTaskDescription() ;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                listIndex++;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        for(String item: Arrays.copyOf(newList, listIndex) ){"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(item);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static void writeToFile(String filePath, ArrayList\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        for(Task item: list ) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (item !\u003d null) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                fw.write(item.getTaskDescription()+ System.lineSeparator());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static void deleteItem(String inputStatement, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int indexOfRemovedItem \u003d Integer.parseInt(inputStatement.substring(6).trim());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"Must be nice to have less things to do, right? Here\u0027s what you removed:\\n\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                + list.get(indexOfRemovedItem - 1).getTaskDescription());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        list.remove(indexOfRemovedItem - 1);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static void loadSavedText(String filePath, ArrayList\u003cTask\u003e list) throws FileNotFoundException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int listIndex \u003d 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            String importedCommand \u003d s.nextLine();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            Integer currentStatusSymbol \u003d importedCommand.codePointAt(4);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (importedCommand.startsWith(\"[T]\")){"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                list.add(new Todo(importedCommand.substring(7).trim()));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }else if (importedCommand.startsWith(\"[D]\")){"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                list.add(new Deadline(importedCommand.substring(7,importedCommand.indexOf(\"(\")-1),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                        importedCommand.substring(importedCommand.indexOf(\"by:\")+3,importedCommand.length()-1)));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }else if (importedCommand.startsWith(\"[E]\")){"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                list.add(new Event(importedCommand.substring(7,importedCommand.indexOf(\"(\")-1),"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                        importedCommand.substring(importedCommand.indexOf(\"at:\")+3,importedCommand.length()-1)));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (currentStatusSymbol.equals(10003)){"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                list.get(listIndex).markAsDone();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listIndex+\u003d1;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 243,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class Event extends Todo{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected String dateAt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public Event(String description, String dateAt) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.dateAt \u003d dateAt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.letterRepresentingTask \u003d \"[E]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public String getDateAt() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return dateAt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public void setDate(String dateAt) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.dateAt \u003d dateAt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return this.letterRepresentingTask + \"[\" + this.getStatusIcon() +\"] \" + this.description +\" (at:\" +this.getDateAt() + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 26
    }
  },
  {
    "path": "src/main/java/Duke/IllegalCommandsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class IllegalCommandsException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 4
    }
  },
  {
    "path": "src/main/java/Duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected String letterRepresentingTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.letterRepresentingTask \u003d \"[T]\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return this.letterRepresentingTask + \"[\" + this.getStatusIcon() +\"] \" + this.description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public Boolean getStatus() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return (this.isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public void markAsDone(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public void setDate(String Date){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 34
    }
  },
  {
    "path": "src/main/java/Duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 10
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "todo task1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 2
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 1,
      "-": 20
    }
  }
]
