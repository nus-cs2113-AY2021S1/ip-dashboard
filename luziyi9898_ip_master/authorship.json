[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 1,
      "-": 25
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "This is a quick personal task manager that operates based on text inputs."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "##Changes from release v0.1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "What\u0027s different from release 0.1:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* Implemented find function which allows user to locate a task using its description"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* Implemented recognition for date and time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "  * If input for time is in the format `yyyy/mm/dd`, Duke automatically converts it into date format."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "## Starting the program"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "**Using command line**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. Open command prompt"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. cd into the file directory where the ip.jar file is."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. Type `java -jar ip.jar`, then Enter to execute"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. Interact with Duke using CLI"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "##Features"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "##Listing all tasks `list`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Display the whole list of tasks, as well as their details and indexes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "##Adding a todo task `todo`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Adds a todo task to the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Format: `todo NAME`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `todo read The King in Yellow`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "##Adding a deadline task `deadline`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Adds a deadline task to the list with a date that it should be completed by."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Format: `deadline NAME /by TIME`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `deadline complete proposal /by 2020/11/12`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `deadline submit proposal /by this friday`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "##Adding an event task `event`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Adds an event task to the list with a date that it happens on."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Format: `event NAME /at TIME`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `event cs2101 presentation /at 2020/09/14`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `event openhouse /at monday to friday`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "##Completing a task `done`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Mark a task as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Format: `done INDEX` "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Completes the task at the specified `INDEX`. The index is with reference to the index number displaced in the most recent listing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `done 3`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "  Marks the third task as done."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "##Deleting a task `delete`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Deletes a task from the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Deletes the task at the specified `INDEX`. The index is with reference to the index number displaced in the most recent listing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `delete 3` "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "  Deletes the third task from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "##Finding a task `find`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Finds a task from the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Format: `find NAME`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "The search is case-sensitive, and tasks with names that has matching keyword will be returned."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `find King`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "  returns the todo task with the description: read The King in Yellow."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "##Terminating the program `bye`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Terminates the program."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "##Saving the data"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Duke automatically saves data into a local storage called `Duke.txt` located in the safe folder as `ip.jar`. "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "If Duke cannot find a save file, it will automatically create a new one."
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 77,
      "-": 18
    }
  },
  {
    "path": "src/main/java/Duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " * Represents a deadline task, a task with a specified deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class Deadline extends Todo{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected LocalDate dateBy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected String dateInString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public Deadline(String description, LocalDate dateBy) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.dateBy \u003d dateBy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.letterRepresentingTask \u003d Ui.DEADLINE_ICON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public Deadline(String description, String dateInString) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.dateInString \u003d dateInString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.letterRepresentingTask \u003d Ui.DEADLINE_ICON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Generate the deadline for a deadline class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @return a string representing the deadline of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public String getDateBy() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if (dateBy !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return dateBy.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\", Locale.ENGLISH));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return dateInString;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return this.letterRepresentingTask + \"[\" + this.getStatusIcon() +\"] \" + this.description +\" (by:\"+ this.getDateBy()+\")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 42
    }
  },
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " *  Initialises DUKE."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Print welcoming text before interaction and ending text after exit command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     //* @param args contains the java command line arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @throws IOException if error is encountered when reading saved file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        Ui.printWelcomeText();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        Storage.loadPreviousEntries();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        Parser.runCommandLoop(Parser.hasEnded, Storage.defaultPath, TaskList.listOfItems);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        Ui.printEndingText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 22,
      "-": 2
    }
  },
  {
    "path": "src/main/java/Duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " * Represents a deadline task, a task with a specified date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class Event extends Todo{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected LocalDate dateAt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected String dateInString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public Event(String description, LocalDate dateAt) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.dateAt \u003d dateAt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.letterRepresentingTask \u003d Ui.EVENT_ICON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public Event(String description, String dateInString) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.dateInString \u003d dateInString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.letterRepresentingTask \u003d Ui.EVENT_ICON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Generate the deadline for a event class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @return a string representing the date of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public String getDateAt() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if (dateAt !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return dateAt.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\", Locale.ENGLISH));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return dateInString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return this.letterRepresentingTask + \"[\" + this.getStatusIcon() +\"] \" + this.description +\" (at:\" +this.getDateAt() + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 39
    }
  },
  {
    "path": "src/main/java/Duke/IllegalCommandsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " * Signals an error caused by wrong commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class IllegalCommandsException extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 7
    }
  },
  {
    "path": "src/main/java/Duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static boolean hasEnded \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Reads user inputs and react accordingly."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param hasEnded flag signifying end of program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param defaultPath path of the local storage file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param listOfItems Arraylist of all the tasks currently present."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void runCommandLoop(boolean hasEnded, String defaultPath, ArrayList\u003cTask\u003e listOfItems) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String inputStatement;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        while (!hasEnded) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            inputStatement \u003d in.nextLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            int listWordCount \u003d TaskList.listOfItems.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (inputStatement.equalsIgnoreCase(Ui.COMMAND_BYE)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                hasEnded \u003d executesExit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } else if (inputStatement.equalsIgnoreCase(Ui.COMMAND_LIST)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                executesList(listOfItems);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } else if (inputStatement.startsWith(Ui.COMMAND_DONE)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                executesDone(listOfItems, inputStatement);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } else if (inputStatement.startsWith(Ui.COMMAND_DELETE)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                executesDelete(listOfItems, inputStatement, listWordCount);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } else if (inputStatement.startsWith(Ui.COMMAND_TODO) | inputStatement.startsWith(Ui.COMMAND_EVENT)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    | inputStatement.startsWith(Ui.COMMAND_DEADLINE)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                executesAddTask(listOfItems, inputStatement, listWordCount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } else if(inputStatement.startsWith(Ui.COMMAND_FIND)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                executesFindTask(listOfItems, inputStatement);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                //throws exception when inputting invalid commands."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                Ui.printBetweenLines(Ui.MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            //update the text document"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            Storage.updateSavedFile(defaultPath, listOfItems);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static void executesFindTask(ArrayList\u003cTask\u003e listOfItems, String inputStatement) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(Ui.DIVIDER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            TaskList.findTask(listOfItems,inputStatement);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } catch (IllegalCommandsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            //throws exception when cannot find the task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(Ui.MESSAGE_INVALID_FIND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(Ui.DIVIDER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static void executesAddTask(ArrayList\u003cTask\u003e listOfItems, String inputStatement, int listWordCount) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        //proceeds to add task if task is valid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            TaskList.addTask(inputStatement, listOfItems, listWordCount);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | IllegalCommandsException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            //throws exception when adding invalid tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            Ui.printBetweenLines(Ui.MESSAGE_INVALID_TASK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static void executesDelete(ArrayList\u003cTask\u003e listOfItems, String inputStatement, int listWordCount) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(Ui.DIVIDER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            TaskList.deleteItem(inputStatement, listOfItems);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listWordCount \u003d listWordCount - 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            Ui.printNumberOfTasks(listWordCount);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(Ui.MESSAGE_INVALID_DELETE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(Ui.DIVIDER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static void executesDone(ArrayList\u003cTask\u003e listOfItems, String inputStatement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(Ui.DIVIDER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            TaskList.markAsDone(inputStatement, listOfItems);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } catch (IllegalCommandsException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            //throws exception when doing task that is already done."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(Ui.MESSAGE_REPEAT_TASK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            //throws exception when done command is not followed by a number."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(Ui.MESSAGE_INVALID_DONE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            //throws exception when done command is followed by an empty task or task outside of array."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(Ui.MESSAGE_INVALID_DONE_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(Ui.DIVIDER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static void executesList(ArrayList\u003cTask\u003e listOfItems) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(Ui.DIVIDER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        //print out list of items"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            TaskList.printArrangedList(listOfItems);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } catch (IllegalCommandsException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            //throws exception when list is empty."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(Ui.MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(Ui.DIVIDER);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static boolean executesExit() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        //signals end of programme"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 118
    }
  },
  {
    "path": "src/main/java/Duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " * Represent files that are used to store the list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Default file path that is used."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static String defaultPath \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Saves the current arraylist of tasks to local storage file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param filePath path of the local storage file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param list current arraylist of tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @throws IOException when errors occur while processing local storage file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void writeToFile(String filePath, ArrayList\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        for (Task item : list) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (item !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                fw.write(item.getTaskDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Loads the arraylist of tasks from the local storage file if present."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param filePath path of the local storage file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param list current arraylist of tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @throws FileNotFoundException if no local storage file is present."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void loadSavedText(String filePath, ArrayList\u003cTask\u003e list) throws FileNotFoundException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int listIndex \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            String importedCommand \u003d s.nextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            Integer currentStatusSymbol \u003d importedCommand.codePointAt(4);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (importedCommand.startsWith(Ui.TODO_ICON)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                list.add(new Todo(importedCommand.substring(7).trim()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } else if (importedCommand.startsWith(Ui.DEADLINE_ICON)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                String taskDateByInString \u003d importedCommand.substring(importedCommand.indexOf(\"by:\") + 3"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                        , importedCommand.length() - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    LocalDate taskDateBy \u003d LocalDate.parse(taskDateByInString"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                            , DateTimeFormatter.ofPattern(\"MMM d yyyy\", Locale.ENGLISH));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    list.add(new Deadline(importedCommand.substring(7, importedCommand.indexOf(\"(\") - 1), taskDateBy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                }catch(DateTimeParseException e){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    list.add(new Deadline(importedCommand.substring(7, importedCommand.indexOf(\"(\") - 1)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                            , taskDateByInString));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } else if (importedCommand.startsWith(Ui.EVENT_ICON)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                String taskDateAtInString \u003d importedCommand.substring(importedCommand.indexOf(\"at:\") + 3"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                        , importedCommand.length() - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    LocalDate taskDateAt \u003d LocalDate.parse(taskDateAtInString"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                            , DateTimeFormatter.ofPattern(\"MMM d yyyy\", Locale.ENGLISH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    list.add(new Event(importedCommand.substring(7, importedCommand.indexOf(\"(\") - 1), taskDateAt));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                }catch(DateTimeParseException e){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    list.add(new Event(importedCommand.substring(7, importedCommand.indexOf(\"(\") - 1)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                            , taskDateAtInString));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (currentStatusSymbol.equals(10003)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                list.get(listIndex).markAsDone();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listIndex +\u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Look for local storage file and creates a new one under the default path is one isn\u0027t present."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @throws IOException if no local storage file is found."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void loadPreviousEntries() throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            Storage.loadSavedText(Storage.defaultPath, TaskList.listOfItems);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(Ui.COMMENT_LOAD_ENTRIES);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(Ui.DIVIDER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }catch (FileNotFoundException e){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            File f \u003dnew File(Storage.defaultPath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(Ui.COMMENT_CREATE_SAVE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(Ui.DIVIDER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Updates the local storage file based on current arraylist of tasks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param defaultPath path of the local storage file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param listOfItems current arraylist of tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void updateSavedFile(String defaultPath, ArrayList\u003cTask\u003e listOfItems) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            Storage.writeToFile(defaultPath, listOfItems);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(Ui.MESSAGE_UNKNOWN_ERROR + e.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 117
    }
  },
  {
    "path": "src/main/java/Duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " * Represents a task in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected String letterRepresentingTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.letterRepresentingTask \u003d Ui.TODO_ICON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Generates complete task description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @return complete task description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return this.letterRepresentingTask + \"[\" + this.getStatusIcon() +\"] \" + this.description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public String getTaskName(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Generates the status icon of the task based on whether it\u0027s done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @return the status icon."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Checks for if the task is done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @return Boolean value representing current status of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public Boolean getStatus() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return (this.isDone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public void markAsDone(){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 51
    }
  },
  {
    "path": "src/main/java/Duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " * Contains task list  and operations to add and remove tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static ArrayList\u003cTask\u003e listOfItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Adds a new task to the arraylist of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param inputStatement user input that describes the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param listOfItems Arraylist of all the tasks currently present."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param listWordCount Counter for current number of tasks in arraylist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @return updated number of tasks in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @throws IllegalCommandsException when command inputted is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static int addTask(String inputStatement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            , ArrayList\u003cTask\u003e listOfItems, int listWordCount) throws IllegalCommandsException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        //determines what type of task is inputted, before add it to listOfItems and then incrementing listWordCount"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int indexOfSlash \u003d inputStatement.indexOf(\"/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String numberOfTasks \u003d \"\\nNow you have \" + (listWordCount + 1) + \" tasks in the list.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if (inputStatement.startsWith(Ui.COMMAND_TODO)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listWordCount \u003d addTodo(inputStatement, listOfItems, listWordCount, numberOfTasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else if (inputStatement.startsWith(Ui.COMMAND_DEADLINE)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listWordCount \u003d addDeadline(inputStatement, listOfItems, listWordCount, indexOfSlash, numberOfTasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else if (inputStatement.startsWith(Ui.COMMAND_EVENT)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listWordCount \u003d addEvent(inputStatement, listOfItems, listWordCount, indexOfSlash, numberOfTasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return listWordCount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Mark a specified task as done based on their index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param inputStatement user input that determines which task is to be done based on index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param listOfItems Arraylist of all the tasks currently present."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @throws IllegalCommandsException when trying to do a task that\u0027s already done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void markAsDone(String inputStatement, ArrayList\u003cTask\u003e listOfItems) throws IllegalCommandsException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int indexOfItem \u003d Integer.parseInt(inputStatement.substring(4).trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if (listOfItems.get(indexOfItem - 1).getStatus()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            //checks if the completed item is already done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            throw new IllegalCommandsException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(Ui.COMMENT_MARK_AS_DONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        listOfItems.get(indexOfItem - 1).markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(listOfItems.get(indexOfItem - 1).getTaskDescription());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Print out current list of inputs with their indexes."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param list Arraylist of all the tasks currently present."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @throws IllegalCommandsException when list is empty."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void printArrangedList(ArrayList\u003cTask\u003e list) throws IllegalCommandsException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        //throws an error exception if list is empty"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            throw new IllegalCommandsException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        //a function that prints the array without returning any values"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(Ui.COMMENT_PRINT_LIST);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String[] newList \u003d new String[list.size()];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int listIndex \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        for (Task item : list) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (item !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                newList[listIndex] \u003d (listIndex + 1) + \". \" + item.getTaskDescription();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                listIndex++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        for (String item : Arrays.copyOf(newList, listIndex)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(item);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void findTask(ArrayList\u003cTask\u003e list, String inputStatement) throws IllegalCommandsException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String keyWord \u003d inputStatement.substring(4).trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String[] newList \u003d new String[list.size()];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int listIndex \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        for (Task item : list) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (item.getTaskName().contains(keyWord)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                newList[listIndex] \u003d (listIndex + 1) + \". \" + item.getTaskDescription();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                listIndex++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if (listIndex \u003e 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            System.out.println(Ui.COMMENT_PRINT_SEARCH);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            for (String item : Arrays.copyOf(newList, listIndex)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                System.out.println(item);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            throw new IllegalCommandsException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Delete a task from the arraylist of tasks."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param inputStatement user input that determines which task is to be deleted based on index."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param list Arraylist of all the tasks currently present."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void deleteItem(String inputStatement, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int indexOfRemovedItem \u003d Integer.parseInt(inputStatement.substring(6).trim());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(Ui.COMMENT_DELETE_ITEM"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                + list.get(indexOfRemovedItem - 1).getTaskDescription());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        list.remove(indexOfRemovedItem - 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static int addEvent(String inputStatement, ArrayList\u003cTask\u003e listOfItems, int listWordCount"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            , int indexOfSlash, String numberOfTasks) throws IllegalCommandsException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if (!inputStatement.contains(\"/at\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            //throws exception when event commands are not followed with /at"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            throw new IllegalCommandsException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listOfItems.add(new Event(getDescriptionFromInput(inputStatement, 5),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    getTimeFromInput(inputStatement.substring(indexOfSlash + 3))));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            Ui.printBetweenLines(Ui.COMMENT_ADD_TASK"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    + listOfItems.get(listWordCount).getTaskDescription() + numberOfTasks);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listWordCount++;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }catch(DateTimeParseException e){"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listOfItems.add(new Event(getDescriptionFromInput(inputStatement, 5),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    (inputStatement.substring(indexOfSlash + 3)).trim()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            Ui.printBetweenLines(Ui.COMMENT_ADD_TASK"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    + listOfItems.get(listWordCount).getTaskDescription() + numberOfTasks);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listWordCount++;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return listWordCount;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static int addDeadline(String inputStatement, ArrayList\u003cTask\u003e listOfItems"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            , int listWordCount, int indexOfSlash, String numberOfTasks) throws IllegalCommandsException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if (!inputStatement.contains(\"/by\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            //throws exception when deadline commands are not followed with /by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            throw new IllegalCommandsException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listOfItems.add(new Deadline(getDescriptionFromInput(inputStatement, 8),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    getTimeFromInput(inputStatement.substring(indexOfSlash + 3))));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            Ui.printBetweenLines(Ui.COMMENT_ADD_TASK"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    + listOfItems.get(listWordCount).getTaskDescription() + numberOfTasks);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listWordCount++;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }catch(DateTimeParseException e){"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listOfItems.add(new Deadline(getDescriptionFromInput(inputStatement, 8),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                   (inputStatement.substring(indexOfSlash + 3)).trim()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            Ui.printBetweenLines(Ui.COMMENT_ADD_TASK"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    + listOfItems.get(listWordCount).getTaskDescription() + numberOfTasks);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listWordCount++;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return listWordCount;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static int addTodo(String inputStatement, ArrayList\u003cTask\u003e listOfItems, int listWordCount, String numberOfTasks) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        listOfItems.add(new Todo(inputStatement.substring(4).trim()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        Ui.printBetweenLines(Ui.COMMENT_ADD_TASK"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                + listOfItems.get(listWordCount).getTaskDescription() + numberOfTasks);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        listWordCount++;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return listWordCount;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static LocalDate getTimeFromInput(String inputStatement) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return LocalDate.parse(inputStatement.trim().replace(\u0027/\u0027,\u0027-\u0027));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static String getDescriptionFromInput(String inputStatement, int i) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        //i represents the number of letters in the command"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return inputStatement.substring(i, inputStatement.indexOf(\"/\")).trim();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 179
    }
  },
  {
    "path": "src/main/java/Duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " * Represents a todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 13
    }
  },
  {
    "path": "src/main/java/Duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " * Text UI of the application and user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String DIVIDER\u003d \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST \u003d \"Your list is empty, no lollygagging\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String MESSAGE_REPEAT_TASK \u003d \"Calm done mate, you finished that already.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String MESSAGE_INVALID_DONE \u003d \"Tip of the day: End your done command with a number next time\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String MESSAGE_INVALID_DONE_INDEX \u003d \"You can\u0027t do something that doesn\u0027t exist, or can you?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String MESSAGE_INVALID_DELETE \u003d \"You can\u0027t delete that!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK \u003d \"That\u0027s not a valid task!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \"That\u0027s not a valid command!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMENT_ADD_TASK \u003d \"More work ay? Here\u0027s what you need to do: \\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMENT_MARK_AS_DONE \u003d \"One more down, but at what cost...\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMENT_PRINT_LIST \u003d \"Here\u0027s what you have:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMENT_DELETE_ITEM \u003d \"Must be nice to have less things to do, right? \" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            \"Here\u0027s what you removed:\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMENT_LOAD_ENTRIES \u003d \"Previous entries uploaded.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMENT_CREATE_SAVE \u003d \"Save not detected, creating new save file.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_ERROR \u003d\"Something went wrong: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String MESSAGE_INVALID_FIND \u003d \"Unable to find this task.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMENT_PRINT_SEARCH \u003d \"Here\u0027s the matching tasks:\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMAND_BYE\u003d \"bye\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMAND_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String TODO_ICON \u003d \"[T]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String EVENT_ICON \u003d \"[E]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static final String DEADLINE_ICON \u003d \"[D]\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Print welcome text at the start of the program."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void printWelcomeText() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"Hey, welcome to my version of Duke and please make good use of it.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"The bot is meant to be a bit cheeky at times so don\u0027t mind it.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"Here is a list of commands you can try out:\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"\\u2022[todo ___] adds a todo task to your list.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"\\u2022[deadline ___ /by ____] adds a deadline task to your list with a deadline.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"\\u2022[event ___ /at ____] adds a event task to your list with a duration.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"\\u2022[done (index of task)] marks a task as done in your list.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"\\u2022[list] prints out your current list and status of tasks.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"\\u2022[find ___] lets you find a task based on its name.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"\\u2022[bye] exits the programme.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"Greetings, care for a cup of coffee?\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Print a string between two divider lines."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param s line that is to be printed between two divider lines."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void printBetweenLines(String s) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Print ending text."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void printEndingText() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        printBetweenLines(\"We shall meet again...\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * Print the number of tasks left in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     * @param listTaskCount number of tasks in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void printNumberOfTasks(Integer listTaskCount) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(\"Now you have \" + listTaskCount + \" tasks in the list.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 87
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "todo task1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 2
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 1,
      "-": 20
    }
  }
]
