[
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Duke is a command line app that allows you to manage and save your tasks quickly and simply!"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "   Hello! I\u0027m Duke!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "   "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "# Using Duke on Command Line"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Navigate to where you downloaded the JAR file from Github."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. Type \u0027chcp 65001\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "3. Type \u0027java -Dfile.encoding\u003dUTF-8 -jar IP.jar\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "4. If ticks and crosses are shown as a question mark, right click the top bar of the command line and go to \u0027properties\u0027 and then \u0027font\u0027. Change the font to a supported font like NSimSun."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "# Features "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## 1. Todo"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Adds a todo type of event into the task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Format: `todo [description]`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Input: `todo go for a run`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Got it! I\u0027ve added this todo: "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "[T][âœ˜] go for a run"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Now you have 1 task(s) in your list!"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## 2. Event"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Adds an event type of task into the task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Format: `event [description] /at [timing/date]`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Input: `event party at home /at tuesday 4pm`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Got it! I\u0027ve added this event: "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "[E][âœ˜] party at home (at: tuesday 4pm)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Now you have 2 task(s) in your list!"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## 3. Deadline"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Adds a deadline type of task into the task list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Format: `deadline [description] /by [timing/date]`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Input: `deadline complete final report /by Saturday 3rd October`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Got it! I\u0027ve added this deadline: "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "[D][âœ˜] complete final report (by: Saturday 3rd October)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Now you have 3 task(s) in your list!"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## 4. Done"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Sets a task to be done."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Format: `done [task number]`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Input: `done 1`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "[T][âœ“] go for a run"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## 5. List"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Lists out all tasks in the current task list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. [T][âœ“] go for a run"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. [E][âœ˜] party at home (at: tuesday 4pm)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "3. [D][âœ˜] complete final report (by: Saturday 3rd October)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## 6. Delete"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Deletes a task from the task list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Format: `delete [task number]`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Input: `delete 2`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Got it! I\u0027ve deleted this task:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "[E][âœ˜] party at home (at: tuesday 4pm)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Now you have 2 task(s) in your list!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## 7. Find"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Finds a keyword in the description of tasks in the task list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Format: `find [keyword]`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Input: `find report`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Here are the matching tasks in your list: "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. [D][âœ˜] complete final report (by: Saturday 3rd October)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## 8. Bye"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Bye. Hope to see you again soon! :)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "___________________________________ "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "# Summary of Commands"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Command | Purpose | Format"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "-------|---------|-------------"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "todo | Adds a todo task | `todo [description]`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "event | Adds an event task | `event [description] /at [timing/date]`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "deadline | Adds a deadline task | `deadline [description] /by [timing/date]`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "done | Sets a task as done | `done [task number]`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "list | Prints the task list | `list`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "delete | Deletes a task | `delete [task number]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "find | Finds a keyword in the task list | `find [keyword]`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "bye | Exits program | `bye`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "matthewgani": 185,
      "-": 9
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        new Duke(\"data/dukeMemory.txt\").run();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Duke(String filepath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        storage.loadDukeMemory(filepath, tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void run(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        boolean isQuittingLoop \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui.printWelcome();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        while (!isQuittingLoop) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            isQuittingLoop \u003d parser.getUserCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        storage.saveDukeMemory(\"data/dukeMemory.txt\", tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui.printGoodbye();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 34,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/exception/CorruptedFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class CorruptedFileException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String exceptionMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public CorruptedFileException(String exceptionMessage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.exceptionMessage \u003d exceptionMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return \"Oh no!\" + exceptionMessage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingInformationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class MissingInformationException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String exceptionMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public MissingInformationException(String exceptionMessage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.exceptionMessage \u003d exceptionMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return \"Oh no! \" + exceptionMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 18
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Parser(TaskList taskList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns a task number that is parsed from a command that is supposed to have a task number following it."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param command The full string of command entered by user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return task number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public int getTaskNumberFromCommand(String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String[] splitCommand \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        taskNumber \u003d Integer.parseInt(splitCommand[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return taskNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns an array of strings where the command entered i split into 2."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param command The full string of the command entered by the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return An array of 2 strings, split after the first space bar."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String[] splitTaskCommand(String command) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String[] splitCommand \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return splitCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns whether or not Duke should continue to accept the User\u0027s commands."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * It is used to make sense of what the user enters and tells Duke which command to do."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return A boolean for whether or not Duke should stop running, true means stop running."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Boolean getUserCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Scanner userResponseScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String command \u003d userResponseScanner.nextLine().trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printTaskList(taskList.getTaskList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else if (command.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                int taskNumber \u003d getTaskNumberFromCommand(command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                taskList.setTaskAsDone(taskNumber);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printTaskNumberParseError();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printTaskNumberNotFound();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else if (command.startsWith(\"todo\") || command.startsWith(\"deadline\") || command.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                String[] taskCommands \u003d splitTaskCommand(command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                taskList.addTaskToList(taskCommands);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printExceptionMessage(e.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else if (command.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                int taskNumber \u003d getTaskNumberFromCommand(command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                taskList.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printTaskNumberParseError();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printTaskNumberNotFound();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else if (command.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                String[] taskCommands \u003d splitTaskCommand(command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                taskList.findTasks(taskCommands[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printKeywordMissingError();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printInvalidCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 94
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.exception.CorruptedFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.nio.file.FileAlreadyExistsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Configures the ArrayList task to set and clear isLoadingFromFile."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Calls retrieveData."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param pathname String that has the pathname for the data to be retrieved."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param tasks TaskList class used when changing isLoadingFromFile."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void loadDukeMemory(String pathname, TaskList tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui.printDividerLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        tasks.setIsLoadingFromFile(true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        retrieveData(pathname, tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui.printTaskNumberMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        tasks.setIsLoadingFromFile(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Retrieves the data from the text file and updates the task list in TaskList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param pathname String that has the pathname for the data to be retrieved."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param tasks TaskList class that is used to populate the task list in TaskList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void retrieveData(String pathname, TaskList tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ArrayList\u003cString\u003e fileData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        manageDataDirectory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        manageDukeMemory();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            File f \u003d new File(pathname);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(f);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                fileData.add(fileScanner.nextLine());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            convertFileToTaskList(fileData, tasks);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printFileScannerIOError();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            tasks.resetTaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printReadError();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            tasks.resetTaskList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printExceptionMessage(e.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            tasks.resetTaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Creates the data directory if it doesn\u0027t exist."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * It prints a loading message if the data directory already exists."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void manageDataDirectory() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Path directoryPath \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Files.createDirectory(directoryPath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"data directory was created!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } catch (FileAlreadyExistsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"data directory exists and is being loaded!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"IO exception while creating directory!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Creates the dukeMemory text file if it doesn\u0027t exist."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * It prints a loading message if it exists."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void manageDukeMemory() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Path dukeMemoryPath \u003d Paths.get(\"data/dukeMemory.txt\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Files.createFile(dukeMemoryPath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"dukeMemory file was created!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } catch (FileAlreadyExistsException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"dukeMemory file exists and is being loaded!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"IO exception when creating file!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Overwrites the dukeMemory text file with the current task list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param filePath String that has the file path to the text file to write to."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param tasks TaskList class used to access the current task list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void saveDukeMemory(String filePath, TaskList tasks) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                fw.write(formatTaskForFileWrite(task));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"IO exception when creating file from taskList\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } catch(IllegalStateException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Error while writing to file!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Formats the 3 different types of tasks into another format while writing to the file."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param currentTask Task class that is being formatted for the dukeMemory text file."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return The String that the task has been converted into."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String formatTaskForFileWrite(Task currentTask) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String fileWriteFormat;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Boolean taskDoneStatus \u003d currentTask.getDoneStatus();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        switch (currentTask.getTaskType()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"todo\" :"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            fileWriteFormat \u003d \"todo\" + \" | \" + taskDoneStatus + \" | \" + currentTask.getDescription();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Deadline currentDeadline \u003d (Deadline) currentTask;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            fileWriteFormat \u003d \"deadline\" + \" | \" + taskDoneStatus + \" | \" + currentTask.getDescription() + \" | \" + currentDeadline.getBy();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Event currentEvent \u003d (Event) currentTask;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            fileWriteFormat \u003d \"event\" + \" | \" + taskDoneStatus + \" | \" + currentTask.getDescription() + \" | \" + currentEvent.getAt();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + currentTask.getTaskType());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return fileWriteFormat;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Converts the text file\u0027s contents and adds the tasks into the task list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param fileData Arrays of Strings of each task to be added into the list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param tasks TaskList class used to add tasks into the task list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException If some tasks has corrupted fields."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @throws CorruptedFileException If the task\u0027s done status is neither true or false."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void convertFileToTaskList(ArrayList\u003cString\u003e fileData, TaskList tasks) throws ArrayIndexOutOfBoundsException, CorruptedFileException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        for (String taskData : fileData) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String[] taskDetails \u003d new String[5];"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String[] splitTaskData \u003d taskData.split(\"\\\\|\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String taskType \u003d splitTaskData[0].trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if(!splitTaskData[1].trim().equals(\"true\") \u0026\u0026 !splitTaskData[1].trim().equals(\"false\")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                throw new CorruptedFileException(\"Unable to load the file as it was corrupted!\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            boolean taskDoneStatus \u003d Boolean.parseBoolean(splitTaskData[1].trim());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                taskDetails[0] \u003d taskType;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                taskDetails[1] \u003d splitTaskData[2].trim();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                taskDetails[0] \u003d taskType;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                taskDetails[1] \u003d splitTaskData[2].trim() + \" /by \" + splitTaskData[3].trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                taskDetails[0] \u003d taskType;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                taskDetails[1] \u003d splitTaskData[2].trim() + \" /at \" + splitTaskData[3].trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                throw new CorruptedFileException(\"Unable to load the file as it was corrupted!\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                tasks.addTaskToList(taskDetails);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                if (taskDoneStatus) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    tasks.getTaskList().get(Task.getNumberOfTasks() - 1).markAsDone();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printExceptionMessage(e.toString());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 208
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Constructs a Deadline type of task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param description String containing the description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param by String containing the by timing of the deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.taskType \u003d \"deadline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns the by timing of the deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return String of by timing of the deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns a formatted String that shows the task is a deadline and its description and by timing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return formatted String that shows the task is a deadline, contains description and by timing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 38
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Constructs an Event type of task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param description String that contains the description of the event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param at String that contains the at timing of the event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.taskType \u003d \"event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns the at timing of the event task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return String that contains the at timing of the event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns a formatted String that shows the task is an data.Event and its description and at timing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return formatted String that shows the task is an data.Event, contains description and at timing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 38
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /** Number of tasks in the task list */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private static int numberOfTasks \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Constructs a task that is not done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param description String containing description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        numberOfTasks++;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns the description of the current task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return String containing description of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Sets the input to the description of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param description String containing description to write to the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns number of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return number of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public static int getNumberOfTasks() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return numberOfTasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns tick or cross depending if the task is done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return String that represents a tick or cross"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        //return tick or X symbols"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Decreases the number ot tasks by 1."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public static void decreaseNumberOfTasks() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        numberOfTasks--;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Resets the number of tasks to 0."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public static void resetNumberOfTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        numberOfTasks \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns if the task is done."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return Boolean value depending if the task is done."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Boolean getDoneStatus(){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns a string message that shows the done status icon of the task and description."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return String that shows the done status icon and description of the task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns the type of task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return String that is the type of task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 106
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.exception.MissingInformationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private Boolean isLoadingFromFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public TaskList () {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Sets if the tasks are being loaded from the txt file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param booleanValue The boolean value to set or clear isLoadingFromFile."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void setIsLoadingFromFile(Boolean booleanValue) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        isLoadingFromFile \u003d booleanValue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns the current ArrayList of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return ArrayList of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds a Todo type of task into the taskList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param taskDetails String input including Todo Description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void addTodo(String taskDetails) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Task newTodo \u003d new Todo(taskDetails);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        taskList.add(newTodo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (!isLoadingFromFile) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printDividerLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Got it! I\u0027ve added this todo: \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(newTodo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printDividerLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds a Deadline type of task into the taskList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param taskDetails String input including Deadline description and by."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @throws MissingInformationException If the user did not enter \u0027/by\u0027 in a deadline command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void addDeadline(String taskDetails) throws MissingInformationException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String[] deadlineDetails \u003d taskDetails.split(\"/by\", 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (deadlineDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new MissingInformationException(\"The deadline \u0027by\u0027 date/time was undetected!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String deadlineDescription \u003d deadlineDetails[0].trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String deadlineBy \u003d deadlineDetails[1].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Task newDeadline \u003d new Deadline(deadlineDescription, deadlineBy);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        taskList.add(newDeadline);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (!isLoadingFromFile) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printDividerLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Got it! I\u0027ve added this deadline: \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(newDeadline);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printDividerLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds a Event type of task into the taskList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param taskDetails String input including Event description and at."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @throws MissingInformationException If the user did not enter \u0027/at\u0027 in an event command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void addEvent(String taskDetails) throws MissingInformationException{"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String[] eventDetails \u003d taskDetails.split(\"/at\", 2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (eventDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new MissingInformationException(\"The event \u0027at\u0027 date/time was undetected!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String eventDescription \u003d eventDetails[0].trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String eventAt \u003d eventDetails[1].trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Task newEvent \u003d new Event(eventDescription, eventAt);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        taskList.add(newEvent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (!isLoadingFromFile) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printDividerLine();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Got it! I\u0027ve added this event: \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(newEvent);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printDividerLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Parses what type of task is added and calls the respective functions"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param taskCommand An array string that includes the task name and its details like description/by/at."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @throws MissingInformationException If there is no description for the tasks to be added."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void addTaskToList(String[] taskCommand) throws MissingInformationException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (taskCommand.length \u003c 2) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new MissingInformationException(\"The details of a \" + taskCommand[0] + \" cannot be empty!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String taskType \u003d taskCommand[0];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String taskDetails \u003d taskCommand[1];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            addTodo(taskDetails);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                addDeadline(taskDetails);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } catch (MissingInformationException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printExceptionMessage(e.toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                addEvent(taskDetails);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } catch (MissingInformationException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printExceptionMessage(e.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (!isLoadingFromFile) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printTaskNumberMessage();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printDividerLine();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Sets a task as done."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param taskNumber Task number to be set as done."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void setTaskAsDone(int taskNumber) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui.printDividerLine();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (taskNumber \u003c\u003d Task.getNumberOfTasks() \u0026\u0026 taskNumber \u003e 0) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Task currentTask \u003d taskList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            currentTask.markAsDone();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(currentTask);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Invalid task number to mark as done!\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui.printDividerLine();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Deletes a task from the taskList."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param taskNumber Task number to be deleted."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui.printDividerLine();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (taskNumber \u003c\u003d Task.getNumberOfTasks() \u0026\u0026 taskNumber \u003e 0) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Task currentTask \u003d taskList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            taskList.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Task.decreaseNumberOfTasks();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Got it! I\u0027ve deleted this task:\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(currentTask);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printTaskNumberMessage();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Invalid task number to delete!\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui.printDividerLine();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Resets the taskList into an empty ArrayList and resets number ot tasks."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void resetTaskList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Task.resetNumberOfTasks();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Finds and prints tasks that have descriptions containing the keyword entered."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param keyword String that is used to see if there are tasks with the keyword included in their description."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void findTasks(String keyword) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        int taskCount;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui.printDividerLine();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                matchingTaskList.add(task);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if(matchingTaskList.size() \u003e 0) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Here are the matching tasks in your list: \");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            for (taskCount \u003d 0; taskCount \u003c matchingTaskList.size(); taskCount++) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                System.out.println(taskCount + 1 + \". \" + matchingTaskList.get(taskCount));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"There are no tasks that match to \u0027\" + keyword + \"\u0027 in your list!\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui.printDividerLine();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 211
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Constructs a Todo type of task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param description String containing the description of the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.taskType \u003d \"todo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Returns a formatted String that shows the task is a todo and its description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return formatted String that shows the task is a todo, contains description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 24
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints file scanner IO error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printFileScannerIOError() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"IO error, Unable to find dukeMemory file!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints error message while reading file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printReadError() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Problems with reading file!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints invalid command message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printInvalidCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Sorry, I could not understand your command!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints message when task number cannot be parsed properly."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printTaskNumberParseError() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Unable to obtain task number!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints message when task number is not entered."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printTaskNumberNotFound() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"No task number detected!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints total number of tasks in the task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printTaskNumberMessage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Now you have \" + Task.getNumberOfTasks() + \" task(s) in your list!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints exception message."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param exceptionMessage String of warning message from various exceptions."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExceptionMessage(String exceptionMessage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(exceptionMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints the divider line between messages."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printDividerLine() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"___________________________________ \\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printWelcome() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String logo \u003d \"____        _        \\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke! \\n \" + logo);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints the goodbye message."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printGoodbye() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon! :)\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints the ArrayList of tasks."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param taskList ArrayList of tasks to be printed out."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        int taskCount;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (Task.getNumberOfTasks() \u003e 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            for (taskCount \u003d 0; taskCount \u003c Task.getNumberOfTasks(); taskCount++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                System.out.println(taskCount + 1 + \". \" + taskList.get(taskCount));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"There are no tasks in your list!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printKeywordMissingError() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"There was no keyword input after the find command!\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "matthewgani": 131
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "java -classpath ..\\bin duke\\Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 2,
      "-": 19
    }
  }
]
