[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.exception.AddDeadlineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.exception.AddEventException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "        loadFromDisk();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "        printWelcomeMsg();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "        waitForCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "        System.out.println(\"Bye bye! See you in my gameses~\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static void waitForCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "        input \u003d in.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String[] temp \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String command \u003d temp[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String arguments \u003d temp.length \u003d\u003d 2 ? temp[1] : null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "                printList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keke101"
        },
        "content": "                setTaskDone(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keke101"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keke101"
        },
        "content": "                deleteTask(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keke101"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keke101"
        },
        "content": "                addTask(Task.Type.DEADLINE, arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keke101"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keke101"
        },
        "content": "                addTask(Task.Type.TODO, arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keke101"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keke101"
        },
        "content": "                addTask(Task.Type.EVENT, arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keke101"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keke101"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keke101"
        },
        "content": "                System.out.println(\"Oh, no! I don\u0027t understand you, what are you trying to do?\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keke101"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keke101"
        },
        "content": "            input \u003d in.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Prints the welcome message with a randomly chosen logo"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static void printWelcomeMsg() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String logo \u003d \" .----------------.  .----------------.  .----------------.  .----------------.  .----------------. \\n\" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\\n\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| | ____    ____ | || |      __      | || |  _______     | || |     _____    | || |     ____     | |\\n\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| ||_   \\\\  /   _|| || |     /  \\\\     | || | |_   __ \\\\    | || |    |_   _|   | || |   .\u0027    `.   | |\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| |  |   \\\\/   |  | || |    / /\\\\ \\\\    | || |   | |__) |   | || |      | |     | || |  /  .--.  \\\\  | |\\n\" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| |  | |\\\\  /| |  | || |   / ____ \\\\   | || |   |  __ /    | || |      | |     | || |  | |    | |  | |\\n\" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| | _| |_\\\\/_| |_ | || | _/ /    \\\\ \\\\_ | || |  _| |  \\\\ \\\\_  | || |     _| |_    | || |  \\\\  `--\u0027  /  | |\\n\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| ||_____||_____|| || ||____|  |____|| || | |____| |___| | || |    |_____|   | || |   `.____.\u0027   | |\\n\" +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| |              | || |              | || |              | || |              | || |              | |\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 |\\n\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \" \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027 \\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keke101"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keke101"
        },
        "content": "        System.out.println(\"It\u0027s-a me, Mario! \\nWoohoo! What can I do for you?\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Set the task as done and prints the information"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param orderStr Order of the task inside the list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static void setTaskDone(String orderStr) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keke101"
        },
        "content": "        int order;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (orderStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"Oh, no! You didn\u0027t specify which task you are done with!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keke101"
        },
        "content": "            order \u003d Integer.parseInt(orderStr);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keke101"
        },
        "content": "            int index \u003d order - 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keke101"
        },
        "content": "            Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (task.isDone()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keke101"
        },
        "content": "                System.out.println(\"Mama Mia! You have already done this task~\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keke101"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keke101"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keke101"
        },
        "content": "                System.out.println(\"We did it! Good job little guy.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keke101"
        },
        "content": "                saveToDisk();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"\\t\" + task);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"Oh, no! I don\u0027t get what you are trying to say!\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (IndexOutOfBoundsException ioobe) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"Oh, no! This task does not exist!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Prints the entire list of tasks"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static void printList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keke101"
        },
        "content": "        int doneCount \u003d 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keke101"
        },
        "content": "        System.out.println(\"Here we go! These are the tasks you have:\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keke101"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keke101"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keke101"
        },
        "content": "            int order \u003d i + 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (task.isDone()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keke101"
        },
        "content": "                doneCount++;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.printf(\"\\t%d. %s%n\", order, task);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keke101"
        },
        "content": "        System.out.printf(\"You have %d tasks and you completed %d of them%n\", tasks.size(), doneCount);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Save the current list of tasks to the file \"data/duke.txt\" on the disk"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static void saveToDisk() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keke101"
        },
        "content": "            //Check if directory exists if not create it"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keke101"
        },
        "content": "            checkDataDir();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keke101"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keke101"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keke101"
        },
        "content": "                String rawData \u003d task.getRawData() + System.lineSeparator();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keke101"
        },
        "content": "                fw.append(rawData);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keke101"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"Fail to save data to disk\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keke101"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Load data from a file \"data/duke.txt\" on the disk"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static void loadFromDisk() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keke101"
        },
        "content": "            File f \u003d new File(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keke101"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keke101"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keke101"
        },
        "content": "                String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keke101"
        },
        "content": "                Task task \u003d Task.decodeTask(line);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keke101"
        },
        "content": "                if (task !\u003d null) { //If this task is not invalid"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keke101"
        },
        "content": "                    tasks.add(task);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keke101"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"Data file not found\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Check if data/ directory exists, if it does not exist, create it"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @throws IOException Throws if there are any IO exception"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static void checkDataDir() throws IOException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keke101"
        },
        "content": "        Path path \u003d Paths.get(\"./data\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keke101"
        },
        "content": "            Files.createDirectory(path);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Adds new task to the list"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param type Type of the new task"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param args Arguments that are passed with the type"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static void addTask(Task.Type type, String args) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "keke101"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "keke101"
        },
        "content": "                tasks.add(createDeadline(args));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "keke101"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "keke101"
        },
        "content": "                tasks.add(createTodo(args));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "keke101"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "keke101"
        },
        "content": "                tasks.add(createEvent(args));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keke101"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"Okey Dokey! Added: \" + tasks.get(tasks.size() - 1));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "keke101"
        },
        "content": "            saveToDisk();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (AddDeadlineException ade) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"Oh, no! Deadline\u0027s /by cannot be empty!\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (AddEventException aee) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"Oh, no! Event\u0027s /at cannot be empty!\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (EmptyNameException ene) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"Oh, no! Task cannot be created without a name!\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"Oh, no! More arguments is needed!\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Delete a task from the array list \"tasks\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param orderStr Order of the task inside the list"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static void deleteTask(String orderStr) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "keke101"
        },
        "content": "        int order;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (orderStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"Oh, no! You didn\u0027t specify which task you want to delete!\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "keke101"
        },
        "content": "            order \u003d Integer.parseInt(orderStr);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "keke101"
        },
        "content": "            int index \u003d order - 1;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "keke101"
        },
        "content": "            Task deletedTask \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.printf(\"Alrighty! The following task is gone!%n\" +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "keke101"
        },
        "content": "                    \"\\t%s%n\" +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "keke101"
        },
        "content": "                    \"Now you have %d tasks in the list.%n\", deletedTask, tasks.size());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "keke101"
        },
        "content": "            saveToDisk();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"Oh, no! I don\u0027t get what you are trying to say!\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (IndexOutOfBoundsException ioobe) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"Oh, no! I can\u0027t delete a task that does not exist!\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Creates a new deadline task"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param args Arguments of the command"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Newly created deadline"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static Deadline createDeadline(String args) throws EmptyNameException, AddDeadlineException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String[] argArr \u003d args.split(\" /by \");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String by;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "keke101"
        },
        "content": "        name \u003d argArr[0].trim();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (name.equals(\"\")) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new EmptyNameException();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (argArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new AddDeadlineException();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "keke101"
        },
        "content": "        by \u003d argArr[1].trim();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (by.equals(\"\")) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new AddDeadlineException();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new Deadline(name, by);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Creates a new to-do task"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name Name of the to-do task"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Newly created to-do"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static Todo createTodo(String name) throws EmptyNameException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "keke101"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (name.equals(\"\")) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new EmptyNameException();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new Todo(name);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Creates a new event task"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param args Arguments of the command"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Newly created event"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static Event createEvent(String args) throws EmptyNameException, AddEventException {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String[] argArr \u003d args.split(\" /at \");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String at;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "keke101"
        },
        "content": "        name \u003d argArr[0].trim();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (name.equals(\"\")) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new EmptyNameException();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (argArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new AddEventException();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "keke101"
        },
        "content": "        at \u003d argArr[1].trim();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (at.equals(\"\")) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new AddEventException();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new Event(name, at);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 297,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/AddDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class AddDeadlineException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/AddEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class AddEventException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DecodeTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class DecodeTaskException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyNameException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class EmptyNameException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 4
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Creates a new deadline task with specified name, by value and isDone \u003d false"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name Name of deadline task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param by   When the task needs to be done by"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Deadline(String name, String by) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this(name, false, by);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Creates a new deadline task with specified name, by and isDone value"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name Name of deadline task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param by   When the task needs to be done by"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Deadline(String name, boolean isDone, String by) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "        setBy(by);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Gets the \"by\" property"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return \"by\" value"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Sets the \"by\" property"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param by new \"by\" value"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void setBy(String by) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.by \u003d by.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns the formatted raw data for saving to hard disk"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return String containing the formatted raw data"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getRawData() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String escapedBy \u003d escapePipe(by); //Search for any occurrence of | and escape it with \\ "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"D | %s | %s\", super.getRawData(), escapedBy);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), by);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 60
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Event(String name, String at) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this(name, false, at);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Event(String name, boolean isDone, String at) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "        setAt(at);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Gets the \"at\" property"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return \"at\" value"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Sets the \"at\" property"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param at new \"at\" value"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void setAt(String at) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.at \u003d at.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns the formatted raw data for saving to hard disk"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return String containing the formatted raw data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getRawData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String escapedAt \u003d escapePipe(at); //Search for any occurrence of | and escape it with \\ "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"E | %s | %s\", super.getRawData(), escapedAt);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), at);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 48
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.exception.DecodeTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static final String TICK_SYMBOL \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static final String X_SYMBOL \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected static final String ESCAPED_PIPE_REPLACE \u003d Matcher.quoteReplacement(\"\\\\|\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected static final String DELIMITER_PIPE \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected static final String ESCAPED_PIPE_REGEX \u003d \"\\\\\\\\\\\\|\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public enum Type {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "        DEADLINE, EVENT, TODO"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Create a new task with provided name and isDone as false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name Name of the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this(name, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Create a new task with provided name and isDone value"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name   Name of task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param isDone Done status of the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Task(String name, boolean isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "        setName(name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "        setDone(isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns the name of the task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Name of the task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Sets the name of the task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name Name of the Task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.name \u003d name.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Return done status of the task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return isDone value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Set the isDone boolean of the task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param done New done status of task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keke101"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Mark the task as done"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keke101"
        },
        "content": "        setDone(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Get the status icon depending on isDone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Tick if isDone \u003d\u003d true, cross if isDone \u003d\u003d false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return (isDone ? TICK_SYMBOL : X_SYMBOL); //return tick or X symbols"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns the formatted raw data for saving to hard disk"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return String containing the formatted raw data"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getRawData() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String escapedName \u003d escapePipe(name); //Search for any occurrence of | and escape it with \\"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"%d | %s\", isDone ? 1 : 0, escapedName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Decode the raw data and return the respective object of the task"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param rawData Raw data for decoding"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Respective object of the task (e.g. Event, Deadline, To-do)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static Task decodeTask(String rawData) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String[] fields \u003d decodeRawData(rawData);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String type \u003d fields[0];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keke101"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return decodeTodo(fields);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return decodeEvent(fields);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return decodeDeadline(fields);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keke101"
        },
        "content": "            default: //Invalid type"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (DecodeTaskException dte) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Decode the raw data into array of string for further processing"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Handles the special character pipe (\"|\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param rawData Raw data for decoding"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Array of string with special character processed"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static String[] decodeRawData(String rawData) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String[] splitData \u003d rawData.split(DELIMITER_PIPE, 4);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keke101"
        },
        "content": "        for (int i \u003d 0; i \u003c splitData.length; i++) { //Remove any escaped | (\u0027\\|\u0027)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keke101"
        },
        "content": "            splitData[i] \u003d splitData[i].replaceAll(ESCAPED_PIPE_REGEX, \"|\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return splitData;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Decode the To-do task from the decoded raw data"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param fields Decoded raw data"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return To-do object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @throws DecodeTaskException One or more of the field(s) contain invalid data"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static Todo decodeTodo(String[] fields) throws DecodeTaskException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (fields.length !\u003d 3) { //Invalid data"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new DecodeTaskException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String name \u003d fields[2];"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keke101"
        },
        "content": "        boolean isDone \u003d decodeIsDone(fields[1]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new Todo(name, isDone);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Decode the Event task from the decoded raw data"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param fields Decoded raw data"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Event object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @throws DecodeTaskException One or more of the field(s) contain invalid data"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static Event decodeEvent(String[] fields) throws DecodeTaskException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (fields.length !\u003d 4) { //Invalid data"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new DecodeTaskException();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String name \u003d fields[2];"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keke101"
        },
        "content": "        boolean isDone \u003d decodeIsDone(fields[1]);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String at \u003d fields[3];"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new Event(name, isDone, at);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Decode the Deadline task from the decoded raw data"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param fields Decoded raw data"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Deadline object"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @throws DecodeTaskException One or more of the field(s) contain invalid data"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static Deadline decodeDeadline(String[] fields) throws DecodeTaskException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (fields.length !\u003d 4) { //Invalid data"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new DecodeTaskException();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String name \u003d fields[2];"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "keke101"
        },
        "content": "        boolean isDone \u003d decodeIsDone(fields[1]);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String by \u003d fields[3];"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new Deadline(name, isDone, by);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Decode the raw form of isDone (either \"0\" or \"1\") into boolean"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param isDoneStr raw form of isDone (\"0\" or \"1\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Return the boolean form of isDone"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @throws DecodeTaskException If raw form is not \"0\" or \"1\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static boolean decodeIsDone(String isDoneStr) throws DecodeTaskException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (isDoneStr.equals(\"0\")) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } else if (isDoneStr.equals(\"1\")) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } else { //Invalid data, the isDoneStr should only contain either \"0\" or \"1\" without any spaces"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new DecodeTaskException();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Escape every occurrences of pipe (\u0027|\u0027) in the string with \\"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param str String to escape the pip"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Original string with each occurrence of | replaced with \\|"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected static String escapePipe(String str) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return str.replaceAll(\"\\\\|\", ESCAPED_PIPE_REPLACE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns a formatted string of the task"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return [x] Name"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), getName());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 228
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Creates a new to-do task with the specified name and isDone \u003d false"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name Name of to-do task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Todo(String name) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this(name, false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Creates a new to-do task with the specified name and isDone value"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name   Name of to-do task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param isDone Done status of to-do task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Todo(String name, boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns the formatted raw data for saving to hard disk"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return String containing the formatted raw data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getRawData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"T | %s\", super.getRawData());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"[T]%s \", super.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 38
    }
  },
  {
    "path": "text-ui-test/data/test_duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "T | 1 | 123 \\| lol\\| haha\\|"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": "D | 1 | 9312 | 0213\\|122 \\|hehe"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "E | 0 | 2 | 3\\|1 \\|hhaha"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "D | 1 | D\\\\| | Wow\\| hello\\ hehe\\\\|\\\\|"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "D | 1| D\\\\| | Wow\\| hello\\ hehe\\\\|\\\\|"
      }
    ],
    "authorContributionMap": {
      "keke101": 5
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 6"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 7"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 8"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 8"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "abc"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "deadline "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "deadline return book /by"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "event "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "event project meeting"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "event project meeting /at"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "todo"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "done"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 1000"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "delete a"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "delete"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "keke101": 35
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "REM Clear bin directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "if exist ..\\bin rmdir /Q /S ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "REM Copy test_duke.txt for testing"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "copy .\\data\\test_duke.txt .\\data\\duke.txt"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\exception\\*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "REM Restore original duke.txt"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "del /Q .\\data\\duke.txt"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "keke101": 10,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "#Clear previously compiled binaries"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "if [ -e \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "  rm -rf ../bin/*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "#Copy test_duke.txt for testing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "cp ./data/test_duke.txt ./data/duke.txt"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/task/*.java ../src/main/java/duke/exception/*.java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "#Restore original duke.txt"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "rm ./data/duke.txt"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "keke101": 16,
      "-": 36
    }
  }
]
