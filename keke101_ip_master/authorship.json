[
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": ".----------------.  .----------------.  .----------------.  .----------------.  .----------------. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "| | ____    ____ | || |      __      | || |  _______     | || |     _____    | || |     ____     | |"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "| ||_   \\  /   _|| || |     /  \\     | || | |_   __ \\    | || |    |_   _|   | || |   .\u0027    `.   | |"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "| |  |   \\/   |  | || |    / /\\ \\    | || |   | |__) |   | || |      | |     | || |  /  .--.  \\  | |"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "| |  | |\\  /| |  | || |   / ____ \\   | || |   |  __ /    | || |      | |     | || |  | |    | |  | |"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "| | _| |_\\/_| |_ | || | _/ /    \\ \\_ | || |  _| |  \\ \\_  | || |     _| |_    | || |  \\  `--\u0027  /  | |"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "| ||_____||_____|| || ||____|  |____|| || | |____| |___| | || |    |_____|   | || |   `.____.\u0027   | |"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "| |              | || |              | || |              | || |              | || |              | |"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "| \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": " \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027 "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "### It\u0027s-a me, Mario!~"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "Talks like Mario, acts like Mario. This program will get rid of your boredom by making it feels like you are really talking to the actual character!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "### Different Type of Tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "Add tasks that suits your needs. Types of task includes:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "- **Todo**: Specifies tasks that needs to be done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "- **Deadline**: Specifies tasks that have deadlines."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "- **Event**: Specifies tasks that happen on a certain date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "### Mark Tasks as Done"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "Tasks can be marked as done so that it will be easier to differentiate between tasks that are done and not done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "### Delete Irrelevant Tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "Tasks that are no longer relevant can be deleted easily with a single command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "### Search with Ease"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "Search tasks using keyword easily with a single command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "### Persistent Data"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "Changes made to the task list are always saved to the disk and loaded when the program starts."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "### Multi-Platform"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "This program is supported across multiple platforms including but not limited to **Windows**, **Linux** and **macOS**."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "### `list` - List the tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": "This command will output the list of tasks available. "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keke101"
        },
        "content": "In general, this command will output:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keke101"
        },
        "content": "- Type of the task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keke101"
        },
        "content": "- Done status"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keke101"
        },
        "content": "- Name"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keke101"
        },
        "content": "For deadline and event tasks, it will also include the date to be completed by and the date of the task respectively."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keke101"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keke101"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keke101"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keke101"
        },
        "content": "Here we go! These are the tasks you have:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keke101"
        },
        "content": "  1. [T][âœ“] borrow book"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keke101"
        },
        "content": "  2. [D][âœ˜] return book (by: Jan 23 2020 19:25)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keke101"
        },
        "content": "  3. [E][âœ˜] project meeting (at: Mar 05 2020 15:00)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keke101"
        },
        "content": "You have 3 tasks and you completed 1 of them"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Populated list.*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keke101"
        },
        "content": "Here we go! These are the tasks you have:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keke101"
        },
        "content": "You have 0 tasks and you completed 0 of them"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Empty list.*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keke101"
        },
        "content": "### `find \u003ckeyword\u003e` - Find tasks that contains specific keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keke101"
        },
        "content": "This command will find tasks that contains a specific keyword provided by the user. It will then output in the format similar to `list` with the exception that it will only show the matching tasks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keke101"
        },
        "content": "Required Option:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keke101"
        },
        "content": "- `keyword` - Keyword to search for."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keke101"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keke101"
        },
        "content": "`find book`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keke101"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keke101"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keke101"
        },
        "content": "  1. [T][âœ“] borrow book"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keke101"
        },
        "content": "  2. [D][âœ“] return book (by: Jan 23 2020 19:25)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Results matching the keyword \"book\".*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! There\u0027s no task that matches the keyword: grocery"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- No matching tasks.*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! You have to specify what to find!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Keyword is not specified.*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keke101"
        },
        "content": "### `todo \u003cname\u003e` - Add a new Todo task to the task list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keke101"
        },
        "content": "This command will create and add a new Todo task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keke101"
        },
        "content": "Required Option:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keke101"
        },
        "content": "- `name` - Specifies the name of the task."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keke101"
        },
        "content": "`todo borrow book`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keke101"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keke101"
        },
        "content": "Okey Dokey! Added: [T][âœ˜] borrow book "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Todo task added successfully.*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! Task cannot be created without a name!"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Name of task not specified.*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! More arguments is needed!"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Not enough arguments are supplied.*"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keke101"
        },
        "content": "### `deadline \u003cname\u003e /by \u003cdate\u003e` - Add a new Event task to the task list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keke101"
        },
        "content": "This command will create and add a new Deadline task."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keke101"
        },
        "content": "Required Options:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keke101"
        },
        "content": "- `name` - Specifies the name of the task."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keke101"
        },
        "content": "- `date` - Specifies the deadline of the task. Format of date must be in: `yyyy-MM-dd HHmm`."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keke101"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keke101"
        },
        "content": "`deadline return book /by 2020-01-23 1925`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keke101"
        },
        "content": "Okey Dokey! Added: [D][âœ˜] return book (by: Jan 23 2020 19:25)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Deadline task added successfully.*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! Task cannot be created without a name!"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Name of task not specified.*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! Deadline\u0027s /by cannot be empty!"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Deadline of task not specified.*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! Please follow the follow date format: yyyy-MM-dd HHmm"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Date specified is not in the required format.*"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! More arguments is needed!"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Not enough arguments are supplied.*"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keke101"
        },
        "content": "### `event \u003cname\u003e /at \u003cdate\u003e` - Add a new Event task to the task list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keke101"
        },
        "content": "This command will create and add a new Event task."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keke101"
        },
        "content": "Required Options:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keke101"
        },
        "content": "- `name` - Specifies the name of the task."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keke101"
        },
        "content": "- `date` - Specifies the date of occurrence of the task. Format of date must be in: `yyyy-MM-dd HHmm`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keke101"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keke101"
        },
        "content": "`event project meeting /at 2020-03-05 1500`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keke101"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keke101"
        },
        "content": "Okey Dokey! Added: [E][âœ˜] project meeting (at: Mar 05 2020 15:00)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Event task added successfully.*"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! Task cannot be created without a name!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Name of task not specified.*"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! Event\u0027s /at cannot be empty!"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Event of task not specified.*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! Please follow the follow date format: yyyy-MM-dd HHmm"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Date specified is not in the required format.*"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! More arguments is needed!"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Not enough arguments are supplied.*"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "keke101"
        },
        "content": "### `done \u003corder\u003e` - Mark a specific task as done."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "keke101"
        },
        "content": "This command will attempt to mark the task specified by order as done."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "keke101"
        },
        "content": "Required Option:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "keke101"
        },
        "content": "- `order` - Order of the task to be marked as done."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "keke101"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "keke101"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "keke101"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "keke101"
        },
        "content": "We did it! Good job little guy."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "keke101"
        },
        "content": "  [D][âœ“] return book (by: Jan 23 2020 19:25)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Task is successfully marked as done.*"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "keke101"
        },
        "content": "Mama Mia! You have already done this task~"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "keke101"
        },
        "content": "  [D][âœ“] return book (by: Jan 23 2020 19:25)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Task is already done.*"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! You didn\u0027t specify which task you are done with!"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Order is not specified.*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! This task does not exist!"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Specified task does not exist.*"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "keke101"
        },
        "content": "### `delete \u003corder\u003e` - Delete a task from the task list"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "keke101"
        },
        "content": "This command will attempt to delete a task specified by order from the task list."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "keke101"
        },
        "content": "Required Option:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "keke101"
        },
        "content": "- `order` - Order of the task to be deleted."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "keke101"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "keke101"
        },
        "content": "`delete 3`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "keke101"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "keke101"
        },
        "content": "Alrighty! The following task is gone!"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "keke101"
        },
        "content": "\t[E][âœ˜] project meeting (at: Mar 05 2020 15:00)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Task is successfully deleted.*"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! You didn\u0027t specify which task you want to delete!"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Order is not specified.*"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! I can\u0027t delete a task that does not exist!"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "keke101"
        },
        "content": "*- Specified task does not exist.*"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "keke101"
        },
        "content": "### `exit` - Exit the program"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "keke101"
        },
        "content": "This command will cause the program to save the current list of tasks and exit."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "keke101"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "keke101"
        },
        "content": "`exit`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "keke101"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "keke101"
        },
        "content": "Bye bye! See you in my gameses~"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "keke101"
        },
        "content": "### Unknown Command"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "keke101"
        },
        "content": "When an unknown command is entered, the program outputs the following message and returns to wait for input."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "keke101"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "keke101"
        },
        "content": "`someunknowncommand`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "keke101"
        },
        "content": "Oh, no! I don\u0027t get what you are trying to say!"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "keke101"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "keke101": 251,
      "-": 16
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "import static java.lang.System.exit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static final String SAVE_FILE \u003d \"./data/duke.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Run the program"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "        waitAndRunCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "        exitProgram();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Initialise the program"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Exits with status 1 if the program fails to create the parent directory for data file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": "            ui \u003d new Ui(System.in, System.out);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": "            parser \u003d new Parser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keke101"
        },
        "content": "            storage \u003d new Storage(SAVE_FILE, tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keke101"
        },
        "content": "            storage.load();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keke101"
        },
        "content": "            exit(1); //exit with error number"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Wait for user input and run the user command upon input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Exits when user types \"bye\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private void waitAndRunCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keke101"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keke101"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keke101"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String commandTxt \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keke101"
        },
        "content": "            command \u003d parser.parse(commandTxt);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keke101"
        },
        "content": "            CommandResult result \u003d executeCommand(command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keke101"
        },
        "content": "            ui.printFeedback(result.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } while (!(command instanceof ExitCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Executes the following when program is exiting:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * 1. Prints good bye message"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private void exitProgram() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keke101"
        },
        "content": "        ui.printGoodbyeMessage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Executes the command and return the result"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param command CommandObject that specify the command to execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return CommandResult object that contains the result of the command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private CommandResult executeCommand(Command command) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keke101"
        },
        "content": "        command.setData(tasks);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keke101"
        },
        "content": "        CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (result.shouldSave) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keke101"
        },
        "content": "            storage.save();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 86,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Create and add a new Deadline task into a list of tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private final LocalDateTime by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Prepare the command for creating and adding a new Deadline task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param by   deadline of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public AddDeadlineCommand(String name, LocalDateTime by) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Create and add a new Deadline task into tasks as specified by setData()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return CommandResult with the new task as retObj and a success message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "        Task task \u003d new Deadline(name, by);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new CommandResult(task, String.format(\"Okey Dokey! Added: %s%n\", task), true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 39
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Create and add a new Event task into a list of tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private final LocalDateTime at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Prepare the command for creating and adding a new Event task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param at   Date of the task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public AddEventCommand(String name, LocalDateTime at) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Create and add a new Event task into tasks as specified by setData()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return CommandResult with the new task as retObj and a success message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "        Task task \u003d new Event(name, at);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new CommandResult(task, String.format(\"Okey Dokey! Added: %s%n\", task), true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 38
    }
  },
  {
    "path": "src/main/java/duke/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Create and add a new To-do task into a list of tasks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Prepare the command for creating and adding a new To-do task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public AddTodoCommand(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Create and add a new to-do task into tasks as specified by setData()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return CommandResult with the new task as retObj and a success message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "        Task task \u003d new Todo(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new CommandResult(task, String.format(\"Okey Dokey! Added: %s%n\", task), true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 34
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Abstract class for all commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks \u003d null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Set the data of tasks for the command to be processed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param tasks The list of tasks to be processed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void setData(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Method for executing the command. To be overriden by child classes"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Nothing. Throws an UnsupportedOperationException if executed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "        throw new UnsupportedOperationException(\"This method needs to be implemented by child classes\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 30
    }
  },
  {
    "path": "src/main/java/duke/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Result of a command executed"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public final Object retObj; //Object that is returned as a result of executing a command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public final String feedback; //Feedback to be printed"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public final boolean shouldSave; //Flag for saving result to disk"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Command result with shouldSave set as false by default"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param retObj   Object to be returned as a result of executing a command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param feedback Feedback to be printed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public CommandResult(Object retObj, String feedback) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this(retObj, feedback, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Command result with specified shouldSave value"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param retObj     Object to be returned as a result of executing a command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param feedback   Feedback to be printed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param shouldSave Flag for saving result to disk"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public CommandResult(Object retObj, String feedback, boolean shouldSave) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.retObj \u003d retObj;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.feedback \u003d feedback;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.shouldSave \u003d shouldSave;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * toString() method of CommandResult"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return feedback of CommandResult"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 43
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Delete an existing task from the list of tasks"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Prepare the command for deleting an existing task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param order Order of the task in the list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public DeleteCommand(int order) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "        index \u003d order - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Delete an existing task from the list of tasks specified by setData()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return If success, CommandResult with the deleted task as retObj and a success message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * If fail, CommandResult with failure message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "            Task task \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String feedback \u003d String.format(\"Alrighty! The following task is gone!%n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "                    \"\\t%s%n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "                    \"Now you have %d tasks in the list.%n\", task, tasks.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new CommandResult(task, feedback, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (IndexOutOfBoundsException ioobe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new CommandResult(null, String.format(\"Oh, no! I can\u0027t delete a task that does not exist!%n\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 40
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Mark an existing task as done"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Prepare the command for marking an existing task as done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param order Order of the task in the list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public DoneCommand(int order) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "        index \u003d order - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Mark an existing task in list of tasks specified by setData() as done"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return If success, CommandResult with the respective task as retObj and a success message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * If task is already done, CommandResult with a neutral message specifying the task is already done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * If task does not exist, CommandResult with failure message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "            Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (task.isDone()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return new CommandResult(task, String.format(\"Mama Mia! You have already done this task~%n\\t%s%n\", task));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new CommandResult(task, String.format(\"We did it! Good job little guy.%n\\t%s%n\", task), true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (IndexOutOfBoundsException ioobe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new CommandResult(null, String.format(\"Oh, no! This task does not exist!%n\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 42
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Exit program"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Used to exit the program. retObj and feedback is null. shouldSave will be set as true."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return A CommandResult with shouldSave \u003d true"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new CommandResult(null, null, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 18
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Find tasks that contains specific keyword"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Prepare the command for finding tasks that contains specific keyword"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param keyword Keyword used for searching tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Find tasks that contains specific keyword in tasks as specified by setData()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return CommandResult with a success message that contains the list of tasks found"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "        int order \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String header \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "        StringBuilder body \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (task.getName().contains(keyword)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "                body.append(String.format(\"\\t%d. %s%n\", order++, task));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String feedback;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (order !\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "            feedback \u003d String.format(\"%s%n%s\", header, body.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "            feedback \u003d String.format(\"Oh, no! There\u0027s no task that matches the keyword: %s%n\", keyword);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new CommandResult(null, feedback);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 45
    }
  },
  {
    "path": "src/main/java/duke/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Used when command is invalid"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private final String errorMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Prepare the command with an error message to be printed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param errorMessage Error message that states the reason of invalid command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public InvalidCommand(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Specify the error message that will be printed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return CommandResult with error message to be printed specified"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new CommandResult(null, String.format(\"%s%n\", errorMessage));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 27
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": " * List all tasks from the list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Prepare the command for listing all the tasks from the list specified by setData()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return CommandResult with the list of tasks in the feedback. retObj will be null"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "        int doneCount \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "        int order \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String header \u003d \"Here we go! These are the tasks you have:\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "        StringBuilder body \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (task.isDone()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "                doneCount++;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "            body.append(String.format(\"\\t%d. %s%n\", order++, task));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String footer \u003d String.format(\"You have %d tasks and you completed %d of them%n\", tasks.size(), doneCount);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String feedback \u003d String.format(\"%s%n%s%s\", header, body.toString(), footer);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new CommandResult(null, feedback);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 33
    }
  },
  {
    "path": "src/main/java/duke/exception/DecodeTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Exception when there is error decoding a task from its raw data"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class DecodeTaskException extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyOrderException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Error when order of task not specified"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class EmptyOrderException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 7
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.exception.EmptyOrderException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Command parser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String CMD_ARG_SEPARATOR \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final int CMD_ARG_SPLIT_LIMIT \u003d 2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String ERRMSG_TASK_NOT_EXIST \u003d \"Oh, no! This task does not exist!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String ERRMSG_INVALID_ORDERNO \u003d \"Oh, no! I don\u0027t get what you are trying to say!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String ERRMSG_NOT_ENOUGH_ARGS \u003d \"Oh, no! More arguments is needed!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String ERRMSG_NO_NAME \u003d \"Oh, no! Task cannot be created without a name!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String ERRMSG_EMPTY_D_BY \u003d \"Oh, no! Deadline\u0027s /by cannot be empty!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String ERRMSG_EMPTY_E_AT \u003d \"Oh, no! Event\u0027s /at cannot be empty!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String ERRMSG_UNKNOWN_CMD \u003d \"Oh, no! I don\u0027t understand you, what are you trying to do?\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String ERRMSG_DONE_ORDER_EMPTY \u003d \"Oh, no! You didn\u0027t specify which task you are done with!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String ERRMSG_DEL_ORDER_EMPTY \u003d \"Oh, no! You didn\u0027t specify which task you want to delete!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String ERRMSG_DATETIME_INVALID \u003d String.format(\"Oh, no! Please follow the follow date format: %s\", Task.INPUT_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String ERRMSG_KEYWORD_EMPTY \u003d \"Oh, no! You have to specify what to find!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Parse the raw input from user and return the respective command to be executed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param input Raw input from user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return A Command object that is associated to the command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Command parse(String input) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String[] temp \u003d input.split(CMD_ARG_SEPARATOR, CMD_ARG_SPLIT_LIMIT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String command \u003d temp[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String rawArgs \u003d temp.length \u003d\u003d 2 ? temp[1] : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keke101"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keke101"
        },
        "content": "        case FindCommand.COMMAND:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return prepareFind(rawArgs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keke101"
        },
        "content": "        case ListCommand.COMMAND:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return prepareList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keke101"
        },
        "content": "        case DoneCommand.COMMAND:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return prepareDone(rawArgs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keke101"
        },
        "content": "        case DeleteCommand.COMMAND:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return prepareDelete(rawArgs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keke101"
        },
        "content": "        case AddTodoCommand.COMMAND:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return prepareAddTodo(rawArgs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keke101"
        },
        "content": "        case AddDeadlineCommand.COMMAND:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return prepareAddDeadline(rawArgs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keke101"
        },
        "content": "        case AddEventCommand.COMMAND:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return prepareAddEvent(rawArgs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keke101"
        },
        "content": "        case ExitCommand.COMMAND:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keke101"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new InvalidCommand(ERRMSG_UNKNOWN_CMD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Find tasks that contains specific keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param args Raw form of the argument given by the user"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return FindCommand object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Command prepareFind(String args) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String keyword \u003d args.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (keyword.equals(\"\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return new InvalidCommand(ERRMSG_KEYWORD_EMPTY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new FindCommand(keyword);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new InvalidCommand(ERRMSG_KEYWORD_EMPTY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * List all tasks from the list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return ListCommand object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Command prepareList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Mark an existing task as done"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return DoneCommand object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Command prepareDone(String args) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keke101"
        },
        "content": "        int order;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keke101"
        },
        "content": "            order \u003d parseArgsAsOrder(args);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new DoneCommand(order);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (EmptyOrderException eoe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new InvalidCommand(ERRMSG_DONE_ORDER_EMPTY);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new InvalidCommand(ERRMSG_INVALID_ORDERNO);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (IndexOutOfBoundsException ioobe) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new InvalidCommand(ERRMSG_TASK_NOT_EXIST);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Delete an existing task from the list of tasks"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param args Raw form of the argument given by user"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return DeleteCommand object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Command prepareDelete(String args) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keke101"
        },
        "content": "        int order;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keke101"
        },
        "content": "            order \u003d parseArgsAsOrder(args);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new DeleteCommand(order);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (EmptyOrderException eoe) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new InvalidCommand(ERRMSG_DEL_ORDER_EMPTY);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new InvalidCommand(ERRMSG_INVALID_ORDERNO);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (IndexOutOfBoundsException ioobe) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new InvalidCommand(ERRMSG_TASK_NOT_EXIST);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Create and add a new To-do task into a list of tasks"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param args Raw form of the argument given by user"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return AddTodoCommand object"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Command prepareAddTodo(String args) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (args \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new InvalidCommand(ERRMSG_NOT_ENOUGH_ARGS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String name \u003d args.trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (name.equals(\"\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new InvalidCommand(ERRMSG_NO_NAME);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new AddTodoCommand(name);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Create and add a new Deadline task into a list of tasks"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param args Raw form of the argument given by user"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return AddDeadlineCommand object"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Command prepareAddDeadline(String args) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (args \u003d\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return new InvalidCommand(ERRMSG_NOT_ENOUGH_ARGS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String[] argArr \u003d args.split(\" /by \");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String name;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String byStr;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keke101"
        },
        "content": "            name \u003d argArr[0].trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (name.equals(\"\")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return new InvalidCommand(ERRMSG_NO_NAME);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (argArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return new InvalidCommand(ERRMSG_EMPTY_D_BY);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keke101"
        },
        "content": "            byStr \u003d argArr[1].trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (byStr.equals(\"\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return new InvalidCommand(ERRMSG_EMPTY_D_BY);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keke101"
        },
        "content": "            LocalDateTime by \u003d Task.parseDateStr(byStr);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new AddDeadlineCommand(name, by);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new InvalidCommand(ERRMSG_DATETIME_INVALID);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Create and add a new Event task into a list of tasks"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param args Raw form of the argument given by user"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return AddEventCommand object"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Command prepareAddEvent(String args) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (args \u003d\u003d null) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return new InvalidCommand(ERRMSG_NOT_ENOUGH_ARGS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String[] argArr \u003d args.split(\" /at \");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String name;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String atStr;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "keke101"
        },
        "content": "            name \u003d argArr[0].trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (name.equals(\"\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return new InvalidCommand(ERRMSG_NO_NAME);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (argArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return new InvalidCommand(ERRMSG_EMPTY_E_AT);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "keke101"
        },
        "content": "            atStr \u003d argArr[1].trim();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (atStr.equals(\"\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return new InvalidCommand(ERRMSG_EMPTY_E_AT);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keke101"
        },
        "content": "            LocalDateTime at \u003d Task.parseDateStr(atStr);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new AddEventCommand(name, at);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new InvalidCommand(ERRMSG_DATETIME_INVALID);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Parse the argument given as order (a positive integer)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param arg Raw argument"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Order (a positive integer)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @throws EmptyOrderException If arg is null"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private int parseArgsAsOrder(String arg) throws EmptyOrderException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new EmptyOrderException();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return Integer.parseInt(arg);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 230
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Storage manager for loading and saving to disk"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Create a Storage object to manage loading and saving of data to disk"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param filename Name of data file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param tasks    Object to be used for processing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @throws IOException If cannot create the parent directory of the data file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Storage(String filename, TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.path \u003d Paths.get(filename);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "        checkParentDir();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Saves the current data in \"tasks\" to disk"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "            checkParentDir();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "            FileWriter fw \u003d new FileWriter(path.toFile());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": "                String rawData \u003d task.getRawData() + System.lineSeparator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": "                fw.append(rawData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keke101"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"[Error] Fail to save data to disk\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keke101"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Load the data from the data file to \"tasks\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void load() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keke101"
        },
        "content": "            File f \u003d path.toFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keke101"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keke101"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keke101"
        },
        "content": "                String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keke101"
        },
        "content": "                Task task \u003d Task.decodeTask(line);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keke101"
        },
        "content": "                if (task !\u003d null) { //If this task is not invalid"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keke101"
        },
        "content": "                    tasks.add(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keke101"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.println(\"[Warning] Data file not found\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keke101"
        },
        "content": "            fnfe.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Check if parent directory exists"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @throws IOException if cannot create directory"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private void checkParentDir() throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keke101"
        },
        "content": "        Path parentPath \u003d path.getParent();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (!Files.exists(parentPath)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keke101"
        },
        "content": "                Files.createDirectory(parentPath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keke101"
        },
        "content": "            System.out.printf(\"[Error] Cannot create %s directory\", parentPath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keke101"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 91
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Allows users to create tasks with a deadline"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Creates a new deadline task with specified name, by value and isDone \u003d false"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name Name of deadline task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param by   When the task needs to be done by"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Deadline(String name, LocalDateTime by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this(name, false, by);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Creates a new deadline task with specified name, by and isDone value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name Name of deadline task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param isDone Done status of task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param by   When the task needs to be done by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Deadline(String name, boolean isDone, LocalDateTime by) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "        setBy(by);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Gets the \"by\" property"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return \"by\" value"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public LocalDateTime getBy() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Sets the \"by\" property"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param by new \"by\" value"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void setBy(LocalDateTime by) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns the formatted raw data for saving to hard disk"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return String containing the formatted raw data"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getRawData() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"D | %s | %s\", super.getRawData(), by.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns a formatted version of the Deadline for printing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * E.g. [D] Assignment 1 (by: Thurs, 1pm)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return formatted version of the Deadline for printing"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String dateStr \u003d by.format(DateTimeFormatter.ofPattern(OUTPUT_DATETIME_FORMAT));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), dateStr);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 74
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Allows users to create event tasks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Creates a new event task with specified name, at value and isDone \u003d false"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name Name of event task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param at When the event happens"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Event(String name, LocalDateTime at) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this(name, false, at);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Creates a new event task with specified name, at and isDone value"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name Name of event task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param isDone Done status of task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param at When the event happens"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Event(String name, boolean isDone, LocalDateTime at) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "        setAt(at);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Gets the \"at\" property"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return \"at\" value"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public LocalDateTime getAt() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Sets the \"at\" property"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param at new \"at\" value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void setAt(LocalDateTime at) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns the formatted raw data for saving to hard disk"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return String containing the formatted raw data"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getRawData() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"E | %s | %s\", super.getRawData(), at.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns a formatted version of the Event for printing"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * E.g. [E] Birthday (at: Thurs, 1pm)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return formatted version of the Event for printing"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String dateStr \u003d at.format(DateTimeFormatter.ofPattern(OUTPUT_DATETIME_FORMAT));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), dateStr);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 73
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import duke.exception.DecodeTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Allows a user to create a plain task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String INPUT_DATETIME_FORMAT \u003d \"yyyy-MM-dd HHmm\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static final String OUTPUT_DATETIME_FORMAT \u003d \"MMM dd yyyy HH:mm\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static final String TICK_SYMBOL \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static final String X_SYMBOL \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected static final String ESCAPED_PIPE_REPLACE \u003d Matcher.quoteReplacement(\"\\\\|\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected static final String DELIMITER_PIPE \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected static final String ESCAPED_PIPE_REGEX \u003d \"\\\\\\\\\\\\|\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Create a new task with provided name and isDone as false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name Name of the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this(name, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Create a new task with provided name and isDone value"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name   Name of task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param isDone Done status of the task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Task(String name, boolean isDone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "        setName(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "        setDone(isDone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns the name of the task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Name of the task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Sets the name of the task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name Name of the Task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.name \u003d name.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Return done status of the task"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return isDone value"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Set the isDone boolean of the task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param done New done status of task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keke101"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Mark the task as done"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keke101"
        },
        "content": "        setDone(true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Get the status icon depending on isDone"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Tick if isDone \u003d\u003d true, cross if isDone \u003d\u003d false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return (isDone ? TICK_SYMBOL : X_SYMBOL); //return tick or X symbols"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns the formatted raw data for saving to hard disk"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return String containing the formatted raw data"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getRawData() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String escapedName \u003d escapePipe(name); //Search for any occurrence of | and escape it with \\"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"%d | %s\", isDone ? 1 : 0, escapedName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Decode the raw data and return the respective object of the task"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param rawData Raw data for decoding"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Respective object of the task (e.g. Event, Deadline, To-do)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static Task decodeTask(String rawData) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String[] fields \u003d decodeRawData(rawData);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String type \u003d fields[0];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keke101"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return decodeTodo(fields);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return decodeEvent(fields);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keke101"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return decodeDeadline(fields);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keke101"
        },
        "content": "            default: //Invalid type"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keke101"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (DecodeTaskException dte) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Decode the raw data into array of string for further processing"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Handles the special character pipe (\"|\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param rawData Raw data for decoding"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Array of string with special character processed"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static String[] decodeRawData(String rawData) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String[] splitData \u003d rawData.split(DELIMITER_PIPE, 4);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keke101"
        },
        "content": "        for (int i \u003d 0; i \u003c splitData.length; i++) { //Remove any escaped | (\u0027\\|\u0027)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keke101"
        },
        "content": "            splitData[i] \u003d splitData[i].replaceAll(ESCAPED_PIPE_REGEX, \"|\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return splitData;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Decode the To-do task from the decoded raw data"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param fields Decoded raw data"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return To-do object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @throws DecodeTaskException One or more of the field(s) contain invalid data"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static Todo decodeTodo(String[] fields) throws DecodeTaskException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (fields.length !\u003d 3) { //Invalid data"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new DecodeTaskException();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String name \u003d fields[2];"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keke101"
        },
        "content": "        boolean isDone \u003d decodeIsDone(fields[1]);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return new Todo(name, isDone);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Decode the Event task from the decoded raw data"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param fields Decoded raw data"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Event object"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @throws DecodeTaskException One or more of the field(s) contain invalid data"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static Event decodeEvent(String[] fields) throws DecodeTaskException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (fields.length !\u003d 4) { //Invalid data"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "keke101"
        },
        "content": "                throw new DecodeTaskException();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String name \u003d fields[2];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keke101"
        },
        "content": "            boolean isDone \u003d decodeIsDone(fields[1]);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String atStr \u003d fields[3];"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keke101"
        },
        "content": "            LocalDateTime at \u003d LocalDateTime.parse(atStr);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new Event(name, isDone, at);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new DecodeTaskException();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Decode the Deadline task from the decoded raw data"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param fields Decoded raw data"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Deadline object"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @throws DecodeTaskException One or more of the field(s) contain invalid data"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static Deadline decodeDeadline(String[] fields) throws DecodeTaskException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "keke101"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "keke101"
        },
        "content": "            if (fields.length !\u003d 4) { //Invalid data"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "keke101"
        },
        "content": "                throw new DecodeTaskException();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "keke101"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String name \u003d fields[2];"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "keke101"
        },
        "content": "            boolean isDone \u003d decodeIsDone(fields[1]);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "keke101"
        },
        "content": "            String byStr \u003d fields[3];"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keke101"
        },
        "content": "            LocalDateTime by \u003d LocalDateTime.parse(byStr);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return new Deadline(name, isDone, by);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new DecodeTaskException();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Decode the raw form of isDone (either \"0\" or \"1\") into boolean"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param isDoneStr raw form of isDone (\"0\" or \"1\")"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Return the boolean form of isDone"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @throws DecodeTaskException If raw form is not \"0\" or \"1\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private static boolean decodeIsDone(String isDoneStr) throws DecodeTaskException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (isDoneStr.equals(\"0\")) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } else if (isDoneStr.equals(\"1\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keke101"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "keke101"
        },
        "content": "        } else { //Invalid data, the isDoneStr should only contain either \"0\" or \"1\" without any spaces"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "keke101"
        },
        "content": "            throw new DecodeTaskException();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Escape every occurrences of pipe (\u0027|\u0027) in the string with \\"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param str String to escape the pip"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Original string with each occurrence of | replaced with \\|"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "keke101"
        },
        "content": "    protected static String escapePipe(String str) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return str.replaceAll(\"\\\\|\", ESCAPED_PIPE_REPLACE);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Parse string as LocalDate"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param dateStr date as string format"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public static LocalDateTime parseDateStr(String dateStr) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return LocalDateTime.parse(dateStr, DateTimeFormatter.ofPattern(INPUT_DATETIME_FORMAT));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns a formatted string of the task"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return [x] Name"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), getName());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 251
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Object for storing list of tasks"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 9
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Allows users to create to-do tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Creates a new to-do task with the specified name and isDone \u003d false"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name Name of to-do task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Todo(String name) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this(name, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Creates a new to-do task with the specified name and isDone value"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param name   Name of to-do task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param isDone Done status of to-do task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Todo(String name, boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns the formatted raw data for saving to hard disk"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return String containing the formatted raw data"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getRawData() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"T | %s\", super.getRawData());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Returns a formatted version of the To-do for printing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * E.g. [T] Buy shower gel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return formatted version of the To-do for printing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return String.format(\"[T]%s \", super.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 47
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": " * Class for handling user interaction such as getting user inputs and printing outputs to user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Create a Ui object that specifies the input stream and output stream"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param in Input stream for reading inputs from the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param out Output stream for printing feedbacks to the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Get command input from the user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return Input from the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String line \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "        while (shouldIgnore(line) \u0026\u0026 in.hasNextLine()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "            line \u003d in.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Prints the welcome message when user starts the program"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keke101"
        },
        "content": "        String logo \u003d String.format(\" .----------------.  .----------------.  .----------------.  .----------------.  .----------------. %n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |%n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| | ____    ____ | || |      __      | || |  _______     | || |     _____    | || |     ____     | |%n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| ||_   \\\\  /   _|| || |     /  \\\\     | || | |_   __ \\\\    | || |    |_   _|   | || |   .\u0027    `.   | |%n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| |  |   \\\\/   |  | || |    / /\\\\ \\\\    | || |   | |__) |   | || |      | |     | || |  /  .--.  \\\\  | |%n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| |  | |\\\\  /| |  | || |   / ____ \\\\   | || |   |  __ /    | || |      | |     | || |  | |    | |  | |%n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| | _| |_\\\\/_| |_ | || | _/ /    \\\\ \\\\_ | || |  _| |  \\\\ \\\\_  | || |     _| |_    | || |  \\\\  `--\u0027  /  | |%n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| ||_____||_____|| || ||____|  |____|| || | |____| |___| | || |    |_____|   | || |   `.____.\u0027   | |%n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| |              | || |              | || |              | || |              | || |              | |%n\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \"| \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 |%n\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keke101"
        },
        "content": "                \" \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027 %n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keke101"
        },
        "content": "        out.printf(\"%s%nIt\u0027s-a me, Mario! %nWoohoo! What can I do for you?%n\", logo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Prints good bye message when user exits the program"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void printGoodbyeMessage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keke101"
        },
        "content": "        out.println(\"Bye bye! See you in my gameses~\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Print feedback to user after executing a command, typically used with CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param feedback from executing a command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keke101"
        },
        "content": "    public void printFeedback(String feedback) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keke101"
        },
        "content": "        if (feedback !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keke101"
        },
        "content": "            out.print(feedback);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keke101"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keke101"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * Check if the command should be ignored"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keke101"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @param command from the user"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keke101"
        },
        "content": "     * @return True if the command is not an empty string after .trim() is executed on it"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keke101"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keke101"
        },
        "content": "    private boolean shouldIgnore(String command) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keke101"
        },
        "content": "        return command.trim().isEmpty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keke101"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keke101"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keke101": 84
    }
  },
  {
    "path": "text-ui-test/data/test_duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "T | 1 | 123 \\| lol\\| haha\\|"
      }
    ],
    "authorContributionMap": {
      "keke101": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keke101"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keke101"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "deadline return book /by 2020-01-23 1925"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "event project meeting /at 2020-03-05 1500"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "deadline do homework /by 2021-05-17 2359"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keke101"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 8"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": "abc"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keke101"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "deadline "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keke101"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keke101"
        },
        "content": "deadline return book /by"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keke101"
        },
        "content": "deadline return book /by abcd"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keke101"
        },
        "content": "event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "event "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "event project meeting"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": "event project meeting /at"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "event project meeting /at abcd"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "todo"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "done"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 1000"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keke101"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keke101"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keke101"
        },
        "content": "list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keke101"
        },
        "content": "delete a"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keke101"
        },
        "content": "delete"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keke101"
        },
        "content": "find"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keke101"
        },
        "content": "find  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keke101"
        },
        "content": "find zxc"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "find book"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "keke101": 40
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "REM Clear bin directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "if exist ..\\bin rmdir /Q /S ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keke101"
        },
        "content": "REM Copy test_duke.txt for testing"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keke101"
        },
        "content": "copy .\\data\\test_duke.txt .\\data\\duke.txt"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keke101"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ../src/main/java/duke/command/*.java ../src/main/java/duke/parser/*.java ../src/main/java/duke/storage/*.java ../src/main/java/duke/ui/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keke101"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keke101"
        },
        "content": "REM Restore original duke.txt"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keke101"
        },
        "content": "del /Q .\\data\\duke.txt"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "keke101": 10,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keke101"
        },
        "content": "#Clear previously compiled binaries"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keke101"
        },
        "content": "if [ -e \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keke101"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keke101"
        },
        "content": "  rm -rf ../bin/*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keke101"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keke101"
        },
        "content": "#Copy test_duke.txt for testing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keke101"
        },
        "content": "cp ./data/test_duke.txt ./data/duke.txt"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keke101"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/task/*.java ../src/main/java/duke/exception/*.java ../src/main/java/duke/command/*.java ../src/main/java/duke/parser/*.java ../src/main/java/duke/storage/*.java ../src/main/java/duke/ui/*.java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keke101"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keke101"
        },
        "content": "#Restore original duke.txt"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keke101"
        },
        "content": "rm ./data/duke.txt"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keke101"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "keke101": 16,
      "-": 36
    }
  }
]
