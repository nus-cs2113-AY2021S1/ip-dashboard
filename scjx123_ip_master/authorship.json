[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\u003c!--stackedit_data:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scjx123"
        },
        "content": "eyJoaXN0b3J5IjpbLTU4MTI2MjQ2MiwtNzQ2NjIzMTE0XX0\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scjx123"
        },
        "content": "--\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "scjx123": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    mainClassName \u003d \"seedu.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    archiveBaseName \u003d \"seedu.duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "scjx123": 17
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "# User Guide Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "![A animation GIF i made for Takipi company The characters are Duke java  https://www.google.co.il/search?q\u003dduke+java\u0026rlz\u003d1C1CHNV… | Animated gif,  Character, Animation](https://i.pinimg.com/originals/9c/8c/db/9c8cdbb2bd7b637edd5b3a767b74153a.gif)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scjx123"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scjx123"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scjx123"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scjx123"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scjx123"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scjx123"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scjx123"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scjx123"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scjx123"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scjx123"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scjx123"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scjx123"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scjx123"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scjx123"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scjx123"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scjx123"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scjx123"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scjx123"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scjx123"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scjx123"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scjx123"
        },
        "content": "1. **Adding a new Task** "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\tThere are 3 different types of Task that you can add to Duke. Todo, Deadline and Event. Their respective formats are given as below: "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t- Adds a \u0027Todo\u0027 task "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t\t- Format: `todo task_name`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t\t- Example: "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t\t\t- Add \u0027eat sushi\u0027 to list as a todo task: `todo eat sushi`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t- Adds a \u0027Deadline\u0027 task "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t\t- Format: `deadline task_name /by DD/MM/YYYY HHMM`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t\t- Example:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t\t\t- Add \u0027eat sushi\u0027 to list as a deadline task: `deadline eat sushi /by 1/10/2020 1800`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t- Adds an \u0027Event\u0027 task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t\t- Format:  `event task_name /by DD/MM/YYYY HHMM`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t\t- Example:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t\t\t- Add \u0027eat sushi\u0027 to list as an event task: `deadline eat sushi /by 1/10/2020 1800`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scjx123"
        },
        "content": "2. **List** "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\tList out all the task that you have added. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\tFormat: `list`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scjx123"
        },
        "content": "3. **Mark as done** "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\tMarks a task as completed. "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\tFormat: `done task_index_on_list`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\tExample: "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t- To mark the first task on list as completed: `done 1` "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scjx123"
        },
        "content": "4. **Delete** "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\tDeletes the specified task on list "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\tFormat: `delete task_index_on_list`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\tExample: "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t- To delete the first task on list: `delete 1`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scjx123"
        },
        "content": "5. **Find** "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\tFinds a task by searching for a keyword "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\tFormat: `find keyword` "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\tExample:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t- To find all the task with the word \"eat\": `find eat` "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scjx123"
        },
        "content": "6. **Bye** "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\tExits the application."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\tFormat: `bye` "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scjx123"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scjx123"
        },
        "content": "Q: **Will my data be saved after exiting from the application?** "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scjx123"
        },
        "content": "A: All task that have been added to the list will automatically be saved when you exit Duke. No Additional action is required to save or load up from boot. "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scjx123"
        },
        "content": "Q: **Where can i find a text file my tasks?** "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scjx123"
        },
        "content": "A: All task are saved at *./data/tasks.txt* depending on the location you have your duke.jar file. "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scjx123"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scjx123"
        },
        "content": " - **Add task to list** "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t - `todo\t task_name` "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t\t - eg. `todo eat sushi`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t - `deadline  task_name /by DD/MM/YYYY HHMM` "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t\t - eg. `deadline eat sushi /by 1/10/2020 1800`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t - `event task_name /by DD/MM/YYYY HHMM` "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t\t - eg. `event eat sushi /by 1/10/2020 1800`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "scjx123"
        },
        "content": " - **List task**: list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t - eg. `list`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "scjx123"
        },
        "content": " - **Mark task as completed**: done task_index_on_list "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t - eg. `done 1`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scjx123"
        },
        "content": " - **Delete task**: delete task_index_on_list "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t - eg. `delete 1`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "scjx123"
        },
        "content": " - **Find task**: find keyword"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t - eg. `find sushi`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "scjx123"
        },
        "content": " - **Exit**: bye"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\t - eg. `bye`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "scjx123"
        },
        "content": "User Guide"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "### Feature 1 "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Description of feature."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "### `Keyword` - Describe action"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Describe action and its outcome."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "`keyword (optional arguments)`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "`outcome`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "scjx123"
        },
        "content": "\u003c!--stackedit_data:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "scjx123"
        },
        "content": "eyJoaXN0b3J5IjpbLTEwMTIxNDEyNTJdfQ\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "scjx123"
        },
        "content": "--\u003e"
      }
    ],
    "authorContributionMap": {
      "scjx123": 95,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import seedu.dukeexception.InsufficientArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import seedu.dukeexception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import seedu.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import seedu.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import seedu.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scjx123"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static boolean exitStatus \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String loadedCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String loadedDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String formattedUserCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String formattedDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String originalDateTime \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static int dividerPosition;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String dateTime \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String[] tempDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String year;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String month;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String day;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Create object based on commands that were loaded from text file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param lineArray Contains lines of data that were previously entered by user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static void loadData(List\u003cString\u003e lineArray) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        for (String str : lineArray) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            if (str !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                String[] loadedTask \u003d str.split(\" \", 3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                if (loadedTask[2].contains(\"by: \")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    loadedTask[2] \u003d loadedTask[2].replace(\"by: \",\"/by\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    loadedCommand \u003d userCommandFormatter(loadedTask[2],true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    loadedDateTime \u003d datetimeFormatter(loadedTask[2]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    loadedCommand \u003d loadedTask[2];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                switch (str.charAt(0)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                case \u0027T\u0027:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    Todo objectTask \u003d new Todo(loadedCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    Task.markAsDone(objectTask, loadedTask[1].equals(\"true\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                case \u0027E\u0027:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    Event objectDeadline \u003d new Event(loadedCommand, loadedDateTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    Task.markAsDone(objectDeadline, loadedTask[1].equals(\"true\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                case \u0027D\u0027:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    Deadline objectEvent \u003d new Deadline(loadedCommand, loadedDateTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    Task.markAsDone(objectEvent, loadedTask[1].equals(\"true\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Formats the userCommand to sieve out the task description."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * It also replaces \u0027/by\u0027 with \u0027by:\u0027 for printing purposes in later on."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param userCommand The unformatted string entered by user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param containsSlash True if userCommand contains slash, false otherwise."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @return Returns the formatted userCommand with only its description."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String userCommandFormatter(String userCommand,boolean containsSlash) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        if (containsSlash) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            dividerPosition \u003d userCommand.indexOf(\"/\") + 3;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            formattedUserCommand \u003d userCommand.substring(userCommand.indexOf(\u0027 \u0027), dividerPosition - 3) + \"by: \";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            formattedUserCommand \u003d userCommand.substring(userCommand.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return formattedUserCommand;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Formats the userCommand to sieve out the task date and time."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * If the date was 12/09/2019 it will be changed to 12-09-2019."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * It also detects whether the user entered 2019/12/1 or 1/12/2019."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param userCommand The unformatted string entered by user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @return Returns the formatted userCommand with only its date and time information."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String datetimeFormatter(String userCommand) throws NumberFormatException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        //Divide between Task description and Task date"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        dividerPosition \u003d userCommand.indexOf(\"/\") + 3;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        formattedDateTime \u003d userCommand.substring(dividerPosition + 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        originalDateTime \u003d formattedDateTime;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        time \u003d formattedDateTime.substring(formattedDateTime.indexOf(\" \"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        time \u003d time.substring(1,3) + \":\" + time.substring(3);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        formattedDateTime \u003d formattedDateTime.substring(0,formattedDateTime.indexOf(\" \"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        //Re-format the date given by the user"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        if (formattedDateTime.contains(\"/\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            tempDateTime \u003d formattedDateTime.split(\"/\", 3);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            tempDateTime \u003d formattedDateTime.split(\"-\", 3);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        //Figure out whether user entered year first or day first ."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        if (tempDateTime[0].length() \u003e tempDateTime[2].length()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            year \u003d tempDateTime[0];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            day \u003d tempDateTime[2];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            year \u003d tempDateTime[2];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            day \u003d tempDateTime[0];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        month \u003d tempDateTime[1];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        //String building"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        if (Integer.parseInt(day) \u003c 10 \u0026\u0026 !day.contains(\"0\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            formattedDateTime \u003d year + \"-\" + month + \"-0\" + day + \"@\" + time;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            formattedDateTime \u003d year + \"-\" + month + \"-\" + day + \"@\" + time;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return formattedDateTime;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Controls the flow of how a new userCommand is processed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * It also catches error that is thrown by the matchCommand method."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param userCommand The unformatted string entered by user."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static void parseCommand(String userCommand) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(userCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            if (userCommand.contains(\"/\")) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                dateTime \u003d datetimeFormatter(userCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                userCommand \u003d userCommandFormatter(userCommand,true);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                userCommand \u003d userCommandFormatter(userCommand,false);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            matchCommand(userCommand, dateTime,st);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            dateTime \u003d null;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        } catch (InsufficientArgumentException iae) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            Ui.showError(\"iae\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        } catch (InvalidCommandException ie) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            Ui.showError(\"ie\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        } catch (NoSuchElementException ne) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            Ui.showError(\"ne\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        } catch (IndexOutOfBoundsException iobe) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            Ui.showError(\"iobe\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            Ui.showError(\"e\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            Ui.showError(\"nfe\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Matches the given command with the possible task object and subsequently, take necessary action that"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * relates to the command itself."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Relevant errors are being thrown here as well. Read below for Error information."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param userCommand The unformatted string entered by user."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param dateTime The formatted date and time information keyed in by user."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param st A StringTokenizer that holds the original userCommand information."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @throws InsufficientArgumentException Thrown when user provides insufficient argument after a valid first word."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @throws InvalidCommandException Thrown when user pressed \u0027enter\u0027 without keying anything or it does not make"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *                                 the word entered is not recognized by switch statement."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @throws NoSuchElementException Thrown when non existing element if expected."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @throws IOException Thrown by writeFile() in the \"bye\" case of switch statement."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @throws NumberFormatException Thrown when user keys in illegal number format following a valid first word."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static void matchCommand(String userCommand,String dateTime,StringTokenizer st)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            throws InsufficientArgumentException, InvalidCommandException,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            NoSuchElementException, IOException, NumberFormatException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        /** TokenHolder holds the first word of the userCommand, which enables the use of Switch statement */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        String tokenHolder \u003d st.nextToken();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        switch (tokenHolder) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            int itemNum \u003d Integer.parseInt(st.nextToken()) - 1;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            if (Task.itemExist(itemNum)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                Task.removeItem(itemNum);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            Task.printList();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            itemNum \u003d Integer.parseInt(st.nextToken()) - 1;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            if (Task.itemExist(itemNum)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                System.out.println(\"     Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                Task.markAsDone(itemNum);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            System.out.println(\"     Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            Storage.writeFile(Task.getList());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            exitStatus \u003d true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            if (!st.hasMoreTokens()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                throw new InsufficientArgumentException();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                new Todo(\" \" + userCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                Task.printTask();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            if (!st.hasMoreTokens() || dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                throw new InsufficientArgumentException();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                new Deadline(userCommand, dateTime);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                Task.printTask();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            if (!st.hasMoreTokens() || dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                throw new InsufficientArgumentException();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                new Event(userCommand, dateTime);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                Task.printTask();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            Task.find(st.nextToken());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Returns the status of exitStatus."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @return Returns exitStatus."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static boolean isExit() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return exitStatus;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "scjx123"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "scjx123": 254
    }
  },
  {
    "path": "src/main/java/seedu/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import seedu.dukeexception.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scjx123"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Passes the filePath variable to storage class to further read/load in existing data"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * The same path is also used for writing. This constructor catches error thrown from"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * storage.load() method as well."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param filePath an absolute path of the text file that stores user data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Shows the main workflow when the app is running. isExit will be true once the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * user types in \u0027bye\u0027 command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                CommandParser c \u003d new CommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                CommandParser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            } catch (InvalidCommandException ie) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                ui.showError(\"ie\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scjx123"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "scjx123": 72
    }
  },
  {
    "path": "src/main/java/seedu/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scjx123"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /** Get home directory of the user\u0027s operating system. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /** Temporary stores the file directory and the name of the text file itself given in the filePath. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static String[] dir \u003d new String[2];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    private static String filename \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    private static String filedir \u003d \"data\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Splits the filePath variable into file directory and file name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param filePath an absolute path of the text file that stores user data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        dir \u003d filePath.split(\"/\",2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        filename \u003d dir[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        filedir \u003d dir[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /** Create a path p2. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static Path p2 \u003d Paths.get(home, filedir, filename);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Checks if the filePath stated by user exist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * If it does not exist, this method will create a new filePath accordingly."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * It will then proceed to read the text file, which can be either empty"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * or has existing data in it."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @return \u003cString\u003e\u003c/String\u003ereturn list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @throws IOException Thrown by the input/reading operation."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static List\u003cString\u003e load() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        if (!Files.exists(p2)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            Files.createFile(p2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return Files.readAllLines(p2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Iterates through the current task objects stored in the list, and writes them"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * to the filePath specified by the user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param list that stores all the current Task object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @throws IOException Thrown by the writing operation."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static void writeFile(ArrayList\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        FileWriter fw \u003d new FileWriter(p2.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            fw.write(t.getType() + \" \" + t.getStatusIcon() + \" \" + t.getDescription() + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    + CommandParser.originalDateTime + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scjx123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scjx123": 68
    }
  },
  {
    "path": "src/main/java/seedu/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scjx123"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public TaskList(List\u003cString\u003e loadedList) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        CommandParser c \u003d new CommandParser();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        c.loadData(loadedList);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scjx123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scjx123": 15
    }
  },
  {
    "path": "src/main/java/seedu/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import seedu.dukeexception.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scjx123"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Returns string entered by user in the CLI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * If user presses enter without any command, seedu.DukeException.InvalidCommandException will be thrown."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @return userCommand String command entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @throws InvalidCommandException if userCommand is \u003d\u003d null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static String readCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        String userCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        Scanner userInput \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        userCommand \u003d userInput.nextLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        if (userCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return userCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Shows the welcome text art of seedu.Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static void showWelcome() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        System.out.println(\"    Hello! I\u0027m seedu.Duke\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        System.out.println(\"    What can i do for you?\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Prints out a line that allows CLI to demarcate its return result."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static void showLine() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Prints out \"Unable to load file.\" error message when seedu.Storage.load()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * is unable to read text file in the file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static void showLoadingError() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        System.out.println(\"Unable to load file.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Prints out the error messages."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param error Error code of the error being thrown."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static void showError(String error) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        switch (error) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        case \"iae\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            System.out.println(\"     OPPS!!! Please enter a description!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        case \"ie\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            System.out.println(\"     OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        case \"ne\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            System.out.println(\"     OOPS!!! I\u0027m sorry, but that is an invalid command :-(\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        case \"iobe\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            System.out.println(\"     OOPS!!! I\u0027m sorry, task does not exist in the list :-(\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        case \"e\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            System.out.println(\"     Unable to write.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        case \"nfe\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            System.out.println(\"     OOPS!!! That is an invalid format!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scjx123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scjx123": 88
    }
  },
  {
    "path": "src/main/java/seedu/dukeexception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "package seedu.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "scjx123": 9
    }
  },
  {
    "path": "src/main/java/seedu/dukeexception/InsufficientArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "package seedu.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "public class InsufficientArgumentException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    //no other code needed"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scjx123": 5
    }
  },
  {
    "path": "src/main/java/seedu/dukeexception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "package seedu.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    //no other code needed"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scjx123": 5
    }
  },
  {
    "path": "src/main/java/seedu/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "package seedu.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scjx123"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Creates a \u0027Deadline\u0027 task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param description Description of the task specified by user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param dateTime Date and Time of the task specified by user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public Deadline(String description,String dateTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        LocalDate d \u003d LocalDate.parse(dateTime.substring(0,dateTime.indexOf(\"@\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        LocalTime t \u003d LocalTime.parse(dateTime.substring(dateTime.indexOf(\"@\") + 1));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        this.dateTime \u003d d.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                + t.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        this.type \u003d CommandType.D;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return \"[\" + this.type + \"]\" + super.toString() + dateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scjx123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scjx123": 29
    }
  },
  {
    "path": "src/main/java/seedu/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "package seedu.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scjx123"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Creates an \u0027Event\u0027 task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param description Description of the task specified by user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param dateTime Date and Time of the task specified by user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public Event(String description, String dateTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        LocalDate d \u003d LocalDate.parse(dateTime.substring(0,dateTime.indexOf(\"@\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        LocalTime t \u003d LocalTime.parse(dateTime.substring(dateTime.indexOf(\"@\") + 1));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        this.dateTime \u003d d.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                + t.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        this.type \u003d CommandType.E;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return \"[\" + this.type + \"]\" + super.toString() + dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scjx123"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "scjx123": 29
    }
  },
  {
    "path": "src/main/java/seedu/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "package seedu.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    protected CommandType type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    String dateTime \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public enum CommandType {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        T, D, E"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Constructs a new Task object while initiating description, isDone"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * and add the new Task object to the ArrayList list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param description Description of the task specified by user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        list.add(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Removes an item on the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param num The index of the task on the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static void removeItem(int num) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        Task t \u003d list.get(num);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        System.out.println(\"       \" + t.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        list.remove(t);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        System.out.println(\"     Now you have \" + list.size() + \" task in the list.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Check if an item exist on the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Returns true if item exist, and false if it does not exist."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param num The index of the task on the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @return Logical true or false based on whether item exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static boolean itemExist(int num) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return list.get(num) !\u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Mark a Task based on the logic it is provided with."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Used mainly for loading in previous data from text file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param task The task object that is being mark as done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param logic The task completion status (true or false)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *              true : Completed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *              false: Uncompleted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static void markAsDone(Task task, boolean logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        task.isDone \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Mark a Task as completed when provided with an index on the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param num The index of the task on the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static void markAsDone(int num) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        list.get(num).isDone \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        System.out.println(\"    \" + list.get(num).toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Returns the entire list object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @return list The entire current ArrayList list object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Search through the entire list for task with description that matches the userKeyword."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @param userKeyword A String keyword that the user wish to search in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static void find(String userKeyword) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        //Example find \u0027book\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            if (t.getDescription().contains(userKeyword)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                System.out.println(\"     \" + i + \".\" + t.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Iterates through the entire list object and prints each one out."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static void printList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        System.out.println(\"     Here are the task in your list:\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            System.out.println(\"     \" + i + \".\" + t.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Prints description of a single task object that is being added to the list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public static void printTask() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        //Retrieve the last item on the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        Task t \u003d list.get(list.size() - 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        System.out.println(\"       \" + t.toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        System.out.println(\"     Now you have \" + list.size() + \" task in the list.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return (\"[\" + getStatusIcon() + \"]\" + getDescription());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Returns the status icon of the \"Completed\" or \"Uncompleted\"."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @return isDone Completed or Uncompleted status of the task."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return (isDone ? \"Completed\" : \"Uncompleted\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @return description Description of the task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Returns commandType data type of the event. Mostly used for writing to text file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @return commandType Data type of the event."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public CommandType getType() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * Returns the date and time of the object stated by user."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     * @return dateTime Date and Time of the object."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "scjx123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "scjx123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scjx123": 166
    }
  },
  {
    "path": "src/main/java/seedu/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "package seedu.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        this.type \u003d CommandType.T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        return \"[\" + this.type + \"]\" + super.toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scjx123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scjx123": 13
    }
  },
  {
    "path": "src/test/java/seedu/CommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scjx123"
        },
        "content": "public class CommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    public String[] testCommands \u003d {\"done 1\",\"done e\",\"done 1e\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    @DisplayName(\"when new\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    class MatchCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(\"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        @DisplayName(\"empty command \")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        void throwsInvalidCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            st \u003d new StringTokenizer(\"delete 1\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            Exception exception \u003d assertThrows(IndexOutOfBoundsException.class, () -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                    CommandParser.matchCommand(\"delete 1\", \"\", st));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            assertEquals(\"Index 0 out of bounds for length 0\",exception.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scjx123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scjx123": 30
    }
  },
  {
    "path": "src/test/java/seedu/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import org.junit.jupiter.api.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import org.junit.jupiter.api.DisplayNameGeneration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import org.junit.jupiter.api.DisplayNameGenerator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scjx123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scjx123"
        },
        "content": "@DisplayName(\"Test Class: DukeTest\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scjx123"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    private static final String DateFormat \u003d \"2019-12-12@18:30\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    @DisplayName(\"Date and Year format test\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    class DateAndYear {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scjx123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        //Test method"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        @Tag(\"dates\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        @DisplayName(\"😱\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        public void groupedAssertions() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scjx123"
        },
        "content": "            assertAll(DateFormat,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                () -\u003e assertEquals(DateFormat,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                            CommandParser.datetimeFormatter(\"eat food /by 12-12-2019 1830\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                () -\u003e assertEquals(DateFormat,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scjx123"
        },
        "content": "                            CommandParser.datetimeFormatter(\"eat food /by 2019-12-12 1830\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scjx123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scjx123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scjx123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scjx123": 34
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scjx123"
        },
        "content": "todo borrow book"
      }
    ],
    "authorContributionMap": {
      "scjx123": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scjx123"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\seedu\\*.java ..\\src\\main\\java\\seedu\\task\\*.java ..\\src\\main\\java\\seedu\\DukeException\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scjx123"
        },
        "content": "java -classpath ..\\bin seedu.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "scjx123": 2
    }
  }
]
