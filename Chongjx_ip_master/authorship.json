[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.managers.IOManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.managers.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.managers.UIManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Entry point of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Holds the type of user command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TaskManager.CommandType userCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private IOManager ioManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private UIManager uiManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Runs the program until termination */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        while (!(userCommand \u003d\u003d TaskManager.CommandType.COMMAND_EXIT));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Initializes the variables and load the saved data (if any) from the text file into the taskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        userCommand \u003d TaskManager.CommandType.COMMAND_INIT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        uiManager \u003d new UIManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        taskManager \u003d new TaskManager(uiManager);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ioManager \u003d new IOManager(uiManager);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Initialize the task list from the txt file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ioManager.loadTaskList(taskManager.getTaskList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        uiManager.printsDefaultMessage(userCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Handles user input and execute the functions accordingly."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // retrieve the type of command based on user input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String userCommandInput \u003d uiManager.getUserCommandInput();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        userCommand \u003d new Parser().parseCommand(userCommandInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Retrieve the message is split into command and description"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String[] splitMessages \u003d uiManager.getTaskDetails();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        taskManager.handleTask(userCommand, splitMessages);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ioManager.saveTaskList(taskManager.getTaskList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Main function of the program."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param args User entered arguments."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 66,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/managers/DateTimeManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package duke.managers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Returns the current date and time info."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class DateTimeManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** An instance of current DateTime */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns today\u0027s date in the format: dd/MM/yyyy."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Today\u0027s date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static String getDate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return now.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns current local time in the format: HH.mm."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Current local time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static String getTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return now.format(DateTimeFormatter.ofPattern(\"HH.mm\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns day of the week in the format of EEE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * i.e. For Monday it will return MON."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Day of the week."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static String getDay() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return now.format(DateTimeFormatter.ofPattern(\"EEE\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 40
    }
  },
  {
    "path": "src/main/java/duke/managers/IOManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package duke.managers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Handles the saving and loading of task list data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class IOManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Default file path if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String FILE_DIR \u003d \"data\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/data.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final char FILE_STRING_DELIMITER \u003d \u0027|\u0027;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private final UIManager uiManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public IOManager(UIManager uiManager) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.uiManager \u003d uiManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Saves all the task(s) in the task list into a txt file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates the folder and txt file if they are missing."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param taskList A list of Task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void saveTaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Create a File for the given file path"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        File fileDir;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        FileWriter writer;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        fileDir \u003d new File(FILE_DIR);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // If the directory does not exist, create it"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (!fileDir.exists()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            fileDir.mkdir();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Save all the tasks in the task list into a text file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            writer \u003d new FileWriter(FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                writer.write(task.getTaskType() + FILE_STRING_DELIMITER + task.getIsDone() + FILE_STRING_DELIMITER"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        + task.getDescription() + FILE_STRING_DELIMITER + task.getDateTime() + UIManager.LS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (IOException ioException) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ioException.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Loads the saved data from the txt file into the task list if it exists."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param taskList List of task to be loaded into."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void loadTaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Create a File for the given file path"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        File file \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String loadTaskMessage \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Load the saved data"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            loadTaskMessage \u003d loadTaskMessage.concat(UIManager.INDENT_ONE_TAB + \"Looking for existing file...\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    UIManager.LS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            loadTaskMessage \u003d loadTaskMessage.concat(UIManager.INDENT_ONE_TAB + \"Found file, loading saved info...\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    UIManager.LS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String[] taskInfos;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String taskType;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            boolean taskIsDone;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String taskDescription;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String taskDateTime;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // Read all the line till the last line in the file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                taskInfos \u003d s.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                taskType \u003d taskInfos[0];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                taskIsDone \u003d Boolean.parseBoolean(taskInfos[1]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                taskDescription \u003d taskInfos[2];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                Task task;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // Create the respective task and add into taskList"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                switch(taskType) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                case Todo.TASK_TYPE:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    task \u003d new Todo(taskDescription);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    task.setIsDone(taskIsDone);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                case Event.TASK_TYPE:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    taskDateTime \u003d taskInfos[3];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    task \u003d new Event(taskDescription, taskDateTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    task.setIsDone(taskIsDone);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                case Deadline.TASK_TYPE:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    taskDateTime \u003d taskInfos[3];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    task \u003d new Deadline(taskDescription, taskDateTime);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    task.setIsDone(taskIsDone);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    throw new IllegalStateException(UIManager.INDENT_ONE_TAB + \"Unexpected value: \" + taskType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                taskList.add(task);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            loadTaskMessage \u003d loadTaskMessage.concat(UIManager.INDENT_ONE_TAB + \"Successfully loaded saved info!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (FileNotFoundException exception) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            loadTaskMessage \u003d loadTaskMessage.concat(UIManager.INDENT_ONE_TAB + \"No saved file found!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (IllegalStateException exception) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            loadTaskMessage \u003d loadTaskMessage.concat(UIManager.INDENT_ONE_TAB + \"Unable to load saved info, file may be corrupted!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        uiManager.prints(loadTaskMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 124
    }
  },
  {
    "path": "src/main/java/duke/managers/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package duke.managers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.util.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Stores all the tasks into an ArrayList and manages the adding, listing, deleting and marking task as done operations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Types of command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public enum CommandType {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COMMAND_ADD_TODO,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COMMAND_ADD_EVENT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COMMAND_ADD_DEADLINE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COMMAND_LIST,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COMMAND_MARK_DONE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COMMAND_DELETE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COMMAND_EXIT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COMMAND_UNRECOGNIZED,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COMMAND_MISSING,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COMMAND_INIT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** User task list */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Output message for the operations */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String taskOutputMessage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Handler for an UIManager */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private final UIManager uiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates a new ArrayList to store the tasks. Holds a uiManager handler."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public TaskManager(UIManager uiManager) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.uiManager \u003d uiManager;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns the taskList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return taskList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Executes the function for the respective commands."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param commandType Type of command to execute"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param taskInfo Task information for the command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void handleTask(CommandType commandType, String[] taskInfo) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COMMAND_ADD_TODO:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COMMAND_ADD_EVENT:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COMMAND_ADD_DEADLINE:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            addTask(taskInfo, commandType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COMMAND_LIST:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            listTask();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COMMAND_MARK_DONE:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            markTaskDone(taskInfo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COMMAND_DELETE:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            deleteTask(taskInfo);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COMMAND_UNRECOGNIZED:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COMMAND_MISSING:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COMMAND_INIT:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COMMAND_EXIT:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            uiManager.printsDefaultMessage(commandType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates new task and add to the task list if the info are valid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param message The whole string of the original message. To validated and retrieve the description of the task"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *               and date time info for Event and Deadline task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param addTaskType The type of task to be created."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void addTask(String[] message, CommandType addTaskType) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String[] taskInfo;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Task newTask \u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            taskOutputMessage \u003d UIManager.INDENT_ONE_TAB + \"Added \";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // Create new task object based on the command type"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            switch (addTaskType) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case COMMAND_ADD_TODO:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                new Parser().parseTaskInfo(message, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                newTask \u003d new Todo(message[1]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                taskOutputMessage \u003d taskOutputMessage.concat(\"a todo task \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case COMMAND_ADD_EVENT:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                taskInfo \u003d new Parser().parseTaskInfo(message, Event.IDENTIFIER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                newTask \u003d new Event(taskInfo[0], taskInfo[1]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                taskOutputMessage \u003d taskOutputMessage.concat(\"an event \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case COMMAND_ADD_DEADLINE:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                taskInfo \u003d new Parser().parseTaskInfo(message, Deadline.IDENTIFIER);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                newTask \u003d new Deadline(taskInfo[0], taskInfo[1]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                taskOutputMessage \u003d taskOutputMessage.concat(\"a deadline task \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            taskList.add(newTask);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // print out the newly added task"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            taskOutputMessage \u003d taskOutputMessage.concat(newTask + \"!\" + UIManager.LS + UIManager.INDENT_TWO_TABS +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    \"Now you have \" + taskList.size() + \" task(s) in the list!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            taskOutputMessage \u003d UIManager.INDENT_ONE_TAB + dukeException.getMessage();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        uiManager.prints(taskOutputMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Lists all the task(s) in the taskList."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void listTask() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // print out default message if there are no task, else print the list of tasks"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            taskOutputMessage \u003d UIManager.INDENT_ONE_TAB + \"There are currently no task in the list! (*^▽^*)\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            taskOutputMessage \u003d UIManager.INDENT_ONE_TAB + \"Here is your list of task(s):\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (Task i : taskList) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                taskOutputMessage \u003d taskOutputMessage.concat(UIManager.LS + UIManager.INDENT_TWO_TABS + index + \".\" + i);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                ++index;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        uiManager.prints(taskOutputMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Prints the task that is marked done by the user."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param taskIndexString The task index in string. To be validated and retrieve the index as int."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void markTaskDone(String[] taskIndexString) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            int taskIndex \u003d new Parser().parseTaskIndex(taskIndexString, taskList.size() - 1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Task task \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            task.setIsDone(true);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            taskOutputMessage \u003d UIManager.INDENT_ONE_TAB + \"Completed task \" + (taskIndex + 1) + \"!\" + UIManager.LS +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    UIManager.INDENT_TWO_TABS + task;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            taskOutputMessage \u003d UIManager.INDENT_ONE_TAB + dukeException.getMessage();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        uiManager.prints(taskOutputMessage);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Delete task based on the index that the user entered."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param taskIndexString The task index in string. To be validated and retrieve the index as int."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void deleteTask(String[] taskIndexString) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            int taskIndex \u003d new Parser().parseTaskIndex(taskIndexString, taskList.size() - 1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Task task \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            taskList.remove(taskIndex);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            taskOutputMessage \u003d UIManager.INDENT_ONE_TAB + \"I have removed the task!\" + UIManager.LS +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    UIManager.INDENT_TWO_TABS + task + UIManager.LS + UIManager.INDENT_ONE_TAB +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    \"Now you have \" + taskList.size() + \" task(s) in the list!\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            taskOutputMessage \u003d UIManager.INDENT_ONE_TAB + dukeException.getMessage();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        uiManager.prints(taskOutputMessage);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 187
    }
  },
  {
    "path": "src/main/java/duke/managers/UIManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package duke.managers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Text UI of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class UIManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Offset for displaying 1st level of message. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String INDENT_ONE_TAB \u003d \"    \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Offset for displaying 2nd level of message. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String INDENT_TWO_TABS \u003d \"        \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String[] taskDetails;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public UIManager() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public UIManager(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns the command based on user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return user command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getUserCommandInput() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String fullInputMessage \u003d in.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        taskDetails \u003d fullInputMessage.split(\" \", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return taskDetails[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns the task details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return task details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String[] getTaskDetails() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Prints out a message with a standard format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param message Message to be printed out."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void prints(String message) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        out.println(message + LS + DIVIDER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Types of bracket."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public enum bracketType {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ROUND_BRACKET,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        SQUARE_BRACKET,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        CURLY_BRACKET,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    * Returns the default message of respective commands."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    * @param command Type of command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void printsDefaultMessage(TaskManager.CommandType command) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String defaultMessage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COMMAND_INIT:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            defaultMessage \u003d INDENT_ONE_TAB + \"Hello! I\u0027m Jay. Today is \" + DateTimeManager.getDate() + \", \" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    DateTimeManager.getDay() + \". The time now is \" + DateTimeManager.getTime() + \".\" + LS +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    INDENT_ONE_TAB + \"What can I do for you?\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COMMAND_EXIT:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            defaultMessage \u003d INDENT_ONE_TAB + \"Bye! Hope to see you again soon!\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COMMAND_MISSING:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            defaultMessage \u003d INDENT_ONE_TAB + \"You did not enter anything, did you?\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COMMAND_UNRECOGNIZED:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            defaultMessage \u003d INDENT_ONE_TAB + \"Sorry I don\u0027t know what that means... \u003e.\u003c\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            defaultMessage \u003d \"\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        prints(defaultMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns the message enclosed with the selected bracket."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param message Original string of the message."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param bracket Type of bracket to enclose the message."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Enclosed message."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static String encloseWithBrackets(String message, bracketType bracket) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String processedMessage;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        switch (bracket){"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case ROUND_BRACKET:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            processedMessage \u003d \"(\" + message +\")\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case CURLY_BRACKET:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            processedMessage \u003d \"{\" + message +\"}\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case SQUARE_BRACKET:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            processedMessage \u003d \"[\" + message +\"]\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return processedMessage;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 122
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.managers.UIManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a Deadline task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String TASK_TYPE \u003d \"D\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String IDENTIFIER \u003d \"/by\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** The date and time info that it is due by */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    String dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Deadline(String description, String dateTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        super(description, TASK_TYPE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setDateTime(dateTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Sets the Deadline date and time info."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param dateTime Deadline date and time info."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setDateTime(String dateTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Gets the Deadline date and time info."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Deadline date and time info."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Overrides the parent class toString method and returns additional Deadline date and time info."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return parent toString and Deadline date and time info."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return super.toString() + UIManager.encloseWithBrackets(\"By:\" + dateTime, UIManager.bracketType.ROUND_BRACKET);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 48
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.managers.UIManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents an Event task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String TASK_TYPE \u003d \"E\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String IDENTIFIER \u003d \"/at\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** The date and time info that it is at */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    String dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Event(String description, String dateTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        super(description, TASK_TYPE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setDateTime(dateTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Sets the Event date and time info."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param dateTime Event date and time info."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setDateTime(String dateTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Gets the Event date and time info."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Event date and time info."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Overrides the parent class toString method and returns additional Event date and time info."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return parent toString and Event date and time info."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return super.toString() + UIManager.encloseWithBrackets(\"At:\" + dateTime, UIManager.bracketType.ROUND_BRACKET);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 48
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.managers.UIManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Contains the basic info of a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final char TICK \u003d \u0027\\u2713\u0027;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final char CROSS \u003d \u0027\\u2718\u0027;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Task(String description, String taskType) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setTaskType(taskType);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setIsDone(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Gets the task description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Task description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Sets the task description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param description Task description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Gets the isDone status of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return isDone status of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Sets the isDone status of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param isDone isDone status of the task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setIsDone(boolean isDone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Gets the task type. Todo, Event or Deadline."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Task type."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Sets the task type. Todo, Event or Deadline."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param taskType Task type."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTaskType(String taskType) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Gets the date and time info of the task. Only valid for Event and Deadline task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Date and time info of the task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public abstract String getDateTime();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Overrides the parent class toString method and returns the task type, isDone status and description with formatting."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Task type, isDone status and description."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String message \u003d UIManager.encloseWithBrackets(taskType, UIManager.bracketType.SQUARE_BRACKET);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            message \u003d message.concat(UIManager.encloseWithBrackets(String.valueOf(TICK),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    UIManager.bracketType.SQUARE_BRACKET));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            message \u003d message.concat(UIManager.encloseWithBrackets(String.valueOf(CROSS),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    UIManager.bracketType.SQUARE_BRACKET));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        message \u003d message.concat(\" \" + description);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 102
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a Todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String TASK_TYPE \u003d \"T\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        super(description, TASK_TYPE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Gets the Todo date and time info."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return An empty string since it is not applicable for Todo."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 23
    }
  },
  {
    "path": "src/main/java/duke/util/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Signals the different type of possible exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Types of exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public enum ExceptionType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_DESCRIPTION(\"You missed out on the description?! O.o\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_IDENTIFIER(\"You missed out key identifier! (/by /at)\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_DATETIME(\"You did not set a date/time ¯\\\\_(ツ)_/¯\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_INVALID_INPUT(\"Invalid input, cannot convert to integer!\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_ARRAY_INDEX_OUT_OF_BOUNDS(\"You did not enter any value!\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_INDEX_OUT_OF_BOUNDS(\"Ops, you have entered an invalid task number!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * The exception message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        private final String exceptionMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * Constructor of ExceptionType."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * @param exceptionMessage The exception message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ExceptionType(String exceptionMessage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.exceptionMessage \u003d exceptionMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * Overrides the parent toString method and returns the exception message."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * @return The exception message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return exceptionMessage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructor of a DukeException."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param exception Type of exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public DukeException(ExceptionType exception) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        super(exception.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 51
    }
  },
  {
    "path": "src/main/java/duke/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import duke.managers.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Static final variables for the list of command string"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_STRING_TODO \u003d \"TODO\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_STRING_EVENT \u003d \"EVENT\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_STRING_DEADLINE \u003d \"DEADLINE\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_STRING_LIST \u003d \"LIST\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_STRING_DONE \u003d \"DONE\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_STRING_DELETE \u003d \"DELETE\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_STRING_EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_STRING_BYE \u003d \"BYE\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Parsers user input into command for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param userCommandInput user input string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public TaskManager.CommandType parseCommand(String userCommandInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        TaskManager.CommandType userCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        switch (userCommandInput.toUpperCase()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case Parser.COMMAND_STRING_TODO:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userCommand \u003d TaskManager.CommandType.COMMAND_ADD_TODO;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case Parser.COMMAND_STRING_EVENT:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userCommand \u003d TaskManager.CommandType.COMMAND_ADD_EVENT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case Parser.COMMAND_STRING_DEADLINE:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userCommand \u003d TaskManager.CommandType.COMMAND_ADD_DEADLINE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case Parser.COMMAND_STRING_LIST:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userCommand \u003d TaskManager.CommandType.COMMAND_LIST;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case Parser.COMMAND_STRING_DONE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userCommand \u003d TaskManager.CommandType.COMMAND_MARK_DONE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case Parser.COMMAND_STRING_BYE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userCommand \u003d TaskManager.CommandType.COMMAND_EXIT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case Parser.COMMAND_STRING_DELETE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userCommand \u003d TaskManager.CommandType.COMMAND_DELETE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case Parser.COMMAND_STRING_EMPTY:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userCommand \u003d TaskManager.CommandType.COMMAND_MISSING;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userCommand \u003d TaskManager.CommandType.COMMAND_UNRECOGNIZED;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return userCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Parsers string info into description and date time info for adding of task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Ensures that description and the required keyword are not empty are present."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param message The string of the original message, to be processed for Event and Deadline tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param identifier Used to split the original message to obtain the data time info for Event and Deadline tasks."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return The description and date and time info, in index 0 and index 1 respectively, for Event and Deadline task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws DukeException Missing description, identifier or date and time info."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String[] parseTaskInfo(String[] message, String identifier) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String[] descriptionAndDateTimeInfo \u003d new String[2];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String dateTimeInfo;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            description \u003d message[1];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // if the message is empty or blank, throw missing description exception"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (description.isEmpty() || description.isBlank()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new DukeException(DukeException.ExceptionType.EXCEPTION_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else if (!identifier.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // split message by identifier, if specified. Throw missing identifier if the string does not contain"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // the identifier"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                if (!description.contains(identifier)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    throw new DukeException(DukeException.ExceptionType.EXCEPTION_MISSING_IDENTIFIER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // split message based on identifier"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                descriptionAndDateTimeInfo \u003d message[1].split(identifier, 2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                description \u003d descriptionAndDateTimeInfo[0];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                dateTimeInfo \u003d descriptionAndDateTimeInfo[1];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // if missing description or datetime, throw respective exception"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                if (description.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    throw new DukeException(DukeException.ExceptionType.EXCEPTION_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                } else if (dateTimeInfo.isEmpty() || dateTimeInfo.isBlank()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    throw new DukeException(DukeException.ExceptionType.EXCEPTION_MISSING_DATETIME);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // extra handling in the the event that the message is empty and cannot be split"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new DukeException(DukeException.ExceptionType.EXCEPTION_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return descriptionAndDateTimeInfo;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Parses string into the task index."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param taskIndexString The whole string of message. To be converted to int."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param taskListSize Size of the task list. To validate the index value."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Task index retrieved from the message."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws DukeException Index out of bounds, invalid input and array index out of bound."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public int parseTaskIndex(String[] taskIndexString, int taskListSize) throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        int taskIndex;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Converts the string to int"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (taskIndexString[1].isBlank()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new DukeException(DukeException.ExceptionType.EXCEPTION_ARRAY_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            taskIndex \u003d Integer.parseInt(taskIndexString[1]) - 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (taskIndex \u003c 0 || taskIndex \u003e taskListSize) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new DukeException(DukeException.ExceptionType.EXCEPTION_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new DukeException(DukeException.ExceptionType.EXCEPTION_INVALID_INPUT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new DukeException(DukeException.ExceptionType.EXCEPTION_ARRAY_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return taskIndex;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 131
    }
  },
  {
    "path": "text-ui-test/data/data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "T|false|watch lecture|"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "D|false|test 2 | tmr"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "blah"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "todo watch lecture"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "event"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "event test 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "event test 1 /at"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "event test 1 /at tmr"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "deadline test 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "deadline test 2 /by"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "deadline test 2 /by tmr"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "done hi"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "delete"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "delete none"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 26
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "del data\\data.txt"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java ..\\src\\main\\java\\duke\\managers\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\util\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "-": 32
    }
  }
]
