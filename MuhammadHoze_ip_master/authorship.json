[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "# duke.command.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.command.Duke.java` file, right-click it, and choose `Run duke.command.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/duke/command/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import duke.task_status.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 17
    }
  },
  {
    "path": "src/main/java/duke/command/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        welcomeLogo();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        greetMsg();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        List listItem \u003d new List();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String userCommand \u003d sc.nextLine();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        while (userCommand.isEmpty()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            System.out.println(\"â˜¹ OOPS!!! Invalid Input, Please Try Again\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            userCommand \u003d sc.nextLine();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        // This loop is to process the commands input by user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        while (!userCommand.trim().equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (userCommand.trim().equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                listItem.printList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else if (userCommand.contains(\"done\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                String value \u003d userCommand.replace(\"done\", \"\").trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                int instructNum \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                listItem.instructionCompleted(instructNum - 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else if (userCommand.contains(\"todo\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                String todoInstruction \u003d userCommand.replace(\"todo\", \"\").trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (todoInstruction.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    System.out.println(\"â˜¹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    listItem.addToDo(todoInstruction);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else if (userCommand.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                String deadlineInstruction \u003d userCommand.replace(\"deadline\", \"\").trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (deadlineInstruction.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    System.out.println(\"â˜¹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    listItem.addDeadline(deadlineInstruction);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else if (userCommand.contains(\"event\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                String eventInstruction \u003d userCommand.replace(\"event\", \"\").trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (eventInstruction.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    System.out.println(\"â˜¹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    listItem.addEvent(eventInstruction);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else if (userCommand.contains(\"help\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                helpCommands();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                System.out.println(\"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            userCommand \u003d sc.nextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            while (userCommand.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                System.out.println(\"â˜¹ OOPS!!! Invalid Input, Please Try Again\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                userCommand \u003d sc.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        byeMsg();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void welcomeLogo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Welcome to\\n\" + logo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayLine() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"----------------------------------------\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void greetMsg() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Hello World! I\u0027m duke\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void helpCommands() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"list: Outputs the tasks\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"todo: \u003ceg. todo visit new theme park\u003e\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"deadline: \u003ceg. deadline submit report /by 11/10/2019 5pm\u003e\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"event: \u003ceg. event team project meeting /at 2/10/2019 2-4pm\u003e\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"bye: End program :(\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void byeMsg() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 93,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/command/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import duke.task_status.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 17
    }
  },
  {
    "path": "src/main/java/duke/command/List.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import duke.task_status.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class List {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private final int MAX_INSTRUCTION \u003d 100;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private Task[] instruction \u003d new Task[MAX_INSTRUCTION];"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private int index \u003d 0; // Array index"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean isEmpty \u003d true; // To check if duke.Instruction.Duke.duke.Instruction array is empty"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Here are the task(s) in your list:\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        for (int i \u003d 0; i \u003c instruction.length; i++) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (instruction[i] \u003d\u003d null) { // to prevent empty array values to show"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (isEmpty) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    System.out.println(\"(List is currently empty)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                System.out.println((i + 1) + \". \" + instruction[i].toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void instructionCompleted(int instructNum) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            System.out.println(\"Please add instruction first!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            instruction[instructNum].markInstructionAsDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            displayLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            System.out.println(instruction[instructNum].toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            displayLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void addToDo(String description) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        ToDo newToDo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        instruction[index] \u003d newToDo;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        isEmpty \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        instructionAdded(newToDo);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        index++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void addDeadline(String description) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String userInputTask \u003d description.substring(0, description.lastIndexOf(\"/\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String userInputDate \u003d description.substring(description.lastIndexOf(\"/\") + 3).trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(userInputTask, userInputDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        instruction[index] \u003d newDeadline;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        isEmpty \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        instructionAdded(newDeadline);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        index++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void addEvent(String description) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String userInputTask \u003d description.substring(0, description.lastIndexOf(\"/\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String userInputDate \u003d description.substring(description.lastIndexOf(\"/\") + 3).trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Event newEvent \u003d new Event(userInputTask, userInputDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        instruction[index] \u003d newEvent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        isEmpty \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        instructionAdded(newEvent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        index++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayLine() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"----------------------------------------\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void instructionAdded(Task instruction) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \\n\" + \"\\t\" + instruction.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            System.out.println(\"Now you have \" + (index + 1) + \" task in the list\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            System.out.println(\"Now you have \" + (index + 1) + \" tasks in the list\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 84
    }
  },
  {
    "path": "src/main/java/duke/command/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import duke.task_status.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 15
    }
  },
  {
    "path": "src/main/java/duke/task_status/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke.task_status;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void markInstructionAsDone(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 24
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.command.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "java -classpath ..\\bin duke.command.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 2,
      "-": 19
    }
  }
]
