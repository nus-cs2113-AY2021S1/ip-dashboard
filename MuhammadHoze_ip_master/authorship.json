[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "# duke.duke.task.task.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.duke.task.task.Duke.java` file, right-click it, and choose `Run duke.duke.task.task.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 2,
      "-": 24
    }
  },
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "D|0| meeting |Sunday"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "T|0| buy bread"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "T|0| sleep now!!"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 3
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke  {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Ui.welcomeLogo();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Ui.greetMsg();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        File file \u003d new File(\"duke.txt\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Storage.readFromFile(file);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String userCommand \u003d input.nextLine();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Parser.commandExecuted(userCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 19,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected String error;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public DukeException(String error) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 9
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.TaskList.displayInstructionCompleted;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.TaskList.displayInstructionDeleted;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.TaskList.displayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.Ui.displayByeMsg;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.Ui.displayDeadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.Ui.displayEmptyInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.Ui.displayEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.Ui.displayFind;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.Ui.displayHelpCommands;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.Ui.displayIncompleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.Ui.displayIndexOutOfBounds;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.Ui.displaySavingError;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.Ui.displayToDo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void commandExecuted(String userCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        while (!userCommand.trim().equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (userCommand.trim().equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    displayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else if (userCommand.contains(\"find\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    displayFind(userCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else if (userCommand.contains(\"help\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    displayHelpCommands();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else if (userCommand.contains(\"todo\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    displayToDo(userCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else if (userCommand.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    displayDeadline(userCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else if (userCommand.contains(\"event\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    displayEvent(userCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else if (userCommand.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    displayEmptyInput();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else if (userCommand.contains(\"done\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    String value \u003d userCommand.replace(\"done\", \"\").trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    int instructNum \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    displayInstructionCompleted(instructNum);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else if (userCommand.contains(\"delete\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    String value \u003d userCommand.replace(\"delete\", \"\").trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    int instructNum \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    displayInstructionDeleted(instructNum);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    displayIncompleteCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                displayIndexOutOfBounds();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            userCommand \u003d sc.nextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayByeMsg();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            TaskList.saveData();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            displaySavingError();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 66
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.TaskList.addTaskFromFile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.Ui.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void readFromFile(File file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (file.createNewFile()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                System.out.println(\"No existing file found, new file is created\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                displayLine();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                String fileInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                String instructionDesc \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                String dateOfInstructionDesc \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                while ((fileInput \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    String[] commandList \u003d fileInput.split(\"\\\\|\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                        // this is each individual value of a command to separate array index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                        // some command have until i \u003d\u003d 3 (deadline/event) while tdo only until i \u003d\u003d 2"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                        for (int i \u003d 0; i \u003c commandList.length; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            if (i \u003d\u003d 2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                                instructionDesc \u003d commandList[i];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            } else if (i \u003d\u003d 3) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                                dateOfInstructionDesc \u003d commandList[i];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                        switch (commandList[0]) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                        case \"T\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            ToDo todoFromFile \u003d new ToDo(instructionDesc);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            if (commandList[1].equals(\"1\"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                                todoFromFile.markInstructionAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            addTaskFromFile(todoFromFile);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            Deadline deadlineFromFile \u003d new Deadline(instructionDesc, dateOfInstructionDesc);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            if (commandList[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                                deadlineFromFile.markInstructionAsDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            addTaskFromFile(deadlineFromFile);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            Event eventFromFile \u003d new Event(instructionDesc, dateOfInstructionDesc);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            if (commandList[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                                eventFromFile.markInstructionAsDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            addTaskFromFile(eventFromFile);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                        displayReadingFileError();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                br.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                System.out.println(\"Upload Completed\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                displayLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            displayCorruptedFile();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void writeToFile(ArrayList\u003cTask\u003e instruction) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(\"duke.txt\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        StringBuilder fileContent \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        for (Task task : instruction) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            fileContent.append(task.toFile()).append(\"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        writer.write(fileContent.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 89
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.Ui.addInstructionBeforeCompletion;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.Ui.allInstructionDeleted;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.Ui.instructionDoneOutOfBounds;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static ArrayList\u003cTask\u003e instruction \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private static int instructionIndex \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Here are the task(s) in your list:\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (instruction.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            System.out.println(\"(List is currently empty)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            for (int i \u003d 0; i \u003c instruction.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                //this wil first check instruction.get(i) and see if its a Deadline/Event/tdo"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                // and then print out the toString() method of the respective Deadline/event/tdo class"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                System.out.println(i + 1 + \". \" + (instruction.get(i)).toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void findInstructionInList(String keyword) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Here are the matching task(s) in your list:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        int indexNum \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        for (Task element : instruction) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (element.description.contains(keyword)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                System.out.print(indexNum + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                System.out.println(element);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                indexNum++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void addTaskFromFile(Task t) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        instruction.add(t);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        instructionIndex++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void addToDo(String description) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        ToDo newToDo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        instruction.add(newToDo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayInstructionAdded(newToDo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void addDeadline(String description) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String userInputTask \u003d description.substring(0, description.lastIndexOf(\"/\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String userInputDate \u003d description.substring(description.lastIndexOf(\"/\") + 3).trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(userInputDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(userInputTask, userInputDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        instruction.add(newDeadline); // added into ArrayList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayInstructionAdded(newDeadline); // argument is an object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void addEvent(String description) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String userInputTask \u003d description.substring(0, description.lastIndexOf(\"/\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String userInputDate \u003d description.substring(description.lastIndexOf(\"/\") + 3).trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Event newEvent \u003d new Event(userInputTask, userInputDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        instruction.add(newEvent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayInstructionAdded(newEvent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayInstructionCompleted(int instructNum) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (instruction.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                addInstructionBeforeCompletion();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                instruction.get(instructNum - 1).markInstructionAsDone(); // because instruction is data type Task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                displayLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                //this wil first check instruction.get(instructNum -1) and see if its a Deadline/Event/tdo"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                // and then print out the toString() method of the respective Deadline/event/tdo class"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                System.out.println(instruction.get(instructNum - 1).toString()); // because instruction is data type Task"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                displayLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            instructionDoneOutOfBounds();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayInstructionDeleted(int instructNum) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (instruction.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                allInstructionDeleted();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                instruction.get(instructNum - 1).markInstructionAsDeleted();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                displayLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                System.out.println(\"Noted. I\u0027ve removed this task: \\n\" + \"\\t\" + instruction.get(instructNum - 1).toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                instruction.remove(instructNum - 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                instructionIndex--;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (instructionIndex \u003d\u003d 1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    System.out.println(\"Now you have \" + instructionIndex + \" task in the list\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    System.out.println(\"Now you have \" + instructionIndex + \" tasks in the list\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                displayLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            instructionDoneOutOfBounds();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayInstructionAdded(Task task) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        instructionIndex++;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \\n\" + \"\\t\" + task.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (instructionIndex \u003d\u003d 1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            System.out.println(\"Now you have \" + instructionIndex + \" task in the list\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            System.out.println(\"Now you have \" + instructionIndex + \" tasks in the list\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayLine() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"----------------------------------------------------------------\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void saveData() throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Storage.writeToFile(instruction);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 140
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static duke.TaskList.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void welcomeLogo() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Welcome to\\n\" + logo);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void greetMsg() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Hello World! I\u0027m Duke\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayHelpCommands() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"list: Outputs the tasks\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"todo: \u003ceg. todo visit new theme park\u003e\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"deadline: \u003ceg. deadline submit report /by 11/10/2019 5pm\u003e\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"event: \u003ceg. event team project meeting /at 2/10/2019 2-4pm\u003e\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"bye: End program :(\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayByeMsg() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Bye. All instructions have been saved. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void allInstructionDeleted(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"No instructions to delete\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void addInstructionBeforeCompletion(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Please add instruction first!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void instructionDoneOutOfBounds(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Instruction number does not exist. Please try again!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayLine() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"----------------------------------------------------------------\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayIndexOutOfBounds() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"The task you input has missing fields!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displaySavingError() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Unable to save data, please try again!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayEmptyInput() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"OOPS!!! The description cannot be empty!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayIncompleteCommand() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayToDo(String userCommand) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (userCommand.toLowerCase().trim().equals(\"todo\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            displayLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            System.out.println(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            displayLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            userCommand \u003d userCommand.replace(\"todo\", \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            addToDo(userCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayDeadline(String userCommand) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (userCommand.toLowerCase().trim().equals(\"deadline\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            displayLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            System.out.println(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            displayLine();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            userCommand \u003d userCommand.replace(\"deadline\", \"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            addDeadline(userCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayEvent(String userCommand) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (userCommand.toLowerCase().trim().equals(\"event\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            displayLine();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            System.out.println(\"OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            displayLine();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            userCommand \u003d userCommand.replace(\"event\", \"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            addEvent(userCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayFind(String userCommand) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (userCommand.toLowerCase().trim().equals(\"find\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            displayLine();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            System.out.println(\"The description of find cannot be empty.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            displayLine();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String keyword \u003d userCommand.replace(\"find\", \"\").trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            findInstructionInList(keyword);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayReadingFileError(){"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Error reading value, skipping to next line.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Removed corrupted instruction. Please add again.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void displayCorruptedFile(){"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"File is corrupted. Shutting down... \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        displayLine();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 142
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "//class Deadline inherits methods/attributes from class Task"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        super(description); //it is passing description into Task(String description){} HAS TO BE IN A CONSTRUCTOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    // it takes the value from super.toString which is \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    // from the superclass: Task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"D|\" + super.toFile() + \"|\" + by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 25
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"E|\" + super.toFile() + \"|\" + at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 20
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected boolean isDeleted;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    // String description: this is received from Deadline/Event/Tdo constructor"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.isDeleted \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"X\"); //return tick or X symbols"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    //description is really just what is the task: eg. buy bread, project meeting etc"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    // this is just the skeleton that\u0027s why its abstract"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void markInstructionAsDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void markInstructionAsDeleted() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        isDeleted \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String numStr \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            numStr \u003d \"1|\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            numStr \u003d \"0|\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return  numStr + description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 44
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"T|\" + super.toFile();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 19
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.duke.task.task.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "java -classpath ..\\bin duke.duke.task.task.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 2,
      "-": 19
    }
  }
]
