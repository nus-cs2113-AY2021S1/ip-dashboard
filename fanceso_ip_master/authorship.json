[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanceso"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanceso"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanceso"
        },
        "content": "#### Level 0 "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanceso"
        },
        "content": "Create Hello message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanceso"
        },
        "content": "#### Level 1 "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanceso"
        },
        "content": "Create Simple User input command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanceso"
        },
        "content": "#### Level 2. List, Add Contents "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanceso"
        },
        "content": "Allow user to add contents into the list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanceso"
        },
        "content": "#### Level 3. Tasks Class, MarkAsDone"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanceso"
        },
        "content": "Create New duke.task.Task Class"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanceso"
        },
        "content": "#### Level 4. ToDos, Events, Deadlines"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanceso"
        },
        "content": "Add support for tracking three types of tasks:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanceso"
        },
        "content": "##### 1. ToDos: tasks without any date/time attached to it e.g., visit new theme park"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanceso"
        },
        "content": "##### 2. Deadlines: tasks that need to be done before a specific date/time e.g., submit report by 11/10/2019 5pm"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanceso"
        },
        "content": "##### 3. Events: tasks that start at a specific time and ends at a specific time e.g., team project meeting on 2/10/2019 2-4pm"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanceso"
        },
        "content": "#### Level 5. Error Handling"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "fanceso": 25
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanceso"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanceso"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanceso"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final String LINE \u003d \"-\".repeat(Math.max(0, 59));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final String INDENT \u003d \" \".repeat(Math.max(0, 3));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final String INDENT2 \u003d \" \".repeat(Math.max(0, 4));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final String MESSAGE_GOODBYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final String LIST_MESSAGE \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final String COMMAND_EXIT_STRING \u003d \"bye\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final String COMMAND_LIST_STRING \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final String COMMAND_DONE_STRING \u003d \"done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final String COMMAND_DEADLINE_STRING \u003d \"deadline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final String COMMAND_EVENT_STRING \u003d \"event\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final String COMMAND_TODO_STRING \u003d \"todo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final String ADDED_MESSAGE \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final String MESSAGE_WELL_DONE \u003d \"Nice! I\u0027ve marked this task as done:\\n \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static final int MAX_CAPACITY \u003d 100;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    public static String taskContent \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static int taskCount \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static int taskIndex \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static Task[] tasks \u003d new Task[MAX_CAPACITY];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        welcomeMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            String userCommand \u003d getUserInput();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            executeCommand(userCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    static void UiDisplay(String content) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        System.out.println(INDENT + LINE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        if (content !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            System.out.println(INDENT + content);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        System.out.println(INDENT + LINE + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static void welcomeMessage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        System.out.println(\"Hello! I\u0027m duke.Duke\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static void addToDoTask(String taskDescription) throws InvalidCommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        if (taskDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            throw new InvalidCommandException(\"todo-error\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            ToDo t \u003d new ToDo(taskDescription);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            tasks[taskIndex] \u003d t;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            addTask(tasks[taskIndex]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static void addDeadlineTask(String taskDescription) throws InvalidCommandException, StringIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            int dateSeparator \u003d taskDescription.indexOf(\"/by\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            String task \u003d taskDescription.substring(0, dateSeparator).trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            String date \u003d taskDescription.substring(dateSeparator + 3).trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            if (task.equals(\"\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                throw new InvalidCommandException(\"deadline-error\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            } else if (date.equals(\"\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                throw new InvalidCommandException(\"deadline-date-error\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            tasks[taskIndex] \u003d new Deadline(task, date);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            addTask(tasks[taskIndex]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            throw new InvalidCommandException(\"deadline-error\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static void addEventTask(String taskDescription) throws InvalidCommandException, StringIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            int timeSeparator \u003d taskDescription.indexOf(\"/at\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            String task \u003d taskDescription.substring(0, timeSeparator).trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            String eventTime \u003d taskDescription.substring(timeSeparator + 3).trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            if (task.equals(\"\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                throw new InvalidCommandException(\"event-error\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            else if (eventTime.equals(\"\")){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                throw new InvalidCommandException(\"event-date-error\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            tasks[taskIndex] \u003d new Event(task, eventTime);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            addTask(tasks[taskIndex]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            throw new InvalidCommandException(\"event-error\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static void addTask(Task content) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        taskCount++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        // The next task index wil be increase after assigning the current content."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        tasks[taskIndex++] \u003d content;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        UiDisplay(ADDED_MESSAGE"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                + INDENT2 + content"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                + \"\\n    Now you have \" + taskCount + \" tasks in the list.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static void executeCommand(String userCommand) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        String taskAction \u003d taskIdentify(userCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            switch (taskAction) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            case COMMAND_EXIT_STRING:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                exitProgram();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            case COMMAND_DONE_STRING:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                if (stringIsNumeric(taskContent)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                    markAsDone(Integer.parseInt(taskContent));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                    System.out.println(\"Please enter the numeric rank of the task.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            case COMMAND_LIST_STRING:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                listProgram();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            case COMMAND_EVENT_STRING:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                addEventTask(taskContent);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            case COMMAND_TODO_STRING:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                addToDoTask(taskContent);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            case COMMAND_DEADLINE_STRING:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                addDeadlineTask(taskContent);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                throw new InvalidCommandException(\"common\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        } catch (InvalidCommandException exception) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            switch (exception.errorCode) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            case \"common\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                UiDisplay(\":-( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            case \"todo-error\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                UiDisplay(\" :-( OOPS!!! The description of todo cannot be empty.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            case \"deadline-error\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                UiDisplay(\":-( OOPS!!! The description of deadline cannot be empty.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            case \"deadline-date-error\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                UiDisplay(\":-( OOPS!!! The date of deadline is wrong format.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            case \"event-error\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                UiDisplay(\":-( OOPS!!! The description of event cannot be empty.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            case \"event-date-error\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                UiDisplay(\":-( OOPS!!! The date of event is wrong format..\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static String getUserInput() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        String inputLine \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        return inputLine;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static void exitProgram() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        UiDisplay(MESSAGE_GOODBYE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static void listProgram() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        String listContent \u003d \"\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        if (taskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            listContent \u003d \"You don\u0027t have any task in the list now.\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            UiDisplay(listContent);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            for (i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fanceso"
        },
        "content": "                listContent +\u003d \"\\n\" + INDENT + (i + 1) + \".\" + tasks[i];"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            UiDisplay(LIST_MESSAGE + listContent);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static String taskIdentify(String singleLineCommand) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        singleLineCommand \u003d singleLineCommand.trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        // Checking if is a single word or multiple words used command"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        if (singleLineCommand.contains(\" \")) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            String[] splitWords \u003d singleLineCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            String taskName \u003d splitWords[0];"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            taskContent \u003d splitWords[1];"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            return taskName;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            taskContent \u003d \"\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            return singleLineCommand;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static void markAsDone(int inputNumber) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        int taskNumber \u003d inputNumber - 1;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        if ((inputNumber \u003e 0) \u0026\u0026 (taskNumber \u003c taskCount)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            tasks[taskNumber].markAsDone();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            UiDisplay(MESSAGE_WELL_DONE + tasks[taskNumber].toString());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            System.out.println(\"Invalid task number.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fanceso"
        },
        "content": "     * Returns true if the given string is a number."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fanceso"
        },
        "content": "     * Reference from \"https://www.baeldung.com/java-check-string-number\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fanceso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    public static boolean stringIsNumeric(String str) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            Double.parseDouble(str);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fanceso"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fanceso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "fanceso": 216
    }
  },
  {
    "path": "src/main/java/duke/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanceso"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanceso"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    protected String errorCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    public InvalidCommandException(String errorCode) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        this.errorCode \u003d errorCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanceso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanceso": 9
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanceso"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanceso"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    protected String dueDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    protected final String TASK_TYPE \u003d \"[D]\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    public Deadline(String description, String date) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        this.dueDate \u003d date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        return  String.format(TASK_TYPE + \"%s (by: %s)\", super.toString(), dueDate);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanceso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanceso": 16
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanceso"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanceso"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    protected String eventTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    protected final String TASK_TYPE \u003d \"[E]\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    public Event(String description, String dateTime) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        this.eventTime \u003d dateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        return  String.format(TASK_TYPE + \"%s (at: %s)\", super.toString(), eventTime);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanceso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanceso": 16
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanceso"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanceso"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static String TICK \u003d \"[\\u2713]\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    private static String CROSS \u003d \"[\\u2718]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanceso"
        },
        "content": "     * Gets a Unicode character representing if the duke.task.Task is done"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanceso"
        },
        "content": "     * (tick for yes, cross for no)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanceso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        return (isDone ?  TICK : CROSS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        return getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanceso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanceso": 30
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanceso"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanceso"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    protected final String TASK_TYPE \u003d \"[T]\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanceso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanceso"
        },
        "content": "        return TASK_TYPE + super.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanceso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanceso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanceso": 14
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanceso"
        },
        "content": "todo T-task1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanceso"
        },
        "content": "todo T-task2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanceso"
        },
        "content": "deadline D-task3 /by this Friday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanceso"
        },
        "content": "event E-task4 /at next Sunday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanceso"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanceso"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanceso"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanceso"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanceso"
        },
        "content": "todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanceso"
        },
        "content": "event /at next Sunday"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanceso"
        },
        "content": "event wedding /at"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanceso"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanceso"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "fanceso": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanceso"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanceso"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "fanceso": 2
    }
  }
]
