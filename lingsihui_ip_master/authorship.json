[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 2,
      "-": 24
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|1| Event meeying /at sunday"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|1| Deadline return book /by tuesday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event project meeting /at monday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at 2019-10-15"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at Oct 15 2019"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at 2019-10"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at -4pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at 2019-10"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at sunday Oct 15 2019"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at 2019-10"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at Oct 15 2019"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 14
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "DUKE is a task records management that can help you to keep track of"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "the tasks you have. Duke enables users to categorise the type of task "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "into three different types: Todo, Deadline and Event; show the full list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "of task, specific list of task according to date; find a specific task; "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "mark or delete a specific task.This application uses a command line "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "interface; this means that you operate the application by typing commands "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "into a Command Box. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Features:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * Add tasks into list: `event` `todo` `deadline`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * Delete task: `delete`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * Show tasks on a specific date `date`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * Mark task as done `done`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * Find tasks in the list `find`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * Show all the tasks in the list `list`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * Exit Duke `bye`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "This document shows you the basic features in DUKE, add, "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "delete, find, date, done, list and exit commands. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Note the following format used in this document:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "e.g. `Command` "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "A grey highlight (mark-up) indicates that this "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "is a command that can be typed into the command line and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "executed by the application. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "e.g. _**Important Information**_"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "The Bolded and italic words indicates important information."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003cp\u003e UPPER_CASE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "The uppers words indicates the parameters to be "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "supplied by the user. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "e.g. `todo DESCRIPTION, `DESCRIPTION\u0027 is a parameter "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "which can be used as `todo read book`. "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "###  Add tasks into list - `event` `todo` `deadline` "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "This command adds a task to the task list according to the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "type of command. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "format: "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`todo DESCRIPTION`,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`deadline DESCRIPTION /by DATE`,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`event DESCRIPTION /at DATE`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* `todo read book`,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* `deadline return book /by Monday`,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* `event meeting /at Sunday`,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Expected outcomes:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " ```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "  Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " \t[T][✘] read book"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " Now you have 1 task in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " ```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " \t[D][✘] return book  (by: Monday)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " Now you have 2 task in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " ```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " \t[E][✘] meeting  (at: Sunday)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " Now you have 3 task in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " ```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " \u003c/p\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " _**Important tips**_ : "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * For Event and Delete tasks: Accept dates in a format "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " yyyy-mm-dd format and print in a different format "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " MMM dd yyy. If date is not valid, error message"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " will be shown : "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * e.g. : `event meeting /at 2019-10-15`, "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     outcome: "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    \t[E][✘] meeting  (at: Oct 15 2019)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    Now you have 3 task in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * e.g : `event meeting /at 2019-10-113`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    outcome: "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   OOPS! Invalid Date Input"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    Input Date in this format YYYY-MM-DD"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * If any tasks have missing description, "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " an error message will be shown.:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * e.g. : `event /at`, `todo`, `deadline /by`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    outcome : "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    OOPS! Description cannot be empty!"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * If event task has a missing /at, or a deadline task has "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " a missing /by: "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * e.g. : `event` , `deadline`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    outcome : "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    OOPS! Invalid Event Input"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   ``` "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   OOPS! Invalid Deadline Input"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "### Delete task - `delete`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "This command deletes a task in the task list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "format: "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`delete TASK_NUMBER`,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Task number is according to the task number of the task in the list. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* `delete 2` "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Expected outcomes:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* ```"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "  Noted I have removed this task!"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   \t[D][✓] return book  (by: Monday)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   Now you have 2 task in the list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " \u003c/p\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " _**Important tips**_ : "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Invalid task to be deleted includes: "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " Missing task Number to be deleted,task Number is not a number and task Number parameter "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " larger than task size.  "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * e.g. : `done`, "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     outcome: "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    OOPS! Invalid task to Delete!"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "### Show tasks on a specific date - `date`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "This command shows the deadline tasks and event tasks "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "that is happening on the specified date."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "format: "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`date yyy-MM-dd`,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* `date 2019-10-15` "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Expected outcomes:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   1. [E][✘] meeting  (at: Oct 15 2019)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   2. [D][✘] meeting  (by: Oct 15 2019)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " _**Important tips**_ : "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Date format has to be correct. "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * e.g : `date 2019-10-113`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    outcome: "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    OOPS! Invalid Date Input"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    Input Date in this format YYYY-MM-DD"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Shows that the list is empty when there is no "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "event task or deadline task happening/ due on the date.:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * outcome: "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    Your list is empty! :0"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "### Mark task as done - `done`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "This command marks a task in the task list as done."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "format: "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`done TASK_NUMBER`,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Task number is according to the task number of the task in the list. "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* `done 2` "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Expected outcomes:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* ```"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "  Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "   \t[D][✓] return book  (by: Monday)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " \u003c/p\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " _**Important tips**_ : "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Invalid task to be marked includes: "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " Missing task Number to be marked,task Number is not a number, and task Number parameter "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " larger than task size.  "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * e.g. : `mark 10`, task list size \u003d 9"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     outcome: "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    OOPS! Invalid task to Mark!"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "### Find tasks in the list - `find`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "This command finds the specific task according to the user input."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "format: "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`find PARAMETR_TO_FIND`,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* `find book` "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Expected outcomes:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "```"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " 1. [T][✘] read book"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "```"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " _**Important tips**_ : "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* If there is no matching object as user input, "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "it shows error message :"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * outcome: "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    OOPS! I cant find what you are looking for :("
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "### Show all the tasks in the list - `list`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "This command shows all the task in the list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "format: "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`list`,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* `list` "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Expected outcomes:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "```"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " 1. [T][✘] read book"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " 2. [D][✓] return book  (by: Monday)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " 3. [E][✘] meeting  (at: Sunday)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "```"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " _**Important tips**_ : "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* If there is no task in your list, "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "it shows error message :"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    * outcome: "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    Your list is empty! :0"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "### Exit Duke  Command"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "This command exit DUKE."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "format: "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* `bye` "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Expected outcomes:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "```"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "```"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      }
    ],
    "authorContributionMap": {
      "lingsihui": 263,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents the main class. A \u003ccode\u003eDuke\u003c/code\u003e object contains the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * main method."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final String FILE_PATH \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private Duke(String filePath){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showErrorInLoadingFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        ui.printGreetingMessage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                String line \u003d ui.readInput();;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                Command c \u003d new Parser().evaluateInput(line);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                c.executeCommand(tasks, ui, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }catch(DukeException e){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                ui.printInvalidInputMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Load the file contents and create a new Task list by initializing the Duke Object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Start the program by running the duke method."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        new Duke(FILE_PATH).run();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 57,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represent an error in the user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 7
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represent a parser to parse the user input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public Parser(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns a command class corresponding to the user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * If the user input does not associate with any command, a Duke exception is thrown."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param line  user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @throws DukeException  If user input does not start with any commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public Command evaluateInput(String line) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String upperLine \u003d line.toUpperCase();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if(upperLine.startsWith(\"TODO\")){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return new AddCommand(\"Todo\",line);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (upperLine.startsWith(\"LIST\")){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (upperLine.startsWith(\"DEADLINE\")){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return new AddCommand(\"Deadline\",line);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (upperLine.startsWith(\"EVENT\")){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return new AddCommand(\"Event\",line);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (upperLine.startsWith(\"BYE\")){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (upperLine.startsWith(\"DONE\")){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return new DoneCommand(line);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (upperLine.startsWith(\"DELETE\")){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return new DeleteCommand(line);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (upperLine.startsWith(\"FIND\")){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return new FindCommand(line);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (upperLine.startsWith(\"DATE\")){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return new DateCommand(line);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lingsihui": 44
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents a storage file in Duke. A \u003ccode\u003eStorage\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * any methods interacting with files. e.g., \u003ccode\u003eload files, update files\u003c/code\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int LENGTH_OF_DONE_SYMBOL \u003d 4;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int LENGTH_OF_NOT_DONE_SYMBOL \u003d 4;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final String DONE_SYMBOL \u003d \"|1| \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final String NOT_DONE_SYMBOl \u003d \"|0| \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Initialise filepath."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param filePath  File path of the file to store data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public Storage(String filePath){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns Array List of the tasks stored in the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * If the files in the is not in the correct format, Duke Exception will be thrown."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * e.g. files does not start with symbol |0| or |1|."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * format of file : e.g. DONE_SYMBOL TASK_TYPE Description /AT Description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * e.g. |0| Deadline return book /by monday."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * * e.g. files does not start with Deadline,Event or Todo."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return ArrayList\u003cTask\u003e of tasks stored in the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @throws IOException  If file has an error."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @throws DukeException  If file format is not correct."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException, DukeException{"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        f.createNewFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        ArrayList\u003cTask\u003e storageTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            String line  \u003d s.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            if(line.contains(DONE_SYMBOL)){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                addFileTask(storageTasks,line.substring(LENGTH_OF_DONE_SYMBOL));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                storageTasks.get(storageTasks.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            } else if (line.contains(NOT_DONE_SYMBOl)){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                addFileTask(storageTasks,line.substring(LENGTH_OF_NOT_DONE_SYMBOL));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            } else{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                throw new DukeException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return storageTasks;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private void addFileTask(ArrayList\u003cTask\u003e storageTasks,String line) throws DukeException{"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if(line.startsWith(\"Deadline\")){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            int slashPosition \u003d line.indexOf(\"/\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            storageTasks.add(new Deadline(line ,slashPosition));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if(line.startsWith(\"Todo\")){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            storageTasks.add(new Todo(line));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (line.startsWith(\"Event\")){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            int slashPosition \u003d line.indexOf(\"/\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            storageTasks.add(new Event(line ,slashPosition));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Save tasks in task list to file in the correct format."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * If task cannot be written into file, an error message will be shown."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * format: DONE_SYMBOL TYPE task_description at/by_description"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param type  String type of Task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param t Class Task of the task to add."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param isAppend Boolean of whether the file should overwrite or append to file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui  User interface to print error message."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void saveTaskToFile(String type,Task t, boolean isAppend,Ui ui){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            writeToFile(type,t,isAppend);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.printErrorToSaveTaskToFile(e);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private void writeToFile(String type, Task taskToAdd,boolean isAppend) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filePath,isAppend);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String done;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (taskToAdd.getIsDone()){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            done \u003d DONE_SYMBOL;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            done \u003d NOT_DONE_SYMBOl;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (type.equals(\"Deadline\")){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            fw.write(done + type + taskToAdd.getDescription() + \"/by\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    + taskToAdd.getBy() + System.lineSeparator());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (type.equals(\"Event\")){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            fw.write(done + type + taskToAdd.getDescription() + \"/at\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    + taskToAdd.getAt() + System.lineSeparator());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (type.equals(\"Todo\")){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            fw.write(done + type + taskToAdd.getDescription()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    + System.lineSeparator());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Update tasks list in the file."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param tasks  String type of Task."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui User interface to be passed to saveTaskToFile."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void updateTaskToFile(ArrayList\u003cTask\u003e tasks,Ui ui) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        saveTaskToFile(tasks.get(0).getType(),tasks.get(0), false, ui);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        for(int i \u003d 1; i\u003c tasks.size();i++){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            saveTaskToFile(tasks.get(i).getType(),tasks.get(i),true, ui);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 129
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents a Task list A \u003ccode\u003eTask List\u003c/code\u003e object contains the task list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * and has operations to add/delete/update/show tasks in the list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public final int MIN_DESCRIPTION_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int FIND_LENGTH \u003d 5;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Initialise Array list tasks to the Array List of the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param tasks  Array list of the tasks in the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Create a new Array list tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Process the user input of an Event task to task description and at description."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * If the event task has a missing /at, a Duke Exception is thrown."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Accept dates in a format yyyy-mm-dd format and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * print in a different format MMM dd yyyy"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param line  user input of event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui User interface to print error."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param storage Storage parameter to be passed to addTask()."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void processEvent(String line,Ui ui, Storage storage, String type) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            if (!line.contains(\"/at\")){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                throw new DukeException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            int slashPosition \u003d line.indexOf(\"/\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            String formattedLine \u003d formatDate(line,slashPosition);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            addTask(new Event(formattedLine,slashPosition),ui,storage,type);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.printInvalidEventOrDeadlineMessage(\"Event\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (DateTimeException e){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.printInvalidDateMessage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Process the user input of a Deadline task to task description and by description."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * If the deadline task has a missing /by, a Duke Exception is thrown."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Accept dates in a format yyyy-mm-dd format and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * print in a different format MMM dd yyyy"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param line  user input of event."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui User interface to print error."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param storage Storage parameter to be passed to addTask()."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void processDeadline (String line, Ui ui, Storage storage, String type){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            if (!line.contains(\"/by\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                throw new DukeException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            int slashPosition \u003d line.indexOf(\"/\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            String formattedLine \u003d formatDate(line, slashPosition);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            addTask(new Deadline(formattedLine, slashPosition), ui, storage, type);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.printInvalidEventOrDeadlineMessage(\"Deadline\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (DateTimeException e){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.printInvalidDateMessage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String formatDate(String line, int slashPosition) throws DateTimeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String  dateLine \u003d line.substring(slashPosition);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String[] dates \u003d dateLine.split(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String oldDate;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        for (String s : dates) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            if (s.matches(\".*\\\\d.*-.*\\\\d.*-.*\\\\d.*\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                oldDate \u003d s;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(oldDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                String newDate \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                return line.replace(oldDate, newDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Adds a task to the task list \"tasks\"."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Updates the added task to the file."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * If the description length is empty, a DukeException is thrown, and prints Invalid Task message."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param t  Task to be added."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui User interface to show the task added."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param storage Storage to update file."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param type Type of the task to add."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void addTask (Task t, Ui ui, Storage storage, String type){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            if (t.getDescriptionLength() \u003c MIN_DESCRIPTION_LENGTH) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                throw new DukeException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showAddTaskMessage(t,tasks.size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            storage.saveTaskToFile(type,t,true,ui);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }catch(DukeException e){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.printInvalidTaskToAdd();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Deletes a task in the task list \"tasks\"."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Updates the deleted task in the file."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * If the task to be deleted is invalid, a DukeException is thrown,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * and prints Invalid Task to delete message."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Format : Delete 2"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Invalid format includes: Missing spaces, task Number to be deleted larger than task size."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param line TaskNumber of the task be deleted."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui User interface to show the task deleted."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param storage Storage to update file."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void deleteTask(String line,Ui ui,Storage storage){"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            int taskNum \u003d processTaskToDelete(line);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showDeleteTaskMessage(tasks,taskNum);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            tasks.remove(taskNum-1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            storage.updateTaskToFile(tasks,ui);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }catch (DukeException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showInvalidTaskToMarkAndDelete(\"Delete\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (NumberFormatException e){"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showInvalidTaskToMarkAndDelete(\"Delete\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Marks a task in the task list \"tasks\" as done."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Updates the marked task in the file."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * If the task to be marked is invalid, a DukeException is thrown,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * and prints Invalid Task to mark message."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Format : Done 2"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Invalid format includes: Missing spaces, task Number not a number,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * task Number to be marked larger than task size."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param line TaskNumber of the task to be marked."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui User interface to show the task marked."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param storage Storage to update file."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void markTaskAsDone(String line,Ui ui,Storage storage) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            int taskNum \u003d processTaskToDelete(line);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            tasks.get(taskNum-1).markAsDone();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showMarkedTaskMessage(tasks,taskNum);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            storage.updateTaskToFile(tasks,ui);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showInvalidTaskToMarkAndDelete(\"Mark\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (NumberFormatException e){"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showInvalidTaskToMarkAndDelete(\"Mark\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int processTaskToDelete(String line) throws DukeException, NumberFormatException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if(!line.contains(\" \")){"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String[] words \u003d line.split(\" \");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if(words.length \u003c 2){"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int taskNum \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (taskNum \u003e tasks.size()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return taskNum;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Shows the list in the task."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * If the list is empty, DukeException is thrown and List is empty message will be shown."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui  User Interface to show the list and error message."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showList (Ui ui){"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                throw new DukeException();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.printTasksInList(tasks);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.printListIsEmptyMessage();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Filter and show the task list based on user input."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * If the list is empty, DukeException is thrown and no matching task message will be shown."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui  User Interface to show the list and error message."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param line  user input to filter."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void findSpecificTask(String line,Ui ui){"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ArrayList\u003cTask\u003e filteredTaskList \u003d (ArrayList\u003cTask\u003e) tasks.stream()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    .filter((t) -\u003e t.getDescription().contains(line))"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    .collect(toList());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            if(filteredTaskList.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                throw new DukeException();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.printFilteredTaskList(filteredTaskList);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.printNoMatchingTaskMessage();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Shows the list in the task of the specific date."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * If the list is empty, DukeException is thrown and List is empty message will be shown."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * If dates is not in this format yyyy-mm-dd, throws DateTimeException."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui  User Interface to show the list and error message."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param date  date to filter."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showDateList (Ui ui, String date){"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            String formattedDate \u003d formatDate(date,0);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ArrayList\u003cTask\u003e filteredDateList;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            filteredDateList \u003d (ArrayList\u003cTask\u003e) tasks.stream()"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    .filter((t) -\u003e t.getBy().contains(formattedDate) || t.getAt().contains(formattedDate))"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    .collect(toList());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            if (filteredDateList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                throw new DukeException();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.printTasksInList(filteredDateList);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.printListIsEmptyMessage();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (DateTimeException e){"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.printInvalidDateMessage();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 250
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final String LINE \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private  Scanner in;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public Ui(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void printGreetingMessage () {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void printByeMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String readInput(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return this.in.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showLine(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void printInvalidInputMessage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Opps! Sorry I don\u0027t know what you mean! :(\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showErrorInLoadingFile(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Error Loading File...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showLoadingError(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Invalid File content\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showAddTaskMessage(Task t, int size){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"\\t\" + t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" task in the list.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void printInvalidTaskToAdd(){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"OOPS! Description cannot be empty!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showDeleteTaskMessage(ArrayList\u003cTask\u003e tasks, int taskNum){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Noted I have removed this task!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"\\t\"+ tasks.get(taskNum-1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int taskLeft \u003d tasks.size()-1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Now you have \" + taskLeft + \" task in the list.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showMarkedTaskMessage(ArrayList\u003cTask\u003e tasks,int taskNum){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"\\t\"+ tasks.get(taskNum-1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showInvalidTaskToMarkAndDelete(String Action){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"OOPS! Invalid task to \" + Action + \"!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void printTasksInList(ArrayList\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            System.out.println((i + 1) + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void printListIsEmptyMessage(){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Your list is empty! :0\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void printErrorToSaveTaskToFile(IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void printNoMatchingTaskMessage(){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"OOPS! I cant find what you are looking for :(\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void printFilteredTaskList(ArrayList\u003cTask\u003e filterTaskList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        for (int i \u003d 0; i \u003c filterTaskList.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            System.out.println((i + 1) + \". \" + filterTaskList.get(i));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void printInvalidDateMessage(){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"OOPS! Invalid Date Input\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Input Date in this format YYYY-MM-DD\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void printInvalidEventOrDeadlineMessage(String type){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"OOPS! Invalid \" + type + \" Input\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 94
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents an ADD command in Duke which extends from the abstract class Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * An \u003ccode\u003eAdd Command\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * any commands that add a task to the tasklist. e.g., \u003ccode\u003eEvent,Deadline\u003c/code\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Constructor for AddCommand()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Initialise type of task to add and task description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param type  type of task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param line task description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public AddCommand(String type, String line){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns false for boolean isExit in Duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Does not exit while loop in Duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return boolean isExit."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Execute Add task commands to tasklist."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param tasks  TaskList class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui User Interface class ."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param storage Storage class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (type.equals(\"Todo\")){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            tasks.addTask(new Todo(line),ui,storage,type);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (type.equals(\"Event\")){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            tasks.processEvent(line,ui,storage,type);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (type.equals(\"Deadline\")){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            tasks.processDeadline(line,ui,storage,type);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 53
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents a command in Duke. A \u003ccode\u003eCommand\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * any commands with the two abstract method executeCommand and isExit."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Execute corresponding task commands based on the command class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param tasks  TaskList class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui User Interface class ."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param storage Storage class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public abstract void executeCommand(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns either true or false for boolean isExit in Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Does not exit while loop in Duke when return false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Exit while loop in Duke when return true."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return boolean isExit."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 29
    }
  },
  {
    "path": "src/main/java/duke/command/DateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents a Date command in Duke which extends from the abstract class Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * A \u003ccode\u003eDate Command\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * any commands that filters out a task from the tasklist using specific date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class DateCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int DATE_LENGTH \u003d 4;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Constructor for DateCommand()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Initialise specific date to filter."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param line date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public DateCommand(String line){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.date \u003d line.substring(DATE_LENGTH);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Execute Date task commands in tasklist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param tasks  TaskList class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui User Interface class ."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param storage Storage class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        tasks.showDateList(ui,date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns false for boolean isExit in Duke."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Does not exit while loop in Duke."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return boolean isExit."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 45
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents a DELETE command in Duke which extends from the abstract class Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * A \u003ccode\u003eDelete Command\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * any commands that deletes a task from the tasklist. e.g., \u003ccode\u003eDelete 2\u003c/code\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class DeleteCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Constructor for DeleteCommand()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Initialise task to delete."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param line task to delete e.g. delete 2."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public DeleteCommand(String line){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns false for boolean isExit in Duke."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Does not exit while loop in Duke."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return boolean isExit."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Execute Delete task commands in tasklist."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param tasks  TaskList class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui User Interface class ."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param storage Storage class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        tasks.deleteTask(line,ui,storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 42
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents a DONE command in Duke which extends from the abstract class Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * A \u003ccode\u003eDone Command\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * any commands that mark a task as done from the tasklist. e.g., \u003ccode\u003eDone 2\u003c/code\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class DoneCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Constructor for DoneCommand()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Initialise task to be marked as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param line task to be marked as done. e.g. Done 2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public DoneCommand(String line){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns false for boolean isExit in Duke."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Does not exit while loop in Duke."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return boolean isExit."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Execute markAsDone task commands in tasklist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param tasks  TaskList class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui User Interface class ."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param storage Storage class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        tasks.markTaskAsDone(line,ui,storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 44
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents an EXIT command in Duke which extends from the abstract class Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * An \u003ccode\u003eExit Command\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * any commands that exits Duke. e.g., \u003ccode\u003eBye\u003c/code\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns true for boolean isExit in Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Exits while loop in Duke and end the code."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return boolean isExit."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Execute Bye command in UI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param tasks  TaskList class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui User Interface class ."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param storage Storage class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        ui.printByeMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 32
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents a FIND command in Duke which extends from the abstract class Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * A \u003ccode\u003eFind Command\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * any commands that finds a task from the task list using specific input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class FindCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String objectToFind;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int FIND_LENGTH \u003d 4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Constructor for FindCommand()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Initialise input to be filtered."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param line user input of task to find."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public FindCommand(String line){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        objectToFind \u003d line.substring(FIND_LENGTH);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Execute Find task commands in task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param tasks  TaskList class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui User Interface class ."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param storage Storage class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        tasks.findSpecificTask(objectToFind,ui);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns false for boolean isExit in Duke."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Does not exit while loop in Duke."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return boolean isExit."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 45
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents a LIST command in Duke which extends from the abstract class Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * A \u003ccode\u003eList Command\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * any commands that shows the tasks in the tasklist. e.g., \u003ccode\u003eList\u003c/code\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns false for boolean isExit in Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Does not exit while loop in Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return boolean isExit."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Execute command to show the list in taskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param tasks  TaskList class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param ui User Interface class ."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param storage Storage class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand (TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        tasks.showList(ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 33
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents an deadline task in Duke. A \u003ccode\u003edeadline Task\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * any tasks with a description, a boolean isDone to mark whether task is completed and an"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * by description of when the task need to be completed by"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * e.g., \u003ccode\u003eDeadline return book /by sunday\u003c/code\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private static final int BY_LENGTH \u003d 3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int DEADLINE_LENGTH \u003d 8;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Constructor for  Deadline()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Initialise description of task, isDone boolean and description of by."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Default isDone is false."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param description task description. e.g. return book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param slashPosition index of the slash position.e.g. sunday."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public Deadline(String description, int slashPosition){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        super(description.substring(DEADLINE_LENGTH,slashPosition));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.by \u003d description.substring(slashPosition + BY_LENGTH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns the strings of the task icon, status icon,description of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * and description of by when task is printed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return String \"[D]\" + status icon + task description + by description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by:\" + by + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns the type of the task as Deadline task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Getter."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return String Deadline."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String getType(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return \"Deadline\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns by description for the event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Getter."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return String at. e.g. sunday."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String getBy(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 54
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents an event task in Duke. An \u003ccode\u003eevent Task\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * any tasks with a description, a boolean isDone to mark whether task is completed and an"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * At description of when the event is going to occur."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * e.g., \u003ccode\u003eEvent meeting /at sunday\u003c/code\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int AT_LENGTH \u003d 3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int EVENT_LENGTH \u003d 5;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Constructor for  Event()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Initialise description of task, isDone boolean and description of at."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Default isDone is false."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param description task description. e.g. meeting"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param slashPosition index of the slash position.e.g. sunday."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public Event(String description,int slashPosition){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        super(description.substring(EVENT_LENGTH,slashPosition));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.at \u003d description.substring(slashPosition + AT_LENGTH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns the strings of the task icon, status icon,description of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * and description of at when task is printed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return String \"[E]\" + status icon + task description + at description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at:\" + at + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns at description for the event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Getter."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return String at. e.g. sunday."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String getAt(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns the type of the task as Event task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Getter."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return String Event."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String getType(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return \"Event\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 55
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents a task in Duke. A \u003ccode\u003eTask\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * any tasks with a description and a boolean isDone to mark whether task is completed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Constructor for Task()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Initialise description of task and isDone boolean."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Default isDone is false."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param description task description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns an Icon corresponding to the boolean isDone."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * If isDone is false, returns icon CROSS_ICON."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * If isDone is true, returns icon TICK_ICON."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return IsDone Icon"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns boolean isDone."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Getter."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return Boolean IsDone"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public boolean getIsDone(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Set isDone of a task to be true when this function is called."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Setter."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void markAsDone(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns empty string as general task do not have a deadline."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Getter."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return String \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String getBy(){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return \" \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns empty string as general task do not have a date."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Getter."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return String \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String getAt(){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return \" \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns the strings of the status icon and description of the task when task is printed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return String status icon + task description."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return getStatusIcon() + description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns the description of a task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return String description."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String getDescription(){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns the type of a task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return String description."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns the length of a description."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return int description length."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public int getDescriptionLength() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return description.length();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 97
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * Represents a to-do task in Duke. A \u003ccode\u003eto-do Task\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * any tasks with a description and a boolean isDone to mark whether task is completed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " * e.g., \u003ccode\u003eTodo read book\u003c/code\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int TODO_LENGTH \u003d 4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Constructor for To-do Task()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Initialise description of task and isDone boolean."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Default isDone is false."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @param description task description. e.g. read book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public Todo(String description){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        super(description.substring(TODO_LENGTH));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns the strings of the task icon, status icon and description of the task when task is printed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return String \"[T]\" + status icon + task description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Returns the type of the task as To-do task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * Getter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     * @return String To-do task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String getType(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return \"Todo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 39
    }
  },
  {
    "path": "text-ui-test/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Deadline meeting /by 2019-10"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Deadline meeting /by Oct 15 2019"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at Sunday 1-2pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at Oct 15 2019"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 5
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "deadline return book /by Monday"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "deadline /by Monday"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "deadline meeting /by 2019-10"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "deadline meeting /by 2019-10-15"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "deadline meeting /by 2019-10-100"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "event meeting"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "event meeting /at Sunday 1-2pm"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "event /at Sunday 1-2pm"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "event /at"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "event meeting /at 2019-10"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "event meeting /at 2019-10-15"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "event meeting /at 2019-10-100"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "done"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "done borrow book"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "done 300"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "delete"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "delete borrow book"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "delete 100"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "find"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "find h"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "find book"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "date 2019-10-15"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "date 2019-10-110"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "blah"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 40
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "if [ -e \"./data/duke.txt\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    rm data/duke.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/task/*.java ../src/main/java/duke/command/*.java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 9,
      "-": 36
    }
  },
  {
    "path": "tmp.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|1| Deadline return book /by Monday"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|1| Todo read book "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Deadline return book /by monday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at sunday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|1| Deadline return book /by Monday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|1| Todo read book "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Deadline return book /by monday"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at sunday"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|1| Deadline return book /by Monday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|1| Todo read book "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Deadline return book /by monday"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at sunday"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|1| Deadline return book /by Monday"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|1| Todo read book "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Deadline return book /by monday"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at sunday"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|1| Deadline return book /by Monday"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|1| Todo read book "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Deadline return book /by monday"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at sunday"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|1| Deadline return book /by Monday"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|1| Todo read book "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Deadline return book /by monday"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|0| Event meeting /at sunday"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 24
    }
  }
]
