[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "D | 0 | return book | Oct 20 2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "E | 0 | book conference | Oct 20 2020 14:45"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 2
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Ace is a desktop app personal assistant for managing tasks list, optimised for use via the Command Line Interface (CLI). You can put in your todos, deadlines and events and Ace will manage them for you. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [1. list](#1-list)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [2. todo](#2-todo)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [3. deadline](#3-deadline)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [4. event](#4-event)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [5. find](#5-find)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [6. done](#6-done)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [7. delete](#7-delete)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [8. help](#8-help)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [9. bye](#9-bye)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [10. Saving the Data](#10-saving-the-data)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* [Note About Date Format](#note-about-date-format)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* [FAQ](#faq)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. Ensure that you have java `11` installed in your computer."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. Download the latest iP.jar."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "3. Copy it to the folder you want to store your tasks in."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "4. Run the .jar file in the command prompt as follows: `java -jar iP.jar`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "5. Ace will show the deadline and events you have for today."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "6. Type `help` to see what you can do with this personal assistant."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Notes about command format:  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. Words in _italics_ are parameters to be provided by the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. Words in {} are optional parameters. "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "3. Casing doesn\u0027t matter for the commands. For example: `list` is the same as `List` or `LiSt`. "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "4. Dates for deadline and event can only be entered in the format: dd-mm-yyyy {HH:mm}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Following is the list of features available:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* `list`: Provides a list of your tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* `todo`: Add a todo to your tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* `deadline`: Add a deadline to your tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* `event`: Add an event to your tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* `find`: finds tasks that contain a certain keyword."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* `done`: Marks a task as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* `delete`: deletes a task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* `help`: Gives a list of available commands and their syntax."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* `bye`: exits the application."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 1. list "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Displays a list of your current tasks with markers to identify the tasks type and whether it is done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 2. todo"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Adds a todo task to the existing list of tasks in the following format: "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`[T][X] \u003ctaskname\u003e`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Format: `todo` _taskname_"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`todo` read book"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Sample outcome:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![example of todo](todoeg.PNG)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3. deadline"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Adds a deadline to the existing list of tasks in the following format: "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`[D][X] \u003ctaskname\u003e(by: \u003cdate\u003e)` where date is MMM dd yyyy {HH:mm}, eg: Oct 10 2020"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Format: `deadline` _taskname /by dd-mm-yyyy {HH:mm}_"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`deadline` return book /by 20-10-2020"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Sample outcome:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![example of deadline](deadeg.PNG)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 4. event"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Adds an event to the existing list of tasks in the following format: "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`[E][X] \u003ctaskname\u003e(on: \u003cdate\u003e)` where date is MMM dd yyyy {HH:mm}, eg: Oct 10 2020"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Format: `event` _taskname /by dd-mm-yyyy {HH:mm}_"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`event` book conference /on 20-10-2020 14:45"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Sample outcome:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![example of event](eventeg.PNG)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 5. find"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Finds all the tasks that contain the given keyword."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Format: `find` _keyword_"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`find` conference"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Sample outcome:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![example of find](findeg.PNG)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 6. done"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Marks the task at the given task number as done."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Format: `done` _tasknumber_"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`done` 1"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Sample outcome:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![example of done](doneeg.PNG)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 7. delete"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Deletes the task with the given task number."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Format: `delete` _tasknumber_"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`delete` 1"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Sample outcome:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![example of delete](deleteeg.PNG)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 8. help"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Displays a list of commands/features you can use with their syntax."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 9. bye"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Saves your updated tasks list in a text file data/duke.txt and exits the program."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 10. Saving the Data"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The updated task list is automatically saved in the text file data/duke.txt at every successful exit from Ace. This data is loaded as soon as the application starts."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Ace displays all tasks due on the day you open the application by filtering out tasks from this loaded data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## Note About Date Format"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Format for date to be entered for a deadline or event is **dd-mm-yyyy {HH:mm}**."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Format in which dates are stored and printed is **MMM dd yyyy {HH:mm}**."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* The description of these formats are as follows:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + dd - date as a 2 digit number. Values range between 01 and 31, both included."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + mm - month as a 2 digit number. Values range between 01 and 12, both included."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + yyyy -  year as a 4 digit number."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + MMM - first three letters of the month."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + HH:mm - time in 24-hr format."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "**Q:** What to do if I see the ticks and crosses for my tasks as `?`?"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Run the following command on your command prompt:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![command to enter](commandPrompt.jpg)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "If you still don\u0027t see the ticks/crosses, change the font of your command prompt to NSimSun."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Action | Format | example"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "-------- | ---------- | ------------"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "list | `list` | -"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "todo | `todo` _taskname_ | `todo` read book"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "deadline | `deadline` _taskname /by dd-mm-yyyy {HH:mm}_ | `deadline` return book /by 20-10-2020"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "event | `event` _taskname /by dd-mm-yyyy {HH:mm}_ | `event` book conference /on 20-10-2020 14:45"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "find | `find` _keyword_ | `find` conference"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "done | `done` _tasknumber_ | `done` 1"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "delete | `delete` _tasknumber_ | `delete` 1"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "help | `help` | -"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "bye | `bye` | -"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "wamikamalik": 187
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.Storage.FileManager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents the main class of Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static final int DONE_TODO_LEN \u003d 5;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static final int DELETE_LEN \u003d 7;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final String FILE \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final String DIR \u003d \"data\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private FileManager file;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        file \u003d new FileManager(FILE, DIR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            tasks \u003d new TaskList(file.loadData());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Execute the flow of the personal assistant."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int itemNo;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cTask\u003e tasksToday \u003d tasks.getToday();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        TaskList dueToday \u003d new TaskList(tasksToday);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ui.listTasksForToday(dueToday);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        while(!isExit) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            //the following code interprets the command entered by the user and takes appropriate actions."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String fullCommand \u003d ui.getCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                Parser parser \u003d new Parser(fullCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                CommandType type \u003d parser.extractType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                switch (type) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                case EXIT:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    isExit \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    ui.printByeMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                case LIST:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    ui.listTasks(tasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                case MARK_DONE:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    itemNo \u003d parser.extractItemNo(DONE_TODO_LEN);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    Task setDone \u003d tasks.done(itemNo);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    ui.doneMessage(setDone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                case DELETE:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    itemNo \u003d parser.extractItemNo(DELETE_LEN);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    Task toDelete \u003d tasks.delete(itemNo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    ui.deleteMessage(toDelete);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                case FIND:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    String keyword \u003d parser.extractKeyword();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    TaskList tasksFound \u003d new TaskList(tasks.find(keyword));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    ui.listMatchingTasks(tasksFound);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                case HELP:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    ui.printHelp();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    tasks.add(parser, fullCommand, CommandType.TODO);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    ui.addMessage(tasks);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    tasks.add(parser, fullCommand, CommandType.DEADLINE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    ui.addMessage(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    tasks.add(parser, fullCommand, CommandType.EVENT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    ui.addMessage(tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } catch (DukeException error) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                ui.showError(error);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            file.updateList(tasks);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            ui.showError(error);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "wamikamalik": 109
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents all the interaction that happens with the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for(int i \u003d 0; i\u003c100; i++) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.print(\"-\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\t\\nThe World has gone crazy!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String logo \u003d \" __A__   _C__   _E__\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"/  _  \\\\ /  __| |  __|\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"| |_| | | |    | |__\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"|  _  | | |__  | |__\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"| | | | \\\\____| |____|\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.print(logo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\tHey there! I\u0027m Ace, your very own personal assistant.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\tHow can I help you today?\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String command \u003d in.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void showError(Exception error) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public  void printByeMessage() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\n\\tSee you! Have a nice day!\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Displays the appropriate message after adding task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param tasks the list of tasks to which a new task has been added."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void addMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\n\\tAdded task \\\"\" + tasks.get(Task.getNoOfTasks() - 1) + \"\\\" to your To-Do\u0027s!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\tYou now have \" + Task.getNoOfIncompleteTasks() + \" incomplete task\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + (Task.getNoOfIncompleteTasks() !\u003d 1 ? \"s\" : \"\") + \".\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\tTo view the To-Do list simply type \\\"list\\\".\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Displays the appropriate message after deleting a task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param taskToDelete the task that has been deleted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void deleteMessage(Task taskToDelete) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\n\\tOkie! I have removed the following task:\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\t\\t \" + taskToDelete);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\tYou now have \" + Task.getNoOfIncompleteTasks() + \" incomplete task\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + (Task.getNoOfIncompleteTasks() !\u003d 1 ? \"s\" : \"\") + \".\" + \"\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Displays the appropriate message after marking a task as done."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param setDone the task that has been marked done."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void doneMessage(Task setDone) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\n\\tGreat! I have updated your To-Do list for the following task:\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\t\\t \" + setDone + \"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Displays the list of tasks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param tasks tasks to be listed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void listTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if(Task.getNoOfTasks()\u003d\u003d0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println(\"\\n\\tYou currently don\u0027t have any tasks.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println(\"\\tTo add a task simply input the task description.\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println(\"\\n\\tHere\u0027s your current To-Do list:\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            for (int i \u003d 0; i\u003cTask.getNoOfTasks(); i +\u003d 1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                System.out.println(\"\\t\\t\"+ (i+1) + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void listMatchingTasks(TaskList tasksFound) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if(tasksFound.size()\u003d\u003d0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println(\"\\n\\tOoPsIEs! No matching tasks found.\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println(\"\\n\\tThese are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            for (int i \u003d 0; i\u003ctasksFound.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                System.out.println(\"\\t\\t\"+ (i+1) + \". \" + tasksFound.get(i));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void listTasksForToday(TaskList dueToday) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if(dueToday.size()\u003d\u003d0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println(\"\\n\\tYou don\u0027t have any tasks or events due today ;)\\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println(\"\\n\\tThese are your deadlines and events for today:\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            for (int i \u003d 0; i\u003cdueToday.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                System.out.println(\"\\t\\t\"+ (i+1) + \". \" + dueToday.get(i));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Displays the help data to the user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\n\\tThese are the list of commands you can use:\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\t\\t1. help\\n\\t\\tProvides a list of commands you can enter.\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\t\\t2. list\\n\\t\\tProvides a list of your tasks.\\n\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\t\\t3. todo \u003ctaskname\u003e\\n\\t\\tAdds a todo to the list with name \u003ctaskname\u003e.\" +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                \"\\n\\t\\texample: todo read book\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\t\\t4. deadline \u003ctaskname\u003e /by \u003cdate\u003e\\n\\t\\tAdds a deadline to the list with name \u003ctaskname\u003e\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \" and deadline \u003cdate\u003e.\" + \"\\n\\t\\texample: deadline return book /by 30-10-2020\\n\\t\\t\\t\\t OR\\n\\t\\t\\t\\t \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"deadline return book \" + \"/by 30-10-2020 14:35\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\t\\t5. event \u003ctaskname\u003e /on \u003cdate\u003e\\n\\t\\tAdds an event to the list with name \u003ctaskname\u003e and\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \" event date \u003cdate\u003e.\" + \"\\n\\t\\texample: event book show /on 30-10-2020\\n\\t\\t\\t\\t OR\\n\\t\\t\\t\\t \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"event book show \" + \"/on 30-10-2020 14:35\\n\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\t\\t6. done \u003ctasknumber\u003e\\n\\t\\tMarks the task with number \u003ctasknumber\u003e as done.\" +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                \"\\n\\t\\texample: done 3\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\t\\t7. delete \u003ctasknumber\u003e\\n\\t\\tDeletes the task with number \u003ctasknumber\u003e.\" +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                \"\\n\\t\\texample: delete 3\\n\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\t\\t8. find \u003ckeyword\u003e\\n\\t\\tLists the tasks that contain the \u003ckeyword\u003e.\" +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                \"\\n\\t\\texample: find book\\n\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"\\t\\t9. bye\\n\\t\\tExits the application.\\n\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 159
    }
  },
  {
    "path": "src/main/java/duke/Storage/FileManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package duke.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents the file where data is stored and from which data is retrieved."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class FileManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String filename;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String dir;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public FileManager(String name, String dir) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        filename \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.dir \u003d dir;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        createFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Creates a new file if the file does not exist."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Opens a file if it exists."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private void createFile() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        file \u003d new File(dir + \u0027/\u0027 + filename);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if(!file.exists()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                if (!file.getParentFile().exists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println(\"\\n\\tYikes! I could not create a file to store your data. Reason:\" + e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Loads the data stored in the file and store it in an ArrayList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return the ArrayList of data generated from the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws FileNotFoundException If the file is not found."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public ArrayList\u003cTask\u003e loadData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Scanner s \u003d new Scanner(file); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int taskNo \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            String[] details \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            switch (details[0].trim()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                tasks.add(new Todo(details[2].trim()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                tasks.add(new Deadline(details[2].trim(), details[3].trim()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                tasks.add(new Event(details[2].trim(), details[3].trim()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (details[1].trim().equals(\"1\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                tasks.get(taskNo).markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            taskNo +\u003d 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Updates the text file according to the new task list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param tasks the new list of tasks."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws IOException If there is a problem writing into the file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void updateList(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String done;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String textToAdd \u003d \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for(Task task: tasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            type \u003d generateType(task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            done \u003d generateDone(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            description \u003d task.getName();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            textToAdd +\u003d type + \" | \" + done + \" | \" + description;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if(!(task instanceof Todo)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String time;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                if(task instanceof Event) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    time \u003d ((Event) task).getTime();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    time \u003d ((Deadline) task).getBy();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                textToAdd +\u003d \" | \" + time;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            textToAdd +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String generateDone(Task task) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String done;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if(task.isDone()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            done \u003d \"1\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            done \u003d \"0\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String generateType(Task task) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if(task instanceof Todo) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            type \u003d \"T\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if(task instanceof Event) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            type \u003d \"E\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            type \u003d \"D\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 137
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    EXIT,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    MARK_DONE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    FIND,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    HELP"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 13
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.exception.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents the message input by the user. It makes sense of the message by parsing it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Parser(String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Extracts the job to be done from the raw message command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return The type of command that was given by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws DukeException If command input is unidentified."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public CommandType extractType() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String command \u003d message.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if(command.contains(\" \")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            command \u003d command.split(\" \")[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if(command.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return CommandType.EXIT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if(command.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return CommandType.LIST;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if(command.equalsIgnoreCase(\"done\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return CommandType.MARK_DONE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if(command.equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return CommandType.DELETE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if(command.equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return CommandType.FIND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if(command.equalsIgnoreCase(\"help\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return CommandType.HELP;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if(message.length()\u003c4) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new DukeException(ExceptionType.UNIDENTIFIED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if(command.equalsIgnoreCase(\"todo\")){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return CommandType.TODO;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if(command.equalsIgnoreCase(\"deadline\")){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return CommandType.DEADLINE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if(command.equalsIgnoreCase(\"event\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return CommandType.EVENT;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new DukeException(ExceptionType.UNIDENTIFIED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Checks the event or deadline command to ensure the input is right and complete."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param rawName array of description and deadline/date."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param taskName type of task,i.e, event or deadline."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param taskIdentifier on or by task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws DukeException If task description, on/by or date description is missing."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void checkCommand(String[] rawName, String taskName, String taskIdentifier) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (rawName[0].trim().equalsIgnoreCase(taskName)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new DukeException(ExceptionType.MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (!message.contains(taskIdentifier)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new DukeException(ExceptionType.MISSING_IDENTIFIER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (rawName.length \u003c 2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new DukeException(ExceptionType.MISSING_ON_BY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Get the item number of the item to be marked done or deleted from the command entered."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param commandLen the length of command given."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return The item number."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public int extractItemNo(int commandLen) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int itemNo;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            String rawItemNo \u003d message.trim().substring(commandLen, message.length()).trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if(rawItemNo.endsWith(\".\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                rawItemNo \u003d rawItemNo.substring(0,rawItemNo.length()-1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            itemNo \u003d Integer.parseInt(rawItemNo);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (NumberFormatException | StringIndexOutOfBoundsException error) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            itemNo \u003d 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return itemNo;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String extractKeyword() throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String keyword;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String[] words \u003d message.trim().split(\" \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if(words.length\u003e1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            keyword \u003d words[1];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new DukeException(ExceptionType.MISSING_KEYWORD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static String toDate(String date) throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String finalDate;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if(date.trim().contains(\" \")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                LocalDateTime d;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                LocalDateTime today \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String[] parts \u003d date.trim().split(\" \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String[] dates \u003d parts[0].split(\"-\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String[] time \u003d parts[1].split(\":\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                d \u003d LocalDateTime.of(Integer.parseInt(dates[2]), Integer.parseInt(dates[1]),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                        Integer.parseInt(dates[0]), Integer.parseInt(time[0]), Integer.parseInt(time[1]));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                if(d.isBefore(today)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    throw new DukeException(ExceptionType.INVALID_DATE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                finalDate \u003d d.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                LocalDate d;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String[] dates \u003d date.trim().split(\"-\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                d \u003d LocalDate.of(Integer.parseInt(dates[2]), Integer.parseInt(dates[1]),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                        Integer.parseInt(dates[0]));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                if(d.isBefore(today)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    throw new DukeException(ExceptionType.INVALID_DATE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                finalDate \u003d d.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (DateTimeException | ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new DukeException(ExceptionType.WRONG_DATE_FORMAT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return (finalDate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static boolean isToday(Task task) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String today \u003d LocalDate.now().format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if(task.toString().contains(today)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 153
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents the exceptions that can be thrown by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private ExceptionType exception;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public DukeException(ExceptionType exception) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return (exception.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/ExceptionType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public enum ExceptionType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    MISSING_DESCRIPTION(\"\\n\\tOh no! The Task description is missing :(\\n\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    MISSING_IDENTIFIER(\"\\n\\tOofies! You didn\u0027t mention the time (/on) or deadline (/by).\\n\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    UNIDENTIFIED(\"\\n\\tSorry :( I don\u0027t understand what you just said.\\n\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    NOT_A_NUMBER(\"\\n\\tBump, please enter a valid item number!\\n\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    MISSING_ON_BY(\"\\n\\tOh dear! You forgot the date/time/day.\\n\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    NOT_IN_LIST(\"\\n\\tSuch an item does not exist.\\n\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    ALREADY_DONE(\"\\n\\tThis task was marked as done earlier!\\n\\tTo see the list of incomplete tasks simply type\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            \" \\\"list\\\".\\n\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    MISSING_KEYWORD(\"\\n\\tYikies! The keyword is missing.\\n\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    WRONG_DATE_FORMAT(\"\\n\\tThe date should be in the format: dd-mm-yyyy HH:mm OR dd-mm-yyyy\\n\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    INVALID_DATE(\"\\n\\tThis date has passed already!\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    ExceptionType(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 25
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents a task that is a deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + by + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 22
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents a task that is an event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return \"[E]\" + super.toString() + \"(on: \" + time + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 22
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Superclass of all types of tasks like deadlines, events and todos."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**Description of task*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**records the completion of the task*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**total number of tasks in the list*/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static int noOfTasks \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**number of incomplete tasks*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static int noOfIncompleteTasks \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        noOfTasks +\u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        noOfIncompleteTasks+\u003d1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        noOfIncompleteTasks-\u003d1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static int getNoOfTasks() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return noOfTasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static int getNoOfIncompleteTasks() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return noOfIncompleteTasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void setNoOfTasks(int noOfTasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Task.noOfTasks \u003d noOfTasks;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void setNoOfIncompleteTasks(int noOfIncompleteTasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Task.noOfIncompleteTasks \u003d noOfIncompleteTasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return \"[\" + getIcon() + \"] \" + getName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 61
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import duke.exception.ExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents the list of tasks entered by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Performs actions on the list based on the user command input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static final int DEADLINE_LEN \u003d 9;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static final int EVENT_LEN \u003d 6;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static final String DEADLINE_IDENTIFIER \u003d \"/by\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static final String EVENT_IDENTIFIER \u003d \"/on\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static final int DONE_TODO_LEN \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        super.addAll(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Adds the new task to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param parser the command parser for the given input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param command task name given by the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param type the type of task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws DukeException If command is missing description, date or is unidentified."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void add(Parser parser, String command, CommandType type) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String todoName \u003d command.substring(DONE_TODO_LEN).trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                super.add(new Todo(todoName));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new DukeException(ExceptionType.MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            String[] rawName \u003d command.trim().split(DEADLINE_IDENTIFIER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            parser.checkCommand(rawName, \"deadline\", DEADLINE_IDENTIFIER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            String deadlineName \u003d rawName[0].substring(DEADLINE_LEN).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            String by \u003d rawName[1].trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            String byDate \u003d Parser.toDate(by);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            super.add(new Deadline(deadlineName, byDate));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            String[] rawEventName \u003d command.trim().split(EVENT_IDENTIFIER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            parser.checkCommand(rawEventName, \"event\", EVENT_IDENTIFIER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            String eventName \u003d rawEventName[0].substring(EVENT_LEN).trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            String on \u003d rawEventName[1].trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            String onDate \u003d Parser.toDate(on);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            super.add(new Event(eventName, onDate));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new DukeException(ExceptionType.UNIDENTIFIED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Deletes the given item from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param itemNo index of the item to be deleted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws DukeException if number is invalid or not in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Task delete(int itemNo) throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if(itemNo \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new DukeException(ExceptionType.NOT_A_NUMBER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if(itemNo \u003eTask.getNoOfTasks()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new DukeException(ExceptionType.NOT_IN_LIST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            Task taskToDelete \u003d super.get(itemNo -1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if(!taskToDelete.isDone()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                Task.setNoOfIncompleteTasks(Task.getNoOfIncompleteTasks() - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            Task.setNoOfTasks(Task.getNoOfTasks() - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            super.remove(itemNo -1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return taskToDelete;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Mark the given item as done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param itemNo index of the item to be marked as done."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws DukeException if the number is invalid, not in the list or mark done already."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Task done(int itemNo) throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if(itemNo \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new DukeException(ExceptionType.NOT_A_NUMBER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if(itemNo \u003eTask.getNoOfTasks()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new DukeException(ExceptionType.NOT_IN_LIST);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if(super.get(itemNo -1).isDone()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new DukeException(ExceptionType.ALREADY_DONE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            Task setDone \u003d super.get(itemNo -1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            setDone.markAsDone();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return setDone;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String keyword) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        super.forEach(task -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if(task.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public ArrayList\u003cTask\u003e getToday() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cTask\u003e dueToday \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        super.forEach(task -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if(Parser.isToday(task)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                dueToday.add(task);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return dueToday;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 133
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents a task that is a todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 16
    }
  },
  {
    "path": "text-ui-test/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "E | 1 | say hello | 25th Sept @ 5PM"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "hahaaaha"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "      done     0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "done 3e4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "deadLINE"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "DeadLine submit assign /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "deadline create folder /by"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "deadline create folder"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "done         1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "EvenT helloWorld"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "event    /on"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "event training /on"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "EvenT say hello /on 25th Sept @ 5PM"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "done 5."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 29
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java ..\\src\\main\\java\\duke\\command\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\storage\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "wamikamalik": 2
    }
  }
]
