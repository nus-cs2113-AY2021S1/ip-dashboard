[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "alstontham": 2,
      "-": 24
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "E,false,,monday"
      }
    ],
    "authorContributionMap": {
      "alstontham": 1
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Duke is an offline application created with Java that allows users to keep track of tasks that they need "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "to complete. Duke is run from the command line."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "### 1. Add A New Task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Users are able to add new tasks. Three types of tasks are supported:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "1. *Todo* - these tasks only have a description"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "2. *Deadline* - these tasks have a description as well as a date the task should be completed by"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "3. *Event* - these tasks have a description and a date that the event will take place"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "####Todo Tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Format for *Todo* tasks: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`todo (description)`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Example of *Todo* usage:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`todo deliver parcel`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    Ok! I\u0027ve added the following task:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    [T] [âœ˜] deliver parcel"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    You now have 1 task(s) in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "####Deadline Tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Format for *Deadline* tasks: "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`deadline (description) /by (date)`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Example of *Deadline* usage:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`deadline finish assignment /by Monday`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    Ok! I\u0027ve added the following task:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    [D] [âœ˜] finish assignment (by: Monday)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    You now have 2 task(s) in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "####Event Tasks"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Format for *Event* tasks: "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`event (description) /at (date)`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Example of *Event* usage:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`event consultation /at Tuesday 8am`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    Ok! I\u0027ve added the following task:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    [E] [âœ˜] consultation (at: Tuesday 8am)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    You now have 3 task(s) in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alstontham"
        },
        "content": "### 2. List Tasks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Users can use this command to see their list of tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Format to *List* tasks: "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Example of *List* usage:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    I\u0027ve printed your list of tasks below!"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    1. [T] [âœ˜] deliver parcel"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    2. [D] [âœ˜] finish assignment (by: Monday)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    3. [E] [âœ˜] consultation (at: Tuesday 8am)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alstontham"
        },
        "content": "### 3. Mark Tasks as Done"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Users can mark their tasks as done when they are complete."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Format to *Mark as Done*: "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`done (task index)`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Example of *Mark as Done*:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`done 3`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    Ok! I\u0027ve marked this task as complete!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    [E] [âœ“] consultation (at: Tuesday 8am)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alstontham"
        },
        "content": "### 4. Delete"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Users can delete their tasks and remove them from the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Format to *Delete* tasks: "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`delete (task index)`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Example of *Delete* usage:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    Alright! I\u0027ve deleted this task as requested!"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    [D] [âœ˜] finish assignment (by: Monday)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alstontham"
        },
        "content": "### 5. Find"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Users are able to search for tasks in their list based on a keyword they enter."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Format to *Find* tasks: "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`find (keyword)`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Example of *Find* usage:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`find Tuesday`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alstontham"
        },
        "content": " "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    I\u0027ve printed out the tasks that contain \u0027Tuesday\u0027 below!"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    1. [E] [âœ“] consultation (at: Tuesday 8am)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alstontham"
        },
        "content": "### 6. Exit Duke"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alstontham"
        },
        "content": "When users are finished using Duke, they can exit the program."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Format to *Exit* Duke: "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alstontham"
        },
        "content": "Example of *Exit* usage:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alstontham"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    Bye, see you soon!"
      }
    ],
    "authorContributionMap": {
      "alstontham": 125,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * The Duke class is the main class which runs, and is able to take in commands like todo and find,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * which helps the user record and manipulate tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String SAVE_FOLDER \u003d \"data\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String SAVE_FILE \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Creates a Duke object which references Ui, TaskList, Parser, and Storage objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        parser \u003d new Parser(taskList, ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        storage \u003d new Storage(SAVE_FOLDER, SAVE_FILE, taskList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Initializes a Duke object then runs the bulk of the code."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        duke.runProgram();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Runs the methods required for the program to work, which mainly consists of taking in and executing"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * user input, then subsequently saving it."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void runProgram() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.welcomeMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        while(true) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                parser.executeCommand(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                storage.saveToFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                e.getErrorMessage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alstontham": 64
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import duke.commands.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import duke.commands.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import duke.commands.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import duke.commands.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * The Parser class makes sense of the various commands that the user may input into the program and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * executes those commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String TODO_COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String FIND_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String DEADLINE_SIGNIFIER \u003d \"/by\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String EVENT_SIGNIFIER \u003d \"/at\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String WHITESPACE \u003d \"\\\\s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final int TASK_DESCRIPTION_INDEX \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final int TASK_DATE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Initializes a Parser object, which references TaskList and Ui."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskList The TaskList that the tasks will be stored in."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param ui The object that handles the messages that the user will see."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Parser(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Splits the raw user input and executes a command based on the command input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param input Raw user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws DukeCommandMissingDescriptionException Exception if the command that requires an extra"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * description is missing one."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws DukeTaskListEmptyException Exception if the user tries to print out the list of tasks but"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * does not have any in the TaskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws DukeInvalidIndexException Exception if the user tries to reference a task index that does"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * not contain a task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws DukeInvalidCommandException Exception if the user tries to execute a command that is not recognized."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws DukeMissingDateException Exception if the user does not specify a date for the deadline or event tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void executeCommand(Scanner input) throws DukeCommandMissingDescriptionException, DukeTaskListEmptyException,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            DukeInvalidIndexException, DukeInvalidCommandException, DukeMissingDateException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String userInput \u003d input.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String userCommand \u003d userInput.split(WHITESPACE, 2)[0];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            System.out.println(\"The description parameter cannot be empty! Please enter the details for your command!\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (userCommand.equals(TODO_COMMAND)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            addTodo(userInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } else if (userCommand.equals(DEADLINE_COMMAND)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            addDeadline(userInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } else if (userCommand.equals(EVENT_COMMAND)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            addEvent(userInput);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } else if (userCommand.equals(LIST_COMMAND)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            listTasks();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } else if (userCommand.equals(DONE_COMMAND)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            markDone(userInput);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } else if (userCommand.equals(DELETE_COMMAND)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            deleteTask(userInput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } else if (userCommand.equals(FIND_COMMAND)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            findTask(userInput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } else if (userCommand.equals(BYE_COMMAND)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            ui.exitProgram();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new DukeInvalidCommandException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Add a todo task into the TaskList."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param userInput The raw user input."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws DukeCommandMissingDescriptionException Exception if the command that requires an extra"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * description is missing one."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private void addTodo(String userInput) throws DukeCommandMissingDescriptionException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            String taskDetails \u003d userInput.split(WHITESPACE, 2)[1];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            Task newTask \u003d new Todo(taskDetails);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            taskList.addTask(newTask);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            ui.printNewTask(newTask, taskList.size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new DukeCommandMissingDescriptionException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Adds a deadline task into the TaskList."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param userInput The raw user input."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws DukeCommandMissingDescriptionException Exception if the command that requries an extra"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * description is missing one."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private void addDeadline(String userInput) throws DukeCommandMissingDescriptionException, DukeMissingDateException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (!userInput.contains(DEADLINE_SIGNIFIER)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            System.out.println(\"Remember to put \u0027by\u0027 when specifying a deadline!\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            String taskDetails \u003d userInput.split(WHITESPACE, 2)[1];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            Task newTask \u003d new Deadline(obtainDeadlineDescription(taskDetails), obtainDeadlineDate(taskDetails));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            taskList.addTask(newTask);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            ui.printNewTask(newTask, taskList.size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new DukeCommandMissingDescriptionException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Adds an event task into the TaskList."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param userInput The raw user input."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws DukeCommandMissingDescriptionException Exception if the command that requries an extra"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * description is missing one."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private void addEvent(String userInput) throws DukeCommandMissingDescriptionException, DukeMissingDateException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (!userInput.contains(EVENT_SIGNIFIER)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            System.out.println(\"Remember to put \u0027at\u0027 in your event command!\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            String taskDetails \u003d userInput.split(WHITESPACE, 2)[1];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            Task newTask \u003d new Event(obtainEventDescription(taskDetails), obtainEventDate(taskDetails));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            taskList.addTask(newTask);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            ui.printNewTask(newTask, taskList.size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new DukeCommandMissingDescriptionException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Lists the tasks in the TaskList."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws DukeTaskListEmptyException Exception if the user tries to print out the list of tasks but"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * does not have any in the TaskList."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private void listTasks() throws DukeTaskListEmptyException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new DukeTaskListEmptyException();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.printTaskListStarter();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.printTaskList(taskList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Marks a task in the TaskList as done."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param userInput The raw user input."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws DukeInvalidIndexException Exception if the user tries to reference a task index that does"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * not contain a task."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private void markDone(String userInput) throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            String taskDetails \u003d userInput.split(WHITESPACE, 2)[1];"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            int taskNum \u003d Integer.parseInt(taskDetails) - 1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            taskList.getTask(taskNum).setDone(true);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            ui.printCompletedTask(taskList.getTask(taskNum));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new DukeInvalidIndexException();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Deletes a task in the TaskList."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param userInput The raw user input."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws DukeInvalidIndexException Exception if the user tries to reference a task index that does"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * not contain a task."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private void deleteTask(String userInput) throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            String taskDetails \u003d userInput.split(WHITESPACE, 2)[1];"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            int taskNum \u003d Integer.parseInt(taskDetails) - 1;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            ui.printDeletedTask(taskList.getTask(taskNum));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            taskList.deleteTask(taskNum);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new DukeInvalidIndexException();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Finds tasks containing a keyword specified by the user."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param userInput The keyword that the user is looking for."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private void findTask(String userInput) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            String taskDetails \u003d userInput.split(WHITESPACE, 2)[1];"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            ArrayList\u003cTask\u003e filteredList \u003d (ArrayList\u003cTask\u003e) taskList.getTaskList().stream().filter((t) -\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                    t.toString().contains(taskDetails)).collect(toList());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            ui.printFilteredListStarter(taskDetails);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            ui.printTaskList(filteredList);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            System.out.println(\"Please enter a valid search term!\\n\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alstontham"
        },
        "content": "  "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Obtains description details of the deadline based on the raw user input without the command word."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param description The raw user input without the command."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The details of the deadline."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private String obtainDeadlineDescription(String description) throws DukeCommandMissingDescriptionException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String deadlineDescription \u003d (description.split(DEADLINE_SIGNIFIER, 2)[TASK_DESCRIPTION_INDEX]).trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (deadlineDescription.isEmpty()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new DukeCommandMissingDescriptionException();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return deadlineDescription;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Obtains date of the deadline based on the raw user input without the command word."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param description The raw user input without the command."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The details of when the deadline is."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws DukeMissingDateException Exception of the user does not specify a date for their task."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private String obtainDeadlineDate(String description) throws DukeMissingDateException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String deadlineDate \u003d (description.split(DEADLINE_SIGNIFIER, 2)[TASK_DATE_INDEX]).trim();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (deadlineDate.isEmpty()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new DukeMissingDateException();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return deadlineDate;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Obtains description details of the event based on the raw user input without the command word."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param description The raw user input without the command."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The details of the event."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private String obtainEventDescription(String description) throws DukeCommandMissingDescriptionException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String eventDescription \u003d (description.split(EVENT_SIGNIFIER, 2)[TASK_DESCRIPTION_INDEX]).trim();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (eventDescription.isEmpty()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new DukeCommandMissingDescriptionException();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return eventDescription;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Obtains date of the event based on the raw user input without the command word."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param description The raw user input without the command."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The details of when the event is."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws DukeMissingDateException Exception of the user does not specify a date for their task."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private String obtainEventDate(String description) throws DukeMissingDateException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String eventDate \u003d (description.split(EVENT_SIGNIFIER, 2)[TASK_DATE_INDEX]).trim();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (eventDate.isEmpty()) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new DukeMissingDateException();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return eventDate;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 267
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import duke.commands.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import duke.commands.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import duke.commands.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import duke.commands.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import duke.exceptions.DukeTaskConvertException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * The Storage class handles the saving and loading of the user\u0027s tasks from an external text file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String DATA_DELIMITER \u003d \",\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final int TASK_DESCRIPTION_INDEX \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final int TASK_DATE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String PROJECT_DIRECTORY \u003d \"user.dir\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private String saveDirectory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private String saveFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Makes sure the save path exists then reads data from the save file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param saveDirectory The folder containing the save file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param saveFile The name of the save file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskList The list with the user\u0027s tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Storage(String saveDirectory, String saveFile, TaskList taskList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.saveDirectory \u003d saveDirectory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ensureSaveDirectory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.saveFilePath \u003d \"/\" + saveDirectory + \"/\" + saveFile;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        readFromFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if the save directory exists, and if not, creates it."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void ensureSaveDirectory() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        File dataDirectory \u003d new File(saveDirectory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (!dataDirectory.exists()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            dataDirectory.mkdir();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Reads data from the save file, converts them into tasks then adds them to the TaskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void readFromFile() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            Scanner sc \u003d new Scanner(new File(System.getProperty(PROJECT_DIRECTORY) + saveFilePath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                String newTaskLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                Task newTask \u003d convertToTask(newTaskLine);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                taskList.addTask(newTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            System.out.println(\"A save file could not be found. \" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                    \"You may either start from scratch or load an existing save file\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } catch (DukeTaskConvertException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            System.out.println(\"There was an error converting the save file.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Converts strings from the save file into tasks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskData The string from the save file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return A Task object that contains details about the Task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws DukeTaskConvertException Exception that is thrown when there is an error converting a task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private Task convertToTask(String taskData) throws DukeTaskConvertException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String[] taskComponents \u003d taskData.split(DATA_DELIMITER,3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String taskType \u003d taskComponents[0];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        boolean isDone \u003d Boolean.parseBoolean(taskComponents[1]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String taskDescription \u003d taskComponents[2];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        switch(taskType) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            case(\"T\"):"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                return new Todo(taskDescription, isDone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            case(\"D\"):"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                String deadlineDescription \u003d taskDescription.split(DATA_DELIMITER)[TASK_DESCRIPTION_INDEX];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                String deadlineDate \u003d taskDescription.split(DATA_DELIMITER)[TASK_DATE_INDEX];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                return new Deadline(deadlineDescription, deadlineDate, isDone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            case(\"E\"):"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                String eventDescription \u003d taskDescription.split(DATA_DELIMITER)[TASK_DESCRIPTION_INDEX];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                String eventDate \u003d taskDescription.split(DATA_DELIMITER)[TASK_DATE_INDEX];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                return new Event(eventDescription, eventDate, isDone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                throw new DukeTaskConvertException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Locates the save file and overwrites the existing data with the new task data."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void saveToFile() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            FileWriter fw \u003d new FileWriter(System.getProperty(PROJECT_DIRECTORY) + saveFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                fw.write(task.insertComma() + \"\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            System.out.println(\"An error has occurred while saving data to file. Please try again later.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 113
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import duke.commands.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * The TaskList class handles modifications to the list of tasks that the user creates."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Constructor for the TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Adds a task to the TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param task The task to add."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Removes a task from the TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskNum Index of the task to be removed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void deleteTask(int taskNum) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        taskList.remove(taskNum);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Identifies the task at a certain index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskIndex Index of the specified task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return taskList.get(taskIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Obtains the list as an ArrayList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The ArrayList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Gets the size of the TaskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return Size."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if the TaskList is empty."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return True if TaskList is empty, otherwise false."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 72
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import duke.commands.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * The Ui class handles all of what the user sees as the output on the command line."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints the welcome message when the user launches the application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void welcomeMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Hey there! I\u0027m Duke\\n\" + \"What would you like to do?\" + \"\\n\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * String that is printed before the program lists out the user\u0027s tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printTaskListStarter() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"I\u0027ve printed your list of tasks below!\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints out the TaskList, one task at a time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            System.out.println((i + 1) + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Calls the other constructor which takes in an ArrayList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        printTaskList(tasks.getTaskList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints a message when the user adds a new task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param task The new task that was just added."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param totalTasks The total number of tasks in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printNewTask(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Ok! I\u0027ve added the following task:\\n\" + task + \"\\n\" + \"You now have \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + totalTasks + \" task(s) in the list.\" + \"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints a message when the user marks a task as done."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param task The task that the user marks as done."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printCompletedTask(Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Ok! I\u0027ve marked this task as complete!\\n\" + task + \"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints a message when the user deletes a task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param task the task that the user wants to delete."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printDeletedTask(Task task) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Alright! I\u0027ve deleted this task as requested!\\n\" + task + \"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints an exit message then exits the program."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void exitProgram() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Bye, see you soon!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * String that is printed before the list containing tasks with the keyword specified by the user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param searchWord Keyword that the user was looking for."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printFilteredListStarter(String searchWord) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"I\u0027ve printed out the tasks that contain \\\u0027\" + searchWord + \"\\\u0027 below!\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 88,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/commands/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * The Deadline class is an extension of the Task class and creates Deadline objects, marked by their"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * signature \"by\" keyword."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private String deadlineDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Deadline constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param description Description of the deadline task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param deadlineDate Due date of the deadline task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Deadline(String description, String deadlineDate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        super(description, \"D\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Deadline constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param description Description of the deadline task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param deadlineDate Due date of the deadline task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param isDone Whether is the task is done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Deadline(String description, String deadlineDate, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        super(description, \"D\", isDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Overrides the default Task method, includes due date of deadline."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The formatted string based on the data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return \"[\" + taskType + \"] \" + super.toString() + \" (by: \" + deadlineDate + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Overrides the default Task method, includes due date of deadline."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The string created by adding commas."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public String insertComma() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return taskType + \",\" + isDone + \",\" + description + \",\" + deadlineDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 49
    }
  },
  {
    "path": "src/main/java/duke/commands/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * The Event class is an extension of the Task class and creates Event objects, marked by their"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * signature \"at\" keyword."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private String eventDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Event constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param description Description of the event task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param eventDate Date of the event task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Event (String description, String eventDate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        super(description, \"E\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Event constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param description Description of the event task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param eventDate Date of the event task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param isDone Whether is the task is done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Event (String description, String eventDate, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        super(description, \"E\", isDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Overrides the default Task method, includes date of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The formatted string based on the data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return \"[\" + taskType + \"] \" + super.toString() + \" (at: \" + eventDate + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Overrides the default Task method, includes date of event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The string created by adding commas."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public String insertComma() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return taskType + \",\" + isDone + \",\" + description + \",\" + eventDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 49
    }
  },
  {
    "path": "src/main/java/duke/commands/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * The Task class creates Task objects which are stored in the TaskList. This class is the blueprint"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * for the various types of tasks that the user might want to create. As such, it contains the default"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * constructor class for the Task objects as well as methods that might be called."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String DONE \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String NOT_DONE \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Constructor for the Task object which has a description and a type and by default is not marked"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param description The task description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskType The type of task: todo, deadline, event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Task(String description, String taskType) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Constructor for the Task object which has a description, type, and can be marked as done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param description The task description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskType The type of task: todo, deadline, event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param isDone Whether the task is done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Task(String description, String taskType, boolean isDone) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Displays a tick or X symbol based on if the task is done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return Tick or X."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return (isDone ? DONE : NOT_DONE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Sets a task as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param isDone True or false."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Obtains the description of the task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The description of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Uses the status icon and description and converts them to a formatted string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The string based on the status icon and description."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Inserts a comma between data to be stored in the save file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The string created by adding commas."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public String insertComma() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return taskType + \",\" + isDone + \",\" + description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 78
    }
  },
  {
    "path": "src/main/java/duke/commands/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * The Todo class is an extension of the Task class and creates Todo objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Todo constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param description Description of the todo task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        super(description, \"T\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Todo constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param description Description of the todo task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param isDone Whether is the task is done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        super(description, \"T\", isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Overrides the default Task method"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The formatted string based on the data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return \"[\" + taskType + \"] \" + super.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 32
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeCommandMissingDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * This class is an extension of the DukeException class and prints an error message when task commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * that require an additional description are missing one."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class DukeCommandMissingDescriptionException extends DukeException{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public DukeCommandMissingDescriptionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void getErrorMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Please enter a valid description!\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 16
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * This class is the parent Exception class for the Duke program and serves as a template for all the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * other Exception classes."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void getErrorMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"An error has occurred.\\n\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * This class is an extension of the DukeException class and prints an error message when the user tries"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * to enter an invalid command that is not recognized by Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class DukeInvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public DukeInvalidCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void getErrorMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Please enter a valid command!\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 16
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeInvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * This class is an extension of the DukeException class and prints an error message when the user tries"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * to delete or mark task that does not exist as done, according to index number."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class DukeInvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public DukeInvalidIndexException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void getErrorMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Please enter a valid index number for the command!\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 16
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeMissingDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class DukeMissingDateException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public DukeMissingDateException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void getErrorMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Please specify a date for your task!\\n\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 12
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeTaskConvertException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * This class is an extension of the Throwable class and prints an error when there is a problem reading"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * from the save file."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class DukeTaskConvertException extends Throwable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public DukeTaskConvertException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeTaskListEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * This class is an extension of the DukeException class and prints an error message when the user tries"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * to list out the tasks when there are no items in the TaskList."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class DukeTaskListEmptyException extends DukeException{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public DukeTaskListEmptyException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void getErrorMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Your task list is currently empty! Add some first before you view them!\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 16
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "alstontham": 2,
      "-": 19
    }
  }
]
