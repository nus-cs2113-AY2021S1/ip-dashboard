[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This is a project for a greenfield Java project. It\u0027s named after the Java mascot Duke. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Given below are instructions on how to use it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "   to close the existing project dialog first)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "      directory where you installed JDK 11"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke/Duke.java` file, right-click it, and "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "   choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     No storage file was found, let\u0027s start afresh then."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     Hello! I\u0027m Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     How can I help you today?"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    \u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 18,
      "-": 15
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Duke is a Personal Assistant Chat Bot that helps a person to keep track of various things, "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "such as a Todo, Deadline, or Event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* [1. Quick Start](#1-quick-start)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* [2. Features](#2-features)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    * [2.1 Task Management](#21-task-management)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    * [2.2 Task Searching](#22-task-searching)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    * [2.3 Persistent Data](#23-persistent-data)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* [3. Usage](#3-usage)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    * [3.1 Add a Todo task: `todo`](#31-add-a-todo-task-todo)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    * [3.2 Add a Deadline task: `deadline`](#32-add-a-deadline-task-deadline)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    * [3.3 Add an Event task: `event`](#33-add-an-event-task-event)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    * [3.4 Mark a task as done: `done`](#34-mark-a-task-as-done-done)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    * [3.5 Delete a task: `delete`](#35-delete-a-task-delete)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    * [3.6 Find task(s) due on a specific date: `due`](#36-find-tasks-due-on-a-specific-date-due)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    * [3.7 Find task(s) by the keyword: `find`](#37-find-tasks-by-the-keyword-find)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    * [3.8 List all tasks: `list`](#38-list-all-tasks-list)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    * [3.9 Exit the program: `bye`](#39-exit-the-program-bye)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* [4. FAQ](#4-faq)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* [5. Command Summary](#5-command-summary)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## 1. Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1. Ensure you have JDK 11 installed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "2. Download the latest `ip.jar`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "3. Place the jar file in a directory that you are comfortable with."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "4. Run Duke in a command window using the command: `java -jar ip.jar`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "5. Refer to [Usage](#3-usage) or [Command Summary](#5-command-summary) for details on using Duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## 2. Features"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 2.1 Task Management"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "User can: "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Add a task (Todo, Deadline, or Event) to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Remove a task from the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Mark a task as done in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* List all tasks in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 2.2 Task Searching"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "User can search for their desired tasks using a keyword or due date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 2.3 Persistent Data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "All changes made on the task list by the user will be saved to a local storage file automatically, and "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "when Duke launches, the tasks saved in the local storage file will be loaded automatically."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## 3. Usage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 3.1 Add a Todo task: `todo`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This will add a Todo task to the task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Format: `todo \u003cTASK_DESCRIPTION\u003e`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `todo read book`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Gotcha! I\u0027ve added this task: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\t[T][✗] read book"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "There\u0027s currently 1 task(s) in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 3.2 Add a Deadline task: `deadline`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This will add a Deadline task to the task list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Format: `deadline \u003cTASK_DESCRIPTION\u003e /by \u003cYYYY-MM-DD HH:MM\u003e`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `deadline return book /by 2020-06-06 12:30` "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Gotcha! I\u0027ve added this task: "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\t[D][✗] return book (by: Jun 06 2020 12:30)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "There\u0027s currently 2 task(s) in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 3.3 Add an Event task: `event`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This will add an Event task to the task list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Format: `event \u003cTASK_DESCRIPTION\u003e /at \u003cYYYY-MM-DD HH:MM\u003e`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `event project meeting /at 2020-08-05 13:30`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Gotcha! I\u0027ve added this task: "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\t[E][✗] project meeting (at: Aug 05 2020 13:30)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "There\u0027s currently 3 task(s) in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 3.4 Mark a task as done: `done`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This will mark a task as done in the task list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Format: `done \u003cTASK_INDEX\u003e`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `done 1`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Awesome!! Just 2 more task(s) to go!"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\t[T][✓] read book"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 3.5 Delete a task: `delete`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This will delete a task from the task list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Format: `delete \u003cTASK_INDEX\u003e`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `delete 1`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Noted! I have removed this task: "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " \t[T][✓] read book"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "There\u0027s currently 2 task(s) in the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 3.6 Find task(s) due on a specific date: `due`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This will list all tasks that are due on a specific date."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Format: `due \u003cYYYY-MM-DD\u003e`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `due 2020-08-05`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Here is a list of tasks due for that day: "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " \t1. [E][✗] project meeting (at: Aug 05 2020 13:30)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " \t2. [E][✗] CS2113T meeting (at: Aug 05 2020 15:45)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 3.7 Find task(s) by the keyword: `find`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This will find and list all tasks whose description contains the specified keyword."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Format: `find \u003cKEYWORD\u003e`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `find meeting`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Here are the matching tasks in your list: "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " \t1. [E][✗] project meeting (at: Aug 05 2020 13:30)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " \t2. [E][✗] CS2113T meeting (at: Aug 05 2020 15:45)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " \t3. [D][✗] meeting minutes (by: Aug 13 2020 23:59)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 3.8 List all tasks: `list`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This will list all tasks that the user has added to the list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `list`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Here are the tasks in your list: "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " \t1. [D][✗] return book (by: Jun 06 2020 12:30)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " \t2. [E][✗] project meeting (at: Aug 05 2020 13:30)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " \t3. [E][✗] CS2113T meeting (at: Aug 05 2020 15:45)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " \t4. [D][✗] meeting minutes (by: Aug 13 2020 23:59)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 3.9 Exit the program: `bye`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This will exit the program."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `bye`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Bye-bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Q: Where are my tasks stored?"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "A: They can be found in the current directory where you run Duke, at `data/duke.txt`."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Q: Why does it say \"Duke could not load some of the saved task(s).\"?"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "A: It is likely that you have an entry that cannot be processed by Duke, "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "e.g. missing task information or incorrect task entry format in the file."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "|Feature                               |Command                                               |"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "|---                                   |---                                                   |"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Add a Todo task                      |`todo \u003cTASK_DESCRIPTION\u003e`                             |"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Add a Deadline task                  |`deadline \u003cTASK_DESCRIPTION\u003e /by \u003cYYYY-MM-DD HH:MM\u003e`  |"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Add an Event task                    |`event \u003cTASK_DESCRIPTION\u003e /at \u003cYYYY-MM-DD HH:MM\u003e`     |"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Mark a task as done                  |`done \u003cTASK_INDEX\u003e`                                   |"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Delete a task                        |`delete \u003cTASK_INDEX\u003e`                                 |"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Find a task by keyword               |`find \u003cKEYWORD\u003e`                                      |"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Find task(s) due on a specific date  |`due \u003cYYYY-MM-DD\u003e`                                    |"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| List all tasks                       |`list`                                                |"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Exit                                 |`bye`                                                 |"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 204,
      "-": 17
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the entry point of the task tracking application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String FILE_DIRECTORY \u003d \"data\" + File.separator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String FILE_PATH \u003d \"data\" + File.separator + \"duke.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new Duke object and load the saved task(s) from the storage file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storage \u003d new Storage(FILE_PATH, FILE_DIRECTORY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        taskList \u003d storage.readFromStorage(parser, ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Runs Duke until the bye command is entered by the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean shouldExit \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        while (!shouldExit) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            String userInput \u003d ui.readUserInput();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                Command dukeCommand \u003d parser.processUserInput(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                dukeCommand.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                shouldExit \u003d Command.getShouldExit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            } catch (DukeException exception) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printErrorMessage(exception.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printHorizontalLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 58
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the command to add a new task to the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final Task newTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new AddCommand object with the specified task to be added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param newTask the specified new task to be added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public AddCommand(Task newTask) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.newTask \u003d newTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Adds a new task to the task list and write the updated task list to the storage file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param taskList the task list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storage the storage file for storing tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param ui the user interface to output information during command execution"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if Duke encounters error while writing to the file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void execute(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        taskList.addTask(newTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storage.writeToStorage(taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Task.incrementPendingTaskCount();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ui.printMessage(\"Gotcha! I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ui.printMessage(\"\\t\" + newTask.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ui.printMessage(\"There\u0027s currently \" + taskList.getSize() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 42
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the command to exit Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Prints the goodbye message to the user and also set {@code shouldExit} to {@code true}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param taskList the task list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storage the storage file for storing tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param ui the user interface to output information during command execution"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        shouldExit \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ui.printMessage(\"Bye-bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 24
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Abstract class to represent the various command types."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static boolean shouldExit \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Checks if Duke should exit."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return {@code true} if Duke should exit, and {@code false} otherwise"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public static boolean getShouldExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return shouldExit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Abstract method for the execution of the various command types."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param taskList the task list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storage the storage file for storing tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param ui the user interface to output information during command execution"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if an error is encountered during command execution"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public abstract void execute(TaskList taskList, Storage storage, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 32
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the command to delete a task from the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final int deleteTaskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new DeleteCommand object with the specified task index, which will"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * be validated first."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param deleteTaskIndexString the specified index of the task to be deleted"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if the user provided a string that cannot be parsed into a integer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public DeleteCommand(String deleteTaskIndexString) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            deleteTaskIndex \u003d Integer.parseInt(deleteTaskIndexString) - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" \\\"\" + deleteTaskIndexString + \"\\\" is not a number.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Deletes the task and write the updated task list to the storage file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param taskList the task list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storage the storage file for storing tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param ui the user interface to output information during command execution"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if the user provided a task number that is not found in the list,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *                       or there is an error while writing to the storage file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void execute(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Task deleteTask \u003d taskList.getTask(deleteTaskIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (!deleteTask.getIsDone()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                Task.decrementPendingTaskCount();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            taskList.deleteTask(deleteTaskIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            storage.writeToStorage(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"Noted! I have removed this task: \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"\\t\" + deleteTask.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"There\u0027s currently \" + taskList.getSize() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" \\\"\" + (deleteTaskIndex + 1) + \"\\\" is not a valid task number.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 57
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the command to mark a task as done in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final int doneTaskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new DoneCommand object with the specified task index, which will"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * be validated first."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param doneTaskIndexString the specified index of the task to be mark as done"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if the user provided a string that cannot be parsed into a integer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public DoneCommand(String doneTaskIndexString) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            doneTaskIndex \u003d Integer.parseInt(doneTaskIndexString) - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" \\\"\" + doneTaskIndexString + \"\\\" is not a number.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Marks the task as done and write the updated task list to the storage file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param taskList the task list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storage the storage file for storing tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param ui the user interface to output information during command execution"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if the user provided a task number that is not found in the list,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *                       or there is an error while writing to the storage file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void execute(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Task doneTask \u003d taskList.getTask(doneTaskIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (doneTask.getIsDone()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printMessage(\"Remember? You have completed this task already.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printMessage(\"\\t\" + taskList.getTask(doneTaskIndex).toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            taskList.getTask(doneTaskIndex).setIsDone(true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            storage.writeToStorage(taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            int pendingTaskCount \u003d Task.getPendingTaskCount();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (pendingTaskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printMessage(\"Awesome!! You are all caught up :)\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printMessage(\"Awesome!! Just \" + pendingTaskCount + \" more task(s) to go!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"\\t\" + taskList.getTask(doneTaskIndex).toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" \\\"\" + (doneTaskIndex + 1) + \"\\\" is not a valid task number.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 63
    }
  },
  {
    "path": "src/main/java/duke/command/DueCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the command to search for deadlines and events due on a specific day."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class DueCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final LocalDate dueDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new DueCommand object with the specified due date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param dueDate the specified due date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public DueCommand(LocalDate dueDate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Lists all deadlines and events that are due on that specific day."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param taskList the task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storage the storage file for storing tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param ui the user interface to output information during command execution"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        int dueTaskCount \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (task.getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LocalDate taskDueDate \u003d task.getDateTime().toLocalDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (!taskDueDate.equals(dueDate)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (dueTaskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printMessage(\"Here is a list of tasks due for that day: \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            dueTaskCount++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"\\t\" + dueTaskCount + \". \" + task.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (dueTaskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"Nothing is due on that day! :)\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 57
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the command to find a task by searching for a keyword in its description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new FindCommand object with the specified keyword."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param keyword the specified keyword to search for in a task description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Finds and prints the task(s) whose description contains the keyword."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param taskList the task list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storage the storage file for storing tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param ui the user interface to output information during command execution"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        int findTaskCount \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (!description.contains(keyword)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (findTaskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printMessage(\"Here are the matching tasks in your list: \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            findTaskCount++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"\\t\" + findTaskCount + \". \" + task.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (findTaskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"Uhh.. no task matches the keyword..\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 51
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the command to list all tasks that are currently in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Lists all tasks that are currently in the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param taskList the task list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storage the storage file for storing tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param ui the user interface to output information during command execution"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"Uhh.. It\u0027s empty..\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ui.printMessage(\"Here are the tasks in your list: \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"\\t\" + (i + 1) + \". \" + task.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 33
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the custom exception class to handle all Duke-related exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new DukeException object with the specified exception message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param exceptionMessage the specified exception message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public DukeException(String exceptionMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        super(exceptionMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 16
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.command.DueCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the class to handle the parsing and validation of user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String COMMAND_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String COMMAND_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String COMMAND_DUE \u003d \"due\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String REQUIRED_DEADLINE_OPTION \u003d \"/by\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String REQUIRED_EVENT_OPTION \u003d \"/at\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int REQUIRED_BYE_ARGUMENT_COUNT \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int REQUIRED_LIST_ARGUMENT_COUNT \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int REQUIRED_DONE_ARGUMENT_COUNT \u003d 2;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int REQUIRED_DELETE_ARGUMENT_COUNT \u003d 2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int REQUIRED_DUE_ARGUMENT_COUNT \u003d 2;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int REQUIRED_FIND_ARGUMENT_COUNT \u003d 2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int REQUIRED_TODO_ARGUMENT_COUNT \u003d 2;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int REQUIRED_DEADLINE_ARGUMENT_COUNT \u003d 4;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int REQUIRED_EVENT_ARGUMENT_COUNT \u003d 4;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a Task object that is generated by converting the string representation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * of the Task object read from the storage file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param taskInString the string representation of the Task object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a Task object generated from the its string representation, or"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *         {@code null} if the string representation is corrupted or invalid"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Task convertStringToTask(String taskInString) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            String[] splitTaskInString \u003d taskInString.split(\"\\\\|\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            String taskType \u003d splitTaskInString[0].trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            String description \u003d splitTaskInString[2].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            boolean isDone \u003d splitTaskInString[1].trim().equals(\"1\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                Todo newTodo \u003d new Todo(description);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                newTodo.setIsDone(isDone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                return newTodo;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                String byDateTimeString \u003d splitTaskInString[3].trim().replace(\"T\", \" \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                LocalDateTime byDateTime \u003d parseDateTimeInput(byDateTimeString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                Deadline newDeadline \u003d new Deadline(description, byDateTime);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                newDeadline.setIsDone(isDone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                return newDeadline;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                String atDateTimeString \u003d splitTaskInString[3].trim().replace(\"T\", \" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                LocalDateTime atDateTime \u003d parseDateTimeInput(atDateTimeString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                Event newEvent \u003d new Event(description, atDateTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                newEvent.setIsDone(isDone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                return newEvent;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DukeException exception) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns the appropriate Command object by processing the user input."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param userInput the raw input entered by the user"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a Command object representing the command to execute"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if the user provided an invalid input such that it cannot be used"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *                       to generate a Command object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Command processUserInput(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] inputArguments \u003d parseUserInput(userInput);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return generateCommand(inputArguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Parses the user input and return a String array containing the arguments retrieved"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * from the user input, where the arguments for the last 3 index are only present in"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * the array if they were supplied by the user:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003e{@code String[0]} contain the command.\u003c/li\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003e{@code String[1]} contain the description.\u003c/li\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003e{@code String[2]} contain the command option (e.g. \"/by\" or \"/at\").\u003c/li\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003e{@code String[3]} contain the date and time information.\u003c/li\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param userInput the raw input entered by the user"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the list of arguments retrieved from the user input"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if the user has provided an input that cannot be parsed"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String[] parseUserInput(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cString\u003e inputArguments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] splitInput \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            String userCommand \u003d splitInput[0];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            inputArguments.add(userCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" Input \\\"\" + userInput + \"\\\" is not usable by Duke :(\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Build arguments (if any): description and command option (at/by) information (only 1 is expected)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String commandOption \u003d \"\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        StringBuilder sbArgument \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (int i \u003d 1; i \u003c splitInput.length; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            boolean isFirstCommandOption \u003d commandOption.isEmpty() \u0026\u0026 splitInput[i].startsWith(\"/\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (isFirstCommandOption) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                String description \u003d sbArgument.toString().stripTrailing();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                commandOption \u003d splitInput[i];"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                inputArguments.add(description);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                inputArguments.add(commandOption);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                sbArgument.setLength(0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbArgument.append(splitInput[i]).append(\" \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // The last argument could be a description, task index, at/by information or empty string"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String lastArgument \u003d sbArgument.toString().stripTrailing();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        inputArguments.add(lastArgument);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return inputArguments.toArray(new String[0]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Generates and return the Command object based on the argument list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param inputArguments the argument list generated from the user input"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a Command object representing the command to execute"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if the command failed the validation process or is not recognized by Duke"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private Command generateCommand(String[] inputArguments) throws DukeException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userCommand \u003d inputArguments[0];"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String description \u003d inputArguments[1];"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        switch (userCommand) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case COMMAND_BYE:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            validateCommand(REQUIRED_BYE_ARGUMENT_COUNT, inputArguments);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case COMMAND_LIST:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            validateCommand(REQUIRED_LIST_ARGUMENT_COUNT, inputArguments);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case COMMAND_DONE:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            validateCommand(REQUIRED_DONE_ARGUMENT_COUNT, inputArguments);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new DoneCommand(description);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case COMMAND_DELETE:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            validateCommand(REQUIRED_DELETE_ARGUMENT_COUNT, inputArguments);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new DeleteCommand(description);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case COMMAND_DUE:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            validateArgumentCount(REQUIRED_DUE_ARGUMENT_COUNT, inputArguments);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LocalDate dueDate \u003d parseDateInput(description);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new DueCommand(dueDate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case COMMAND_FIND:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            validateCommand(REQUIRED_FIND_ARGUMENT_COUNT, inputArguments);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new FindCommand(description);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case COMMAND_TODO:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            validateCommand(REQUIRED_TODO_ARGUMENT_COUNT, inputArguments);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Todo newTodo \u003d new Todo(description);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new AddCommand(newTodo);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case COMMAND_DEADLINE:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            validateCommand(REQUIRED_DEADLINE_ARGUMENT_COUNT, inputArguments);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LocalDateTime byDateTime \u003d parseDateTimeInput(inputArguments[3]);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Deadline newDeadline \u003d new Deadline(description, byDateTime);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new AddCommand(newDeadline);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case COMMAND_EVENT:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            validateCommand(REQUIRED_EVENT_ARGUMENT_COUNT, inputArguments);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LocalDateTime atDateTime \u003d parseDateTimeInput(inputArguments[3]);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Event newEvent \u003d new Event(description, atDateTime);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new AddCommand(newEvent);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" Command \\\"\" + userCommand + \"\\\" is not recognized by Duke :(\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Validates the command based on the required argument count and the argument list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param requiredArgumentCount the number of arguments required for the command"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param inputArguments the argument list generated from the user input"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if either the command has insufficient arguments or it has at least one"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *                       invalid argument (e.g. blanks or provided a String that cannot be parsed"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *                       into a Integer)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void validateCommand(int requiredArgumentCount, String[] inputArguments) throws DukeException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        validateArgumentCount(requiredArgumentCount, inputArguments);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        switch(requiredArgumentCount) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            validateOneArgumentCommand(inputArguments);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            validateTwoArgumentCommand(inputArguments);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            validateFourArgumentCommand(inputArguments);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Ensures that the command has meet the required argument count so that it has"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * the right amount of arguments to generate the Command object correctly."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param requiredArgumentCount the number of arguments required for the command"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param inputArguments the argument list generated from the user input"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if the user has provided too many or too little arguments for the command"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void validateArgumentCount(int requiredArgumentCount, String[] inputArguments) throws DukeException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userCommand \u003d inputArguments[0];"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        int argumentCount \u003d inputArguments.length;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (userCommand.equals(COMMAND_BYE) || userCommand.equals(COMMAND_LIST)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            argumentCount--;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (argumentCount \u003e requiredArgumentCount) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" There\u0027s too many arguments for \\\"\" + userCommand + \"\\\".\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (argumentCount \u003c requiredArgumentCount) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" There\u0027s too little arguments for \\\"\" + userCommand + \"\\\".\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Validates those commands that requires only one argument to ensure the Command object"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * can be generated and executed without error."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param inputArguments the argument list generated from the user input"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if the user has provided a description when it is not needed"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void validateOneArgumentCommand(String[] inputArguments) throws DukeException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userCommand \u003d inputArguments[0];"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String description \u003d inputArguments[1];"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isValidDescription \u003d !description.isBlank();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (isValidDescription) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" There\u0027s no need for a description for \\\"\" + userCommand + \"\\\".\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Validates those commands that requires two arguments to ensure the Command object"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * can be generated and executed without error."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param inputArguments the argument list generated from the user input"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if the user provided empty description or task number for the command"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void validateTwoArgumentCommand(String[] inputArguments) throws DukeException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userCommand \u003d inputArguments[0];"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String description \u003d inputArguments[1];"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isValidDescription \u003d !description.isBlank();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isDoneOrDelete \u003d userCommand.equals(COMMAND_DONE) || userCommand.equals(COMMAND_DELETE);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (isDoneOrDelete \u0026\u0026 !isValidDescription) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" The task number for \\\"\" + userCommand + \"\\\" cannot be empty.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (userCommand.equals(COMMAND_TODO) \u0026\u0026 !isValidDescription) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" The description of \\\"\" + userCommand + \"\\\" cannot be empty.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (userCommand.equals(COMMAND_DUE) \u0026\u0026 !isValidDescription) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" The due date of \\\"\" + userCommand + \"\\\" cannot be empty.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (userCommand.equals(COMMAND_FIND) \u0026\u0026 !isValidDescription) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" The keyword for \\\"\" + userCommand + \"\\\" cannot be empty.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Validates those commands that requires four arguments to ensure the Command object"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * can be generated and executed without error."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param inputArguments the argument list generated from the user input"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if the user did not provide any description, date time information, or"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *                       used the wrong command option (e.g. \"/at\" for deadline instead of \"/by\")"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void validateFourArgumentCommand(String[] inputArguments) throws DukeException {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userCommand \u003d inputArguments[0];"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String description \u003d inputArguments[1];"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String commandOption \u003d inputArguments[2];"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String commandDateTime \u003d inputArguments[3];"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String requiredCommandOption \u003d \"\";"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (userCommand.equals(COMMAND_DEADLINE)) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            requiredCommandOption \u003d REQUIRED_DEADLINE_OPTION;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (userCommand.equals(COMMAND_EVENT)) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            requiredCommandOption \u003d REQUIRED_EVENT_OPTION;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isValidDescription \u003d !description.isBlank();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isValidOption \u003d commandOption.equals(requiredCommandOption);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isValidDateTime \u003d !commandDateTime.isBlank();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isValidDescription) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" The description of \\\"\" + userCommand + \"\\\" cannot be empty.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (!isValidOption) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" The \\\"\" + requiredCommandOption + \"\\\" option is missing for \\\"\""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    + userCommand + \"\\\".\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (!isValidDateTime) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" The \\\"\" + requiredCommandOption + \"\\\" information is missing for \\\"\""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    + userCommand + \"\\\".\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a LocalDateTime object that is parsed from the user input."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param commandDateTime the raw input entered by the user for the datetime argument"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a LocalDateTime object representing the date and time"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if the user provided a date and time input that is not in"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *                       the format: YYYY-MM-DD HH:MM"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private LocalDateTime parseDateTimeInput(String commandDateTime) throws DukeException {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return LocalDateTime.parse(commandDateTime, DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (DateTimeParseException exception) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" Ensure date and time format is: YYYY-MM-DD HH:MM.\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a LocalDate object that is parsed from the user input."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param commandDate the raw input entered by the user for the date argument"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a LocalDate object representing the date"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if the user provided a date input that is not in the format: YYYY-MM-DD"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private LocalDate parseDateInput(String commandDate) throws DukeException {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return LocalDate.parse(commandDate, DATE_FORMAT);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (DateTimeParseException exception) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" Ensure date format is: YYYY-MM-DD.\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 357,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the class to handle all of the reading and writing of tasks to and from the storage file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String fileDirectory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new Storage object with the specified path to the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * storage file and storage directory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param filePath the specified path to the storage file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param fileDirectory the specified path to the storage directory"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Storage(String filePath, String fileDirectory) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.fileDirectory \u003d fileDirectory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Reads from the storage file for the saved task(s)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param parser the parser converts the strings read from the file into Task objects"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param ui the user interface to output information to the user after reading"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the task list read from the storage file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public TaskList readFromStorage(Parser parser, Ui ui) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean hasNullTask \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            File dukeFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Scanner fileReader \u003d new Scanner(dukeFile);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            while (fileReader.hasNextLine()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                String taskInString \u003d fileReader.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                Task readTask \u003d parser.convertStringToTask(taskInString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                if (readTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    hasNullTask \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    taskList.addTask(readTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    Task.incrementPendingTaskCount();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (hasNullTask) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printErrorMessage(\" Duke could not load some of the saved task(s).\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printMessage(\"Duke successfully loaded all of the saved task(s).\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (FileNotFoundException exception) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"No storage file was found, let\u0027s start afresh then.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Writes to the storage file with the current task list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param taskList the tasks that are currently in the list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws DukeException if Duke encounters an error while writing to the file"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void writeToStorage(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        new File(fileDirectory).mkdirs();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                fileWriter.write(task.toFileFormatString() + System.lineSeparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new DukeException(\" Duke couldn\u0027t write the task to file :(.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 92
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents a Deadline, a task that needs to be completed by a specified date and time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected LocalDateTime byDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new Deadline object with the specified description and date and time information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param description the specified description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param byDateTime the specified date and time information"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Deadline(String description, LocalDateTime byDateTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.byDateTime \u003d byDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a LocalDateTime object that represents the date and time a Deadline is due."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a LocalDateTime object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return byDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a string representation of this Deadline object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a string representation of this Deadline object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + byDateTime.format(PRINT_DATE_TIME_FORMAT) + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a string representation of this Deadline object that is formatted for saving in a file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a string representation of this Deadline object that is formatted for saving in a file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String toFileFormatString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return \"D\" + super.toFileFormatString() + FILE_FORMAT_DELIMITER + byDateTime.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 51
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents a Event, a task that will occur at a specified date and time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected LocalDateTime atDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new Event object with the specified description and date and time information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param description the specified description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param atDateTime the specified date and time information"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Event(String description, LocalDateTime atDateTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.atDateTime \u003d atDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a LocalDateTime object that represents the date and time a Event will occur."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a LocalDateTime object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return atDateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a string representation of this Event object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a string representation of this Event object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + atDateTime.format(PRINT_DATE_TIME_FORMAT) + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a string representation of this Event object that is formatted for saving in a file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a string representation of this Event object that is formatted for saving in a file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String toFileFormatString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return \"E\" + super.toFileFormatString() + FILE_FORMAT_DELIMITER + atDateTime.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 52
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the class to contain the description and done status of a task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static int pendingTaskCount \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String TICK_SYMBOL \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String CROSS_SYMBOL \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final String FILE_FORMAT_DELIMITER \u003d \" | \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final DateTimeFormatter PRINT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new Task object with the specified description and done status set to {@code false}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param description the specified description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the description of the task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Sets the done status of a task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param isDone {@code true} if the task is done, and {@code false} if the task is not done"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void setIsDone(boolean isDone) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            decrementPendingTaskCount();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a boolean to indicate whether the task is done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return {@code true} if the task is done, and {@code false} if the task is not done"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns an integer to indicate whether the task is done."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return 1 if the task is done, and 0 if the task is not done"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public int getIsDoneInInteger() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return (isDone ? 1 : 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a symbol to indicate whether the task is done."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a tick symbol if the task is done or a cross symbol if the task is not done"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return (isDone ? TICK_SYMBOL : CROSS_SYMBOL);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns the number of pending tasks in the list currently."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the number of pending tasks in the list currently"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public static int getPendingTaskCount() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return pendingTaskCount;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns {@code null} if it has no LocalDateTime object, it is to"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * be overridden by the class Deadline and Event."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return {@code null}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Increases the number of pending task by one."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public static void incrementPendingTaskCount() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        pendingTaskCount++;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Decreases the number of pending task by one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public static void decrementPendingTaskCount() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        pendingTaskCount--;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a string representation of this Task object."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a string representation of this Task object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a string representation of this Task object that is formatted for saving in a file."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a string representation of this Task object that is formatted for saving in a file"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String toFileFormatString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return FILE_FORMAT_DELIMITER + getIsDoneInInteger() + FILE_FORMAT_DELIMITER + description;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 128
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the class to store all the tasks entered by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new TaskList object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns the number of tasks currently in the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the number of tasks currently in the list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Retrieves the task specified by the task index."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param taskIndex the specified index of the task to be retrieved from the list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the task that has been retrieved from the list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return taskList.get(taskIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns the task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the task list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Adds a new task (Deadline, Event, Todo) to the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param newTask the specified new task to be added to the list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Deletes a task from the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param deleteTaskIndex the specified task to be deleted from the list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void deleteTask(int deleteTaskIndex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        taskList.remove(deleteTaskIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 63
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents a Todo, a task that needs to be done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new Todo object with the specified description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param description the specified description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a string representation of this Todo object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a string representation of this Todo object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a string representation of this Todo object that is formatted for saving in a file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a string representation of this Todo object that is formatted for saving in a file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String toFileFormatString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return \"T\" + super.toFileFormatString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 36
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the class to handle all input and output of Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Scanner CONSOLE \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            \"____________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Prints a single horizontal line."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void printHorizontalLine() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        System.out.println(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Prints a message to the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param message the specified message to print"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void printMessage(String message) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        System.out.println(\" \" + message);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Prints the error message."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param errorMessage the specified error information"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void printErrorMessage(String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        System.out.println(\" ☹ OOPS!!!\" + errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Prints the input prompt and also to prompt the user for input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the raw input entered by the user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String readUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        System.out.print(System.lineSeparator() + \" \u003e\u003e \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userInput \u003d CONSOLE.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Prints the welcome message to the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        printMessage(\"Hello! I\u0027m Duke.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        printMessage(\"How can I help you today?\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 60
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "deadline return book /by 2020-06-06 12:30"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "event project meeting /at 2020-08-05 13:30"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "deadline return book /by 2020-09-22 10:00"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "event project meeting /at 2020-09-22 15:30"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "done2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "blah"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "delete"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "due"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "find"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "todo"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "deadline 123"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "deadline 123 /by"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "deadline 123 /at 2020-09-22 20:30"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "event 123"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "event 123 /at"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "event 123 /by 2020-09-21 10:45"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "done a"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "delete a"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "delete 100"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "bye 123"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "bye 123 /at "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "list 123"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "list 123 /at"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "done 7"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "due 2020-09-22"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "due 2020-08-05"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "find book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "find meeting"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 47
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 3,
      "-": 19
    }
  }
]
