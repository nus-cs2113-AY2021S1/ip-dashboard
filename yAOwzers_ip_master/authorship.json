[
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Duke is a Command Line Interface (CLI) desktop application that keeps track of a user\u0027s task list. "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "* [Getting Started](#getting-started)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "* [Feature](#features)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  * [ToDo](#todo)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  * [Deadline](#deadline)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  * [Event](#event)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  * [Delete](#delete)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  * [List](#list)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  * [Find](#find) "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  * [Mark as Done](#mark-as-done) "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  * [Exit](#bye)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  * [Save](#save)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "* [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "1. Ensure that you have Java `11` or above installed on your device."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2. Download the latest `duke.jar` file from: https://github.com/yAOwzers/ip/releases/tag/A-UserGuide"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "3. Copy the downloaded `duke.jar` file to your desired folder as the home folder for your program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "4. Launch the application by entering `jar -jar ip.jar` to run the program. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "5. A welcome message should appear as displayed below:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "HOI there! I\u0027m Duke"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Words in `UPPER_CASE` are the parameters that are by the user.\\"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "eg. in `todo DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `todo math assignment`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### **`todo`** "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Adds a todo task to the task list. A todo task is a task which requires a description."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Format: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Example: `todo math assignment`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  [T][ ] math assignment"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Now you have 1 task in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### **`deadline`**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Adds a deadline task to the task list. A deadline task is a task which requires a description as well as a date and time."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "A `/by` command is placed before the date and time. The format of the date and time is as follows: YYYY-MM-DD hhmm."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Format: `deadline DESCRIPTION /by DATE TIME`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Example: `deadline math assignment /by 2020-10-10 2000`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected Outcome: "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  [D][ ] math assignment (by: 10 October 2020 08:00 PM)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Now you have 1 task in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### **`event`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Adds an event task to the task list. An event task is a task which requires a description as well as a date and time."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "A `/at` command is placed before the date and time. The format of the date and time is as follows: YYYY-MM-DD hhmm."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Format: `event DESCRIPTION /by DATE START`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Example: `event project meeting /at 2020-10-10 1900`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected Outcome: "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  [E][ ] project meeting (at: 10 October 2020 07:00 PM)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### **`list`**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Lists down all the existing task(s) in the task list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected Outcome: "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "1. [E][ ] project meeting (at: 10 October 2020 07:00 PM)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2. [T][ ] buy milk"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "3. [D][ ] math assignment (by: 10 October 2020 08:00 PM)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### **`find`**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Lists down all the existing tasks that matches the keyword provided by the user from the task list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Example: `find meeting`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected Outcome: "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Here are the tasks in your list that matches \u0027meeting\u0027:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "1.[E][ ] project meeting (at: 10 October 2020 07:00 PM)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### **`done`**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Marks a task in the task list as done. This is indicated by a \u0027\\*\u0027 symbol inside the second []."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "The index following the `done` command refers to the index of the task in the current task list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Example: `done 2`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected Outcome: "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "NOICE! I\u0027ve marked the following task as done:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  [T][*] buy milk"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### **`delete`**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Deletes an existing task from the task list. The index following the `delete` command refers to the index of the task in the current task list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Example: `delete 2`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected Outcome: "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Okay sure, the following task has been deleted from your list:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  [T][*] buy milk"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### **`bye`**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Exits the application."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected Outcome: "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "bye"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "GuuuudBYE. Hope to see you again soon!"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### Save "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Data involved in this application is saved into the hard disk via the `data.txt` file after any command that alters the data is executed automatically. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "| Action | Format | Examples |"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "| ------------- | ------------- |------------- |"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "| Add ToDo | `todo DESCRIPTION` | `todo math assignment` |"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "| Add deadline | `deadline DESCRIPTION /by DATE TIME` | `deadline math assignment /by 2020-10-10 2000` |"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "| Add event | `event DESCRIPTION /AT DATE START_TIME-END_TIME` | `event project meeting /at 2020-10-10 1900` |"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "| View list | `list` | -"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "| Delete | `delete INDEX` | `delete 2` |"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "| Mark done | `done INDEX` | `done 2` |"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "| Find tasks (keyword)  | `find KEYWORD` | `find meeting` |"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "| Exit | `bye` | - |"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 161,
      "-": 11
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import response.ResultOfResponse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Over seeing class of the Duke App."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Constructs a model of Duke with a specified file path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param filePath file path."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.parser \u003d new Parser(this.taskList, this.storage, this.ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public ResultOfResponse getResponse(String userInput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            Command userCommand \u003d this.parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return new ResultOfResponse(false, userCommand.execute());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return new ResultOfResponse(true, this.ui.showDukeError(e));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Initialises Duke."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return welcome message."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String initDuke() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            this.storage.loadTaskList(this.taskList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (DukeInvalidUserInputException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return this.ui.showDukeError(e);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return Ui.greet();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        System.out.println(initDuke());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String userInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            System.out.println(getResponse(userInput).getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        public static void main (String[]args) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            Duke duke \u003d new Duke(\"data/data.txt\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            duke.run();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 69,
      "-": 3
    }
  },
  {
    "path": "src/main/java/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Ends the running processes of Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public ByeCommand(Ui ui) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        System.out.println(this.ui.printExit());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return this.ui.printExit();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"ByeCommand\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 24
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Base class of a command in Duke"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public Command (Ui ui) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Executes the given command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @throws DukeException when the User Input does not meet the proper formats."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public abstract String execute() throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 22
    }
  },
  {
    "path": "src/main/java/command/CreateTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Abstract extension of the Command class for commands that"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * features creating tasks. Contains several methods that such"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * commands have in common."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public abstract class CreateTaskCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    CreateTaskCommand(TaskList taskList, Storage storage, Ui ui, String userInput) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Checks whether description is empty."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param description to check."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @throws DukeInvalidUserInputException when there description is empty."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    protected static void checkDescription(String description, String command) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"The description of \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                    + command + \" must not be empty.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Checks whether there is a follow up command in the String array."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param withoutCommandArray to check."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @throws DukeInvalidUserInputException when String array does not contain a follow up command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    protected static void checkFollowUpCommand(String[] withoutCommandArray, String followUpCommand)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (withoutCommandArray.length \u003c 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"It appears you are missing a \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                    + \"follow up \u0027\" + followUpCommand + \"\u0027 command.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Checks whether date time input exists."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param dateTime to check."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @throws DukeInvalidUserInputException when date and time is missing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    protected static void checkDateTime (String dateTime, String command)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (!dateTime.trim().contains(\" \")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"The date and time is missing\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                    \" from your \" + command + \".\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    protected String addTask(Task newTask) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.storage.saveTask(newTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return this.ui.printAddMessage(newTask) + \"\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + this.ui.getNumberOfTaskMessage(this.taskList.getTotalTask());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 72
    }
  },
  {
    "path": "src/main/java/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeIllegalFollowUpCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Adds a Deadline task into the task list of Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class DeadlineCommand extends CreateTaskCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Constructs a deadline command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param taskList of Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param storage of Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param ui of Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param userInput details of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public DeadlineCommand(TaskList taskList, Storage storage, Ui ui, String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(taskList, storage, ui, userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String execute() throws DukeInvalidUserInputException, DukeIllegalFollowUpCommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String userInputWithoutCommand \u003d this.userInput.substring(this.userInput.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String[] userInputWithoutCommandArray \u003d userInputWithoutCommand.split(\"/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String description \u003d userInputWithoutCommandArray[0].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            checkDescription(description, \"deadline\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            checkFollowUpCommand(userInputWithoutCommandArray, \"/by\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String followUpCommand \u003d Parser.parseFollowUpCommand(userInputWithoutCommandArray[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            if (followUpCommand.equals(\"by\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                checkDateTime(userInputWithoutCommandArray[1], \"deadline\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                String dateAndTime \u003d userInputWithoutCommandArray[1]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                        .substring(userInputWithoutCommandArray[1].indexOf(\" \")).trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                Deadline newTask \u003d new Deadline(description, dateAndTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                return addTask(newTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                throw new DukeIllegalFollowUpCommandException(\"deadline\", followUpCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"Invalid date and time. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                    + \"The format should be.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"DeadlineCommand\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 55
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Deletes a specific task in the current task list of Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class DeleteCommand extends Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Constructs a delete command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param taskList of Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param storage of Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param ui of Duke."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param userInput details of command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public DeleteCommand(TaskList taskList, Storage storage, Ui ui, String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String userInputAfterDone \u003d userInput.substring(7); // retrieves the number after \u0027done\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            int indexOfNumberAfterDone \u003d Integer.parseInt(userInputAfterDone);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            Task deletedTask \u003d this.taskList.delete(indexOfNumberAfterDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            this.storage.saveTaskList(this.taskList); // saves the file by overwriting the data.txt file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return this.ui.showDelete(deletedTask)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                    + this.ui.getNumberOfTaskMessage(this.taskList.getTotalTask());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"Please enter a valid number!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"Sorry this does not exist!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"DeleteCommand\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 55
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Marks a specific task in the task list of Duke as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Constructs a done command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param taskList of Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param storage of Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param ui of Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param userInput details of command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public DoneCommand(TaskList taskList, Storage storage, String userInput, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String execute() throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        // retrieves the number after the \u0027done\u0027 keyword"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (this.userInput.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"Description must not be empty!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String intSubstring \u003d this.userInput.substring(5);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            int indexOfNumberAfterDone \u003d Integer.parseInt(intSubstring);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            Task taskDone \u003d this.taskList.markDone(indexOfNumberAfterDone);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            this.storage.saveTaskList(this.taskList); // saves the file by overwriting the data.txt file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return this.ui.showMarkDone(taskDone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"Please enter a valid number.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"Sorry this does not exist!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"DoneCommand\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 55
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeIllegalFollowUpCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Adds an Event task into the task list of Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class EventCommand extends CreateTaskCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Constructs a event command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param taskList of Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param storage of Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param ui of Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param userInput details of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public EventCommand(TaskList taskList, Storage storage, Ui ui, String userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(taskList, storage, ui, userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String execute() throws DukeInvalidUserInputException, DukeIllegalFollowUpCommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String userInputWithoutCommand \u003d this.userInput.substring(this.userInput.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String[] userInputWithoutCommandArray \u003d userInputWithoutCommand.split(\"/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String description \u003d userInputWithoutCommandArray[0].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            checkDescription(description, \"event\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            checkFollowUpCommand(userInputWithoutCommandArray, \"/at\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String followUpCommand \u003d Parser.parseFollowUpCommand(userInputWithoutCommandArray[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            if (followUpCommand.equals(\"at\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                checkDateTime(userInputWithoutCommandArray[1], \"event\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                String dateAndTime \u003d userInputWithoutCommandArray[1]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                        .substring(userInputWithoutCommandArray[1].indexOf(\" \")).trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                Event newTask \u003d new Event(description, dateAndTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                return addTask(newTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                throw new DukeIllegalFollowUpCommandException(\"event\", followUpCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"The description of the event should not be empty!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"EventCommand\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 52
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Finds tasks based on their description that matches a specific userInput keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Constructs a find command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param taskList of Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param ui of Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param userInput details of command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public FindCommand(TaskList taskList, Ui ui, String userInput) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (isFindFieldEmpty(this.userInput)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return this.ui.showFindResults(this.taskList.getTaskList(), \"\"); //show all tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String[] userInputArr \u003d this.userInput.split(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (!isSingleField(userInputArr)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"My deepest apologies but I\u0027m only able to \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                    + \"find tasks based on a single keyword.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String keyword \u003d userInputArr[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d this.taskList.findTasksKeyword(keyword);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return this.ui.showFindResults(result, keyword);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private boolean isFindFieldEmpty(String userInput) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return userInput.trim().length() \u003d\u003d 4;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private boolean isSingleField(String[] userInputArr) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return userInputArr.length \u003c\u003d 2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 52
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Prints the task list stored in Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Constructs a list command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param ui of Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param taskList of Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public ListCommand(Ui ui, TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return this.ui.printTaskList(this.taskList.getTaskList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"ListCommand\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 32
    }
  },
  {
    "path": "src/main/java/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Adds a To-Do task into the task list of Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class ToDoCommand extends CreateTaskCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Constructs a to-do command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param taskList of Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param storage of Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param ui of Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param userInput details of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public ToDoCommand(TaskList taskList, Storage storage, Ui ui, String userInput) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(taskList, storage, ui, userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String execute() throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String description \u003d userInput.substring(5).trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            checkDescription(description, \"todo\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            ToDo newTask \u003d new ToDo(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return addTask(newTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"The description\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                    \" of a todo is empty. Please fill it up!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"ToDoCommand\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 41
    }
  },
  {
    "path": "src/main/java/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Parent class of all Duke Exceptions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(message + Ui.lineSeparator()) ;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 12
    }
  },
  {
    "path": "src/main/java/exceptions/DukeIllegalCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Signals that a given command is not recognised by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class DukeIllegalCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param command that is not recognised by Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public DukeIllegalCommandException(String command) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(\"Sorry but \u0027\" + command + \"\u0027 is an unrecognizable command.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 13
    }
  },
  {
    "path": "src/main/java/exceptions/DukeIllegalFollowUpCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Informs that a given follow up command is incorrect for a given command by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class DukeIllegalFollowUpCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param command first command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param followUpCommand second command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public DukeIllegalFollowUpCommandException(String command, String followUpCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(\"UHm this \u0027\" + followUpCommand + \"\u0027 is an incorrect follow up command to a \u0027\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + command + \"\u0027 command.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 16
    }
  },
  {
    "path": "src/main/java/exceptions/DukeInvalidUserInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Informs a given user input is invalid and does not fulfill the proper formats."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class DukeInvalidUserInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param message that contains information related to the improper formats."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public DukeInvalidUserInputException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 13
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeIllegalCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Constructs a parser to parse user input commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param taskList of Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param storage of Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param ui of Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public Parser(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Parses user input into a command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param userInput full user_input string to be parsed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return command based on userInput."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @throws DukeIllegalCommandException when an invalid command is detected."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public Command parseCommand(String userInput) throws DukeIllegalCommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String[] userInputArr \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (userInputArr.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeIllegalCommandException(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String keyword \u003d userInputArr[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                return new ListCommand(this.ui, this.taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                return new DoneCommand(this.taskList, this.storage, userInput, this.ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                return new ByeCommand(this.ui);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                return new ToDoCommand(this.taskList, this.storage, this.ui, userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                return new EventCommand(this.taskList, this.storage, this.ui, userInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                return new DeadlineCommand(this.taskList, this.storage, this.ui, userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                return new DeleteCommand(this.taskList, this.storage, this.ui, userInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                return new FindCommand(this.taskList, this.ui, userInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                throw new DukeIllegalCommandException(keyword);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Parses user_input when there are commands that follow a \u0027/\u0027 into a command string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param userInput full follow-up user_input string to be parsed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return string command keyword based on user_input."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static String parseFollowUpCommand(String userInput) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String[] userInputArray \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return userInputArray[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 73
    }
  },
  {
    "path": "src/main/java/response/ResultOfResponse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package response;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Links a command result message and whether the message is an"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * error message or not an error."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class ResultOfResponse {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        private boolean isError;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        private String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "         * Constructs a response result which contains a boolean and a string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "         * @param isError whether the command message is an error or not an error."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "         * @param message command result message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "         */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        public ResultOfResponse(boolean isError, String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            this.isError \u003d isError;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            this.message \u003d message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        public boolean isError() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return isError;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        public String getMessage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 29
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Represents the storage of where Duke is loading information from and saving information to."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Constructs the storage based on a filepath to a txt file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param filePath to txt file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Loads the data in the text file from the file path to an assigned task.TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param taskList to load data to."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @throws DukeInvalidUserInputException if there are any invalid inputs in the file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * that are unable to be parsed into a Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void loadTaskList(TaskList taskList) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        File file \u003d new File(this.filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            Scanner s \u003d new Scanner(file); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                Task loadTaskList \u003d Task.parse(s.nextLine());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                taskList.load(loadTaskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            // If file is not found, a new file will be created"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Saves the given task to the text file from the file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param task to be saved into text file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void saveTask(Task task) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                file.getParentFile().mkdir(); // create a directory"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                file.createNewFile(); // create .txt file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            // checks whether the file exists"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            if (file.length() \u003e 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                FileWriter writeToFile \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                writeToFile.write(System.lineSeparator() +task.toTextFormat());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                writeToFile.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                FileWriter writeToFile \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                writeToFile.write(task.toTextFormat());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                writeToFile.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            System.out.println(Ui.printUnknownError() + Ui.lineSeparator());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Overwrites and saves an entire tasklist into the text file from the file path."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param taskList to be saved into the text file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void saveTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            FileWriter overwriteFile \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            if (taskList.getTotalTask() \u003e 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                overwriteFile.write(taskList.getTask(0).toTextFormat());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                overwriteFile.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                for (int i \u003d 1; i \u003c taskList.getTaskList().size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                    saveTask(taskList.getTask(i));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                overwriteFile.write(\"\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                overwriteFile.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            System.out.println(Ui.printUnknownError() + Ui.lineSeparator());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 94
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * A specific type of task that contains a description of a task and a specific date and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Constructs a deadline task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param description of task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param by of deadline task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @throws DukeInvalidUserInputException when date time is incorrect format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public Deadline(String description, String by) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        convertDateTime(by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"[\" + getType() + \"]\" + super.printStatus() + \" \" + description + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static String getType(){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Converts the Deadline task into a string to be saved into a text file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return Deadline task in the form of a string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toTextFormat() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"D | \" + super.toTextFormat() + \" | \" + this.by;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Parses a given string array into a Deadline task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param txtArray to be parsed into a Deadline task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return Deadline task based on input string array."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @throws DukeInvalidUserInputException when an invalid date and time format is found in the input string array."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static Deadline parse(String[] txtArray) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String isDoneInteger \u003d txtArray[1].trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String description \u003d txtArray[2].trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String[] unformattedDateAndTime \u003d txtArray[3].trim().split(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String[] formattedDateAndTime \u003d formatDateAndTime(unformattedDateAndTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String finalDateAndTime \u003d formattedDateAndTime[0] + \" \" + formattedDateAndTime[1];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, finalDateAndTime);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (isDoneInteger.equals(\"1\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            deadline.markAsDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Converts the given string into a LocalDateTime to be stored in the given Deadline."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param dateAndTime to be converted into LocalDateTime."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @throws DukeInvalidUserInputException when an invalid a date time format is used as input."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private void convertDateTime(String dateAndTime) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String[] dateAndTimeArray \u003d dateAndTime.split(\" \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            this.date \u003d LocalDate.parse(dateAndTimeArray[0]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            this.time \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                    LocalTime.parse(dateAndTimeArray[1].substring(0, 2) + \":\" + dateAndTimeArray[1].substring(2, 4));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            this.by \u003d this.date.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy\")) + \" \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                    + this.time.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"You have entered an invalid date and time! \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                    + \"Please follow the format: YYYY-MM-DD hhmm.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private static String[] formatDateAndTime(String[] unformattedDateAndTime) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String[] formattedDateAndTime \u003d new String[3];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String unformattedDate \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                unformattedDateAndTime[0] + \" \" + unformattedDateAndTime[1] + \" \" + unformattedDateAndTime[2];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String unformattedTime \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                unformattedDateAndTime[3] + \" \" + unformattedDateAndTime[4];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String formattedDate \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                LocalDate.parse(unformattedDate, DateTimeFormatter.ofPattern(\"d MMMM yyyy\")).toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String time \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                LocalTime.parse(unformattedTime, DateTimeFormatter.ofPattern(\"hh:mm a\")).toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String formattedTime \u003d time.substring(0, time.indexOf(\u0027:\u0027))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + time.substring(time.indexOf(\u0027:\u0027) + 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        formattedDateAndTime[0] \u003d formattedDate;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        formattedDateAndTime[1] \u003d formattedTime;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return formattedDateAndTime;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return getType() + \"|\" + super.isDoneInteger() + \"|\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + description + \"|\" + by + System.lineSeparator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 119
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * A specific type of task that contains a description of a task and a specific date, start and end time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public Event(String description, String at) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        convertDateTime(at);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"[\" + getType() + \"]\" + super.printStatus()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + \" \" + description + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Converts the Event task into a string to be saved into a text file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return Event task in the form of a string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toTextFormat() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"E | \" + super.toTextFormat() + \" | \" + at;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static String getType(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Parses a given string array into a Event task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param txtArray to be parsed into a Event task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return Event task based on input string array."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @throws DukeInvalidUserInputException when an invalid date and time format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     *     is found in the input string array."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static Event parse(String[] txtArray) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String isDoneInteger \u003d txtArray[1].trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String description \u003d txtArray[2].trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String[] unFormattedDateAndTime \u003d txtArray[3].trim().split(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String[] formattedDateAndTime \u003d formatDateAndTime(unFormattedDateAndTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String finalDateAndTime \u003d formattedDateAndTime[0] + \" \" + formattedDateAndTime[1];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        Event event \u003d new Event(description, finalDateAndTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (isDoneInteger.equals(\"1\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            event.markAsDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Converts the given string into a LocalDate and LocalTime to be"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     *     stored as the Event\u0027s date,start and end time."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param dateAndTime to be converted into LocalDate and LocalTime."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @throws DukeInvalidUserInputException when an invalid a date time format is used as input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private void convertDateTime(String dateAndTime) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String[] dateAndTimeArray \u003d dateAndTime.split(\" \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            this.date \u003d LocalDate.parse(dateAndTimeArray[0]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            this.time \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                    LocalTime.parse(dateAndTimeArray[1].substring(0, 2) + \":\" + dateAndTimeArray[1].substring(2, 4));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            this.at \u003d this.date.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy\")) + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                    + this.time.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"You have entered an invalid date and time! \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                    + \"Please follow the format: YYYY-MM-DD hhmm.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private static String[] formatDateAndTime(String[] unformattedDateAndTime) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String[] formattedDateAndTime \u003d new String[3];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String unformattedDate \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                unformattedDateAndTime[0] + \" \" + unformattedDateAndTime[1] + \" \" + unformattedDateAndTime[2];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String unformattedTime \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                unformattedDateAndTime[3] + \" \" + unformattedDateAndTime[4];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String formattedDate \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                LocalDate.parse(unformattedDate, DateTimeFormatter.ofPattern(\"d MMMM yyyy\")).toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String time \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                LocalTime.parse(unformattedTime, DateTimeFormatter.ofPattern(\"hh:mm a\")).toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String formattedTime \u003d time.substring(0, time.indexOf(\u0027:\u0027))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + time.substring(time.indexOf(\u0027:\u0027) + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        formattedDateAndTime[0] \u003d formattedDate;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        formattedDateAndTime[1] \u003d formattedTime;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return formattedDateAndTime;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return getType() + \"|\" + super.isDoneInteger() + \"|\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + description + \"|\" + at + System.lineSeparator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 115
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Base class of a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    protected String[] descriptionArray;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.descriptionArray \u003d description.split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Obtains status icon(either tick or cross symbol) based on the Task\u0027s isDone status."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return status icon string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return (isDone ? \"*\" : \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String printStatus() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String symbol \u003d getStatusIcon();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"[\" + symbol + \"]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return printStatus() + description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static String getType() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public int isDoneInteger() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Parses a given string into a specific type of task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param txtFormat to be parsed into a task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return a specific task type based on the txtFormat."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @throws DukeInvalidUserInputException when txtFormat is of invalid format to be parsed into a task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static Task parse(String txtFormat) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        char firstLetter \u003d txtFormat.charAt(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String[] txtArray \u003d txtFormat.split(\"\\\\|\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (firstLetter \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return ToDo.parse(txtArray);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } else if (firstLetter \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return Deadline.parse(txtArray);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } else if (firstLetter \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return Event.parse(txtArray);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            throw new DukeInvalidUserInputException(\"Invalid Task type!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toTextFormat() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return (isDone ? \"1\" : \"0\") + \" | \" + this.description;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Checks whether the description of a task contains a specific keyword."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param keyword to be checked."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return whether the keyword is within the description."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public boolean containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        for (String word : descriptionArray) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            if (word.toLowerCase().equals(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return printTask();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 104
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Represents an array list of tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Adds a task into the list and then generates and prints a success message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param task to be added into the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Adds a task into the list only."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Used when loading data from a storage file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param task to be added into the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void load(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Deletes a specific task based on the task\u0027s index in the task array list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * and then generates and prints a success message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param i index of task to be deleted."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public Task delete(int i) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        Task task \u003d this.taskList.get(i - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.taskList.remove(i - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Marks a specific task as done based on task\u0027s index in the task array list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * and then generates and prints a success message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param i index of task to be marked."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public Task markDone(int i) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        Task task \u003d this.taskList.get(i - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Finds tasks that contain the input keyword within their descriptions."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param keyword to find."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return an array list of tasks that contain the keyword."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasksKeyword(String keyword) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            if (task.containsKeyword(keyword)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public Task getTask(int i) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return this.taskList.get(i);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public int getTotalTask() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 82
    }
  },
  {
    "path": "src/main/java/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"[\" + getType() + \"]\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + super.printStatus() + \" \" + description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static String getType(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Converts the To_Do task into a string to be saved into a text file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return To_Do task in the form of a string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toTextFormat() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"T | \" + super.toTextFormat();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Parses a given string array into a To_Do task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param txtArray to be parsed into a To_Do task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return To_Do task based on input string array."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static ToDo parse(String[] txtArray) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        ToDo toDo \u003d new ToDo(txtArray[2].trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (txtArray[1].trim().equals(\"1\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            toDo.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return toDo;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return printTask();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 50
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * User Interface of Duke which manages all text output"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private final Scanner userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.userInput \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Generates and prints greeting message upon launching of Duke"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static String greet() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String hello \u003d \"Hello from\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String offer \u003d \"HOI there! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return hello + logo + offer + lineSeparator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Generates and prints Duke error message upon catching them"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param e Duke exception"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String showDukeError(DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Prints each task in the input tasklist in a labelled and ordered list view."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Generates and prints a message when input tasklist is empty"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param taskList to be printed as an indexed list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * essentially showTaskList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String printTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            if (i \u003d\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                output \u003d output + (i + 1) + \". \" + taskList.get(i).printTask();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                output \u003d output + (i + 1) + \". \" + taskList.get(i).printTask() + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String getListMessage \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String emptyListMessage \u003d \"Sorry, your tasks list seems to be empty!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            if (taskList.size() \u003c 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                return emptyListMessage + lineSeparator();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                return getListMessage + \"\\n\" + output + lineSeparator();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Prints a message which displays the total number of tasks in a tasklist."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param i the total number of task in a tasklist."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String getNumberOfTaskMessage(int i) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        //If there is only one task, then task will be singular"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if(i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "           return \"Now you have \" + i + \" task in the list.\" + lineSeparator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return \"Now you have \" + i + \" tasks in the list.\" + lineSeparator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Generates and prints the exit message upon exiting Duke."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String printExit() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"GuuuudBYE. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Generates and prints the task that has been added to the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param newTask that is added to the tasklist."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String printAddMessage(Task newTask) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String addMessage \u003d \"Got it. I\u0027ve added this task:\\n  \";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return addMessage + newTask.printTask();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Generates and prints the done message when a task is being marked as done."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param task that is being marked as done."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String showMarkDone(Task task) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String markDoneMessage \u003d \"NOICE! I\u0027ve marked the following task as done:\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String taskDetails \u003d task.printTask();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return markDoneMessage + \"\\n  \" + taskDetails + lineSeparator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Generates and prints the delete message when a task is being deleted."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param task that is being deleted."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String showDelete(Task task) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String deleteMessage \u003d \"Okay sure, the following task has been deleted from your list:\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String taskDetails \u003d task.printTask();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return deleteMessage + \"\\n  \" + taskDetails + \"\\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Displays the search result of find command."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param taskList to be searched."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @param userInput find keyword given by user."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return search result as a String."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String showFindResults(ArrayList\u003cTask\u003e taskList, String userInput) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String currentTask \u003d taskList.get(i).printTask();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            if (i \u003d\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + currentTask;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + currentTask + \"\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String getListMessage \u003d \"Here are the tasks in your list that matches \" + \"\u0027\" + userInput + \"\u0027\" + \":\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String emptyListMessage \u003d \"Dang, it seems that there are no tasks that matches \" + \"\u0027\" + userInput + \"\u0027\" + \".\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (taskList.size() \u003c 1) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return emptyListMessage;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return getListMessage + \"\\n\" + output + lineSeparator();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Generates and prints the unknown error message upon encountering an unidentifiable error."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static String printUnknownError() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \" hmmm... error detected that is unknown.\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return this.userInput.nextLine();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static String lineSeparator() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"\\n-------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 157
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "event project meeting /at Mon 2-4pm"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 4
    }
  }
]
