[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "# duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": "The user guide can be found at http://e0426051.github.io/ip"
      }
    ],
    "authorContributionMap": {
      "e0426051": 4,
      "-": 24
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "* [Quick Start Guide](#quick-start-guide)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    + [1. list](#1-list-the-current-task-list-list)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    + [2. todo](#2-add-a-todo-task-todo-)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    + [3. deadline](#3-add-a-deadline-task-deadline-)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    + [4. event](#4-add-an-event-task-event-)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    + [5. done](#5-mark-task-as-done-done-)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    + [6. delete](#6-delete-a-task-delete-)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    + [7. find](#7-find-tasks-find-)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    + [8. bye](#8-exit-application-bye)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    + [9. *traditional tasks*](#9-others)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "* [Other Exceptions](#other-exceptions)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "* [FAQ](#faq)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "* [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "## Quick Start Guide"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "1. Install Java 11 on your computer. Refrain from using other versions to minimize unexpected runtime errors."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "2. Download duke to your computer. Place duke in a non-restricted folder to minimize I/O errors. An example of a restricted folder in Windows may be the root directory `C:\\`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "3. Use `cd` command to navigate to the correct folder and run the program using `java -jar [filename].jar`. The `cd` navigation is important as duke will only search the current directory for the file, and not the root directory of the duke program itself automatically."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "4. If you are a new user, the program will create a duke.txt file. Please do not delete this file as it contains all your tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Duke has the following commands:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": "* `list`: Lists the tasks entered into the program that are not deleted"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0426051"
        },
        "content": "* **`todo `**: Adds a todo task to the list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0426051"
        },
        "content": "* **`deadline `**: Adds a deadline task to the list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0426051"
        },
        "content": "* **`event `**: Adds an event task to the list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0426051"
        },
        "content": "* **`done `**: Marks an existing task as done"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0426051"
        },
        "content": "* **`delete `**: Deletes an existing task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0426051"
        },
        "content": "* **`find `**: Finds all tasks that contain the supplied keyword, including in the date section for Deadlines and Events "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0426051"
        },
        "content": "* `bye`: Exits the application"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0426051"
        },
        "content": "* *Others* : Add a traditional task (Level-2 feature). This includes keywords above **in bold** that is not entered with a space immediately thereafter."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0426051"
        },
        "content": "### 1. List the current task list `list`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Prints out the list of tasks stored in the program."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Format: `list` **without any arguments.**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Usage: `list`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Sample Outcome"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Outcome: "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`Here are the tasks in your list:`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`1. [T][✓] eat breakfast`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Exceptions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Exceptions: None. This command will always run."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0426051"
        },
        "content": "### 2. Add a todo task `todo `"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Adds a `todo` task into the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Format: `todo [task description]`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Usage: `todo finish homework`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Sample Outcome"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`Got it. I\u0027ve added this task: `"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`  [T][✘] finish homework`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`Now you have 8 tasks in the list.`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Exceptions"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Exceptions: The program will display an error message `Invalid command.` if you type `todo ` without a task description."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0426051"
        },
        "content": "### 3. Add a deadline task `deadline `"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Adds a `deadline` task into the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Format"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Format: `deadline [task description] /by [deadline]`. The [deadline] is in string format so it can be e.g. \"tommorrow\" as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Usage: `deadline finish homework /by tommorrow`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Sample Outcome"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`Got it. I\u0027ve added this task:` "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`  [D][✘] finish homework (by: tommorrow)`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`Now you have 6 tasks in the list.`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Exceptions"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Exceptions: The program will display an error message `Invalid command.` if you type `deadline ` without a task description **nor** the deadline."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0426051"
        },
        "content": "The program will display an error message `Invalid format. Please check your syntax.` for all other syntax errors, such as an empty description, a lack"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0426051"
        },
        "content": "of \"/by \" in the input, or an empty deadline in the input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0426051"
        },
        "content": "### 4. Add an event task `event `"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Adds a `event` task into the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Format"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Format: `event [task description] /on [occurrence]`. The [occurrence] is in string format so it can be e.g. \"yesterday\" as well."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Usage: `event midterms /on friday`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Sample Outcome"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`Got it. I\u0027ve added this task:` "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`  [E][✘] midterms (on: friday)`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`Now you have 2 tasks in the list.`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Exceptions"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Exceptions: The program will display an error message `Invalid command.` if you type `event ` without a task description **nor** the occurrance."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0426051"
        },
        "content": "The program will display an error message `Invalid format. Please check your syntax.` for all other syntax errors, such as an empty description, a lack"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0426051"
        },
        "content": "of \"/on \" in the input, or an empty occurrance in the input."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0426051"
        },
        "content": "### 5. Mark task as done `done `"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Marks the specified task as done. If the task is already done, a message `This task is already done!` will be shown."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Format"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Format: `done [task number]`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Usage: `done 3`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Sample Outcome"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`Nice! I\u0027ve marked this task as done: `"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`  [✓] movies`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`This task is already done!`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Exceptions"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Exceptions: The program will display an error message `Please Enter a number!` if you type `done ` without a task number, or you typed a non-number"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0426051"
        },
        "content": "character in its place. If the number you typed is not valid, e.g. `0` or `3` when you only have 1 task in the list, you will receive the error message"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`Invalid task number or task does not exist. Please try again.`."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0426051"
        },
        "content": "### 6. Delete a task `delete `"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Deletes the specified task from the list **AND** duke.txt immediately. Please exercise caution before deleting a task."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Format"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Format: `delete [task number]`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Usage: `delete 3`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Sample Outcome"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`Noted. I\u0027ve removed this task: `"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`  [✓] lunch`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Exceptions"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Exceptions: The program will display an error message `Invalid task number or input is not a number. No items are deleted.` for all invalid inputs,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0426051"
        },
        "content": "such as if you typed `delete ` without a task number, typed a non-number character instead, or typed a number that is not valid."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0426051"
        },
        "content": "### 7. Find tasks `find `"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Finds tasks with the specified keyword. Also searches in the date section in Deadlines and Events. If you enter `find ` without a keyword, the entire"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0426051"
        },
        "content": "list is printed out."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Format"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Format: `find [keyword]`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Usage: `find homework`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Sample Outcome"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`Here are the matching tasks in your list:`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`1. [✓] all the homework`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`2. [E][✘] midterms (on: the day without homework)`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Exceptions"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Exceptions: None."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0426051"
        },
        "content": "### 8. Exit application `bye`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Exits the application. The data entered have been saved into duke.txt. If required, please backup this file for safekeeping purposes."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Format"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Format: `bye` **without any arguments.**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Usage: `bye`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Sample Outcome"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`Bye. Hope to see you again soon!`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Exceptions"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Exceptions: None."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0426051"
        },
        "content": "### 9. *Others*"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Adds a traditional task into the list. Accepts most inputs. Exceptions include `delete ` and `todo `. Inputs accepted include `delete` and `duke`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Format"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Format: `[input]`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Usage"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Usage: `todo`, `event`, `find`, `java`, `movie /at 9pm`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Sample Outcome"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`Added: todo`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0426051"
        },
        "content": "`Added: movie /at 9pm`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Exceptions"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Exceptions: None."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0426051"
        },
        "content": "## Other exceptions"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0426051"
        },
        "content": "You may experience these errors in different situations:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0426051"
        },
        "content": "### 1. I/O type of errors"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Examples"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0426051"
        },
        "content": "1. `I/O error. File not found or corrupt.`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0426051"
        },
        "content": "2. `There is a problem preventing a new file from being created.`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0426051"
        },
        "content": "3. `Unable to create file! Reason: [Reason]`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0426051"
        },
        "content": "4. `File not found error.`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0426051"
        },
        "content": "##### Solutions"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Move the jar file to another folder with proper access. For example, refrain from using restricted directories such as `C:\\` or `C:\\Windows\\System32`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0426051"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0426051"
        },
        "content": "### 1."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Q1: How do I ensure my tasks are saved even if my storage fails (e.g. HDD failure)?"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0426051"
        },
        "content": "A1: Please backup duke.txt and place it at the same directory as the duke program. Do take note to `cd` to said directory in terminal before running duke so that"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0426051"
        },
        "content": "duke recognizes the presence of the file."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0426051"
        },
        "content": "### 2."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Q2: I marked a task as done by mistake. Can I undo it?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0426051"
        },
        "content": "A2: Undo functions are not supported. Please make a duplicate task and delete the former task as a workaround."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0426051"
        },
        "content": "### 3."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Q3: I am not able to see ticks and crosses on the tasks. I can only see \"?\". How do I resolve this?"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0426051"
        },
        "content": "A3: Run `Chcp 65001` followed by `java -Dfile.encoding\u003dUTF-8 -jar [filename].jar` to resolve the issue. Also, change the fonts for your console"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0426051"
        },
        "content": "application to NSimSun. Please ensure you are in the correct directory before doing so."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0426051"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0426051"
        },
        "content": "Command | Format | Usage Example"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0426051"
        },
        "content": "------- | ---------- | ------------"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0426051"
        },
        "content": "list | `list` | `list`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0426051"
        },
        "content": "todo | `todo [task description]` | `todo mop the room`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0426051"
        },
        "content": "deadline | `deadline [task description] /by [deadline]`| `deadline homework /by tommorrow`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0426051"
        },
        "content": "event | `event [task description] /on [occurrence]` | `event favorite show /on yesterday`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0426051"
        },
        "content": "find | `find [keyword]` | `find homework`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0426051"
        },
        "content": "done | `done [task number]`  | `done 8`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0426051"
        },
        "content": "delete | `delete [task number]` | `delete 1`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0426051"
        },
        "content": "bye | `bye` | `bye`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0426051"
        },
        "content": "traditional task | `[input]` | `buy book`"
      }
    ],
    "authorContributionMap": {
      "e0426051": 235,
      "-": 13
    }
  },
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[T][✓] fff"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✓]  done 7"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[D][✓] finish homework (by: tommorrow)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[E][✓] midterms (on: friday)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✘]  done 7"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✘] todo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✘]  done 7"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[E][✘] all the way (on: none of the)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✘]  deadline homework /b 2pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[E][✘] 3 (on: 7)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✘] sss"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✘] ddd"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✓] fff"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✓] lisst"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[E][✘] 3 (on: 1)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[D][✘] 3 (by: 6)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[E][✘] 3 (on: 5)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✘] yie"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[T][✘] 5"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[E][✘] 3 (on: 4)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✓] re"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[E][✘] 3 (on: 6)"
      }
    ],
    "authorContributionMap": {
      "e0426051": 22
    }
  },
  {
    "path": "duke1.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✓] a"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✓] e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[T][✓] 4"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[E][✓] 4 (on: 5)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[D][✓] 3 (by: 3)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[T][✓] 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[D][✓] 5 (by: 6)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[E][✓] 5 (on: 6)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✓] d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[T][✓] 4"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✓] search"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[T][✘] 3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[T][✓] 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✘] find"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "[✘] search 3"
      }
    ],
    "authorContributionMap": {
      "e0426051": 15
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.commands.CommandRunner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Main duke function. Backbone function that calls Ui, TaskList, Storage and Parser classes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @see TaskList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @see Ui"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @see Storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @see Parser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String commandType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int byeIndicator \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int listCount \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int PRESENT \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        listCount \u003d Storage.parseFile(TaskList.tasks, listCount);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        Ui.displayWelcomeMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        while (byeIndicator !\u003d PRESENT) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            input \u003d scan.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            byeIndicator \u003d input.compareToIgnoreCase(\"bye\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            commandType \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            listCount \u003d CommandRunner.commandRunner(input, commandType, listCount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandRunner.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class CommandRunner {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Takes the result from the parser and calls the TaskList functions appropriately."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Does not handle addition of tasks, which is dealt by taskRunner."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input input by user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param commandType type of command by parser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param listCount number of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return listCount number of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int commandRunner(String input, String commandType, int listCount) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"BYE\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayByeMessage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"LIST\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            TaskList.displayList(listCount, TaskList.tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"DONE\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            TaskList.flagAsDone(input, TaskList.tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"DELETE\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            listCount \u003d TaskList.deleteTask(input, TaskList.tasks, listCount);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"FIND\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            TaskList.displayFind(listCount, input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return taskRunner(input, commandType, listCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            //Fallthrough due to return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listCount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int taskRunner(String input, String commandType, int listCount) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"DEADLINE\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            listCount \u003d TaskList.createDeadline(input, listCount, TaskList.tasks, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"EVENT\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            listCount \u003d TaskList.createEvent(input, listCount, TaskList.tasks, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"TODO\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                listCount \u003d TaskList.createToDo(input, listCount, TaskList.tasks, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                Ui.displayInvalidCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                listCount \u003d TaskList.createTraditionalTask(input, listCount, TaskList.tasks, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                Ui.displayInvalidCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listCount;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 66
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": " * Exception that is thrown when the user enters an invalid command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": " * Invalid commands are commands that are otherwise valid without any parameters entered,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": " * when said command expects parameters."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": " * Examples of an invalid command: \"done \", \"event \", \"delete \"."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": " * Exception that is thrown when the user enters an invalid format for otherwise valid commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": " * For example, the user enters \"delete t\" where t is not a positive integer that is not larger"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": " * than the number of tasks in the list. Another example would be the user entering \"event holiday\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": " * without specifying the time/date (on:)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class InvalidFormatException extends Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 10
    }
  },
  {
    "path": "src/main/java/duke/parser/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": " * This enum ensures that all commands are categorized into an appropriate command type."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    LIST, DELETE, TODO, DEADLINE, TRADITIONAL_TASK, EVENT, FIND, DONE, BYE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 8
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": " * Takes the input by user and tells the main function what the command is. Uses the CommandType"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": " * enum to reduce chances of errors."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    final static int PRESENT \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Parser to read user input. Tasks such as events and todos are processed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * by another parser parseTasks() to keep the functions short."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return type of task entered by user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static String parse (String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int byeIndicator \u003d input.compareToIgnoreCase(\"bye\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int listIndicator \u003d input.compareToIgnoreCase(\"list\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isDone \u003d input.startsWith(\"done \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isDelete \u003d input.startsWith(\"delete \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isFind \u003d input.startsWith(\"find \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (byeIndicator \u003d\u003d PRESENT) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return CommandType.BYE.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else if (listIndicator \u003d\u003d PRESENT) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return CommandType.LIST.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else if (isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return CommandType.DONE.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else if (isDelete) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return CommandType.DELETE.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else if (isFind) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return CommandType.FIND.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else return parseTasks (input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static String parseTasks (String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isDeadline \u003d input.startsWith(\"deadline \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isEvent \u003d input.startsWith(\"event \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isToDo \u003d input.startsWith(\"todo \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (isDeadline) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return CommandType.DEADLINE.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else if (isEvent) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return CommandType.EVENT.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else if (isToDo) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return CommandType.TODO.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return CommandType.TRADITIONAL_TASK.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 52
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function updates the file in terms of adding new lines to an existing file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function is used for new tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param tasks the arraylist of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void updateFile(Task tasks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            FileWriter dukeSave \u003d new FileWriter(\"duke.txt\", true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            BufferedWriter duke \u003d new BufferedWriter(dukeSave);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            duke.write(tasks.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            duke.newLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            duke.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayIoError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function updates the file in terms of modifying existing lines in the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function is used while setting a task as done, or while deleting a task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param tasks the arraylist of tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void refreshFile(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            FileWriter dukeUpdate \u003d new FileWriter(\"duke.txt\", false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                dukeUpdate.write(String.format(\"%s\\n\", task.toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            dukeUpdate.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayIoError();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function scans for duke.txt. If the function detects the file, it prints out a message"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * and does nothing. Otherwise, duke.txt is created and the directory is shown to the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param duke the file object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void createFile(File duke) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (duke.exists()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                Ui.displayFileLocation(duke.getAbsolutePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                Ui.displayFilePresentMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (!duke.exists()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                boolean isFileMade \u003d duke.createNewFile();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                Ui.displayFileNotPresentMessage(duke.getAbsolutePath(), isFileMade);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayMakeFileError(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function takes duke.txt and transform each line into a valid command,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * so that the commands can be added during startup of the program."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param tasks the arraylist of tasks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param listCount the variable tracking the number of tasks in the arraylist."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return listCount"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int parseFile(ArrayList\u003cTask\u003e tasks, int listCount) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        createFile(new File(\"duke.txt\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        Path path \u003d Paths.get(\"duke.txt\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        Scanner loadFile \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            loadFile \u003d new Scanner(path);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayFileNotFoundError();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        assert loadFile !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        loadFile.useDelimiter(\"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        while (loadFile.hasNext()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String position \u003d loadFile.next();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (!position.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                char isDone \u003d position.charAt(4);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                char tradIsDone \u003d position.charAt(1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                String taskType \u003d getTaskType(position.charAt(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                String checkSpace \u003d Character.toString(position.charAt(4));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                listCount \u003d spaceChecker (checkSpace, position, taskType, tasks, listCount);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                if (isDone \u003d\u003d \u0027\\u2713\u0027 || tradIsDone \u003d\u003d \u0027\\u2713\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    tasks.get(tasks.size() - 1).setAsDone();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listCount;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int spaceChecker (String checkSpace, String position,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String taskType, ArrayList\u003cTask\u003e tasks, int listCount) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkSpace.equals(\" \")){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String description \u003d position.substring(4);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            listCount \u003d loadFileAtStartup(description, listCount, tasks);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return listCount;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String inputFormat \u003d taskType + reformatDate(position.split(\" \", 2)[1],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    position.charAt(1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            listCount \u003d loadFileAtStartup(inputFormat, listCount, tasks);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return listCount;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function reformats the syntax of dates in deadlines and events while loading"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * duke.txt into the programs."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input the line of data in duke.txt."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param taskType the type of task. Ignores traditional tasks and todo which has no dates."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return input.trim()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static String reformatDate(String input, char taskType) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return input.trim().replace(\"(by:\", \"/by\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    .replace(\")\", \"\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            //Fallthrough due to return"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return input.trim().replace(\"(on:\", \"/on\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    .replace(\")\", \"\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            //Fallthrough due to return"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return input.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Returns the type of task for fileParser in a valid command format."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input the character in the saved file denoting the type of task."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return type of task."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static String getTaskType(char input) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \u0027T\u0027:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return \"todo \";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            //Fallthrough due to return"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return \"deadline \";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            //Fallthrough due to return"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return \"event \";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            //Fallthrough due to return"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            //Returns nothing for traditional tasks. At this position, traditional tasks have"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            //ticks or crosses."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Loads duke.txt at startup by fileParser after fileParser reformats the data"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * in duke.txt into valid commands."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input the augmented data in valid format."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param listCount the number of tasks in the list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param tasks the arraylist of tasks."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return listCount"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int loadFileAtStartup(String input, int listCount, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String commandType \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"DEADLINE\":"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            listCount \u003d TaskList.createDeadline(input, listCount, tasks, true);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"EVENT\":"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            listCount \u003d TaskList.createEvent(input, listCount, tasks, true);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"TODO\":"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                listCount \u003d TaskList.createToDo(input, listCount, tasks, true);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                Ui.displayInvalidCommand();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                listCount \u003d TaskList.createTraditionalTask(input, listCount, tasks, true);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                Ui.displayInvalidCommand();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listCount;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 212
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function returns the time/date as String entered by the user after \"/by\"."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return this.by"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function transforms the task to a String format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return a user friendly sentence about the deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by:\" + by + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function returns the type of task (deadline) as a string format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return in string format the type of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return TaskType.DEADLINE.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 38
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    protected String on;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public Event(String description, String on) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.on \u003d on;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function returns the time/date as String entered by the user after \"/on\"."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return this.on"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return this.on;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function transforms the task to a String format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return a user friendly sentence about the event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return \"[E]\" + super.toString() + \"(on:\" + on + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function returns the type of task (event) as a string format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return in string format the type of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return TaskType.EVENT.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 38
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Returns the raw description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Returns a tick(done) or X(not done) symbol."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return a tick or cross."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //Returns tick or X symbol"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Returns a boolean whether a particular task is done or not."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return isDone a boolean."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public boolean getStatus(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return (isDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public void setAsDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function transforms the task to a String format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return a user friendly sentence about the event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function returns the type of task (traditional task) as a string format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return in string format the type of task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTaskType(){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return TaskType.TRADITIONAL_TASK.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //Returns a rare Ethiopian character instead of null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //to facilitate the find function access to the date section for Deadlines and Events."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //Returning null results in an exception in the find function."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //Expects the user to input in the english language."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return \"\\u1231\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 68
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int deleteTask(String input, ArrayList\u003cTask\u003e tasks, int listCount) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int DELETE_OFFSET \u003d 7;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int ARRAY_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int lastNrPosition \u003d input.length();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String sub \u003d input.substring(DELETE_OFFSET, lastNrPosition);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int position;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            position \u003d Integer.parseInt(sub) - ARRAY_OFFSET;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            position \u003d -1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String taskType \u003d tasks.get(position).getTaskType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            status \u003d tasks.get(position).getStatusIcon();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String taskDescription \u003d tasks.get(position).getDescription();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayRemoveMessage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displaySingleTask(taskDescription, taskType, status, position);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            tasks.remove(position);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            listCount--;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Storage.refreshFile(tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return listCount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayDeleteError();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listCount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Flags a task as done. Takes the positive integer the user inputs and"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * mark the corresponding task as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param tasks the arraylist of tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void flagAsDone(String input, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int IS_DONE_OFFSET \u003d 5;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int lastNrPosition \u003d input.length();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String sub \u003d input.substring(IS_DONE_OFFSET, lastNrPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int position \u003d checkIsDone(sub);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (position !\u003d -1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayTaskDoneMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String taskType \u003d tasks.get(position).getTaskType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String taskDescription \u003d tasks.get(position).getDescription();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String tick \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displaySingleTask(taskDescription, taskType, tick, position);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            tasks.get(position).setAsDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Storage.refreshFile(tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays the task list to the user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param listCount the number of tasks in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param tasks the arraylist of tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayList(int listCount, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        Ui.displayListMessage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        for (i \u003d 0; i \u003c listCount; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayList(i, tasks.get(i).toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays the tasks that corresponds with user input. If the additional"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * input is empty, it prints out the whole list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param listCount the number of tasks in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input the user\u0027s input after \"find \"."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayFind(int listCount, String input) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int IS_FIND_OFFSET \u003d 5;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int lastNrPosition \u003d input.length();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String sub \u003d input.substring(IS_FIND_OFFSET, lastNrPosition);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        Ui.displayFindMessage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        for (i \u003d 0; i \u003c listCount; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            j +\u003d matchResult(i, sub, j);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int matchResult(int taskNumber, String input, int subListCount) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if ((tasks.get(taskNumber).getDescription().contains(input)) ||"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                tasks.get(taskNumber).getTime().contains(input)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayList(subListCount, tasks.get(taskNumber).toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Creates a traditional task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param listCount the number of tasks in the list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param tasks the arraylist of tasks."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param initialize boolean of whether the command is input during startup or by user."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return listCount"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @throws InvalidCommandException command is not valid."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int createTraditionalTask(String input, int listCount, ArrayList\u003cTask\u003e tasks, boolean initialize)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throws InvalidCommandException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //Accepts \"todo\", \"deadline\" and \"event\" without spaces as traditional tasks."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int checkValid \u003d input.compareTo(\"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkValid \u003d\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        tasks.add(listCount, new Task(input));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        Ui.displayTraditionalAddMessage(input);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (!initialize) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Storage.updateFile(tasks.get(listCount));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        listCount++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listCount;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Creates a todo"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param listCount the number of tasks in the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param tasks the arraylist of tasks."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param initialize boolean of whether the command is input during startup or by user."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return listCount"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @throws InvalidCommandException command is not valid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int createToDo(String input, int listCount, ArrayList\u003cTask\u003e tasks, boolean initialize)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throws InvalidCommandException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int TO_DO_OFFSET \u003d 5;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int checkValid \u003d input.compareTo(\"todo \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkValid \u003d\u003d 0) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String inputTaskDescription;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        inputTaskDescription \u003d input.substring(TO_DO_OFFSET);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        tasks.add(listCount, new ToDo(inputTaskDescription));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (!initialize) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Storage.updateFile(tasks.get(listCount));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listInput(listCount, tasks.get(listCount));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Creates a event."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param listCount the number of tasks in the list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param tasks the arraylist of tasks."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param initialize boolean of whether the command is input during startup or by user."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return listCount"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int createEvent(String input, int listCount, ArrayList\u003cTask\u003e tasks, boolean initialize) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int EVENT_OFFSET \u003d 6;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int BY_ON_OFFSET \u003d 3;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int position;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        position \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            checkEventFormat(input);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (InvalidFormatException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayInvalidFormat();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return listCount;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayInvalidCommand();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return listCount;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String inputTaskDescription \u003d input.substring(EVENT_OFFSET, position);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String on \u003d input.substring(position + BY_ON_OFFSET);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        tasks.add(listCount, new Event(inputTaskDescription, on));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (!initialize) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Storage.updateFile(tasks.get(listCount));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listInput(listCount, tasks.get(listCount));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Checks whether the format of Event is valid."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input input by the user."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @throws InvalidCommandException invalid command entered."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @throws InvalidFormatException invalid format entered."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void checkEventFormat(String input)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throws InvalidCommandException, InvalidFormatException{"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int INVALID \u003d 0;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int checkValid \u003d input.compareTo(\"event \");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkValid \u003d\u003d INVALID) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int EVENT_OFFSET \u003d 6;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int BY_ON_OFFSET \u003d 3;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int position;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        position \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String checkMinInputFormat \u003d checkSlash(input, position);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isValidFormat \u003d checkFormat(checkMinInputFormat, input,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                position, true);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (position \u003d\u003d EVENT_OFFSET || !isValidFormat) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidFormatException();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String checkDate \u003d input.substring(position + BY_ON_OFFSET + 1);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            boolean isEmpty \u003d checkDate.isEmpty();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (isEmpty) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                throw new InvalidFormatException();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Checks whether user inputs a slash in a event or deadline."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input user\u0027s input."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param position the position of the slash in the string."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return the position of the slash, or -1 if no slash found."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static String checkSlash(String input, int position) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int SLASH_NOT_FOUND \u003d -1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final String INVALID_INPUT \u003d \"INV\";"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (position !\u003d SLASH_NOT_FOUND) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return input.substring(position);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return INVALID_INPUT;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Checks the format of deadline and event tasks, specifically whether"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * the user entered \"/by \" for deadlines or \"/on \" for events."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param checkLength the substring containing the keywords with the slash"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input the user\u0027s input."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param position position of the slash."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param isEvent whether the task is a event. If false, the task is a deadline."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return true if the keywords are found, and false if the keywords are not found."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static boolean checkFormat(String checkLength, String input,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            int position, boolean isEvent) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int BY_ON_OFFSET \u003d 3;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int FORMAT_OFFSET \u003d 4;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkLength.length() \u003e\u003d FORMAT_OFFSET) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String checkFormat \u003d input.substring(position, position + BY_ON_OFFSET + 1);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (isEvent) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                return checkFormat.equalsIgnoreCase(\"/on \");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                return checkFormat.equalsIgnoreCase(\"/by \");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Checks whether the format of Deadline is valid."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input input by the user."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @throws InvalidCommandException invalid command entered."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @throws InvalidFormatException invalid format entered."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void checkDeadlineFormat(String input)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throws InvalidCommandException, InvalidFormatException {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int INVALID \u003d 0;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int checkValid \u003d input.compareTo(\"deadline \");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkValid \u003d\u003d INVALID) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int BY_ON_OFFSET \u003d 3;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int DEADLINE_OFFSET \u003d 9;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int position;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        position \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String checkMinInputFormat \u003d checkSlash(input, position);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isValidFormat \u003d checkFormat(checkMinInputFormat, input,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                position, false);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (position \u003d\u003d DEADLINE_OFFSET || !isValidFormat) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidFormatException();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String checkDate \u003d input.substring(position + BY_ON_OFFSET + 1);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            boolean isEmpty \u003d checkDate.isEmpty();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (isEmpty) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                throw new InvalidFormatException();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Creates a deadline."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param listCount the number of tasks in the list."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param tasks the arraylist of tasks."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param initialize boolean of whether the command is input during startup or by user."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return listCount"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int createDeadline(String input, int listCount, ArrayList\u003cTask\u003e tasks, boolean initialize) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int BY_ON_OFFSET \u003d 3;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int DEADLINE_OFFSET \u003d 9;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int position;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        position \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            checkDeadlineFormat(input);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (InvalidFormatException e) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayInvalidFormat();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return listCount;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayInvalidCommand();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return listCount;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String inputTaskDescription \u003d input.substring(DEADLINE_OFFSET, position);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String by \u003d input.substring(position + BY_ON_OFFSET);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        tasks.add(listCount, new Deadline(inputTaskDescription, by));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (!initialize) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Storage.updateFile(tasks.get(listCount));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listInput(listCount, tasks.get(listCount));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int listInput(int listCount, Task task) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        Ui.displayAddMessage();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        Ui.displayTask(task.toString());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        listCount++;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        Ui.displayNumberMessage(listCount);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listCount;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function checks whether the task is already marked done."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * It returns the number of the task, or -1 if the task is already"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * done or the input is not valid."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param sub a substring of the input."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return whether there is an error."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int checkIsDone(String sub){"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int ARRAY_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            int position \u003d Integer.parseInt(sub) - ARRAY_OFFSET;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            boolean alreadyDone \u003d tasks.get(position).getStatus();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (alreadyDone) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                Ui.displayTaskAlreadyDoneMessage();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return position;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayTaskErrorMessage();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            Ui.displayNotNumberErrorMessage();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 375
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    DEADLINE, EVENT, TODO, TRADITIONAL_TASK"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 5
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function transforms the task to a String format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return a user friendly sentence about the event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * This function returns the type of task (todo) as a string format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @return in string format the type of task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return TaskType.TODO.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 26
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays the welcome message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayWelcomeMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays the task removal message. Used during task deletion."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayRemoveMessage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays error message, when the supplied task number to the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * delete function is not valid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayDeleteError() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Invalid task number or input is not a number. No items are deleted.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays message stating task is already marked as done previously."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayTaskAlreadyDoneMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"This task is already done!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays message for use while marking a task as done."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayTaskDoneMessage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays error message, when number supplied to \"mark as done\" function is not valid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayTaskErrorMessage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Invalid task number or task does not exist. Please try again.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays the top message before the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayListMessage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays the message during addition of tasks, except for traditional tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayAddMessage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays the message during addition of traditional tasks."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayTraditionalAddMessage(String input) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Added: \" + input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays the number of tasks in the list, during addition of tasks"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * except traditional tasks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param listCount number of tasks in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayNumberMessage(int listCount) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Now you have \" + listCount + \" tasks in the list.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays error message when a number is expected but a non-number is entered."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * E.g. \"done t\" where done expects a number but \"t\" is not a number."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayNotNumberErrorMessage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Please Enter a number!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays the bye message before program exits."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayByeMessage() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayFileNotFoundError() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"File not found error.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays the traditional tasks in a human readable form."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param status whether the task is done, in tick or cross."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param description task description."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayTraditionalTask(String status, String description) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"  [\" + status + \"] \" + description);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays the deadlines in a human readable form."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param status whether the task is done, in tick or cross."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param description task description."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param by date and/or time specified by user."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayDeadline(String status, String description, String by) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"  [D][\" + status + \"] \" + description + \"(by:\" + by + \")\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays the events in a human readable form."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param status whether the task is done, in tick or cross."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param description task description."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param on date and/or time specified by user."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayEvent(String status, String description, String on) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"  [E][\" + status + \"] \" + description + \"(on:\" + on + \")\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays the todos in a human readable form."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param status whether the task is done, in tick or cross."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param description task description."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayToDo(String status, String description) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"  [T][\" + status + \"] \" + description);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Prints out the list of tasks."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param number the number of the corresponding task."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param info the description and date/time of the task where applicable."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayList(int number, String info) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int ARRAY_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(number + ARRAY_OFFSET + \". \" + info);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayFindMessage() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayTask(String info) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"  \" + info);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays error message when command entered is invalid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayInvalidCommand() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Invalid command.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays error message when command syntax entered is invalid."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayInvalidFormat() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Invalid format. Please check your syntax.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays error message related to duke.txt."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayIoError() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"I/O error. File not found or corrupt.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayMakeFileError(String input) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Unable to create file! Reason: \" + input);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays message when duke.txt exists."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayFilePresentMessage() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"duke.txt exists! Loading file contents...\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * Displays various messages when duke.txt is not found."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param directory the directory that does has duke.txt created."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     * @param isFileMade boolean indicating duke.txt is successfully created."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0426051"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayFileNotPresentMessage(String directory, boolean isFileMade) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (isFileMade) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"duke.txt does NOT exist. A new file has been created.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"duke.txt has been created at: \" + directory);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"WARNING: Please do not move or delete duke.txt.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"There is a problem preventing duke.txt from being created.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayFileLocation(String input) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"duke.txt is located at \" + input);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displaySingleTask(String taskDescription, String taskType, String status, int position){"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String temp;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //Traditional tasks are tasks specified in Level-2"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"TRADITIONAL_TASK\":"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            displayTraditionalTask(status, taskDescription);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"DEADLINE\":"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            temp \u003d TaskList.tasks.get(position).getTime();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            displayDeadline(status, taskDescription, temp);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"EVENT\":"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            temp \u003d TaskList.tasks.get(position).getTime();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            displayEvent(status, taskDescription, temp);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        case \"TODO\":"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            displayToDo(status, taskDescription);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 234
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "traditionaltask1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "todo task2"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "deadline task3 /by time1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "event task 4 /on time2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "e0426051": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "C:\\Users\\admin\\Downloads\\openjdk-11.0.2_windows-x64_bin\\jdk-11.0.2\\bin\\javac.exe -cp C:\\Users\\admin\\Desktop\\iP\\src -Xlint:none -d C:\\Users\\admin\\Desktop\\iP\\bin C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\duke.java C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\Deadline.java C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\Event.java C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\Task.java C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\Todo.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "\tpause"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath C:\\Users\\admin\\Desktop\\iP\\bin duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "pause"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0426051": 6,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin sample.Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "e0426051": 1,
      "-": 37
    }
  }
]
