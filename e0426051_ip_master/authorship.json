[
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "df"
      }
    ],
    "authorContributionMap": {
      "e0426051": 1
    }
  },
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import Duke.Exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import Duke.Exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import Duke.Tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import Duke.Tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import Duke.Tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import Duke.Tasks.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import Duke.Tasks.TaskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int byeIndicator \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int listIndicator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int listCount \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isDeadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isToDo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isDelete;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int PRESENT \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        listCount \u003d fetchFile(listCount, tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        displayWelcomeMessage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        while(byeIndicator !\u003d PRESENT) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            input \u003d scan.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            byeIndicator \u003d input.compareToIgnoreCase(\"bye\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            listIndicator \u003d input.compareToIgnoreCase(\"list\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isDone \u003d input.startsWith(\"done \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isDeadline \u003d input.startsWith(\"deadline \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isEvent \u003d input.startsWith(\"event \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isToDo \u003d input.startsWith(\"todo \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isDelete \u003d input.startsWith(\"delete \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (byeIndicator \u003d\u003d PRESENT) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                displayByeMessage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } else if (listIndicator \u003d\u003d PRESENT) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                displayList(listCount, tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } else if (isDone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                flagAsDone(input, tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } else if (isDelete) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                listCount \u003d deleteTask(input, tasks, listCount);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                if (isDeadline) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        listCount \u003d createDeadline(input, listCount, tasks, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    } catch (InvalidFormatException | InvalidCommandException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                } else if (isEvent) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        listCount \u003d createEvent(input, listCount, tasks, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    } catch (InvalidFormatException | InvalidCommandException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                } else if (isToDo) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        listCount \u003d createToDo(input, listCount, tasks, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        listCount \u003d createTraditionalTask(input, listCount, tasks, false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayWelcomeMessage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int deleteTask(String input, ArrayList\u003cTask\u003e tasks, int listCount) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int DELETE_OFFSET \u003d 7;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int ARRAY_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //final int TODO \u003d 3;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //final int EVENT \u003d 2;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //final int DEADLINE \u003d 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //Traditional tasks are tasks specified in Level-2"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //final int TRADITIONAL_TASK \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int lastNrPosition \u003d input.length();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String sub \u003d input.substring(DELETE_OFFSET, lastNrPosition);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String status;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String temp;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            i \u003d Integer.parseInt(sub) - ARRAY_OFFSET;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"Invalid task number. No items are deleted.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"Please enter a number!\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String taskType \u003d tasks.get(i).getTaskType();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            status \u003d tasks.get(i).getStatusIcon();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            case \"TRADITIONAL_TASK\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"  [\" + status + \"] \" + tasks.get(i).getDescription());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            case \"DEADLINE\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                temp \u003d tasks.get(i).getTime();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"  [D][\" + status + \"] \" + tasks.get(i).getDescription() + \"(by:\" + temp + \")\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            case \"EVENT\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                temp \u003d tasks.get(i).getTime();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"  [E][\" + status + \"] \" + tasks.get(i).getDescription() + \"(on:\" + temp + \")\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            case \"TODO\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"  [T][\" + status + \"] \" + tasks.get(i).getDescription());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            tasks.remove(i);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            listCount--;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return listCount;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"Invalid task number. No items are deleted.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listCount;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void flagAsDone(String input, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int IS_DONE_OFFSET \u003d 5;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int ARRAY_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //final int TODO \u003d 3;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //final int EVENT \u003d 2;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //final int DEADLINE \u003d 1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //final int TRADITIONAL_TASK \u003d 0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int lastNrPosition \u003d input.length();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String sub \u003d input.substring(IS_DONE_OFFSET, lastNrPosition);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String temp;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            i \u003d Integer.parseInt(sub) - ARRAY_OFFSET;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            boolean alreadyDone \u003d tasks.get(i).getStatus();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (alreadyDone) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"This task is already done!\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            //Does not show message since the function will continue to run to the bottom"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"Please Enter a number!\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String taskType \u003d tasks.get(i).getTaskType();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            case \"TRADITIONAL_TASK\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"  [\" + \"\\u2713\" + \"] \" + tasks.get(i).getDescription());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            case \"DEADLINE\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                temp \u003d tasks.get(i).getTime();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"  [D][\" + \"\\u2713\" + \"] \" + tasks.get(i).getDescription() + \"(by:\" + temp + \")\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            case \"EVENT\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                temp \u003d tasks.get(i).getTime();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"  [E][\" + \"\\u2713\" + \"] \" + tasks.get(i).getDescription() + \"(on:\" + temp + \")\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            case \"TODO\":"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"  [T][\" + \"\\u2713\" + \"] \" + tasks.get(i).getDescription());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            tasks.get(i).markAsDone();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"Invalid task number or task does not exist. Please try again.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayList(int listCount, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int ARRAY_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        for (i \u003d 0; i \u003c listCount; i++) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (tasks.get(i).getDescription() !\u003d null) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(i + ARRAY_OFFSET + \". \" + tasks.get(i).toString());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int createTraditionalTask(String input, int listCount, ArrayList\u003cTask\u003e tasks, boolean initialize)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throws InvalidCommandException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //Accepts \"todo\", \"deadline\" and \"event\" without spaces as traditional tasks."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int checkValid \u003d input.compareTo(\"\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkValid \u003d\u003d 0) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidCommandException(\"Invalid command.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        tasks.add(listCount, new Task(input));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        listCount++;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Added: \" + input);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (!initialize) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            updateFile(input);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listCount;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int createToDo(String input, int listCount, ArrayList\u003cTask\u003e tasks, boolean initialize)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throws InvalidCommandException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int TO_DO_OFFSET \u003d 5;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int checkValid \u003d input.compareTo(\"todo \");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkValid \u003d\u003d 0) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidCommandException(\"Invalid command. \" +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \"If you wish to create a todo with a single space as description, \" +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \"please enter 2 spaces.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String inputTaskDescription;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        inputTaskDescription \u003d input.substring(TO_DO_OFFSET);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        tasks.add(listCount, new Todo(inputTaskDescription));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (!initialize) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            updateFile(input);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listInput(listCount, tasks.get(listCount));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int createEvent(String input, int listCount, ArrayList\u003cTask\u003e tasks, boolean initialize)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throws InvalidFormatException, InvalidCommandException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int INVALID \u003d 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int checkValid \u003d input.compareTo(\"event \");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkValid \u003d\u003d INVALID) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidCommandException(\"Invalid command. \" +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \"If you wish to create a event with a single space as description, \" +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \"please enter 2 spaces.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int EVENT_OFFSET \u003d 6;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int BY_ON_OFFSET \u003d 3;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int SLASH_ON_SPACE_OFFSET \u003d 4;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int SLASH_NOT_FOUND \u003d -1;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final String INVALID_INPUT \u003d \"INV\";"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String on;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String inputTaskDescription;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        i \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String checkMinInputFormat;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (i !\u003d SLASH_NOT_FOUND) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            checkMinInputFormat \u003d input.substring(i);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            checkMinInputFormat \u003d INVALID_INPUT;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isValidFormat;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkMinInputFormat.length() \u003e\u003d SLASH_ON_SPACE_OFFSET) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String checkFormat \u003d input.substring(i, i + BY_ON_OFFSET + 1);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isValidFormat \u003d checkFormat.equalsIgnoreCase(\"/on \");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isValidFormat \u003d false;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (i \u003d\u003d EVENT_OFFSET) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidFormatException(\"Invalid format. Event cannot be empty.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else if (!isValidFormat) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidFormatException(\"Invalid format. \" +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \"Please check you have entered \\\"/on \\\" properly.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String checkDate \u003d input.substring(i + BY_ON_OFFSET + 1);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            boolean isEmpty \u003d checkDate.isEmpty();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (isEmpty) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                throw new InvalidFormatException(\"Invalid format. \" +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        \"Please check you have entered a non-empty date/time.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        inputTaskDescription \u003d input.substring(EVENT_OFFSET, i);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        on \u003d input.substring(i + BY_ON_OFFSET);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        tasks.add(listCount, new Event(inputTaskDescription, on));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (!initialize) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            updateFile(input);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listInput(listCount, tasks.get(listCount));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int createDeadline(String input, int listCount, ArrayList\u003cTask\u003e tasks, boolean initialize)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throws InvalidFormatException, InvalidCommandException {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int INVALID \u003d 0;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int checkValid \u003d input.compareTo(\"deadline \");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkValid \u003d\u003d INVALID) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidCommandException(\"Invalid command.\" +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \" If you wish to create a deadline with a single space as description, \" +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \"please enter 2 spaces.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int BY_ON_OFFSET \u003d 3;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int DEADLINE_OFFSET \u003d 9;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int SLASH_BY_SPACE_OFFSET \u003d 4;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int SLASH_NOT_FOUND \u003d -1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final String INVALID_INPUT \u003d \"INV\";"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String by;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String inputTaskDescription;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        i \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String checkMinInputFormat;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (i !\u003d SLASH_NOT_FOUND) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            checkMinInputFormat \u003d input.substring(i);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            checkMinInputFormat \u003d INVALID_INPUT;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isValidFormat;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkMinInputFormat.length() \u003e\u003d SLASH_BY_SPACE_OFFSET) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String checkFormat \u003d input.substring(i, i + BY_ON_OFFSET + 1);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isValidFormat \u003d checkFormat.equalsIgnoreCase(\"/by \");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isValidFormat \u003d false;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (i \u003d\u003d DEADLINE_OFFSET) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidFormatException(\"Invalid format. Deadline cannot be empty.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else if (!isValidFormat) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidFormatException(\"Invalid format. \" +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \"Please check you have entered \\\"/by \\\" properly.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String checkDate \u003d input.substring(i + BY_ON_OFFSET + 1);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            boolean isEmpty \u003d checkDate.isEmpty();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (isEmpty) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                throw new InvalidFormatException(\"Invalid format. \" +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        \"Please check you have entered a non-empty date/time.\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        inputTaskDescription \u003d input.substring(DEADLINE_OFFSET, i);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        by \u003d input.substring(i + BY_ON_OFFSET);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        tasks.add(listCount, new Deadline(inputTaskDescription, by));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (!initialize) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            updateFile(input);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listInput(listCount, tasks.get(listCount));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int listInput(int listCount, Task task) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"  \" + task.toString());"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        listCount++;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Now you have \" + listCount + \" tasks in the list.\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listCount;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayByeMessage() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    //Does not save the done status. Does not support delete."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int fetchFile(int listCount, ArrayList\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        createFile(new File(\"./duke.txt\"));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        File f \u003d new File(\"./duke.txt\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //f \u003d new File(\"./duke.txt\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        Scanner sc \u003d null;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String temp;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            temp \u003d sc.nextLine();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            listCount \u003d loadFile(temp, listCount, tasks);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //empties current file so to support \"deletion\""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //DANGEROUS IMPLEMENTATION. If \"bye\" not ran on runtime ALL DATA LOST. TO FIX."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //If no clear, then tasks pile up. However, if clear, then previous tasks not deleted will"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //be missing. To FIX."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //TODO implement support for DONE."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            FileWriter clearCurrentFile \u003d new FileWriter(\"./duke.txt\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            clearCurrentFile.close();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listCount;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int loadFile(String input, int listCount, ArrayList\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isDeadline;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isEvent;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isToDo;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        isDeadline \u003d input.startsWith(\"deadline \");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        isEvent \u003d input.startsWith(\"event \");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        isToDo \u003d input.startsWith(\"todo \");"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (isDeadline) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                listCount \u003d createDeadline(input, listCount, tasks, true);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } catch (InvalidFormatException | InvalidCommandException e) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else if (isEvent) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                listCount \u003d createEvent(input, listCount, tasks, true);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } catch (InvalidFormatException | InvalidCommandException e) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else if (isToDo) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                listCount \u003d createToDo(input, listCount, tasks, true);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                listCount \u003d createTraditionalTask(input, listCount, tasks, true);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listCount;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void updateFile(String input){"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            FileWriter dukeSave \u003d new FileWriter(\"./duke.txt\", true);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            BufferedWriter duke \u003d new BufferedWriter(dukeSave);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            duke.write(input);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            duke.newLine();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            duke.close();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void createFile(File duke) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (duke.exists()) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"duke.txt exists\");"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (!duke.getParentFile().exists()) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                duke.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            duke.createNewFile();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"Unable to create file; reason: \" + e.getMessage());"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 448,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Duke/Exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package Duke.Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 7
    }
  },
  {
    "path": "src/main/java/Duke/Exceptions/InvalidFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package Duke.Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class InvalidFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public InvalidFormatException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 7
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by:\" + by + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return TaskType.DEADLINE.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 26
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    protected String on;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public Event(String description, String on) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.on \u003d on;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return this.on;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return \"[E]\" + super.toString() + \"(on:\" + on + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return TaskType.EVENT.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 26
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //Returns tick or X symbol"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public boolean getStatus(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return (isDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTaskType(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return TaskType.TRADITIONAL_TASK.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //Does nothing, meant for subclass usage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 42
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import Duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    DEADLINE, EVENT, TODO, TRADITIONAL_TASK"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 7
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    TaskType TODO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return TaskType.TODO.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 20
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "traditionaltask1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "todo task2"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "deadline task3 /by time1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "event task 4 /on time2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "e0426051": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "C:\\Users\\admin\\Downloads\\openjdk-11.0.2_windows-x64_bin\\jdk-11.0.2\\bin\\javac.exe -cp C:\\Users\\admin\\Desktop\\iP\\src -Xlint:none -d C:\\Users\\admin\\Desktop\\iP\\bin C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\Duke.java C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\Deadline.java C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\Event.java C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\Task.java C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\Todo.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "\tpause"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath C:\\Users\\admin\\Desktop\\iP\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "pause"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0426051": 6,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin sample.Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "e0426051": 1,
      "-": 37
    }
  }
]
