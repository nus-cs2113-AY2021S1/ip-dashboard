[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by:\" + by + \")\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public int getTaskType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 24
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int byeIndicator \u003d 1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int listIndicator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int listCount \u003d 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isDeadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int PRESENT \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        Task[] tasks \u003d new Task[100];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        displayWelcomeMessage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        while(byeIndicator !\u003d PRESENT) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            input \u003d scan.nextLine();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            byeIndicator \u003d input.compareToIgnoreCase(\"bye\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            listIndicator \u003d input.compareToIgnoreCase(\"list\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isDone \u003d input.startsWith(\"done \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isDeadline \u003d input.startsWith(\"deadline \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isEvent \u003d input.startsWith(\"event \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isToDo \u003d input.startsWith(\"todo \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (byeIndicator \u003d\u003d PRESENT) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                displayByeMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } else if (listIndicator \u003d\u003d PRESENT) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                displayList(listCount, tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } else if (isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                flagAsDone(input, tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } else if (listCount \u003d\u003d 100) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                displayMaxTaskMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                if (isDeadline) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        listCount \u003d createDeadline(input, listCount, tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    } catch (InvalidFormatException | InvalidCommandException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                } else if (isEvent) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        listCount \u003d createEvent(input, listCount, tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    } catch (InvalidFormatException | InvalidCommandException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                } else if (isToDo) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        listCount \u003d createToDo(input, listCount, tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        listCount \u003d createTraditionalTask(input, listCount, tasks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayMaxTaskMessage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"You have entered 100 tasks in Duke. Please reset Duke to enter new tasks.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayWelcomeMessage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void flagAsDone(String input, Task[] tasks) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int IS_DONE_OFFSET \u003d 5;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int ARRAY_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int TODO \u003d 3;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int EVENT \u003d 2;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int DEADLINE \u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //Traditional tasks are tasks specified in Level-2"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int TRADITIONAL_TASK \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int lastNrPosition \u003d input.length();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String sub \u003d input.substring(IS_DONE_OFFSET, lastNrPosition);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        i \u003d Integer.parseInt(sub) - ARRAY_OFFSET;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            boolean alreadyDone \u003d tasks[i].getStatus();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (alreadyDone \u003d\u003d true) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"This task is already done!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            //Does not show message since the function will continue to run to the bottom"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            int taskType \u003d tasks[i].getTaskType();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (taskType \u003d\u003d TRADITIONAL_TASK) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"  [\" + \"\\u2713\" + \"] \" + tasks[i].getDescription());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } else if (taskType \u003d\u003d DEADLINE) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                String temp \u003d tasks[i].getTime();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"  [D][\" + \"\\u2713\" + \"] \" + tasks[i].getDescription() + \"(by:\" + temp + \")\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } else if (taskType \u003d\u003d EVENT) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                String temp \u003d tasks[i].getTime();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"  [E][\" + \"\\u2713\" + \"] \" + tasks[i].getDescription() + \"(on:\" + temp + \")\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            } else if (taskType \u003d\u003d TODO) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(\"  [T][\" + \"\\u2713\" + \"] \" + tasks[i].getDescription());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            tasks[i].markAsDone();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"Invalid task number. Please try again.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            System.out.println(\"Task does not exist. Please try again.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayList(int listCount, Task[] tasks) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int ARRAY_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        for (i \u003d 0; i \u003c listCount; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (tasks[i].getDescription() !\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                System.out.println(i + ARRAY_OFFSET + \". \" + tasks[i].toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int createTraditionalTask(String input, int listCount, Task[] tasks)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throws InvalidCommandException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //Accepts \"todo\", \"deadline\" and \"event\" without spaces as traditional tasks."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int checkValid \u003d input.compareTo(\"\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkValid \u003d\u003d 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidCommandException(\"Invalid command.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        tasks[listCount] \u003d new Task(input);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        listCount++;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Added: \" + input);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listCount;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int createToDo(String input, int listCount, Task[] tasks)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throws InvalidCommandException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int TO_DO_OFFSET \u003d 5;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int checkValid \u003d input.compareTo(\"todo \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkValid \u003d\u003d 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidCommandException(\"Invalid command. \" +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \"If you wish to create a todo with a single space as description, \" +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \"please enter 2 spaces.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String inputTaskDescription;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        inputTaskDescription \u003d input.substring(TO_DO_OFFSET);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        tasks[listCount] \u003d new Todo(inputTaskDescription);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listInput(listCount, tasks[listCount]);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int createEvent(String input, int listCount, Task[] tasks)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throws InvalidFormatException, InvalidCommandException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int INVALID \u003d 0;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int checkValid \u003d input.compareTo(\"event \");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkValid \u003d\u003d INVALID) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidCommandException(\"Invalid command. \" +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \"If you wish to create a event with a single space as description, \" +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \"please enter 2 spaces.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int EVENT_OFFSET \u003d 6;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int BY_ON_OFFSET \u003d 3;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int SLASH_ON_SPACE_OFFSET \u003d 4;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int SLASH_NOT_FOUND \u003d -1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final String INVALID_INPUT \u003d \"INV\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String on;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String inputTaskDescription;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        i \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String checkMinInputFormat;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (i !\u003d SLASH_NOT_FOUND) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            checkMinInputFormat \u003d input.substring(i);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            checkMinInputFormat \u003d INVALID_INPUT;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isValidFormat;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkMinInputFormat.length() \u003e\u003d SLASH_ON_SPACE_OFFSET) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String checkFormat \u003d input.substring(i, i + BY_ON_OFFSET + 1);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isValidFormat \u003d checkFormat.equalsIgnoreCase(\"/on \");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isValidFormat \u003d false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (i \u003d\u003d EVENT_OFFSET) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidFormatException(\"Invalid format. Event cannot be empty.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else if (!isValidFormat) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidFormatException(\"Invalid format. \" +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \"Please check you have entered \\\"/on \\\" properly.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String checkDate \u003d input.substring(i + BY_ON_OFFSET + 1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            boolean isEmpty \u003d checkDate.isEmpty();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (isEmpty) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                throw new InvalidFormatException(\"Invalid format. \" +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        \"Please check you have entered a non-empty date/time.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        inputTaskDescription \u003d input.substring(EVENT_OFFSET, i);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        on \u003d input.substring(i + BY_ON_OFFSET);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        tasks[listCount] \u003d new Event(inputTaskDescription, on);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listInput(listCount, tasks[listCount]);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int createDeadline(String input, int listCount, Task[] tasks)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throws InvalidFormatException, InvalidCommandException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int INVALID \u003d 0;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int checkValid \u003d input.compareTo(\"deadline \");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkValid \u003d\u003d INVALID) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidCommandException(\"Invalid command.\" +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \" If you wish to create a deadline with a single space as description, \" +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \"please enter 2 spaces.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int BY_ON_OFFSET \u003d 3;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int DEADLINE_OFFSET \u003d 9;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int SLASH_BY_SPACE_OFFSET \u003d 4;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final int SLASH_NOT_FOUND \u003d -1;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        final String INVALID_INPUT \u003d \"INV\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String by;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String inputTaskDescription;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        i \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        String checkMinInputFormat;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (i !\u003d SLASH_NOT_FOUND) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            checkMinInputFormat \u003d input.substring(i);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            checkMinInputFormat \u003d INVALID_INPUT;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        boolean isValidFormat;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (checkMinInputFormat.length() \u003e\u003d SLASH_BY_SPACE_OFFSET) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String checkFormat \u003d input.substring(i, i + BY_ON_OFFSET + 1);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isValidFormat \u003d checkFormat.equalsIgnoreCase(\"/by \");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            isValidFormat \u003d false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        if (i \u003d\u003d DEADLINE_OFFSET) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidFormatException(\"Invalid format. Deadline cannot be empty.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else if (!isValidFormat) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            throw new InvalidFormatException(\"Invalid format. \" +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                    \"Please check you have entered \\\"/by \\\" properly.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            String checkDate \u003d input.substring(i + BY_ON_OFFSET + 1);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            boolean isEmpty \u003d checkDate.isEmpty();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            if (isEmpty) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                throw new InvalidFormatException(\"Invalid format. \" +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0426051"
        },
        "content": "                        \"Please check you have entered a non-empty date/time.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0426051"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        inputTaskDescription \u003d input.substring(DEADLINE_OFFSET, i);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        by \u003d input.substring(i + BY_ON_OFFSET);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        tasks[listCount] \u003d new Deadline(inputTaskDescription, by);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listInput(listCount, tasks[listCount]);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static int listInput(int listCount, Task task) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"  \" + task.toString());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        listCount++;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Now you have \" + listCount + \" tasks in the list.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return listCount;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public static void displayByeMessage() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 261,
      "-": 11
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    protected String on;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public Event(String description, String on) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.on \u003d on;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return this.on;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return \"[E]\" + super.toString() + \"(on:\" + on + \")\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public int getTaskType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 24
    }
  },
  {
    "path": "src/main/java/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 5
    }
  },
  {
    "path": "src/main/java/InvalidFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class InvalidFormatException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public InvalidFormatException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 5
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //Returns tick or X symbol"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public boolean getStatus(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return (isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public int getTaskType(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        //Does nothing, meant for subclass usage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 40
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    public int getTaskType() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0426051"
        },
        "content": "        return 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0426051"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0426051"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0426051": 16
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0426051"
        },
        "content": "traditionaltask1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0426051"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0426051"
        },
        "content": "todo task2"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0426051"
        },
        "content": "deadline task3 /by time1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0426051"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0426051"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0426051"
        },
        "content": "event task 4 /on time2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0426051"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0426051"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0426051"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "e0426051": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0426051"
        },
        "content": "C:\\Users\\admin\\Downloads\\openjdk-11.0.2_windows-x64_bin\\jdk-11.0.2\\bin\\javac.exe -cp C:\\Users\\admin\\Desktop\\iP\\src -Xlint:none -d C:\\Users\\admin\\Desktop\\iP\\bin C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\Duke.java C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\Deadline.java C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\Event.java C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\Task.java C:\\Users\\admin\\Desktop\\iP\\src\\main\\java\\Todo.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0426051"
        },
        "content": "\tpause"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0426051"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath C:\\Users\\admin\\Desktop\\iP\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0426051"
        },
        "content": "pause"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0426051"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0426051": 6,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0426051"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin sample.Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "e0426051": 1,
      "-": 37
    }
  }
]
