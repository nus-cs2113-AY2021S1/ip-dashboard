[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import duke.util.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import duke.util.IO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import duke.util.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static duke.util.ErrorChecker.verifyCmd;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * The main class Duke. Only has Main and Stop methods. The main event loop happens here."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Gracefully shuts down Duke. Updates the boolean that tells the main event loop to stop."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Checks if the user has any unsaved changes. If so, it will prevent shutdown unless it\u0027s a force quit."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param hasSaved  boolean check for unsaved changes"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param forceQuit boolean for force quit"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return exit condition of main event loop"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static boolean stop(boolean hasSaved, boolean forceQuit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!(hasSaved || forceQuit)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            UI.reply(new String[]{\"Hold on! You have unsaved changes!\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                                  \"Type \u0027save \u003cfilename\u003e\u0027 to save your changes if you want to.\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                                  \"Otherwise, type \u0027bye /force\u0027 to exit without saving.\"});"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (forceQuit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                UI.reply(new String[]{\"Discarding changes...\",\"Bye. Hope to see you again soon!\"});"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                UI.reply(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * The entry point of application. Main event loop also happens here."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * The Parser instance is used to get user input and it returns a Command object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * The Command object, which stores information from the user in an accessible interface,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * is then used to pass information to the switch statement that holds the command logic."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param args the input arguments"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String[] greetings \u003d {\"Hello! I\u0027m Duke\", \"What can I do for you?\"};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        UI.reply(greetings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        boolean endLoop \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Command latestCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // MAIN EVENT LOOP:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        while (!endLoop) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            parser.getInput();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            latestCommand \u003d parser.parseCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // For debugging:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (UI.getDebugMode()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                latestCommand.debug();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                verifyCmd(latestCommand, taskList.getTaskCount());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                UI.error(e, \"Command entered is invalid!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // Switch handles all commands"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            switch(latestCommand.getCommand()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // UTILITIES"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            //"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            case \"bye\": // Exit condition is here"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                // Check whether no changes to save or whether user force quit"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                endLoop \u003d stop(taskList.checkWhetherSaved(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                               latestCommand.getArgument(0).equals(\"/force\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            case \"list\": // List all tasks"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                taskList.showTaskList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            case \"debug\": // Toggle debug mode"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                UI.toggleDebug();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                UI.reply(\"Toggled debug mode to: \" + UI.getDebugMode());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // MANAGING TASKS"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            //"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            case \"todo\": // Add a task to the task list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                // FALLTHROUGH"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            case \"deadline\": // Add a task to the task list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                // FALLTHROUGH"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            case \"event\": // Add a task to the task list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                taskList.addTask(latestCommand, false); // false for non-silent"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            case \"delete\": // Delete a task"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                taskList.deleteTask(latestCommand.getArgument(0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            case \"done\": // Complete a task"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                taskList.completeTask(latestCommand.getArgument(0));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // SAVING AND LOADING"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            //"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            case \"save\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                taskList.saveTasks(latestCommand.getArgument(0));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            case \"load\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                // if there are no tasks or user has already specified /YES to overwrite current tasks,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                if (taskList.getTaskCount() \u003d\u003d 0 ||"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        (latestCommand.getArgCount() \u003e\u003d 2 \u0026\u0026"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        latestCommand.getArgument(1).equals(\"YES\"))) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    // clear then load tasks"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    taskList.clearAllTasks();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    taskList.loadTasks(latestCommand.getArgument(0));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    // else, alert the user"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    UI.reply(new String[]{\"Are you sure? This will replace all your current tasks.\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                                          \"If you\u0027re sure, type load \u003cfilename\u003e /YES.\"});"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            case \"showsaves\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                IO.showSaves();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // UNKNOWN COMMAND"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            //"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                UI.error(\"Command not recognised! Please try again...\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 142,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * The type Deadline, which extends Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Characterised by the \u0027by\u0027 attribute."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    protected String token \u003d \"[D]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Instantiates a new Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newName the name (description) of the deadline task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param by      the date by which to complete it"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param isDone  whether the task is complete"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Deadline(String newName, String by, boolean isDone){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        super(newName, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Gets the \u0027by\u0027 date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Sets the \u0027by\u0027 date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param by the date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setBy(String by) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Converts the task into string form for listing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return super.toString(\"[D]\") + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Converts the task back into command form for storage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return \"deadline \" + super.toCommand() + \" /by \" + by + (isDone ? \" /done\" : \"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 56
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * The type Event, which extends Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Characterised by the \u0027at\u0027 attribute."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    protected String token \u003d \"[E]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Instantiates a new Event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newName the name (description) of the Event task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param at      the start-end time period"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param isDone  whether the task is complete"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Event(String newName, String at, boolean isDone){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        super(newName, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Gets the \u0027by\u0027 date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the by"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Sets the \u0027at\u0027 time period."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param at the time period"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setAt(String at) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Converts the task into string form for listing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return super.toString(\"[E]\") + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Converts the task back into command form for storage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return \"event \" + super.toCommand() + \" /at \" + at + (isDone ? \" /done\" : \"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 56
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static duke.util.UI.tick;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static duke.util.UI.cross;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * The practically abstract type Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Holds all the base attributes and methods for its child classes To-do, Event, and Deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Instantiates a new Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newName the name (description) of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param isDone  whether the task is complete"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Task(String newName, boolean isDone){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.name \u003d newName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Gets name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Gets the boolean completion of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the done"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Sets name."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newName the new name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setName(String newName) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        name \u003d newName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Set the boolean completion of the task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setDone(){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Gets the check/cross string for the toString method based on isDone."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getCheck() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return isDone ? \"[\"+ tick +\"]\" : \"[\"+ cross +\"]\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Converts the task into string for listing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param token the token, e.g. [T] for to-do, [D] for deadline, [E] for event"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the task in string form"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString(String token) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return token + getCheck() + \" \" + name;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Converts the task back into command form for storage."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * e.g. \"Event, do ABC, tomorrow\" into \"event do ABC /by tomorrow\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the command-form string of the task"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toCommand() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return getName();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 88
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import duke.util.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import duke.util.IO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import duke.util.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Represents a list of tasks. No hard limit on number."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * The type TaskList does the heavy lifting of managing all tasks. It\u0027s the intermediary of the tasks and the IO,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * and there\u0027s some big functions in here."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * All tasks are stored in ArrayList taskList, and counted by Integer taskCount."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Boolean hasSaved keeps track of whether there are any unsaved changes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * ALL ERROR CHECKING IS DONE OUTSIDE THIS CLASS!"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private int taskCount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private boolean hasSaved;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Instantiates a new Task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        taskCount \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        hasSaved \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Check whether all changes are saved."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "// Small little functions here"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean checkWhetherSaved() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return hasSaved;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Gets task count."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the task count"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int getTaskCount() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return taskCount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Clear all tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void clearAllTasks() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        taskCount \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        hasSaved \u003d false; // list is technically edited"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Adds task to taskList using the Command object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * If silent is true, then do not print a message. This is used mainly for loading from saves."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param command the command object itself"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param silent  if true, do not print confirmation that task was added"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void addTask(Command command, boolean silent) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // First argument will always be the description of the task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String taskName \u003d command.getArgument(0).trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Third argument is optional - isDone"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        boolean isDone \u003d command.getArgument(command.getArgCount()-1).toLowerCase().equals(\"done\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Second argument is \u0027at/by\u0027 for Deadline and Event"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String timeArg;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        switch(command.getCommand().toLowerCase()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            taskList.add(new Todo(taskName, isDone));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            timeArg \u003d command.getArgument(1).substring(3); // removing the \"by \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            taskList.add(new Deadline(taskName, timeArg, isDone));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            timeArg \u003d command.getArgument(1).substring(3); // removing the \"at \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            taskList.add(new Event(taskName, timeArg, isDone));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        taskCount++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        hasSaved \u003d false; // list is edited"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!silent) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            UI.reply(new String[]{\"Added: \" + taskList.get(taskCount - 1).toString(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    \"Now you have \" + taskCount + \" tasks.\"});"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Completes an existing task based on its task ID."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskIDString the task ID in string form"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "// Returns a string indicating completion of the task."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // If it\u0027s already complete, it will say so by returning the right sentence."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void completeTask(String taskIDString) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int taskID \u003d Integer.parseInt(taskIDString);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskList.get(taskID-1).getDone()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            UI.reply(new String[]{\"This task is already complete!\", \"Did you perhaps mean another task?\"});"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            hasSaved \u003d false; // list is edited"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            taskList.get(taskID-1).setDone();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            UI.reply(new String[]{\"I\u0027ve marked this task as done:\", taskList.get(taskID-1).toString()});"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Deletes an existing task based on its task ID."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskIDString the task id string"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "// Deletes task based on the task ID given"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void deleteTask(String taskIDString) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int taskID \u003d Integer.parseInt(taskIDString);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        hasSaved \u003d false; // list is edited"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        taskCount--;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task removedTask \u003d taskList.get(taskID-1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        taskList.remove(taskID-1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        UI.reply(new String[]{\"Removed the task as requested.\", \"The task: \" + removedTask.toString()});"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Shows task list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "// Prints all the tasks to be done"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void showTaskList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            UI.reply(\"You currently have no tasks.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String[] outputList \u003d new String[taskCount + 1];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        outputList[0] \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task eachTask;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Start from 1, since index 0 of outputList is occupied"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskCount; i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            eachTask \u003d taskList.get(i-1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            outputList[i] \u003d i + \". \" + eachTask.toString();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        UI.reply(outputList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Save tasks to disk to a text file with the given name in directory \u0027data\u0027. File does not need to exist."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param fileName the file name"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": "// Saves task to disk based on given file name"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void saveTasks(String fileName) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        hasSaved \u003d true; // list is saved!"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String[] linesToWrite \u003d new String[taskCount];"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            linesToWrite[i] \u003d taskList.get(i).toCommand();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (IO.saveFile(fileName, linesToWrite)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            UI.reply(new String[]{\"All files successfully saved!\", \"You can now close the program.\"});"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Load tasks from disk from a text file with the given name in directory \u0027data\u0027. File needs to exist."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param fileName the file name"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "f0fz"
        },
        "content": "// Loads task from disk based on given file name"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void loadTasks(String fileName) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Command[] commandList \u003d IO.readFile(fileName);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            for (Command eachCommand : commandList) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                addTask(eachCommand, true);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            UI.reply(new String[]{\"All tasks loaded!\", \"Total number of tasks: \" + taskCount });"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            hasSaved \u003d true; // list is unchanged"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            UI.error(e, \"Can\u0027t read file!\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 191
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * The type To-do, which extends Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Characterised by not having extra attributes."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    protected String token \u003d \"[T]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Instantiates a new To-do."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newName the name (description) of the to-do task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param isDone  whether the task is complete"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Todo(String newName, boolean isDone){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        super(newName, isDone);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Converts the task into string form for listing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return super.toString(\"[T]\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Converts the task back into command form for storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return \"todo \" + super.toCommand() + (isDone ? \" /done\" : \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 35
    }
  },
  {
    "path": "src/main/java/duke/util/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * The type Command. Any user input/file input is parsed by Parser and turned into a Command object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * No validation going on in this type... it\u0027s really just to hold information in a \u0027command\u0027 context."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    final int MAX_ARGS \u003d 10;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    protected String command;     // The actual command. E.g. \"list\", \"bye\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    protected int argCount;       // The number of additional arguments"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    protected String[] arguments; // Stores all additional arguments. E.g. \"by tomorrow\", \"at 1-5pm\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Instantiates a new Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        arguments \u003d new String[MAX_ARGS];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Sets the \u0027command\u0027 of the Command object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param command the command itself"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setCommand(String command) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Gets the \u0027command\u0027 of the Command object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Adds an argument to the Command object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param argument the argument to be added"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void addArgument(String argument) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (argCount \u003d\u003d MAX_ARGS) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        arguments[argCount] \u003d argument;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        argCount++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Gets an argument from the arguments array."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param index the index of the argument"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the argument"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getArgument(int index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (index \u003e argCount-1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return arguments[index];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Gets the total argument count."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the arg count"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int getArgCount() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return argCount;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * To display the Command object\u0027s information for debugging."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "// For debug purposes"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void debug() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        UI.error(new String[]{\"Command breakdown:\", \"Command: \" + command, \"Arguments: \" + Arrays.toString(arguments)});"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 83
    }
  },
  {
    "path": "src/main/java/duke/util/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * The Exception type DukeException. Thrown when commands are invalid but no Java is broken."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * No plans for expansion."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Instantiates a new DukeException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param errorMessage the error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 16
    }
  },
  {
    "path": "src/main/java/duke/util/ErrorChecker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * The static type ErrorChecker."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *  All error checking functions should be in the form:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *  if (correctCondition1)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *      if (correctCondition2)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *          ..."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *              break;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *  throw DukeException(\"____ command arguments not matching: _________\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *  or, throw DukeException(\"____ command takes no arguments\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *  All 3 checkXXX functions will run successively. If no exceptions are thrown, then"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *  nothing will happen and all is well. Else, the main loop in Duke will catch the exception"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *  and print the error message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *  TODO: Make separate functions to check things like mandatory/optional arguments, number of arguments, etc."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class ErrorChecker {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Checks if a string is numeric"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param str the string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static boolean isNumeric(String str) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Integer.parseInt(str);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch(NumberFormatException e){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Check a \u0027task\u0027 command for validity."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Currently checks: to-do, deadline, event"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskCmd the task command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws DukeException if the command is invalid"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void checkTaskCmd(Command taskCmd) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        switch(taskCmd.getCommand()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // 1 argument (description) , 1 optional arguments (done)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (taskCmd.getArgCount() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (taskCmd.getArgCount() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                if (taskCmd.getArgument(1).equals(\"done\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DukeException(\"Todos command argument not matching: description\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // 2 arguments (description, by) , 1 optional arguments (done)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if ((taskCmd.getArgCount() \u003d\u003d 2)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                if (taskCmd.getArgument(1).split(\" \")[0].equals(\"by\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (taskCmd.getArgCount() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                if (taskCmd.getArgument(2).equals(\"done\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DukeException(\"Deadline command arguments not matching: description /by deadline\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // 2 arguments (description, at) , 1 optional arguments (done)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if ((taskCmd.getArgCount() \u003d\u003d 2)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                if (taskCmd.getArgument(1).split(\" \")[0].equals(\"at\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (taskCmd.getArgCount() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                if (taskCmd.getArgument(2).equals(\"done\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DukeException(\"Event command arguments not matching: description /at startToEnd\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            break; // do nothing"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Check an IO command for validity."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Currently checks: save, load, showsaves"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param cmd the command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws DukeException if the command is invalid"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void checkSaveLoad(Command cmd) throws DukeException{"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        switch(cmd.getCommand()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // 1 argument, 0 optional arguments"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case \"save\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (cmd.getArgCount() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DukeException(\"Save command arguments not matching: filename\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // 1 argument, 1 optional argument (YES)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case \"load\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (cmd.getArgCount() \u003d\u003d 2){"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                if (cmd.getArgument(1).equals(\"YES\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (cmd.getArgCount() \u003d\u003d 1){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DukeException(\"Load command arguments not matching: filename \" +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                                    \"(for overwrite: filename /YES)\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case \"showsaves\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (cmd.getArgCount() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DukeException(\"ShowSaves command takes no arguments\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            break; // do nothing"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Check utility commands for validity."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Currently checks: list, debug, done, bye, delete"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param cmd       the command"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskCount the current task count"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws DukeException if the command is invalid"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "// Checking: list, bye, done, delete"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void checkUtil(Command cmd, int taskCount) throws DukeException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        switch(cmd.getCommand()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // 0 arguments, 0 optional arguments"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // FALLTHROUGH"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case \"debug\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (cmd.getArgCount() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DukeException(cmd.getCommand() + \" command takes no arguments\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // 0 arguments, 1 optional argument (force)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (cmd.getArgCount() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (cmd.getArgCount() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                if (cmd.getArgument(0).equals(\"force\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DukeException(\"Bye command takes no arguments (for force quit: /force)\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // 1 argument (int), 0 optional arguments"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // FALLTHROUGH"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (cmd.getArgCount() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                if (isNumeric(cmd.getArgument(0))) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    int doneID \u003d Integer.parseInt(cmd.getArgument(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    if (doneID \u003c\u003d taskCount \u0026\u0026 doneID \u003e 0) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DukeException(cmd.getCommand()+ \" command arguments not matching: \u003cnumber\u003e\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            break; // do nothing"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * The function that verifies every command currently available."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param cmd       the command"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskCount the current task count"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws DukeException if the command is invalid"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void verifyCmd(Command cmd, int taskCount) throws DukeException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        checkTaskCmd(cmd);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        checkSaveLoad(cmd);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        checkUtil(cmd, taskCount);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 192
    }
  },
  {
    "path": "src/main/java/duke/util/IO.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static duke.util.UI.error;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * The type IO. Only contains static methods and constants."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Holds all the logic for reading and writing to files. Handles exceptions wherever it can."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class IO {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * The default path to the save file storage directory"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String DEFAULT_PATH \u003d \"data/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Reads a save file based on the file name from the DEFAULT_PATH directory."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * The tasks are stored as \u0027add task\u0027 commands in the text file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Uses the Parser class to parse the commands and then uses the returned Command objects for the addTask command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param fileName the name of the save file (without extension)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the list of Commands"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws FileNotFoundException if the save file is not found"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static Command[] readFile(String fileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File f \u003d new File(DEFAULT_PATH + fileName + \".txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Parser fileParser \u003d new Parser(f);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // First, read number of tasks in order to initialise the commandList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (fileParser.hasNextLine()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            fileParser.getInput();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            taskNumber \u003d Integer.parseInt(fileParser.parseCommand().getCommand());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Then, put each command into the commandList via parseCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Command[] commandList \u003d new Command[taskNumber];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int taskIndex \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        while (fileParser.hasNextLine()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            fileParser.getInput();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            commandList[taskIndex] \u003d fileParser.parseCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return commandList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * A simple method to write to the file. A wrapper for FileWriter so I don\u0027t have to deal with it messing"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * up other things in other methods."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param saveFile the name of the save file (without extension)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param textToAdd the string to be written to the file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException if something goes wrong while writing to the file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static void writeToFile(File saveFile, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        FileWriter fw \u003d new FileWriter(saveFile, true); // true to append data instead of overwrite"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        fw.write(textToAdd + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Writes the converted tasks from TaskList into the specified save file. If the save file doesn\u0027t exist,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * create it. If the directory DEFAULT_PATH doesn\u0027t exist at root, then create it too."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param fileName the name of the save file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param lines    the converted tasks to be saved"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the boolean of whether the save was successful"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static boolean saveFile(String fileName, String[] lines) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String pathName \u003d DEFAULT_PATH + fileName + \".txt\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // Make the data folder to save in if it doesn\u0027t already exist"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (!(new File(DEFAULT_PATH)).exists()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                (new File(DEFAULT_PATH)).mkdir();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                UI.reply(\"Save directory doesn\u0027t exist! Making it now...\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // Create or overwrite the save file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            File mySaveFile \u003d new File(pathName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (!mySaveFile.exists()){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                UI.reply(\"Creating a new save file...\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                UI.reply(\"Overwriting old save file...\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                mySaveFile.delete();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            mySaveFile.createNewFile();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // Write to the save file"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            writeToFile(mySaveFile, Integer.toString(lines.length));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            for (String eachLine : lines) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                writeToFile(mySaveFile, eachLine);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            error(e, \"IO.saveFile: Error encountered while writing to the file \" + fileName + \".txt\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Show all save files in the DEFAULT_PATH directory."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void showSaves() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String[] saveNames \u003d (new File(DEFAULT_PATH)).list();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d 0; i \u003c saveNames.length; i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            saveNames[i] \u003d saveNames[i].substring(0, saveNames[i].length()-4); // cut out .txt"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String[] response \u003d new String[]{\"To load, type \u0027load filename\u0027.\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                                         \"Here\u0027s all your saves:\"};"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String[] finalResponse \u003d new String[saveNames.length + 2];"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Concatenate the response and saveNames arrays to send to UI.reply"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.arraycopy(response, 0, finalResponse, 0, 2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.arraycopy(saveNames, 0, finalResponse, 2, saveNames.length);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        UI.reply(finalResponse);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 130
    }
  },
  {
    "path": "src/main/java/duke/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * The type Parser. All Scanners belong here. Data goes into the Parser object through Scanners, and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * data leaves the Parser object as Commands. The Parser doesn\u0027t care whether the Commands are valid,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * it just puts them into that form and complains if it\u0027s wrong."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    protected String input; // the current input string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Scanner scan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Instantiates a new Parser (meant for the user)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Instantiates a new Parser (meant for files)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param f the file to scan for loading"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "// If the Parser is meant for a file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Parser(File f){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            scan \u003d new Scanner(f);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            e.printStackTrace(); // Likely will never happen. Only putting this because IntelliJ told me to."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            UI.error(\"I can\u0027t believe you\u0027ve done this.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Gets input using the Scanner."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void getInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (scan.hasNextLine()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            input \u003d scan.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Checks whether the next line exists."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * This function exists so I can check \u0027hasNextLine\u0027 outside of the Parser class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean hasNextLine() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return scan.hasNextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * The main function of the Parser class; parses the input string read by getInput."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * It creates a new Command object and populates it with the information from the user command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the Command object created"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Command parseCommand() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Command command \u003d new Command();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        command.setCommand(input.split(\" \")[0].toLowerCase());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (command.getCommand().length() \u003d\u003d input.length()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return command; // if no args"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        input \u003d input.substring(command.getCommand().length() + 1); // remove command from input plus the extra space"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Arguments are of form \" /opt argument\", so we split by \" /\" to get \"opt argument\" strings"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // e.g. \"arg0 /opt1 arg1 /opt2 /opt3 arg3\" -\u003e arg0, opt1 arg1, opt2, opt3 arg3"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String[] inputArgs \u003d input.split(\" /\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachArg : inputArgs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            command.addArgument(eachArg);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 86
    }
  },
  {
    "path": "src/main/java/duke/util/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * The type UI. All printing statements and formatting logic are contained here."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public final static String REPLY_BAR \u003d \"――――――――――――――――――――――――――――――――――――――――――\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public final static String ERROR_BAR \u003d \"!――――――!――――――!――――――!――――――!――――――!――――――!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public final static String DEBUG_BAR \u003d \"?――――――?――――――?――――――?――――――?――――――?――――――?\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public final static char tick \u003d \u0027\\u2713\u0027;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public final static char cross \u003d \u0027\\u2717\u0027;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static boolean isDebugMode \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Checks whether debug mode is on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return the debug mode boolean"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static boolean getDebugMode() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return isDebugMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Toggle debug mode."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void toggleDebug() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        isDebugMode \u003d !isDebugMode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Wraps strings in nice formatting."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * This is the single string version."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param response the string to be printed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void reply(String response) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.out.println(\"\\n\" + REPLY_BAR + \"\\n \u003e\u003e\u003e \" + response + \"\\n\" + REPLY_BAR + \"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Wraps strings in nice formatting."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * This is the multiple strings version."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param responses the list of strings to be printed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void reply(String[] responses) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.out.println(\"\\n\" + REPLY_BAR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachResponse : responses) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            System.out.println(\" \u003e\u003e\u003e \" + eachResponse);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.out.println(REPLY_BAR + \"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Prints out error messages wrapped in nice formatting."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Also prints out the message of the Exception thrown."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param e        the Exception thrown"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param errorMsg the accompanying error message"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "// And same thing for error messages!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void error(Exception e, String errorMsg) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String BAR \u003d (getDebugMode()) ? DEBUG_BAR : ERROR_BAR;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.out.println(\"\\n\" + BAR + \"\\n \u003e\u003e\u003e \" + errorMsg);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (getDebugMode()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            System.out.println(\" \u003e\u003e\u003e Debug...\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            System.out.print(\" \u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.out.println(BAR + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Prints out error messages wrapped in nice formatting, multiline version."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Also prints out the message of the Exception thrown."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param e         the Exception thrown"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param errorMsgs the array of accompanying error messages"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void error(Exception e, String[] errorMsgs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String BAR \u003d (getDebugMode()) ? DEBUG_BAR : ERROR_BAR;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.out.println(\"\\n\" + BAR);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachMsg : errorMsgs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            System.out.println(\" \u003e\u003e\u003e \" + eachMsg);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (getDebugMode()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            System.out.println(\" \u003e\u003e\u003e Debug...\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            System.out.println(\" \u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            System.out.print(e.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.out.println(BAR + \"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Prints out error messages wrapped in nice formatting."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param errorMsg the accompanying error message"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "// And again for error messages without exceptions!"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void error(String errorMsg) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String BAR \u003d (getDebugMode()) ? DEBUG_BAR : ERROR_BAR;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.out.println(\"\\n\" + BAR + \"\\n \u003e\u003e\u003e \" + errorMsg + \"\\n\" + BAR + \"\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Prints out error messages wrapped in nice formatting, multiline version."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param errorMsgs the array of accompanying error messages"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void error(String[] errorMsgs) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String BAR \u003d (getDebugMode()) ? DEBUG_BAR : ERROR_BAR;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.out.println(\"\\n\" + BAR);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachMsg : errorMsgs) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            System.out.println(\" \u003e\u003e\u003e \" + eachMsg);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.out.println(BAR + \"\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 127
    }
  },
  {
    "path": "text-ui-test/data/test.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "4"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": "todo wah /done"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "deadline yee /by tomorrow /done"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "event haw /at today-tomorrow /done"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "todo can\u0027t save /done"
      }
    ],
    "authorContributionMap": {
      "f0fz": 5
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "test"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": "todo wah"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "deadline yee /by tomorrow"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "event haw /at today-tomorrow"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "save test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "load test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "load test /YES"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "todo can\u0027t save /done"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "bye"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "save test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "f0fz": 25
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "# check for EXPECTED.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "if [ ! -e \"./EXPECTED.TXT\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    echo \"********** EXPECTED DOES NOT EXIST **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "if ! javac  -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/task/*.java ../src/main/java/duke/util/*.java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "java -classpath ../bin/ duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "f0fz": 9,
      "-": 36
    }
  }
]
