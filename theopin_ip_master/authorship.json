[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\tHello from"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\t ____        _        "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\t|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\t| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\t| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\t|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tWhat can I do for you?"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "theopin": 5,
      "-": 25
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": "**Duke** is a Command Line Interface (CLI) application that helps users to manage"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "their busy schedules by tracking their important tasks."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "* [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [List](#list)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Find `Task`](#find-task) "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Add `Task`](#add-task)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Remove `Task`](#remove-task)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Mark Completed `Task` as Done](#mark-task-as-done)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Exit](#exit)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Save](#save)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "* [FAQ](#faq)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "* [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "## Quick Start "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "2. Download the latest ip.jar from [here](https://github.com/theopin/ip/releases)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "4. Use java -jar ip.jar to run the program. A welcome message should appear as shown below."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tHello from"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t ____        _        "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tWhat can I do for you?"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "### List"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "Presents all the tasks present in the task manager."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tHere are the tasks in your list:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t1. [T][X] MA1508E Assignment"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t2. [D][X] Cook pizza (by: 4:00 PM)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t3. [E][X] GER1000 Quiz (at: Oct 04 2020 11:59 PM)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Find `Task`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "Presents all the tasks whose description matches the search filter given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "by the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `find MA1508E`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `find assignment`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tHere are the tasks that match this command - MA1508E:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t1. [T][X] MA1508E Assignment"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Add `Task`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "Adds a task to the task manager. "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "Duke currently supports 3 types of tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `todo`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `event`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `deadline`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "#### Usage of `todo`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `todo MA1508E assignment`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `todo maths`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tGot it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t\t[T][X] MA1508E assignment"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tNow you have 1 tasks in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theopin"
        },
        "content": "#### Usage of `event`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format: `event DESCRIPTION /at DATE TIME`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `event GER1000 Quiz /by 04/10/2020 23:59`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `event math quiz /by 24/10/2020`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `event Physics quiz /by 17:00`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theopin"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tGot it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t\t[E][X] GER1000 Quiz (at: Oct 04 2020 11:59 PM)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tNow you have 1 tasks in the list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theopin"
        },
        "content": "#### Usage of `deadline`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format: `deadline DESCRIPTION /by DATE TIME`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `deadline Learn pizza-making /by 24/10/2020 17:00`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `deadline math quiz /by 24/10/2020`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `deadline IPPT /by 17:00`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theopin"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tGot it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t\t[D][X] Cook pizza (by: 4:00 PM)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tNow you have 1 tasks in the list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Remove `Task`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theopin"
        },
        "content": "Removes a `Task` from the task manager. You can choose to remove one task at "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theopin"
        },
        "content": "a time or all the tasks at the same time."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theopin"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theopin"
        },
        "content": "* Single `Task`: `remove INDEX`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theopin"
        },
        "content": "* Every `Task`: `remove all`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `remove 1`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `remove all`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theopin"
        },
        "content": "Expected Outcome (Single `Task`):"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tGot it. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t\t[T][X] MA1508E Assignment"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tNow you have 2 tasks in the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "theopin"
        },
        "content": "Expected Outcome (Every `Task`):"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tGot it. I\u0027ve cleared all tasks in the list!"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tNow you have no tasks in the list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Mark `Task` as Done "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theopin"
        },
        "content": "Marks a particular `Task` in the task manager as done. "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "theopin"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `done 1`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `done 3`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theopin"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tNice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t[T][/] MA1508E assignment"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Exit"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "theopin"
        },
        "content": "Closes the application."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "theopin"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "theopin"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "theopin"
        },
        "content": "\tBye. Hope to see you again soon!"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Save"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "theopin"
        },
        "content": "Data related to this application is saved in the hard disk **automatically** "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "theopin"
        },
        "content": "after any command that changes it is given. "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "theopin"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Q: How do I transfer my data to another computer?"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "theopin"
        },
        "content": "Transfer the folder /data containing duke.jar into the directory of your other computer that contains ip.jar. "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "theopin"
        },
        "content": "The application will look out for duke.txt within that /data folder and fetch the tasks from there."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "theopin"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "theopin"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "theopin"
        },
        "content": "-------- | ---------- | ------------"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "theopin"
        },
        "content": "List | `list` | -"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "theopin"
        },
        "content": "Find `Task` | `done KEYWORD` | `find MA1508E` `find quiz`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "theopin"
        },
        "content": "Add `Task` - `todo` | `todo DESCRIPTION` | `todo MA1508E assignment` `todo maths`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "theopin"
        },
        "content": "Add `Task` - `event` | `event DESCRIPTION /at DATE TIME` | `event GER1000 Quiz /by 04/10/2020 23:59` `event math quiz /by 24/10/2020` `event Physics quiz /by 17:00`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "theopin"
        },
        "content": "Add `Task` - `deadline` | `deadline DESCRIPTION /by DATE TIME` | `deadline Learn pizza-making /by 24/10/2020 17:00` `deadline math quiz /by 24/10/2020`s `deadline IPPT /by 17:00`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "theopin"
        },
        "content": "Remove `Task` | `remove INDEX` `remove all` | `remove 1` `remove 2`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "theopin"
        },
        "content": "Mark `Task` as done | `done INDEX` | `done 1` `done 3`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "theopin"
        },
        "content": "Exit | `bye` | -"
      }
    ],
    "authorContributionMap": {
      "theopin": 205,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Main Function"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "        new UserSession();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 7,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/UserSession.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.data.ReadDataFile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.message.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.parser.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static duke.task.TaskHandler.ACTION_EXIT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Represents a new instance of the user running the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class UserSession {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public UserSession() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "        new ReadDataFile();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "        runProgramSequence();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Runs the program based on a given sequence."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void runProgramSequence() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String action;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CommandParser newUserCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Message.printWelcomeText();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "        // Ask for new user input until user types an exit command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "            newUserCommand \u003d new CommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "            action \u003d newUserCommand.getActionCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } while (!action.equals(ACTION_EXIT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Message.printExitText();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 36
    }
  },
  {
    "path": "src/main/java/duke/data/DataFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": " * A general class that stores certain constants regarding the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": " * file location of duke.txt, as well as a method that can be"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": " * executed based on the type of class that is a child of this class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "public abstract class DataFile {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String USER_DIR \u003d  System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final Path DATA_DIR \u003d  Paths.get(USER_DIR, \"data\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final Path TXT_FILE_DIR \u003d  Paths.get(USER_DIR, \"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * A method that is to be run when its subclass is created."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public abstract void executeFunction();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 21
    }
  },
  {
    "path": "src/main/java/duke/data/ReadDataFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.exception.PartialCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.task.TaskHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static duke.task.TaskHandler.EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static duke.task.TaskHandler.tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Allows the user to read data from duke.txt and add them"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": " * to the list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class ReadDataFile extends DataFile {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // ReadDataFile Constructor"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public ReadDataFile() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "        executeFunction();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the file contents into tasks that can be added into"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * the list of tasks. Also handles an exception arising"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * from missing file and/or directory at the specified location."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "            implementFileContents();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "            handleMissingFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Handles the case where the file is not found in the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * user directory."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void handleMissingFile() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\tFile not found! Creating new file!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "            createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException i) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(\"\\tFile cannot be created! Data will not be stored!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the data obtained from duke.txt into tasks and adds them"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * to the list of tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is not found in"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                               the user directory."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void implementFileContents() throws FileNotFoundException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "        // create a File for the given file path"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File userFile \u003d new File(String.valueOf(TXT_FILE_DIR));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Scanner dataScanner \u003d new Scanner(userFile);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int taskIndex \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "        while (dataScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "            convertStringToTask(dataScanner.nextLine(), taskIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the data obtained from duke.txt into a task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param newTask Details regarding the new task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param taskIndex Index of the task in duke.txt."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void convertStringToTask(String newTask, int taskIndex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String[] formattedTask \u003d newTask.split(\" \\\\| \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String action;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String newTaskDescription \u003d formattedTask[2];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String newTaskDate \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String newTaskTime \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "        boolean isTaskDone \u003d formattedTask[1].equals(\"1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "        // Task is a deadline or event"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if(!newTask.equals(\"\") \u0026\u0026 !formattedTask[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "            newTaskDate \u003d formattedTask[3];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "            newTaskTime \u003d (formattedTask.length \u003d\u003d 5) ? formattedTask[4] : EMPTY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": "        action \u003d getAction(formattedTask[0]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (action \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": "            TaskHandler.insertNewTask(action, newTaskDescription, newTaskDate, newTaskTime, false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (PartialCommandException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": "            e.alertException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if(isTaskDone) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theopin"
        },
        "content": "            tasks.get(taskIndex).markAsDone(true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Extracts the type of task based on the given symbol."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param dataInput Symbol indicating the type of task stored."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private String getAction(String dataInput) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String action;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theopin"
        },
        "content": "        switch(dataInput) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theopin"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theopin"
        },
        "content": "            action \u003d TaskHandler.ACTION_TODO;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theopin"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theopin"
        },
        "content": "            action \u003d TaskHandler.ACTION_DEADLINE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theopin"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theopin"
        },
        "content": "            action \u003d TaskHandler.ACTION_EVENT;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theopin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theopin"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return action;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Creates a new  directory and file at the specified location"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * if it currently does not exist"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws IOException Thrown if errors arise when creating the directory"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * and/or file."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void createNewFile() throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if(!Files.exists(DATA_DIR)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createDirectories(DATA_DIR);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if(!Files.exists(TXT_FILE_DIR)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createFile(TXT_FILE_DIR);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 145
    }
  },
  {
    "path": "src/main/java/duke/data/WriteDataFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static duke.task.TaskHandler.tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Allows the user to write data based on the tasks currently present in the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": " * list of tasks into duke.txt."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class WriteDataFile extends DataFile {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected String textContent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // WriteDataFile Constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public WriteDataFile() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "        executeFunction();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the tasks present in the list of tasks into"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * a string. This string is then saved in a form of .txt file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * into duke.txt."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "            setTextContent();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "            writeToFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(\"\\tSomething went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the tasks present in the list of tasks into"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * a string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void setTextContent() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "        StringBuilder textBuild \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "        for(Task task : tasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "            convertTaskToText(textBuild, task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.textContent \u003d textBuild.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Sets the string for the .txt file based on a specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param textBuild A stringBuilder object that takes in multiple"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                  string inputs regarding various features of the task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param task The task that is currently being converted into a string."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void convertTaskToText(StringBuilder textBuild, Task task) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "        extractClass(textBuild, task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "        textBuild.append(\" | \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "        extractIsDone(textBuild, task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "        textBuild.append(\" | \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "        textBuild.append(task.getDescription());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!(task instanceof Todo)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "            extractDate(textBuild, task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "            textBuild.append(\" | \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "            extractTime(textBuild, task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "        textBuild.append(System.lineSeparator());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Appends the type of task into the stringBuilder."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param textBuild A stringBuilder object that takes in multiple"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                  string inputs regarding various features of the task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param task The task that is currently being converted into a string."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void extractClass(StringBuilder textBuild, Task task) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if(task instanceof Event) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "            textBuild.append(\"E\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } else if(task instanceof Deadline) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "            textBuild.append(\"D\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": "            textBuild.append(\"T\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Appends the status of completion of the task into the stringBuilder."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param textBuild A stringBuilder object that takes in multiple"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                  string inputs regarding various features of the task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param task The task that is currently being converted into a string."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void extractIsDone(StringBuilder textBuild, Task task) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if(task.getStatusIcon().equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theopin"
        },
        "content": "            textBuild.append(1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theopin"
        },
        "content": "            textBuild.append(0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theopin"
        },
        "content": "    "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Appends the time of the task into the stringBuilder."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param textBuild A stringBuilder object that takes in multiple"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                  string inputs regarding various features of the task."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param task The task that is currently being converted into a string."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void extractTime(StringBuilder textBuild, Task task) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if(task instanceof Event) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theopin"
        },
        "content": "            textBuild.append(((Event) task).getAllocatedTime());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } else if(task instanceof Deadline) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theopin"
        },
        "content": "            textBuild.append(((Deadline) task).getDueTime());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Appends the date of the task into the stringBuilder."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param textBuild A stringBuilder object that takes in multiple"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                  string inputs regarding various features of the task."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param task The task that is currently being converted into a string."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void extractDate(StringBuilder textBuild, Task task) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if(task instanceof Event) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theopin"
        },
        "content": "            textBuild.append(\" | \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theopin"
        },
        "content": "            textBuild.append(((Event) task).getAllocatedDate());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } else if(task instanceof Deadline) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theopin"
        },
        "content": "            textBuild.append(\" | \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theopin"
        },
        "content": "            textBuild.append(((Deadline) task).getDueDate());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theopin"
        },
        "content": "    "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Writes the values of textContent into duke.txt"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws IOException Thrown if there are issues with writing the string"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                     into duke.txt"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void writeToFile() throws IOException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "theopin"
        },
        "content": "        FileWriter fileEditor \u003d new FileWriter(String.valueOf(TXT_FILE_DIR));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "theopin"
        },
        "content": "        fileEditor.write(textContent);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theopin"
        },
        "content": "        fileEditor.close();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 158
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": " * A general error exception that arises from running the Duke Program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * A method that is to be run when an exception has been detected."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public abstract void alertException();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.message.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Error exception that arises when unrecognized commands are"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": " * entered in the command line."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class IllegalCommandException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Informs user that an invalid command has been entered."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void alertException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\tError Code 0: Invalid Command Entered!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Message.printHorizontalLine();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Error exception that arises when commands cannot be parsed"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": " * into date and/or time variables."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class InvalidTimeException extends DukeException{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private final String faultySegment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // InvalidTimeException Constructor"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public InvalidTimeException(String faultySegment) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.faultySegment \u003d faultySegment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Informs user that the given parameters of the command cannot"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * be parsed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void alertException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\tError Code 5: \" + faultySegment + \" cannot be parsed!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 25
    }
  },
  {
    "path": "src/main/java/duke/exception/PartialCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Error exception that arises when some essential parameters"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": " * are not indicated in the user input."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class PartialCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private final String faultyAction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public PartialCommandException(String faultyAction) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.faultyAction \u003d faultyAction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Informs user of the incomplete command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void alertException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\tError Code 1: \" + faultyAction + \" parameters are invalid!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 24
    }
  },
  {
    "path": "src/main/java/duke/exception/RangeExceedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Error exception that arises when the task index specified"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": " * does not exist in the current list of tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class RangeExceedException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Informs user that the task number requested does not exist in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void alertException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\t Error Code 2: Task number specified does not exist!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownSearchException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Error exception that arises when the search filter specified"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": " * does not exist in the current list of tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class UnknownSearchException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Informs user that the search filter does not match any task in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void alertException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\tError Code 3: Search parameters do not match any task!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 16
    }
  },
  {
    "path": "src/main/java/duke/message/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.message;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": " * A class that stores methods aimed at printing out certain messages when"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": " * the user has activated certain features of a function."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Prints the initial greetings when the user loads the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static void printWelcomeText() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "        // Print a horizontal line and duke logo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String logo \u003d \"\\t ____        _        \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "                + \"\\t|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "                + \"\\t| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "                + \"\\t| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "                + \"\\t|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "        // Print greetings and a horizontal line"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\tHello from\\n\" + logo);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\tWhat can I do for you?\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static void printHorizontalLine() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String horizontalLine \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(horizontalLine);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Print exit greetings for the user leaving the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static void printExitText() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\tBye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Inform user of success in marking task as done"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Print exit greetings for the user leaving the program."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static void printTaskDoneSuccess(String taskName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\tNice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\t\" + taskName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Informs user of success in modifying a task\u0027s presence in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param taskDescription Description of the task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param isAddTask Determines whether the task should be added or"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                  removed from the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static void modifyTaskSuccess("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "            String taskDescription, boolean isAddTask) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String action;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if(isAddTask) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "            action \u003d \"added\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "            action \u003d \"removed\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int maxTask \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\t\" + \"Got it. I\u0027ve \" + action + \" this task: \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\t\\t\" + taskDescription);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\tNow you have \"+ maxTask  + \" tasks in the list.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Prints all the tasks whose description matches the search filter given"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * by the user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param filteredTasks Array of tasks that match search filter."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param searchFilter Filter used to find relevant tasks from current list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static void printMatchingTasks(ArrayList\u003cTask\u003e filteredTasks, String searchFilter) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int taskCount \u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\tHere are the tasks that match this command - \"+ searchFilter + \":\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "        for (Task filteredTask: filteredTasks){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(\"\\t\" + taskCount + \". \"+ filteredTask.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "            taskCount++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Informs the user that all the tasks in the task list has been cleared."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static void clearTaskListSuccess() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\t\" + \"Got it. I\u0027ve cleared all tasks in the list!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\tNow you have no tasks in the list.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 100
    }
  },
  {
    "path": "src/main/java/duke/parser/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.exception.IllegalCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.exception.PartialCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.message.Message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.task.TaskHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static duke.task.TaskHandler.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Class that handles a command given by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Scanner for user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static final Scanner myScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static final String[] taskTypes \u003d {ACTION_TODO, ACTION_EVENT, ACTION_DEADLINE};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static final String[] taskRelatedCommand \u003d {ACTION_DONE, ACTION_REMOVE, ACTION_FIND};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static final String[] standaloneCommand \u003d {ACTION_EXIT, ACTION_LIST};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private String actionCommand \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public CommandParser() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "        requestUserInput();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Takes in a command given by the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void requestUserInput()  {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String[] userInput;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "            userInput \u003d receiveUserInput();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "            userInput[0] \u003d userInput[0].toLowerCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "            new TaskHandler(userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "            setActionCommand(userInput[0]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IllegalCommandException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "            e.alertException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (PartialCommandException p) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "            p.alertException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Message.printHorizontalLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Writes the values of textContent into duke.txt."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws IllegalCommandException Thrown if the user command does not match any"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                 predefined action."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws PartialCommandException Thrown if the user command is incomplete."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private String[] receiveUserInput() throws IllegalCommandException, PartialCommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String userCommand \u003d myScanner.nextLine().trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Message.printHorizontalLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String[] splitCommand \u003d userCommand.split(WHITESPACE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!(Arrays.asList(standaloneCommand).contains(splitCommand[0]))) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (!Arrays.asList(taskTypes).contains(splitCommand[0])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \u0026\u0026 !Arrays.asList(taskRelatedCommand).contains(splitCommand[0])) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "                throw new IllegalCommandException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if(splitCommand.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "                throw new PartialCommandException(splitCommand[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return splitCommand;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void setActionCommand(String actionCommand) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.actionCommand \u003d actionCommand;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String getActionCommand() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return actionCommand;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 81
    }
  },
  {
    "path": "src/main/java/duke/parser/DateTimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.exception.InvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Class that contains methods to parse dates and times given"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": " * by the user\u0027s command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static final String TIME \u003d \"time\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static final String DATE \u003d \"date\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static final String MONTH_DAY_YEAR_FORMAT \u003d \"MMM dd yyyy\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static final String DAY_MONTH_YEAR_FORMAT \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static final String X_AM_PM_FORMAT \u003d \"h:mm a\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Parses the date given by the user in the form (Day/Month/Year) and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * returns it in another format (Month Day Year)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param givenDateFormat A String containing the date given by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @return a string of the date in the new format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws InvalidTimeException Thrown when the date entered does not match"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                              the given format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static String parseDate(String givenDateFormat) throws InvalidTimeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String newDateFormat;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "            LocalDate dateGiven \u003d LocalDate.parse(givenDateFormat,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    DateTimeFormatter.ofPattern(DAY_MONTH_YEAR_FORMAT));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "            newDateFormat \u003d dateGiven.format(DateTimeFormatter.ofPattern(MONTH_DAY_YEAR_FORMAT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (DateTimeParseException d) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "            throw new InvalidTimeException(DATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return newDateFormat;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Parses the time given by the user in the form (HH:MM) and"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * returns it in another format (H:MM AM) or (H:MM PM)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param givenTimeFormat A String containing the time given by the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @return a string of the time in the new format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws InvalidTimeException Thrown when the date entered does not match"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                              the given format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static String parseTime(String givenTimeFormat) throws InvalidTimeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String newTimeFormat;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "            LocalTime timeGiven \u003d LocalTime.parse(givenTimeFormat);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "            newTimeFormat \u003d timeGiven.format(DateTimeFormatter.ofPattern(X_AM_PM_FORMAT));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (DateTimeParseException d) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "            throw new InvalidTimeException(TIME);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return newTimeFormat;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Represents a deadline type of tasks. Mainly used to mark a future"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": " * deadline that the user has to accomplish a task by."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected String dueDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected String dueTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Deadline Constructor"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public Deadline(String description, String dueDate, String dueTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.dueTime \u003d dueTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String getDueDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String getDueTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return dueTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the Deadline Task into a string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "        StringBuilder deadlineSummary \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "        deadlineSummary.append(\"[D]\").append(super.toString()).append(\" (by: \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return modifyString(deadlineSummary, dueDate, dueTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 41
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Represents an event type of tasks. Mainly used to mark a future"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": " * event for the user to take note of."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected String allocatedDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected String allocatedTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Event Constructor"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public Event(String description, String allocatedDate, String allocatedTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.allocatedDate \u003d allocatedDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.allocatedTime \u003d allocatedTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String getAllocatedTime() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return allocatedTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String getAllocatedDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return allocatedDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the Event Task into a string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "        StringBuilder eventSummary \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eventSummary.append(\"[E]\").append(super.toString()).append(\" (at: \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return modifyString(eventSummary, allocatedDate, allocatedTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 37
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.exception.InvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static duke.parser.DateTimeParser.parseDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static duke.parser.DateTimeParser.parseTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static duke.task.TaskHandler.WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Represents a general Task. The methods here are generic and can be"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": " * used by its subclasses."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static final String END_OF_DAY \u003d \"11:59 PM\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected boolean isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static int numberOfTasks \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Task Constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "        numberOfTasks++;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Returns description of tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Returns tick or X symbols based on the value of isDone"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return (isDone ? \"X\" : \"/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Sets the isDone variable of the task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void markAsDone(boolean isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Returns the number of Tasks created so far"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static int getNumberOfTasks() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return numberOfTasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Updates the number of tasks once a task has been removed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static void updateTaskCount() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "        numberOfTasks--;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the Task into a string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param summary StringBuilder that builds the string equivalent of the task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param dueDate Date that the task is set at."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param dueTime Time that the task is set at."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static String modifyString(StringBuilder summary, String dueDate, String dueTime) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String parsedDate, parsedTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "        boolean isDateParsed \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "            parsedDate \u003d parseDate(dueDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "            summary.append(parsedDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "            isDateParsed \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if(isDateParsed) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "                summary.append(WHITESPACE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "            parsedTime \u003d parseTime(dueTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "            summary.append(parsedTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "            summary.append(END_OF_DAY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "        summary.append(\")\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return summary.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the Task into a string."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 92
    }
  },
  {
    "path": "src/main/java/duke/task/TaskHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.data.WriteDataFile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.exception.InvalidTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.exception.PartialCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.exception.RangeExceedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.exception.UnknownSearchException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import duke.message.Message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static duke.parser.DateTimeParser.parseDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static duke.parser.DateTimeParser.parseTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Handles user commands that aim at performing certain functions related to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": " * handling a task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class TaskHandler {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // String Constants"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static final String ACTION_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static final String ACTION_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static final String ACTION_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static final String ACTION_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static final String ACTION_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static final String ACTION_EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static final String ACTION_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static final String ACTION_REMOVE \u003d \"remove\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static final String WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static final String ALL_TASKS \u003d \"all\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public TaskHandler(String[] userInput) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "        parseUserInput(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Executes the action specified in the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * If the position is unset, NaN is returned."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param userInput Command given by the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void parseUserInput(String [] userInput) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String action \u003d userInput[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "        // Run the respective methods based on the action"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "        switch(action) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "        case ACTION_DONE:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "                setTaskAsComplete(userInput[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } catch (RangeExceedException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "                e.alertException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "        case ACTION_REMOVE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "                removeTask(userInput[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } catch (RangeExceedException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "                e.alertException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "        case ACTION_FIND:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "                String searchFilter \u003d extractSearchFilter(userInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "                findMatchingTasks(searchFilter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } catch (UnknownSearchException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "                e.alertException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "        case ACTION_LIST:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printTaskList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "        case ACTION_TODO:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "            createNewTask(userInput, ACTION_TODO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "        case ACTION_EVENT:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "            createNewTask(userInput, ACTION_EVENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "        case ACTION_DEADLINE:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": "            createNewTask(userInput, ACTION_DEADLINE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": "        case ACTION_EXIT:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Message.printHorizontalLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Removes a specified task from the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param taskNumber  Task that the user wants to be removed"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws RangeExceedException  If taskNumber \u003e size of list of tasks."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void removeTask(String taskNumber) throws RangeExceedException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int maxTask \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if(taskNumber.equals(ALL_TASKS)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theopin"
        },
        "content": "            while (maxTask !\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theopin"
        },
        "content": "                tasks.remove(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theopin"
        },
        "content": "                Task.updateTaskCount();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theopin"
        },
        "content": "                maxTask--;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Message.clearTaskListSuccess();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theopin"
        },
        "content": "            int oldIndex;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theopin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theopin"
        },
        "content": "                oldIndex \u003d Integer.parseInt(taskNumber) - 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theopin"
        },
        "content": "                System.out.println(\"\\tError Encountered - invalid input!\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theopin"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if(oldIndex \u003c 0 || oldIndex \u003e\u003d maxTask) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theopin"
        },
        "content": "                throw new RangeExceedException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theopin"
        },
        "content": "            String deletedTask \u003d tasks.get(oldIndex).toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theopin"
        },
        "content": "            tasks.remove(oldIndex);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Task.updateTaskCount();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Message.modifyTaskSuccess("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    deletedTask, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theopin"
        },
        "content": "        new WriteDataFile();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Marks a specified task from the list as done."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param taskNumber  Task that the user wants to be set as done"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws RangeExceedException  If taskNumber \u003e size of list of tasks."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static void setTaskAsComplete(String taskNumber) throws RangeExceedException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int taskIndex;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int maxTask \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theopin"
        },
        "content": "            taskIndex \u003d Integer.parseInt(taskNumber) - 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(\"\\tError Encountered - invalid input!\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theopin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if(taskIndex \u003c 0 || taskIndex \u003e\u003d maxTask) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theopin"
        },
        "content": "            throw new RangeExceedException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theopin"
        },
        "content": "        tasks.get(taskIndex).markAsDone(true);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Message.printTaskDoneSuccess(tasks.get(taskIndex).toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theopin"
        },
        "content": "        new WriteDataFile();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Prints all tasks present in the list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static void printTaskList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theopin"
        },
        "content": "        System.out.println(\"\\tHere are the tasks in your list:\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theopin"
        },
        "content": "        // Print each task based on a specified format"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theopin"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(\"\\t\"+ taskIndex + \". \" + task.toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "theopin"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Extracts the search filter the user is using to find relevant tasks."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param userInput  Command that the user has sent."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private String extractSearchFilter(String[] userInput) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theopin"
        },
        "content": "        StringBuilder searchFilter \u003d new StringBuilder();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int userInputLength \u003d userInput.length;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "theopin"
        },
        "content": "        for (int i \u003d 0; i \u003c userInputLength; i++) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if(i !\u003d 0) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "theopin"
        },
        "content": "                searchFilter.append(userInput[i]);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if(i !\u003d 0 \u0026\u0026 i \u003c userInputLength - 1) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "theopin"
        },
        "content": "                searchFilter.append(WHITESPACE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return searchFilter.toString();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Extracts the search filter the user is using to find relevant tasks."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param userFilterInput  Filter used to find relevant tasks."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws UnknownSearchException Thrown if the filter does not match any task."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void findMatchingTasks(String userFilterInput) throws UnknownSearchException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "theopin"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "theopin"
        },
        "content": "        filteredTasks \u003d (ArrayList\u003cTask\u003e) tasks.stream()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .filter((s) -\u003e s.getDescription().contains(userFilterInput))"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "theopin"
        },
        "content": "            throw new UnknownSearchException();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Message.printMatchingTasks(filteredTasks, userFilterInput);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Creates a new task by generating specific data to be inserted from the user command"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * into this task."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param inputSegments  Array of strings that consist of each word of the user command."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param action Name of the particular task that the user wishes to executes."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void createNewTask(String[] inputSegments, String action) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int newIndex \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "theopin"
        },
        "content": "        boolean hasReachedSplit \u003d false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "theopin"
        },
        "content": "        StringBuilder newTask \u003d new StringBuilder();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String newTaskDate \u003d EMPTY;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String newTaskTime \u003d EMPTY;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "theopin"
        },
        "content": "        for (String inputSegment : inputSegments) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if(inputSegment.contains(\"/\") \u0026\u0026 !hasReachedSplit) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "theopin"
        },
        "content": "                hasReachedSplit \u003d true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } else if(!hasReachedSplit \u0026\u0026 !inputSegment.equals(action)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "theopin"
        },
        "content": "                newTask.append(WHITESPACE).append(inputSegment);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } else if(hasReachedSplit)  {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "theopin"
        },
        "content": "                if(inputSegment.contains(\"/\")) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    newTaskDate \u003d inputSegment.trim();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "theopin"
        },
        "content": "                } else if(inputSegment.contains(\":\")) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    newTaskTime \u003d inputSegment.trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "theopin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "theopin"
        },
        "content": "        // Creates a new task type based on the type specified"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "theopin"
        },
        "content": "            insertNewTask(action, newTask.toString().trim(), newTaskDate, newTaskTime, true);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "theopin"
        },
        "content": "            // Inform user of success operation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Message.modifyTaskSuccess("
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    tasks.get(newIndex).toString(), true);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "theopin"
        },
        "content": "            new WriteDataFile();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (PartialCommandException e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "theopin"
        },
        "content": "            e.alertException();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Creates a new task based on the action specified and inserts specific data"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * into this task."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param action Name of the particular task that the user wishes to executes."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param newTask Description of the task."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param newTaskDate Date of the task."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param newTaskTime Time of the task."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param isNewlyCreated Checks if the task was created within the current"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                        user session."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws PartialCommandException Thrown if certain parameters of the feature"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                 requested are missing."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public static void insertNewTask(String action, String newTask, String newTaskDate,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                     String newTaskTime, boolean isNewlyCreated) throws PartialCommandException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if(newTask.equals(EMPTY)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "theopin"
        },
        "content": "            throw new PartialCommandException(\"description\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (analyseParameters(action, newTaskDate, newTaskTime, isNewlyCreated)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "theopin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "theopin"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "theopin"
        },
        "content": "        case ACTION_TODO:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "theopin"
        },
        "content": "            tasks.add(new Todo(newTask));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "theopin"
        },
        "content": "        case ACTION_EVENT:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "theopin"
        },
        "content": "            tasks.add(new Event(newTask, newTaskDate, newTaskTime));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "theopin"
        },
        "content": "        case ACTION_DEADLINE:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "theopin"
        },
        "content": "            tasks.add(new Deadline(newTask, newTaskDate, newTaskTime));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "theopin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "theopin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Analyses the parameters given and returns a boolean indicating whether a task can"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * be created with such input parameters."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param action Name of the particular task that the user wishes to executes."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param newTaskDate Date of the task."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param newTaskTime Time of the task."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param isNewlyCreated Checks if the task was created within the current"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                        user session."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @return a boolean indicating if a task can be created with the given parameters."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws PartialCommandException Thrown if certain parameters of the feature"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                 requested are missing."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static boolean analyseParameters(String action, String newTaskDate, String newTaskTime,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                            boolean isNewlyCreated) throws PartialCommandException {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if(action.equals(ACTION_DEADLINE) || action.equals(ACTION_EVENT)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "theopin"
        },
        "content": "            boolean canCreateTask;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (newTaskDate.equals(EMPTY) \u0026\u0026 newTaskTime.equals(EMPTY)) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "theopin"
        },
        "content": "                throw new PartialCommandException(\"date and time\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "theopin"
        },
        "content": "                canCreateTask \u003d parseGivenParameters(newTaskDate, newTaskTime, isNewlyCreated);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "theopin"
        },
        "content": "                return !canCreateTask;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Analyses the parameters given and returns a boolean indicating whether a task can"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * be created with such input parameters."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param newTaskDate Date of the task."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param newTaskTime Time of the task."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param isNewlyCreated Checks if the task was created within the current"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                        user session."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @return a boolean indicating if the date or time can be parsed."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static boolean parseGivenParameters(String newTaskDate, String newTaskTime, boolean isNewlyCreated) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "theopin"
        },
        "content": "        boolean canParseDate \u003d true, canParseTime \u003d true;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "theopin"
        },
        "content": "            parseDate(newTaskDate);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if(isNewlyCreated) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "theopin"
        },
        "content": "                e.alertException();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "theopin"
        },
        "content": "            canParseDate \u003d false;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "theopin"
        },
        "content": "            parseTime(newTaskTime);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (InvalidTimeException s) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if(isNewlyCreated) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "theopin"
        },
        "content": "                s.alertException();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "theopin"
        },
        "content": "            canParseTime \u003d false;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return (canParseDate || canParseTime);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "theopin": 351
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Represents a todo type of tasks. Mainly used to mark a task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": " * that the user has to finish."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Todo Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the Todo Task into a string."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 21
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "theopin": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "if exist del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "break\u003e\"ACTUAL.txt\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\texit /b 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "pause"
      }
    ],
    "authorContributionMap": {
      "theopin": 9,
      "-": 19
    }
  }
]
