[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "# walter project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/walter.java` file, right-click it, and choose `Run walter.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "dojh111": 2,
      "-": 24
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Walter is a **desktop app for managing daily tasks, optimized for use via a Command Line Interface** (CLI)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "For fast typists, Walter will allow you to add and keep track of your daily tasks faster than traditional "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "calendar GUI apps."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "  * [Viewing help: `help`](#viewing-help-help)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "  * [Adding a todo task: `todo`](#adding-a-todo-task-todo)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "  * [Adding an event task: `event`](#adding-an-event-task-event)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "  * [Adding a deadline task: `deadline`](#adding-a-deadline-task-deadline)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "  * [Viewing all tasks: `list`](#viewing-all-tasks-list)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "  * [Looking for a task: `find`](#looking-for-a-task-find)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "  * [Looking for all tasks on a date: `schedule`](#looking-for-all-tasks-on-a-date-schedule)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "  * [Deleting a task: `delete`](#deleting-a-task-delete)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "  * [Clearing all tasks: `clear`](#clearing-all-tasks-clear)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "  * [Exiting the program: `bye`](#exiting-the-program-bye)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "  * [Saving the data](#saving-the-data)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* [FAQ](#faq)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "---"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. Ensure you have Java `11` installed in your Computer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. Download the latest `walter.jar` from [here]()."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. Copy the jar file to a *suitable location* on your computer.\\"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "*(Note: On the first launch of `walter.jar`, a save file will be created in the same directory"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "as the jar file)*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. Open a new **terminal** window and navigate to the same directory where your `walter.jar` is located."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. Enter the **following command** into the **terminal** window to launch the application:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "````"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "java -jar walter.jar"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "````"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "You will be greeted with a welcome screen from Walter on successful launch."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "*Notice how a new save file is created if no previous save file exists in the same directory as `walter.jar`.*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. You are now ready to use *Walter*. Type commands into the **terminal** window and press enter to get *Walter* "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "to execute commands. e.g. typing `help` and pressing enter will bring up all available commands.\\"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Here are some example commands you can try:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    * `help`: Brings up all available commands."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    * `todo Buy some bread`: Adds a todo task with description `Buy some bread` to the task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    * `event concert /at Stadium 2021-01-09`: Adds an event with description `concert (At: Stadium Jan 9 2021)` "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    to the task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    * `list`: Lists all available tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    * `delete 1`: Deletes 1st task shown in list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    * `bye`: Exits the program."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. Refer to the [Features](#features) section below for further details of each command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "---"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Notes about the command format:**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* **Words in `UPPER_CASE` are the parameters to be supplied by the user.**\\"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "e.g in `todo TASK_DESCRIPTION`, `TASK_DESCRIPTION` is a parameter which can be used as `todo Do work`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* **Items in square brackets are optional.**\\"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "e.g. `/by ADDITIONAL_INFORMATION [DATE]` can be used as `/by This Friday 2021-02-07` or `/by This Friday`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* **Dates can be input in any order.**\\"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "As long as the date is input in the correct `YYYY-MM-DD` format, and comes after the `/by` or `/at` tags."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Displays all available commands on the terminal.\\"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "### Adding a todo task: `todo`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Adds a todo task to the task list without any additional information.\\"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Format: `todo TASK_DESCRIPTION`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* `todo Call up a friend` Adds a todo task `Call up a friend`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* `todo Watch videos` Adds another todo task `Watch videos`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "### Adding an event task: `event`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Adds an event task to the task list with additional timing information.\\"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Format: `event TASK_DESCRIPTION /at ADDITIONAL_INFORMATION [DATE]`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Both the TASK_DESCRIPTION and ADDITIONAL_INFORMATION *(or optional DATE)* fields must be present."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* If DATE is provided, it must be in the format of `YYYY-MM-DD` for the field to be detected as a date. Else,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "it will be saved as part of the description."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* `event Team meeting /at 8pm tonight` Adds event `Team meeting (At: 8pm tognight)` to the task list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* `event Concert /at 8-9pm, 2021-01-09` Adds another event `Concert (At: 8-9pm, Jan 9 2021)` to the task list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "### Adding a deadline task: `deadline`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Adds a deadline task to the task list with additional timing information.\\"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Format: `deadline TASK_DESCRIPTION /by ADDITIONAL_INFORMATION [DATE]`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Similar to [event](#adding-an-event-task-event)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Both the TASK_DESCRIPTION and ADDITIONAL_INFORMATION *(or optional DATE)* fields must be present."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* If DATE is provided, it must be in the format of `YYYY-MM-DD` for the field to be detected as a date. Else,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "it will be saved as part of the description."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* `deadline Return books /by This weekend` Adds deadline `Return books (By: This weekend)` to the task list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* `deadline Pay bills /by 2022-04-13` Adds deadline `Pay bills (By: Apr 13 2022)`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "### Viewing all tasks: `list`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Displays all available tasks on the task list.\\"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "### Looking for a task: `find`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Finds all tasks in the task list that contain the given keywords.\\"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* The search **is** case-sensitive: `books` will **not** match `Books`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* The search will follow the order of the keywords: `Buy Bread` will **not** match `Bread Buy`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Only full words will be matched: `Song` will not match `Songs`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Only tasks containing all keywords in the correct order will be returned."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* `find buy bread` returns `buy bread (By: Next morning)` and `Go and buy bread`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "### Looking for all tasks on a date: `schedule`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Finds all tasks in the task list that fall on the same date as the given date.\\"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Format: `schedule DATE`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* The given date must be in the format of `YYYY-MM-DD`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Only tasks created with a valid date will be returned: Tasks with the dates found only in their description"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "will not be returned."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Only the dates saved and linked to the task will be searched."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* `scheudle 2021-09-01` returns `Concert (At: 8-9pm, Jan 9 2021)` and `Buy gifts (By: Jan 9 2021)`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "### Deleting a task: `delete`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Deletes the specified task from the task list.\\"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Deletes the task at the specified `INDEX`."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* The index refers to the index number shown in the displayed task [list](#viewing-all-tasks-list)."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* The index **must be a positive integer** e.g 1, 2, 3, ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* `delete 1` deletes the first task from `list`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* `delete 3` deletes the third task from `list`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "### Clearing all tasks: `clear`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Clears all entries from the task list.\\"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "### Exiting the program: `bye`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Exits the Walter program.\\"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "All Walter data is saved onto the hard disk automatically after any command that changes the data. Hence, there is"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "no need to manually save the data. When no save file is detected on startup, the program will automatically create "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "a new save file."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "---"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Q:** Can I move my save data to another location/Computer?\\"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**A:** Yes you can. After downloading `walter.jar` onto the other device, you can either:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. Place a copy of the current `walter.txt` save file in the same directory of `walter.jar` being launching "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "the application"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. Replace the save file `walter.txt` that was created by the program and found in the same directory as `walter.jar`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "with your own save file."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Q:** Why does the `schedule` command not return a task that falls on the same date as the given date?\\"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**A:** Please ensure when the original task was created, the date was input in the format of `YYYY-MM-DD`, after "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": "the `/at` identifier for `event` command and `/by` for `deadline` command. When successful, the input date in the "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "`YYYY-MM-DD` format will be automatically reformatted into a `MMM-DD-YYYY` format.\\"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "e.g `2022-03-04` will be reformatted into `Mar 04 2022` in the task description."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": "---"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Command | Format, Examples"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": "--------|-----------------"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Help**|`help`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Todo**|`todo TASK_DESCRIPTION` e.g,`todo Watch videos`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Event**|`event TASK_DESCRIPTION /at ADDITIONAL_INFORMATION [DATE]` e.g,`event Team meeting /at 8pm tonight`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Deadline**|`deadline TASK_DESCRIPTION /by ADDITIONAL_INFORMATION [DATE]` e.g,`deadline Pay bills /by 2022-04-13`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**List**|`list`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Find**|`find KEYWORD [MORE_KEYWORDS]` e.g,`find bread`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Schedule**|`schedule DATE` e.g,`schedule 2021-01-09`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Delete**|`delete INDEX` e.g,`delete 3`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Clear**|`clear`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**Bye**|`bye`"
      }
    ],
    "authorContributionMap": {
      "dojh111": 173,
      "-": 12
    }
  },
  {
    "path": "src/main/java/walter/Walter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.components.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.components.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.components.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.components.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.exceptions.WalterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * Walter is a chat bot which can help the user do multiple tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Walter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //Identifiers and values"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEADLINE_IDENTIFIER \u003d \"/by\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EVENT_IDENTIFIER \u003d \"/at\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_TASK_MARKED \u003d \"NICE! (｡◕‿‿◕｡) I\u0027ve marked the task as done!:\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_TASK_DELETED \u003d \"Alright! I\u0027ve removed this task from the list:\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //Exception Messages"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_INVALID_COMMAND \u003d \"I do not know what that means ;-;, please try again!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Parser parse;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public Walter(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        parse \u003d new Parser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            tasks \u003d new TaskList(storage.readFileContents());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (WalterException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showWalterError(e.getErrorMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Runs the main Walter program until termination"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] splitUserInput;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String details;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        boolean isFinished \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.printStartupSequence();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Loop infinitely until user enters \"bye\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        while (!isFinished) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            userInput \u003d ui.readUserCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            splitUserInput \u003d parse.divideUserCommand(userInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            command \u003d parse.determineCommand(splitUserInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                switch (command) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"bye\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    isFinished \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    ui.printTaskList(tasks.getTaskList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    details \u003d tasks.setTaskAsDone(splitUserInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    ui.printSetDeleteConfirmMessage(MESSAGE_TASK_MARKED, details);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    details \u003d tasks.deleteTask(splitUserInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    ui.printSetDeleteConfirmMessage(MESSAGE_TASK_DELETED, details);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    tasks.addTodoTask(userInput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    ui.printTaskAddedConfirmation(tasks.getTaskList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    tasks.addNewTimedEvent(userInput, COMMAND_DEADLINE, DEADLINE_IDENTIFIER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    ui.printTaskAddedConfirmation(tasks.getTaskList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    tasks.addNewTimedEvent(userInput, COMMAND_EVENT, EVENT_IDENTIFIER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    ui.printTaskAddedConfirmation(tasks.getTaskList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"schedule\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    tasks.getSchedule(userInput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"find\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    tasks.findTask(userInput);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"clear\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    tasks.clearTaskList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    storage.clearFile();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    ui.printClearTaskListConfirmation();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    throw new WalterException(EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (WalterException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showWalterError(e.getErrorMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showInvalidInputError();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showFileSaveError();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.printClosingSequence();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        new Walter(\"walter.txt\").run();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 131,
      "-": 2
    }
  },
  {
    "path": "src/main/java/walter/components/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.exceptions.WalterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The Parser class handles text parsing for Walter"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //Exception messages"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_EMPTY_FIELD \u003d \"Oh no... You have to enter a task number. Please try again!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_TIMEDEVENT_INTRO \u003d \"Oh no! ;-;\\nThe \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_TIMEDEVENT_BODY \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            \" command requires both description and time information in the format of: \\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_TIMEDEVENT_DESCRIPTION \u003d \"[description] \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_TIMEDEVENT_TIMEINFO \u003d \" [time information]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_EMPTY_TODO \u003d \"Oh no! The description of the todo cannot be empty ;-;\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_EMPTY_DATE \u003d \"Oh no! The please enter a date in YYYY-MM-DD format!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_EMPTY_SEARCHTERM \u003d \"Oh no! The search term cannot be empty!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_CANNOT_DETERMINE_COMMAND \u003d \"Oh no, I\u0027m unable to determine the command...\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String BLANK_SPACE \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String WHITESPACE_IDENTIFIER \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String HYPHEN_IDENTIFIER \u003d \"-\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final int MINIMUM_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final int DATE_FORMAT_SIZE \u003d 3;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final int INVALID_COMMAND_SIZE \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"MMM d yyyy\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Removes the command passed into the method"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param userInput Original string typed by user and to be modified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param commandToRemove Command to be removed from string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String removeCommandFromInput(String userInput, String commandToRemove) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String modifiedUserInput \u003d userInput.replaceFirst(commandToRemove, BLANK_SPACE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return modifiedUserInput.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns a string array with the task\u0027s description and additional information"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param identifier Identifier token to split the string with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String[] determineTaskInformation(String userInput, String commandToRemove, String identifier) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String modifiedString \u003d removeCommandFromInput(userInput, commandToRemove);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return modifiedString.split(identifier);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Checks for invalid command and throws WalterException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param splitUserInput Original user typed string split by whitespace"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void checkForValidInput(String[] splitUserInput) throws WalterException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (isValidLength(splitUserInput, INVALID_COMMAND_SIZE)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throw new WalterException(EXCEPTION_EMPTY_FIELD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Checks and throws WalterException if no argument was passed in as argument"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param field Argument to be checked"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void checkForEmptySingleField(String field, String command) throws WalterException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (isBlankSpace(field)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new WalterException(EXCEPTION_EMPTY_TODO);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new WalterException(EXCEPTION_EMPTY_SEARCHTERM);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case \"schedule\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new WalterException(EXCEPTION_EMPTY_DATE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new WalterException(EXCEPTION_CANNOT_DETERMINE_COMMAND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Validates arguments for events with time descriptions"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param informationStrings Arguments split by whitespaces"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param eventIdentifier Identifier to distinguish events and deadlines"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void checkForValidFieldEntered(String[] informationStrings, String command, String eventIdentifier)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws WalterException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        boolean fieldsArePresent \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check if both fields have been fulfilled"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (String information : informationStrings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (isBlankSpace(information)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fieldsArePresent \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check for valid information"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (isInvalidLength(informationStrings, MINIMUM_LENGTH) || !fieldsArePresent) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String exceptionMessage \u003d generateExceptionMessage(command, eventIdentifier);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throw new WalterException(exceptionMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns true if length of string array is lesser than the minimum length"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param splitStrings Array of strings whose length is to be compared with minimum length"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param minimumLength The target minimum length that splitStrings has to be"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public boolean isInvalidLength(String[] splitStrings, int minimumLength) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return splitStrings.length \u003c minimumLength;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Generates the exception message for WalterException"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String generateExceptionMessage(String command, String eventIdentifier) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return EXCEPTION_TIMEDEVENT_INTRO + command +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                EXCEPTION_TIMEDEVENT_BODY +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                EXCEPTION_TIMEDEVENT_DESCRIPTION + eventIdentifier + EXCEPTION_TIMEDEVENT_TIMEINFO;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns an arraylist which contains information to replace date in original string"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param timeInformation The original field entered by user after the task identifier"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public ArrayList\u003cString\u003e determineDateInformation(String timeInformation) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] splitTimeInformation \u003d timeInformation.split(WHITESPACE_IDENTIFIER);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cString\u003e replacementStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check if substring contains 2 \u0027-\u0027"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (String stringInformation : splitTimeInformation) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (stringInformation.contains(HYPHEN_IDENTIFIER)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (isValidDateFormat(stringInformation)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        replacementStrings \u003d formatDateInformation(stringInformation);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        ui.showInvalidDateFormatError();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return replacementStrings;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Formats date object into specified format and returns both original and formatted strings"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param stringInformation Date information in string form"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public ArrayList\u003cString\u003e formatDateInformation(String stringInformation) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDate taskDate;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cString\u003e replacementStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        replacementStrings.add(stringInformation);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskDate \u003d LocalDate.parse(stringInformation);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String formattedDate \u003d taskDate.format(DateTimeFormatter.ofPattern(DATE_FORMAT));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        replacementStrings.add(formattedDate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return replacementStrings;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns true when string contains 3 members separated by 2 hyphens"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param stringInformation Date information in string form"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public boolean isValidDateFormat(String stringInformation) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] splitDate \u003d stringInformation.split(HYPHEN_IDENTIFIER);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check for empty fields"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (String subString : splitDate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (isBlankSpace(subString)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check for only 3 inputs"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return isValidLength(splitDate, DATE_FORMAT_SIZE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns true when date input fields have valid length"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param splitArray Array of strings whose size is to be compared with the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param targetSize Size that splitArray must be equal to"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public boolean isValidLength(String[] splitArray, int targetSize) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return splitArray.length \u003d\u003d targetSize;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns true when field is empty or white space"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param subString Current string in array of split dates"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public boolean isBlankSpace(String subString) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return subString.trim().equals(BLANK_SPACE);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns array of strings from splitting given string with whitespace"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param userInput Original string input from user"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String[] divideUserCommand(String userInput) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return userInput.split(WHITESPACE_IDENTIFIER);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns command from typed user input"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param splitUserInput Original user typed string split by whitespace"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String determineCommand(String[] splitUserInput) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return splitUserInput[0];"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 228
    }
  },
  {
    "path": "src/main/java/walter/components/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.exceptions.WalterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The storage class handles all file reading and writing operations for Walter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //File Path and other constants"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String SAVE_DELIMITER \u003d \"--\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String FILE_MESSAGE_CREATED_SUCCESS \u003d \"Save file creation successful! :D\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String FILE_MESSAGE_NO_SAVE_DETECTED \u003d \"No previous saves detected! Creating save file...\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TODO_ICON \u003d \"[T]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEADLINE_ICON \u003d \"[D]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EVENT_ICON \u003d \"[E]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_FAILED_IDENTIFICATION \u003d \"Oh no, something went wrong while determining \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"the task type!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_FAILED_FILE_CLEAR \u003d \"There seems to be a problem clearing the file...\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Builds and returns an ArrayList of tasks from the save file. If no save file is found, a new file is created"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return ArrayList of tasks"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public ArrayList\u003cTask\u003e readFileContents() throws IOException, WalterException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File saveFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Read from file if file exists, else create a new save file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (saveFile.exists()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createTaskList(taskList, fileScanner);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNewFile(saveFile);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Re-creates all saved task objects and adds the objects to the taskList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskList The ArrayList to save"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void createTaskList(ArrayList\u003cTask\u003e taskList, Scanner fileScanner) throws WalterException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String taskInformation \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String[] taskComponents \u003d taskInformation.split(SAVE_DELIMITER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String taskIcon \u003d taskComponents[0];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String taskStatus \u003d taskComponents[1];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String taskDescription \u003d taskComponents[2];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String taskTimingInformation;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String taskDate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            switch (taskIcon) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case TODO_ICON:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                taskList.add(new Todo(taskDescription));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case DEADLINE_ICON:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                taskTimingInformation \u003d taskComponents[3];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                taskDate \u003d taskComponents[4];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                taskList.add(new Deadline(taskDescription, taskTimingInformation, taskDate));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case EVENT_ICON:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                taskTimingInformation \u003d taskComponents[3];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                taskDate \u003d taskComponents[4];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                taskList.add(new Event(taskDescription, taskTimingInformation, taskDate));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new WalterException(EXCEPTION_FAILED_IDENTIFICATION);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            setTaskStatus(taskList, taskStatus);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates a new save file when no previous save file was detected"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFile File object containing file path to create save file"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void createNewFile(File saveFile) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(FILE_MESSAGE_NO_SAVE_DETECTED);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        boolean fileCreated \u003d saveFile.createNewFile();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (fileCreated) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(FILE_MESSAGE_CREATED_SUCCESS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Sets status of task according to save file"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskList Current list of tasks created"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskStatus Status"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void setTaskStatus(ArrayList\u003cTask\u003e taskList, String taskStatus) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (isTaskDone(taskStatus)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskList.get(taskList.size() - 1).setAsDone();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns true if task is saved as done"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskStatus The status of the task, can be 1 for true or 0 for false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public boolean isTaskDone(String taskStatus) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return Integer.parseInt(taskStatus) \u003d\u003d 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Writes data from the tasks array onto a file. File data is cleared first before writing"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param tasks ArrayList of tasks to be written onto the file"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void writeToFile(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        clearFile();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Append information into file"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            int taskStatus \u003d determineTaskStatus(task);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String taskToSave \u003d generateSaveText(task, taskStatus);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(taskToSave);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns the current status of the task. 1 is returned when task is marked as done and 0 is returned if task"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * is marked as undone"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param task Current task object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public int determineTaskStatus(Task task) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int taskStatus \u003d 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (task.getStatus()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStatus \u003d 1;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskStatus;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns the string to be saved on the Walter save file"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param task Current task object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskStatus Task object status represented in integer form"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String generateSaveText(Task task, int taskStatus) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return task.getTaskIcon() + SAVE_DELIMITER + taskStatus + SAVE_DELIMITER"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + task.getDescription() + SAVE_DELIMITER + task.getTimingInformation() + SAVE_DELIMITER"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + task.getDate() +System.lineSeparator();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Deletes all data written to the Walter.txt save file"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void clearFile() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fwClear \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fwClear.write(BLANK_STRING);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fwClear.close();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(EXCEPTION_FAILED_FILE_CLEAR);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 191
    }
  },
  {
    "path": "src/main/java/walter/components/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.exceptions.WalterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The TaskList class handles actions on the individual tasks of the taskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"9999-12-31\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"MMM d yyyy\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String COMMAND_SCHEDULE \u003d \"schedule\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_UNDETERMINABLE_TASK_TYPE \u003d \"Oh no, I could not determine the entered \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"task type!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Parser parse;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        parse \u003d new Parser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        parse \u003d new Parser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns the ArrayList, taskList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Adds new timed event tasks such as events or deadlines into the task list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param userInput Original input by user"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param command The command entered - Either event or deadline"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param eventIdentifier Identifier to determine string information - Either /at or /by"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void addNewTimedEvent(String userInput, String command, String eventIdentifier) throws WalterException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String unformattedDate \u003d DEFAULT_DATE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] informationStrings \u003d parse.determineTaskInformation(userInput, command, eventIdentifier);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        parse.checkForValidFieldEntered(informationStrings, command, eventIdentifier);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String description \u003d informationStrings[0].trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String additionalInformation \u003d informationStrings[1].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cString\u003e dateInformation \u003d parse.determineDateInformation(additionalInformation);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (dateInformation.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            unformattedDate \u003d dateInformation.get(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String formattedDate \u003d dateInformation.get(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            additionalInformation \u003d additionalInformation.replace(unformattedDate, formattedDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new task objects"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskList.add(new Event(description, additionalInformation, unformattedDate));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskList.add(new Deadline(description, additionalInformation, unformattedDate));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throw new WalterException(EXCEPTION_UNDETERMINABLE_TASK_TYPE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Adds todo task into taskList"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param userInput Unaltered input from user"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void addTodoTask(String userInput) throws WalterException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String taskDescription \u003d parse.removeCommandFromInput(userInput, COMMAND_TODO);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        parse.checkForEmptySingleField(taskDescription, COMMAND_TODO);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.add(new Todo(taskDescription));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Searches for tasks that include the search term and prints the results of the search"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param userInput Unaltered input from user"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void findTask(String userInput) throws WalterException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String searchTerm \u003d parse.removeCommandFromInput(userInput, COMMAND_FIND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        parse.checkForEmptySingleField(searchTerm, COMMAND_FIND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cTask\u003e searchResults \u003d filterTaskBySearchTerm(searchTerm);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.printFilteredResults(searchResults, searchTerm, COMMAND_FIND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns an ArrayList of tasks that is filtered by the search term using streams"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param searchTerm Keyword that has to be included in task"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public ArrayList\u003cTask\u003e filterTaskBySearchTerm(String searchTerm) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return (ArrayList\u003cTask\u003e) taskList.stream()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                .filter((s) -\u003e s.toString().contains(searchTerm))"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Searches for dated objects that matches date entered by user and prints the results of the search"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param userInput Unaltered input from user"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void getSchedule(String userInput) throws WalterException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String searchDate \u003d parse.removeCommandFromInput(userInput, COMMAND_SCHEDULE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        parse.checkForEmptySingleField(searchDate, COMMAND_SCHEDULE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Parsing string into date object to ensure date format is correct"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            LocalDate selectedDate \u003d LocalDate.parse(searchDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String inputDate \u003d selectedDate.toString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String formattedDate \u003d selectedDate.format(DateTimeFormatter.ofPattern(DATE_FORMAT));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ArrayList\u003cTask\u003e tasksOnDay \u003d filterTaskByDate(inputDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.printFilteredResults(tasksOnDay, formattedDate, COMMAND_SCHEDULE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showInvalidDateFormatError();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns an ArrayList of objects whose date matches the input date"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param inputDate Date in string format that has to match task object date"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public ArrayList\u003cTask\u003e filterTaskByDate(String inputDate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return (ArrayList\u003cTask\u003e) taskList.stream()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                .filter((s) -\u003e s.getDate().equals(inputDate))"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Sets isDone of selected task to true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param splitUserInput Array of strings after original user input has been split by whitespace"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String setTaskAsDone (String[] splitUserInput) throws WalterException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        parse.checkForValidInput(splitUserInput);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int taskNumber \u003d Integer.parseInt(splitUserInput[1]) - 1;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.get(taskNumber).setAsDone();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskList.get(taskNumber).toString();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Removes task from the tasks ArrayList"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param splitUserInput Array of strings after original user input has been split by whitespace"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String deleteTask (String[]splitUserInput) throws WalterException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        parse.checkForValidInput(splitUserInput);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int taskToDelete \u003d Integer.parseInt(splitUserInput[1]) - 1;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String deleteItemDetails \u003d taskList.get(taskToDelete).toString();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.remove(taskToDelete);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return deleteItemDetails;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void clearTaskList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 195
    }
  },
  {
    "path": "src/main/java/walter/components/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.exceptions.WalterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The UI class handles user input interface and prints messages to the user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //ASCII art logos"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String END_LOGO \u003d \"________              \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"___  __ )____  ______ \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"__  __  |_  / / /  _ \\\\\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"_  /_/ /_  /_/ //  __/\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"/_____/ _\\\\__, / \\\\___/ \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"        /____/        \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String WALTER_LOGO \u003d \"____    __    ____  ___       __      .___________. _______ .______   \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"\\\\   \\\\  /  \\\\  /   / /   \\\\     |  |     |           ||   ____||   _  \\\\     \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" \\\\   \\\\/    \\\\/   / /  ^  \\\\    |  |     `---|  |----`|  |__   |  |_)  |    \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"  \\\\            / /  /_\\\\  \\\\   |  |         |  |     |   __|  |      /     \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"   \\\\    /\\\\    / /  _____  \\\\  |  `----.    |  |     |  |____ |  |\\\\  \\\\----.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"    \\\\__/  \\\\__/ /__/     \\\\__\\\\ |_______|    |__|     |_______|| _| `._____|\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //General UI messages"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_TASK_ADDED_CONFIRM \u003d \" Got it, I\u0027ve added this task: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_HELLO_FROM \u003d \"Hello from\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_INTRO_GREETING \u003d \" Hello! I\u0027m walter.walter  ◕_◕\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_INTRO_WALTER_QUERY \u003d \" What can I do for you?\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_CLOSING \u003d \" I\u0027m sad to see you go. Hope to see you again soon! :D\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_DOUBLE_WHITESPACE \u003d \"   \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_LINE_SEPARATOR \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            \"______________________________________________________________________________\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_NOW_YOU_HAVE \u003d \" Now you have \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_IN_THE_LIST \u003d \" in the list.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_ERROR_TASK_UNAVAILABLE \u003d \"No tasks available... (｡◕‿‿◕｡)\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_TASKS_IN_LIST \u003d \" Here are the tasks in your list: \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_CLEAR_CONFIRMED \u003d \"Done! All tasks have been cleared :)\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //Exception error messages"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_FILE_ERROR \u003d \"Oh no, something went wrong while creating a save file ;-;\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_INVALID_TASK_NUMBER \u003d \"Invalid task number entered... Please try again!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_DONE_EXPECTED_INTEGER \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            \"I\u0027m sorry, I don\u0027t understand that ;-;. Please enter a number instead!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_FILE_WRITE_ERROR \u003d \"Oh no, something went wrong while saving!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_INVALID_DATE_FORMAT \u003d \"Please enter date in this format:\\n[YYYY-MM-DD]\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_UNABLE_TO_DETERMINE_TASK \u003d \"Hmm, I could not determine the task, please \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"try again!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints separator component after text is printed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printSeparator() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_LINE_SEPARATOR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints startup greet sequence"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printStartupSequence() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_HELLO_FROM + WALTER_LOGO);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_INTRO_GREETING);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_INTRO_WALTER_QUERY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints closing sequence"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printClosingSequence() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_CLOSING);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(END_LOGO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns read user command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String readUserCommand() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints the confirmation messages for setTaskAsDone and deleteTask"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param message The header message to inform the user whether action is set or delete"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param itemDetails Details of the item that was set or deleted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printSetDeleteConfirmMessage(String message, String itemDetails) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\" \" + itemDetails);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints confirmation text when a new task is added"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param tasks Array of current stored tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printTaskAddedConfirmation(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_TASK_ADDED_CONFIRM);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_DOUBLE_WHITESPACE + tasks.get(tasks.size() - 1).toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_NOW_YOU_HAVE + tasks.size() + MESSAGE_IN_THE_LIST);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints list of current tasks"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param tasks Array of current stored tasks"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(MESSAGE_ERROR_TASK_UNAVAILABLE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_TASKS_IN_LIST);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\" \" + taskNumber + \".\" + task);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskNumber++;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints returned search results for schedule and find commands"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param filteredTasks The ArrayList of Tasks that were filtered to contain the searchterm"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param filterField Searchterm"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param command Either \"find\" or \"schedule\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printFilteredResults(ArrayList\u003cTask\u003e filteredTasks, String filterField, String command)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws WalterException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (isFilteredTasksEmpty(filteredTasks, filterField, command)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printFilteredTaskMessage(filterField, command);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printFilteredTasksList(filteredTasks);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns true when there are empty search results"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param filteredTasks The ArrayList of Tasks that were filtered to contain the searchterm"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param filterField Searchterm"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param command Either \"find\" or \"schedule\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public boolean isFilteredTasksEmpty(ArrayList\u003cTask\u003e filteredTasks, String filterField, String command)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws WalterException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        boolean isEmpty \u003d false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                System.out.println(\"I could not find any tasks with the word: \" + filterField);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                isEmpty \u003d true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case \"schedule\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                System.out.println(\"You have nothing scheduled on: \" + filterField);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                isEmpty \u003d true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new WalterException(EXCEPTION_UNABLE_TO_DETERMINE_TASK);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return isEmpty;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints the header message for schedule and find functions"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param filterField Searchterm"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param command Either \"find\" or \"schedule\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printFilteredTaskMessage(String filterField, String command) throws WalterException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"This is what I have found for: \" + filterField);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        case \"schedule\":"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Here are the events you have on \" + filterField + \":\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throw new WalterException(EXCEPTION_UNABLE_TO_DETERMINE_TASK);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints all tasks that were filtered out"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param filteredTasks The ArrayList of Tasks that were filtered to contain the searchterm"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printFilteredTasksList (ArrayList\u003cTask\u003e filteredTasks) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int taskCount \u003d 1;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (Task task : filteredTasks) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String taskNumber \u003d \" \" + taskCount + \". \";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(taskNumber + task.toString());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskCount++;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints error message when file creation fails"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(EXCEPTION_FILE_ERROR);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints error messages from thrown WalterExceptions"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param errorMessage The message to be displayed according to the error"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showWalterError(String errorMessage) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints error message when invalid number is entered"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showInvalidNumberError() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(EXCEPTION_INVALID_TASK_NUMBER);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints error message when invalid input is entered"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showInvalidInputError() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(EXCEPTION_DONE_EXPECTED_INTEGER);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints error message when file error occurs"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showFileSaveError() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(EXCEPTION_FILE_WRITE_ERROR);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints error message when an invalid date format is entered"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showInvalidDateFormatError() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(EXCEPTION_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints confirmation message for taskList being cleared"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printClearTaskListConfirmation() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_CLEAR_CONFIRMED);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 266
    }
  },
  {
    "path": "src/main/java/walter/exceptions/WalterException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * Exception class for exceptions specific to walter.walter"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class WalterException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public WalterException (String errorMessage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 18
    }
  },
  {
    "path": "src/main/java/walter/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The Deadline class inherits from the Task class and is used to create deadline objects"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEADLINE_ICON \u003d \"[D]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_INFO_START \u003d \" (By: \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_INFO_END \u003d \")\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public Deadline(String description, String by, String date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getTaskIcon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return DEADLINE_ICON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getTimingInformation() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return DEADLINE_ICON + super.toString() + MESSAGE_INFO_START + by + MESSAGE_INFO_END;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 38
    }
  },
  {
    "path": "src/main/java/walter/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The Event class inherits from the Task class and is used to create event objects"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EVENT_ICON \u003d \"[E]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_INFO_START \u003d \" (At: \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_INFO_END \u003d \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public Event(String description, String at, String date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getTaskIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return EVENT_ICON;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getTimingInformation() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return EVENT_ICON + super.toString() + MESSAGE_INFO_START + at + MESSAGE_INFO_END;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 39
    }
  },
  {
    "path": "src/main/java/walter/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The Task class provides a template for the Task object where description and status is stored"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TICK_ICON \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String CROSS_ICON \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return (isDone ? TICK_ICON : CROSS_ICON);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void setAsDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public abstract String getTaskIcon();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public abstract String getTimingInformation();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public abstract String getDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 45
    }
  },
  {
    "path": "src/main/java/walter/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The Todo class inherits from the Task class and is used to create todo objects"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TODO_ICON \u003d \"[T]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TIME_INFO \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"9999-12-31\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.date \u003d LocalDate.parse(DEFAULT_DATE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getTaskIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return TODO_ICON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getTimingInformation() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return TIME_INFO;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return TODO_ICON + super.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 37
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "dojh111": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "javac -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "dojh111": 1,
      "-": 20
    }
  }
]
