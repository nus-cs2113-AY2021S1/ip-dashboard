[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "# walter project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/walter.java` file, right-click it, and choose `Run walter.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "dojh111": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/walter/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.exceptions.WalterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //Exception messages"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_EMPTY_FIELD \u003d \"Oh no... You have to enter a task number. Please try again!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_TIMEDEVENT_INTRO \u003d \"Oh no! ;-;\\nThe \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_TIMEDEVENT_BODY \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            \" command requires both description and time information in the format of: \\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_TIMEDEVENT_DESCRIPTION \u003d \"[description] \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_TIMEDEVENT_TIMEINFO \u003d \" [time information]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_EMPTY_TODO \u003d \"Oh no! The description of the todo cannot be empty ;-;\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_EMPTY_DATE \u003d \"Oh no! The please enter a date in YYYY-MM-DD format!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_EMPTY_SEARCHTERM \u003d \"Oh no! The search term cannot be empty!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String BLANK_SPACE \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String WHITESPACE_IDENTIFIER \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String HYPHEN_IDENTIFIER \u003d \"-\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final int DATE_FORMAT_SIZE \u003d 3;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"MMM d yyyy\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Removes the command passed into the method"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param userInput Original string typed by user and to be modified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param commandToRemove Command to be removed from string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static String removeCommandFromInput(String userInput, String commandToRemove) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String modifiedUserInput \u003d userInput.replace(commandToRemove, BLANK_SPACE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return modifiedUserInput.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns a string array with the task\u0027s description and additional information"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param identifier Identifier token to split the string with"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static String[] determineTaskInformation(String userInput, String commandToRemove, String identifier) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String modifiedString \u003d removeCommandFromInput(userInput, commandToRemove);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return modifiedString.split(identifier);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /** Checks for invalid command and throws WalterException */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static void checkForValidInput(String[] splitUserInput) throws WalterException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (splitUserInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throw new WalterException(EXCEPTION_EMPTY_FIELD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Checks and throws WalterException if no argument was passed in as argument"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param field Argument to be checked"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static void checkForEmptySingleField(String field, String command) throws WalterException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (field.equals(BLANK_SPACE)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new WalterException(EXCEPTION_EMPTY_TODO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new WalterException(EXCEPTION_EMPTY_SEARCHTERM);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case \"schedule\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new WalterException(EXCEPTION_EMPTY_DATE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Validates arguments for events with time descriptions"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param informationStrings Arguments split by whitespaces"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param eventIdentifier Identifier to distinguish events and deadlines"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static void checkForValidFieldEntered(String[] informationStrings, String command, String eventIdentifier)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws WalterException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        boolean fieldsArePresent \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check if both fields have been fulfilled"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (String information : informationStrings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (information.equals(BLANK_SPACE)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fieldsArePresent \u003d false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check for valid information"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (informationStrings.length \u003c 2 || !fieldsArePresent) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String exceptionMessage \u003d EXCEPTION_TIMEDEVENT_INTRO + command +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    EXCEPTION_TIMEDEVENT_BODY +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    EXCEPTION_TIMEDEVENT_DESCRIPTION + eventIdentifier + EXCEPTION_TIMEDEVENT_TIMEINFO;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throw new WalterException(exceptionMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /** Returns an arraylist which contains information to replace date in original string */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static ArrayList\u003cString\u003e determineDateInformation(String timeInformation) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] splitTimeInformation \u003d timeInformation.split(WHITESPACE_IDENTIFIER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cString\u003e replacementStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check if substring contains 2 \u0027-\u0027"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (String stringInformation : splitTimeInformation) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (stringInformation.contains(HYPHEN_IDENTIFIER)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (checkForValidDateFormat(stringInformation)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        replacementStrings \u003d formatDateInformation(stringInformation);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        Ui.showInvalidDateFormatError();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return replacementStrings;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /** Formats date object into specified format and returns both original and formatted strings */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static ArrayList\u003cString\u003e formatDateInformation(String stringInformation) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDate taskDate;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cString\u003e replacementStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        replacementStrings.add(stringInformation);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskDate \u003d LocalDate.parse(stringInformation);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String formattedDate \u003d taskDate.format(DateTimeFormatter.ofPattern(DATE_FORMAT));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        replacementStrings.add(formattedDate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return replacementStrings;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /** Returns true when string contains 3 members separated by 2 hyphens */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static boolean checkForValidDateFormat(String stringInformation) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] splitDate \u003d stringInformation.split(HYPHEN_IDENTIFIER);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check for empty fields"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (String subString : splitDate) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (subString.equals(BLANK_SPACE)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check for only 3 inputs"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return splitDate.length \u003d\u003d DATE_FORMAT_SIZE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /** Returns array of strings from splitting given string with whitespace */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String[] divideUserCommand(String userInput) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return userInput.split(WHITESPACE_IDENTIFIER);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /** Returns command from typed user input */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String determineCommand(String[] splitUserInput) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return splitUserInput[0];"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 161
    }
  },
  {
    "path": "src/main/java/walter/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //File Path and other constants"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String SAVE_DELIMITER \u003d \"--\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String FILE_MESSAGE_CREATED_SUCCESS \u003d \"Save file creation successful! :D\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String FILE_MESSAGE_NO_SAVE_DETECTED \u003d \"No previous saves detected! Creating save file...\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TODO_ICON \u003d \"[T]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEADLINE_ICON \u003d \"[D]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EVENT_ICON \u003d \"[E]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Builds and returns an ArrayList of tasks from the save file. If no save file is found, a new file is created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return ArrayList of tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public ArrayList\u003cTask\u003e readFileContents() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File saveFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Read from file if exists, else create new directory and files"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (saveFile.exists()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Re-create task objects in the array"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskInformation \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String[] taskComponents \u003d taskInformation.split(SAVE_DELIMITER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskIcon \u003d taskComponents[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskStatus \u003d taskComponents[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskDescription \u003d taskComponents[2];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskTimingInformation;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                switch (taskIcon) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case TODO_ICON:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    taskList.add(new Todo(taskDescription));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case DEADLINE_ICON:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    taskTimingInformation \u003d taskComponents[3];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    taskDate \u003d taskComponents[4];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    taskList.add(new Deadline(taskDescription, taskTimingInformation, taskDate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case EVENT_ICON:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    taskTimingInformation \u003d taskComponents[3];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    taskDate \u003d taskComponents[4];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    taskList.add(new Event(taskDescription, taskTimingInformation, taskDate));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                //Set status of task to done if required"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (Integer.parseInt(taskStatus) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    taskList.get(taskList.size() - 1).setAsDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //No existing file detected. Create new save file"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(FILE_MESSAGE_NO_SAVE_DETECTED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            boolean fileCreated \u003d saveFile.createNewFile();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (fileCreated) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                System.out.println(FILE_MESSAGE_CREATED_SUCCESS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Writes data from the tasks array onto a file, so that data can be saved"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param tasks ArrayList of tasks to be written onto the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void writeToFile(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Clearing file before writing"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        FileWriter fwClear \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fwClear.write(BLANK_STRING);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fwClear.close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Append information into file"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            int taskStatus;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Determine status to write to file based on task status"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (task.getStatus()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                taskStatus \u003d 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                taskStatus \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Create text string to write so save file"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String taskToSave \u003d task.getTaskIcon() + SAVE_DELIMITER + taskStatus + SAVE_DELIMITER"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    + task.getDescription() + SAVE_DELIMITER + task.getTimingInformation() + SAVE_DELIMITER"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    + task.getDate() +System.lineSeparator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(taskToSave);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 112
    }
  },
  {
    "path": "src/main/java/walter/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.exceptions.WalterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String BLANK_SPACE \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"9999-12-31\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"MMM d yyyy\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String COMMAND_SCHEDULE \u003d \"schedule\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Adds new timed event tasks such as events or deadlines into the task list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @params userInput  Original input by user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @params command  The command entered - Either event or deadline"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @params eventIdentifier  Identifier to determine string information - Either /at or /by"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void addNewTimedEvent(String userInput, String command, String eventIdentifier) throws WalterException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String additionalInformation;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String unformattedDate \u003d DEFAULT_DATE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cString\u003e dateInformation;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] informationStrings \u003d Parser.determineTaskInformation(userInput, command, eventIdentifier);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Parser.checkForValidFieldEntered(informationStrings, command, eventIdentifier);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Set variables"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        description \u003d informationStrings[0].trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        additionalInformation \u003d informationStrings[1].trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        dateInformation \u003d Parser.determineDateInformation(additionalInformation);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (dateInformation.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            unformattedDate \u003d dateInformation.get(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String formattedDate \u003d dateInformation.get(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            additionalInformation \u003d additionalInformation.replace(unformattedDate, formattedDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new task objects"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskList.add(new Event(description, additionalInformation, unformattedDate));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskList.add(new Deadline(description, additionalInformation, unformattedDate));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /** Adds todo task into taskList */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void addTodoTask(String userInput) throws WalterException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String taskDescription \u003d Parser.removeCommandFromInput(userInput, COMMAND_TODO);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Parser.checkForEmptySingleField(taskDescription, COMMAND_TODO);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.add(new Todo(taskDescription));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void findTask(String userInput) throws WalterException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String searchTerm \u003d Parser.removeCommandFromInput(userInput, COMMAND_FIND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Parser.checkForEmptySingleField(searchTerm, COMMAND_FIND);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Filter for tasks with searchterm using stream"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cTask\u003e searchResults \u003d (ArrayList\u003cTask\u003e) taskList.stream()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                .filter((s) -\u003e s.toString().contains(searchTerm))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Ui.printFilteredResults(searchResults, searchTerm, COMMAND_FIND);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void getSchedule(String userInput) throws WalterException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String searchDate \u003d Parser.removeCommandFromInput(userInput, COMMAND_SCHEDULE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Parser.checkForEmptySingleField(searchDate, COMMAND_SCHEDULE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            LocalDate selectedDate \u003d LocalDate.parse(searchDate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String inputDate \u003d selectedDate.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String formattedDate \u003d selectedDate.format(DateTimeFormatter.ofPattern(DATE_FORMAT));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ArrayList\u003cTask\u003e tasksOnDay \u003d (ArrayList\u003cTask\u003e) taskList.stream()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    .filter((s) -\u003e s.getDate().equals(inputDate))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    .collect(toList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Ui.printFilteredResults(tasksOnDay, formattedDate, COMMAND_SCHEDULE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Ui.showInvalidDateFormatError();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Sets isDone of selected task to true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @params splitUserInput Array of strings after original user input has been split by whitespace"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String setTaskAsDone (String[] splitUserInput) throws WalterException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Parser.checkForValidInput(splitUserInput);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int taskNumber \u003d Integer.parseInt(splitUserInput[1]) - 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String markedItemDetails;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.get(taskNumber).setAsDone();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        markedItemDetails \u003d taskList.get(taskNumber).toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return markedItemDetails;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Removes task from the tasks ArrayList"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param splitUserInput Array of strings after original user input has been split by whitespace"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String deleteTask (String[]splitUserInput) throws WalterException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Parser.checkForValidInput(splitUserInput);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int taskToDelete \u003d Integer.parseInt(splitUserInput[1]) - 1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String deleteItemDetails \u003d taskList.get(taskToDelete).toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.remove(taskToDelete);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return deleteItemDetails;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 152
    }
  },
  {
    "path": "src/main/java/walter/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.sql.SQLOutput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //ASCII art logos"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String END_LOGO \u003d \"________              \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"___  __ )____  ______ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"__  __  |_  / / /  _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"_  /_/ /_  /_/ //  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"/_____/ _\\\\__, / \\\\___/ \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"        /____/        \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String WALTER_LOGO \u003d \"____    __    ____  ___       __      .___________. _______ .______   \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"\\\\   \\\\  /  \\\\  /   / /   \\\\     |  |     |           ||   ____||   _  \\\\     \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" \\\\   \\\\/    \\\\/   / /  ^  \\\\    |  |     `---|  |----`|  |__   |  |_)  |    \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"  \\\\            / /  /_\\\\  \\\\   |  |         |  |     |   __|  |      /     \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"   \\\\    /\\\\    / /  _____  \\\\  |  `----.    |  |     |  |____ |  |\\\\  \\\\----.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"    \\\\__/  \\\\__/ /__/     \\\\__\\\\ |_______|    |__|     |_______|| _| `._____|\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //General UI messages"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_TASK_ADDED_CONFIRM \u003d \" Got it, I\u0027ve added this task: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_HELLO_FROM \u003d \"Hello from\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_INTRO_GREETING \u003d \" Hello! I\u0027m walter.walter  ◕_◕\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_INTRO_WALTER_QUERY \u003d \" What can I do for you?\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_CLOSING \u003d \" I\u0027m sad to see you go. Hope to see you again soon! :D\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_DOUBLE_WHITESPACE \u003d \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_LINE_SEPARATOR \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            \"______________________________________________________________________________\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_NOW_YOU_HAVE \u003d \" Now you have \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_IN_THE_LIST \u003d \" in the list.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_ERROR_TASK_UNAVAILABLE \u003d \"No tasks available... (｡◕‿‿◕｡)\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_TASKS_IN_LIST \u003d \" Here are the tasks in your list: \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //Exception error messages"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_FILE_ERROR \u003d \"Oh no, something went wrong while creating a save file ;-;\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_INVALID_TASK_NUMBER \u003d \"Invalid task number entered... Please try again!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_DONE_EXPECTED_INTEGER \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            \"I\u0027m sorry, I don\u0027t understand that ;-;. Please enter a number instead!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_FILE_WRITE_ERROR \u003d \"Oh no, something went wrong while saving!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_INVALID_DATE_FORMAT \u003d \"Please enter date in this format:\\n[YYYY-MM-DD]\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /** Prints separator component after text is printed */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static void printSeparator() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_LINE_SEPARATOR);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /** Prints startup greet sequence */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printStartupSequence() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_HELLO_FROM + WALTER_LOGO);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_INTRO_GREETING);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_INTRO_WALTER_QUERY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /** Prints closing sequence */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printClosingSequence() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_CLOSING);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(END_LOGO);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /** Returns read user command */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String readUserCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints the confirmation messages for setTaskAsDone and deleteTask"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param message The header message to inform the user whether action is set or delete"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param itemDetails Details of the item that was set or deleted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printSetDeleteConfirmMessage(String message, String itemDetails) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\" \" + itemDetails);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints confirmation text when a new task is added"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param tasks Array of current stored tasks"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printTaskAddedConfirmation(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_TASK_ADDED_CONFIRM);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_DOUBLE_WHITESPACE + tasks.get(tasks.size() - 1).toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_NOW_YOU_HAVE + tasks.size() + MESSAGE_IN_THE_LIST);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Print list of current tasks"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param tasks Array of current stored tasks"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(MESSAGE_ERROR_TASK_UNAVAILABLE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_TASKS_IN_LIST);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\" \" + taskNumber + \".\" + task);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskNumber++;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints returned search results for schedule and find commands"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param filteredTasks The ArrayList of Tasks that were filtered to contain the searchterm"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param filterField Searchterm"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param command Either \"find\" or \"schedule\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static void printFilteredResults(ArrayList\u003cTask\u003e filteredTasks, String filterField, String command) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (isEmptyFilteredTasks(filteredTasks, filterField, command)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printFilteredTaskMessage(filterField, command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printFilteredTasksList(filteredTasks);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /** Returns true when there are empty search results */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static boolean isEmptyFilteredTasks(ArrayList\u003cTask\u003e filteredTasks, String filterField, String command) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        boolean isEmpty \u003d false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                System.out.println(\"I could not find any tasks with the word: \" + filterField);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                isEmpty \u003d true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case \"schedule\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                System.out.println(\"You have nothing scheduled on: \" + filterField);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                isEmpty \u003d true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return isEmpty;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /** Prints the header message for schedule and find functions */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static void printFilteredTaskMessage(String filterField, String command) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"This is what I have found for: \" + filterField);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        case \"schedule\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Here are the events you have on \" + filterField + \":\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prints all tasks that were filtered out"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param filteredTasks The ArrayList of Tasks that were filtered to contain the searchterm"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static void printFilteredTasksList (ArrayList\u003cTask\u003e filteredTasks) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int taskCount \u003d 1;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (Task task : filteredTasks) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String taskNumber \u003d \" \" + taskCount + \". \";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(taskNumber + task.toString());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskCount++;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(EXCEPTION_FILE_ERROR);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showWalterError(String errorMessage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showInvalidNumberError() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(EXCEPTION_INVALID_TASK_NUMBER);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showInvalidInputError() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(EXCEPTION_DONE_EXPECTED_INTEGER);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showFileSaveError() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(EXCEPTION_FILE_WRITE_ERROR);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static void showInvalidDateFormatError() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(EXCEPTION_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 212
    }
  },
  {
    "path": "src/main/java/walter/Walter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import walter.exceptions.WalterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * Duke is a chat bot which can help the user do multiple tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Walter {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //Identifiers and values"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEADLINE_IDENTIFIER \u003d \"/by\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EVENT_IDENTIFIER \u003d \"/at\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_TASK_MARKED \u003d \"NICE! (｡◕‿‿◕｡) I\u0027ve marked the task as done!:\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_TASK_DELETED \u003d \"Alright! I\u0027ve removed this task from the list:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //Exception Messages"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXCEPTION_INVALID_COMMAND \u003d \"I do not know what that means ;-;, please try again!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Parser parse;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public Walter(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        parse \u003d new Parser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            tasks \u003d new TaskList(storage.readFileContents());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /** Runs the main Walter program until termination */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] splitUserInput;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String details;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        boolean isFinished \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.printStartupSequence();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Loop infinitely until user enters \"bye\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        while (!isFinished) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            userInput \u003d ui.readUserCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            splitUserInput \u003d parse.divideUserCommand(userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            command \u003d parse.determineCommand(splitUserInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                switch (command) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"bye\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    isFinished \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    ui.printTaskList(tasks.getTaskList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    details \u003d tasks.setTaskAsDone(splitUserInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    ui.printSetDeleteConfirmMessage(MESSAGE_TASK_MARKED, details);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    details \u003d tasks.deleteTask(splitUserInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    ui.printSetDeleteConfirmMessage(MESSAGE_TASK_DELETED, details);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    tasks.addTodoTask(userInput);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    ui.printTaskAddedConfirmation(tasks.getTaskList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    tasks.addNewTimedEvent(userInput, COMMAND_DEADLINE, DEADLINE_IDENTIFIER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    ui.printTaskAddedConfirmation(tasks.getTaskList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    tasks.addNewTimedEvent(userInput, COMMAND_EVENT, EVENT_IDENTIFIER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    ui.printTaskAddedConfirmation(tasks.getTaskList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"schedule\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    tasks.getSchedule(userInput);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"find\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    tasks.findTask(userInput);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    throw new WalterException(EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (WalterException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showWalterError(e.getErrorMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showInvalidInputError();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showFileSaveError();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.printClosingSequence();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        new Walter(\"walter.txt\").run();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 117,
      "-": 2
    }
  },
  {
    "path": "src/main/java/walter/exceptions/WalterException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * Exception class for exceptions specific to walter.walter"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class WalterException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public WalterException (String errorMessage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 18
    }
  },
  {
    "path": "src/main/java/walter/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The Deadline class inherits from the Task class and is used to create deadline objects"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEADLINE_ICON \u003d \"[D]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_INFO_START \u003d \" (By: \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_INFO_END \u003d \")\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public Deadline(String description, String by, String date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getTaskIcon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return DEADLINE_ICON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getTimingInformation() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return DEADLINE_ICON + super.toString() + MESSAGE_INFO_START + by + MESSAGE_INFO_END;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 38
    }
  },
  {
    "path": "src/main/java/walter/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The Event class inherits from the Task class and is used to create event objects"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EVENT_ICON \u003d \"[E]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_INFO_START \u003d \" (At: \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_INFO_END \u003d \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public Event(String description, String at, String date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getTaskIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return EVENT_ICON;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getTimingInformation() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return EVENT_ICON + super.toString() + MESSAGE_INFO_START + at + MESSAGE_INFO_END;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 39
    }
  },
  {
    "path": "src/main/java/walter/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The Task class provides a template for the Task object where description and status is stored"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TICK_ICON \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String CROSS_ICON \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return (isDone ? TICK_ICON : CROSS_ICON);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void setAsDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public abstract String getTaskIcon();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public abstract String getTimingInformation();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public abstract String getDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 45
    }
  },
  {
    "path": "src/main/java/walter/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package walter.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The Todo class inherits from the Task class and is used to create todo objects"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TODO_ICON \u003d \"[T]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TIME_INFO \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"9999-12-31\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.date \u003d LocalDate.parse(DEFAULT_DATE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getTaskIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return TODO_ICON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getTimingInformation() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return TIME_INFO;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return TODO_ICON + super.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 37
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "dojh111": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "javac -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "dojh111": 1,
      "-": 20
    }
  }
]
