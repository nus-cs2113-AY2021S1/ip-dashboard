[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": "D | 0 | return book | June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "E | 0 | project meeting | Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "T | 1 | join sports club"
      }
    ],
    "authorContributionMap": {
      "bqxy": 4
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Duke is a **desktop app for managing any tasks, optimised for use via a Command Line Interface (CLI)**. If you can type fast, Duke can get your task management done faster than traditional GUI apps."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "# Quick Start"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "1. Ensure you have Java ```11``` or above installed in your Computer."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "2. Download the latest ```ip.jar```"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "3. Copy the file to the folder you want to use as the *home folder* for your Task List."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "4. In CLI, type ```java \u003cABSOLUTE_PATH.jar\u003e```*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "*For the best experience on Windows, "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "1. Change CLI font to ```NSimSun```"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "2. Type ```chcp 65001```"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "3. Start the program ```java -Dfile.encoding\u003dUTF-8 -jar \u003cABSOLUTE_PATH.jar\u003e```"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "# Features"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* List Tasks: ```list```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* To-Do Task: ```todo```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Event Task: ```event```"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Deadline Task: ```deadline```"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Done Task: ```done```"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Delete Task: ```delete```"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Find Tasks: ```find```"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* End Program: ```bye```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### List of Tasks: ```list```"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Shows the list of tasks stored in Duke.  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Format: ```list```"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### To-Do Task: ```todo```"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Stores a new To-Do task.  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Format: ```todo \u003cDETAILS\u003e```"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Event Task: ```event```"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Stores a new Event task.  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Format: ```event \u003cDETAILS\u003e /at \u003cDATE_AND_OR_TIME\u003e```  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "If date and/or time is entered in this format: ```YYYY-MM-DD TTTT```, Duke will recognise and output it in the following format ```Month Day Year Time```  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": "For example, if user inputs ```2020-1-1 1800```, the output by Duke is ```Jan 1 2020 1800```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Deadline Task: ```deadline```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Stores a new Deadline task.  "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Format: ```deadline \u003cDETAILS\u003e /by \u003cDATE_AND_OR_TIME\u003e```  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bqxy"
        },
        "content": "If date and/or time is entered in this format: ```YYYY-MM-DD TTTT```, Duke will recognise and output it in the following format ```Month Day Year Time```  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bqxy"
        },
        "content": "For example, if user inputs ```2020-1-1 1800```, the output by Duke is ```Jan 1 2020 1800```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Done Task: ```done```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Marks a task in the list as done.  "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Format: ```done \u003cTASK_NUMBER\u003e```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Delete Task: ```delete```"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Deletes a task in the list.  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Format: ```delete \u003cTASK_NUMBER\u003e```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Find Task: ```find```"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Find task using search words.  "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Format: ```find \u003cSEARCH_WORDS\u003e```"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### End Program: ```bye```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Ends program.  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Format: ```bye```"
      }
    ],
    "authorContributionMap": {
      "bqxy": 61
    }
  },
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": " * Contains all commands related to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static final String BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static final String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static final String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static final String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static final String DONE \u003d \"done\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static final String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static final String FIND \u003d \"FIND\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 15
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": " * Represents a type of task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Constructor for Deadline object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param description description of Deadline object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param by deadline of the Deadline object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns the description, schedule and letter-code to represent Deadline object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return description, schedule and letter-code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return (\"[D]\" + super.toString() + \"(by:\" + by + \")\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 29
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": " * Represents main program of Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Ui.showWelcomeScreen();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        ArrayList\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        ArrayList\u003cString\u003e tasksText \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String filePath \u003d \"./data/duke.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            Storage.readFileContents(filePath, tasksList ,tasksText);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            TaskList.listCommand(tasksList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String line \u003d in.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String command \u003d Parser.parseCommand(line);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            isExit \u003d TaskList.executeCommand(command, tasksList, filePath, tasksText);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Ui.showEndScreen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "bqxy": 35
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": " * Represents exceptions related to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 10
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": " * Represents a type of task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected String dayAndTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Constructor for Event object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param description description of Event object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param dayAndTime day and time of the Event object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public Event(String description, String dayAndTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        this.dayAndTime \u003d dayAndTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns the description, schedule and letter-code to represent Event object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return description, schedule and letter-code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return (\"[E]\" + super.toString() + \"(at:\" + dayAndTime + \")\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 29
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": " * Deals with making sense of the user command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Parses the line inputted by user; determines if the line consists of any keywords related to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * the operations of Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line the line input by user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return either original line inputted by user or the wrong command that would be processed later."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static String parseCommand(String line) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (line.equals(\"bye\") || line.equals(\"list\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return line;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (line.contains(\"done\") || line.contains(\"deadline\") || line.contains(\"event\") ||"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                line.contains((\"todo\")) || line.contains((\"delete\")) || line.contains(\"find\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return line;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return showWrongCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns the wrong command when line inputted by user does not contain any keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * related to the operations of Duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return the wrong command that would be processed later."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static String showWrongCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": "       return (\"I\u0027m sorry, but I don\u0027t know what that means :-C\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns true if string input consists of only digits."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line string inputted by user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return true if string consists if only digits else returns false."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static boolean isOnlyDigits(String line) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        int length \u003d line.length();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (line.charAt(i) \u003e\u003d \u00270\u0027 \u0026\u0026 line.charAt(i) \u003c\u003d \u00279\u0027) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns true if string input is a valid year format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line string inputted by user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return true if string is a valid year format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static boolean isValidYear(String line) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        boolean isValidLength \u003d line.length() \u003d\u003d 4;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return isValidLength \u0026\u0026 isOnlyDigits(line);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns true if string input is a valid month format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line string inputted by user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return true if string is a valid month format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static boolean isValidMonth(String line) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        boolean isValidLength \u003d line.length() \u003d\u003d 2 || line.length() \u003d\u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return isValidLength \u0026\u0026 isOnlyDigits(line);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns true if string input is a valid day format."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line string inputted by user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return true if string is a valid day format."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static boolean isValidDay(String line) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        boolean isValidLength \u003d line.length() \u003d\u003d 2 || line.length() \u003d\u003d 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return isValidLength \u0026\u0026 isOnlyDigits(line);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns true if string input is a valid time format."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line string inputted by user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return true if string is a valid time format."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static boolean isValidTime(String line) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        boolean isValidLength \u003d line.length() \u003d\u003d 4;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return isValidLength \u0026\u0026 isOnlyDigits(line);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns true if string input is a valid date format."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line string inputted by user."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return true if string is a valid date format."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static boolean isValidDate(String line) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String[] words \u003d line.split(\" \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String[] date \u003d words[1].split(\"-\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return isValidYear(date[0]) \u0026\u0026 isValidMonth(date[1]) \u0026\u0026 isValidDay(date[2]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns true if string input is a valid date and time format."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line string inputted by user."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return true if string is a valid date and time format."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static boolean isValidDateAndTime(String line) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String[] words \u003d line.split(\" \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (words.length \u003c 3) { // Check if time exist in command"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String date \u003d \" \" + words[1];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return isValidDate(date) \u0026\u0026 isValidTime(words[2]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns number of year from string input by user."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line string inputted by user."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return number of year."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static String getYear(String line) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String[] words \u003d line.split(\" \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String[] date \u003d words[1].split(\"-\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return date[0];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns number of month in alphabets from string input by user."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line string inputted by user."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return number of month in alphabets."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static String getMonth(String line) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String[] words \u003d line.split(\" \");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String[] date \u003d words[1].split(\"-\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        switch (date[1]) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"1\": case \"01\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return \"Jan\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"2\": case \"02\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return \"Feb\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"3\": case \"03\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return \"Mar\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"4\": case \"04\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return \"Apr\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"5\": case \"05\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return \"May\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"6\": case \"06\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return \"Jun\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"7\": case \"07\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return \"Jul\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"8\": case \"08\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return \"Aug\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"9\": case \"09\":"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return \"Sep\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"10\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return \"Oct\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"11\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return \"Nov\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"12\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return \"Dec\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return date[1];"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns number of day from string input by user."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line string inputted by user."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return number of day."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static String getDay(String line) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String[] words \u003d line.split(\" \");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String[] date \u003d words[1].split(\"-\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return date[2];"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns time from string input by user."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line string inputted by user."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return time in 24-hour format."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static String getTime(String line) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String[] words \u003d line.split(\" \");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return words[2];"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 205
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Reads file content whenever Duke starts up and updates the content in text file into both arrays"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * that contains the tasks and tasks (in text format)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param filePath file path that contains all the tasks in text format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param storeTasks array that stores all tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param tasksText array that stores all tasks in text format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws FileNotFoundException if file that contains data of tasks is not found."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws DukeException if folder not found."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static void readFileContents(String filePath, ArrayList\u003cTask\u003e storeTasks,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                                         ArrayList\u003cString\u003e tasksText) throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            createFile(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"IO Error\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        File folder \u003d new File(\"./data/\"); // folder directory for duke.txt"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        // Check if folder exist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (folder.isDirectory() \u003d\u003d false) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            throw new DukeException(\"Folder not found\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        // Read tasks into Duke"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            tasksText.add(line);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String[] words \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            // Read Todo tasks into Duke"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (words[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                storeTasks.add(new ToDo(words[2]));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                if (words[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    storeTasks.get(storeTasks.size() - 1).setDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            // Read Deadline tasks into Duke"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (words[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                words[3] \u003d \" \" + words[3];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                storeTasks.add(new Deadline(words[2], words[3]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                if (words[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    storeTasks.get(storeTasks.size() - 1).setDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            // Read Event tasks into Duke"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (words[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                words[3] \u003d \" \" + words[3];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                storeTasks.add(new Event(words[2], words[3]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                if (words[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    storeTasks.get(storeTasks.size() - 1).setDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Writes task data to text file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param filePath file path that contains all the tasks in text format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param textToAdd string that would be added to the text file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws IOException if there are issues with input or output operations."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static void writeToFile(String filePath, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        fw.write(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Updates text file whenever an operation is done on the task,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * for e.g. todo, event, deadline and delete."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param tasksText array that stores all tasks in text format."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param filePath file path that contains all the tasks in text format."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws FileNotFoundException if file that contains data of tasks is not found."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static void updateFile(ArrayList\u003cString\u003e tasksText, String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        PrintWriter pw \u003d new PrintWriter(filePath); // reset .txt file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksText.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                writeToFile(filePath, tasksText.get(i));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"IO Error\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Creates file if existing file is not available."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param filePath file path that contains all the tasks in text format."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws IOException if there are issues with input or output operations."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static void createFile(String filePath) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        File storageFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (storageFile.exists()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (!storageFile.getParentFile().exists()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            storageFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        storageFile.createNewFile();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        System.out.println(storageFile.getAbsolutePath());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 117
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": " * Represents all the tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Constructor for Task object. By default, the task is not completed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param description description of Task object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns status of tasks; whether if its done or not."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return status of task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); // return tick or X symbols"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns description of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return description of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Sets task as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns the description along with the status of the task represented by"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * ticks (done) and cross (not done)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return symbols that determine if the task is done or not."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return (\"[\" + getStatusIcon() + \"]\" + \" \" + description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 55
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": " * Represents all operations for the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns true or false that will determine if the program continues to run."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Executes the respective commands after input by user is parsed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * If the method determines that the command is not recognised,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * the program will prompt the user for another input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param command command determined by parser method (parseCommand)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param taskList array that stores all tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param filePath file path that contains all the tasks in text format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param tasksText array that stores all tasks in text format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static boolean executeCommand(String command, ArrayList\u003cTask\u003e taskList, String filePath,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                                            ArrayList\u003cString\u003e tasksText) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (command.contains(\"done\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                TaskList.doneCommand(command, taskList, filePath, tasksText);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (command.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                TaskList.deadlineCommand(command, taskList, filePath, tasksText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (command.contains(\"todo\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                TaskList.todoCommand(command, taskList, filePath, tasksText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (command.contains(\"event\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                TaskList.eventCommand(command, taskList, filePath, tasksText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (command.contains(\"delete\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                TaskList.deleteCommand(command, taskList, filePath, tasksText);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (command.contains(\"find\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                TaskList.findCommand(command, taskList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        System.out.println(command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Prints the list which contains all the tasks."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param storeTasks array that contains all tasks."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static void listCommand(ArrayList\u003cTask\u003e storeTasks) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        System.out.println(\"  Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        for (int i \u003d 0; i \u003c storeTasks.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"  \" + (i + 1) + \".\" + storeTasks.get(i));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Prints the corresponding task inputted by user that is done (finished)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Also updates both array of tasks and tasks (in text format)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Once the arrays are updated, the text file is updated to sync with updated task list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line the line input by user."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param storeTasks array that stores all tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param filePath file path that contains all the tasks in text format."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param tasksText array that stores all tasks in text format."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws DukeException if task number does not exist in list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static void doneCommand(String line, ArrayList\u003cTask\u003e storeTasks, String filePath,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                                    ArrayList\u003cString\u003e tasksText) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String[] words \u003d line.split(\" \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            int taskNum \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (taskNum \u003e\u003d 1 \u0026\u0026 taskNum \u003c\u003d storeTasks.size()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                storeTasks.get(taskNum - 1).setDone();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"  Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"   \" + taskNum + \".\" + storeTasks.get(taskNum - 1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            // Update text file"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String textLine \u003d tasksText.get(taskNum - 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String[] text \u003d textLine.split(\" \\\\| \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (text[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                String newText \u003d \"T\" + \" | \" + \"1\" + \" | \" + storeTasks.get(taskNum - 1).description;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                tasksText.set(taskNum - 1, newText);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (text[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                String newText \u003d \"D\" + \" | \" + \"1\" + \" | \" + text[2] + \" | \" + text[3];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                tasksText.set(taskNum - 1, newText);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (text[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                String newText \u003d \"E\" + \" | \" + \"1\" + \" | \" + text[2] + \" | \" + text[2];"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                tasksText.set(taskNum - 1, newText);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                Storage.updateFile(tasksText, filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"Folder not found\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            throw new DukeException(\"Please select the appropriate task number on the list\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Prints the corresponding Deadline task inputted by user."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Also updates both array of tasks and tasks (in text format)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Once the arrays are updated, the text file is updated to sync with updated task list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line the line input by user."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param storeTasks array that stores all tasks."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param filePath file path that contains all the tasks in text format."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param tasksText array that stores all tasks in text format."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws DukeException if deadline description is empty."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws DukeException if \u0027/by\u0027 is not inside the command."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static void deadlineCommand(String line, ArrayList\u003cTask\u003e storeTasks, String filePath,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                                        ArrayList\u003cString\u003e tasksText) throws DukeException{"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String[] words \u003d line.split(\"/by\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            words[0] \u003d words[0].replace(\"deadline \", \"\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (words[0].isBlank()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                throw new DukeException(\"For deadline command, the format is\" +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                        \" \u0027deadline \u003cDETAILS\u003e /by \u003cDATE_AND_OR_TIME\u003e\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (!line.contains(\"/by\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                throw new DukeException(\"For deadline command, the format is\" +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                        \" \u0027deadline \u003cDETAILS\u003e /by \u003cDATE_AND_OR_TIME\u003e\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (Parser.isValidDateAndTime(words[1])) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                words[1] \u003d \" \" + Parser.getMonth(words[1]) + \" \" + Parser.getDay(words[1]) + \" \" +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                        Parser.getYear(words[1]) + \" \" + Parser.getTime(words[1]);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            else if (Parser.isValidDate(words[1])) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                words[1] \u003d \" \" + Parser.getMonth(words[1]) + \" \" + Parser.getDay(words[1]) + \" \" +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                        Parser.getYear(words[1]);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            storeTasks.add(new Deadline(words[0], words[1]));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"  Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"    \" + storeTasks.get(storeTasks.size() - 1));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"  Now you have \" + storeTasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            // Structuring text to write to file"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String text \u003d \"D\" + \" | \" + \"0\" + \" | \" + words[0] + \"|\" + words[1];"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            tasksText.add(text);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                Storage.updateFile(tasksText, filePath);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"Folder not found\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            throw new DukeException(\"For deadline command, the format is\" +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    \" \u0027deadline \u003cDETAILS\u003e /by \u003cDATE_AND_OR_TIME\u003e\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Prints the corresponding ToDo task inputted by user."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Also updates both array of tasks and tasks (in text format)."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Once the arrays are updated, the text file is updated to sync with updated task list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line the line input by user."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param storeTasks array that stores all tasks."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param filePath file path that contains all the tasks in text format."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param tasksText array that stores all tasks in text format."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws DukeException if todo description is empty."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static void todoCommand(String line, ArrayList\u003cTask\u003e storeTasks, String filePath,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                                    ArrayList\u003cString\u003e tasksText) throws DukeException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String[] words \u003d line.split(\"todo \");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (words[1].isBlank()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                throw new DukeException(\"For todo command, the format is\" + \" \u0027todo \u003cDETAILS\u003e\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            storeTasks.add(new ToDo(words[1]));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"  Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"    \" + storeTasks.get(storeTasks.size() - 1));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"  Now you have \" + storeTasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            // Structuring text to write to file"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String text \u003d \"T\" + \" | \" + \"0\" + \" | \" + storeTasks.get(storeTasks.size() - 1).description;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            tasksText.add(text);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                Storage.updateFile(tasksText, filePath);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"Folder not found\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            throw new DukeException(\"For todo command, the format is\" + \" \u0027todo \u003cDETAILS\u003e\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Prints the corresponding Event task inputted by user."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Also updates both array of tasks and tasks (in text format)."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Once the arrays are updated, the text file is updated to sync with updated task list."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line the line input by user."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param storeTasks array that stores all tasks."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param filePath file path that contains all the tasks in text format."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param tasksText array that stores all tasks in text format."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws DukeException if event description is empty."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws DukeException if \u0027/at\u0027 is not inside the command."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static void eventCommand(String line, ArrayList\u003cTask\u003e storeTasks, String filePath,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                                     ArrayList\u003cString\u003e tasksText) throws DukeException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String[] words \u003d line.split(\"/at\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            words[0] \u003d words[0].replace(\"event \", \"\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (words[0].isBlank()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                throw new DukeException(\"For event command, the format is\" +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                        \" \u0027event \u003cDETAILS\u003e /at \u003cDATE_AND_OR_TIME\u003e\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (!line.contains(\"/at\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                throw new DukeException(\"For event command, the format is\" +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                        \" \u0027event \u003cDETAILS\u003e /at \u003cDATE_AND_OR_TIME\u003e\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (Parser.isValidDateAndTime(words[1])) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                words[1] \u003d \" \" + Parser.getMonth(words[1]) + \" \" + Parser.getDay(words[1]) + \" \" +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                        Parser.getYear(words[1]) + \" \" + Parser.getTime(words[1]);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            else if (Parser.isValidDate(words[1])) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                words[1] \u003d \" \" + Parser.getMonth(words[1]) + \" \" + Parser.getDay(words[1]) + \" \" +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                        Parser.getYear(words[1]);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            storeTasks.add(new Event(words[0], words[1]));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"  Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"    \" + storeTasks.get(storeTasks.size() - 1));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"  Now you have \" + storeTasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            // Structuring text to write to file"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String text \u003d \"E\" + \" | \" + \"0\" + \" | \" + words[0] + \"|\" + words[1];"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            tasksText.add(text);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                Storage.updateFile(tasksText, filePath);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"Folder not found\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            throw new DukeException(\"For event command, the format is\" +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    \" \u0027event \u003cDETAILS\u003e /at \u003cDATE_AND_OR_TIME\u003e\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Prints the corresponding deleted task inputted by user."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Also updates both array of tasks and tasks (in text format)."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Once the arrays are updated, the text file is updated to sync with updated task list."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param line the line input by user."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param storeTasks array that stores all tasks."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param filePath file path that contains all the tasks in text format."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param tasksText array that stores all tasks in text format."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws FileNotFoundException if delete description is empty."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws DukeException if number of task inputted by user is out of range."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static void deleteCommand(String line, ArrayList\u003cTask\u003e storeTasks, String filePath,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                                      ArrayList\u003cString\u003e tasksText) throws DukeException {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String[] words \u003d line.split(\" \");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            int taskNum \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (taskNum \u003e\u003d 1 \u0026\u0026 taskNum \u003c\u003d storeTasks.size()) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"  Nice! I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"   \"  + storeTasks.get(taskNum - 1));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                storeTasks.remove(taskNum - 1);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                throw new DukeException(\"No such task on the list\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            // Update text file"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            tasksText.remove(taskNum - 1);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                Storage.updateFile(tasksText, filePath);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"Folder not found\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            throw new DukeException(\"No such task on the list\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static void findCommand(String line, ArrayList\u003cTask\u003e storeTasks) throws DukeException {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String[] words \u003d line.split(\"find \");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (words[1].isBlank()) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                throw new DukeException(\"For find command, the format is\" + \" \u0027find \u003cDETAILS\u003e\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"  Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            for (int i \u003d 0; i \u003c storeTasks.size(); i++) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                if (storeTasks.get(i).toString().contains(words[1])) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    System.out.println(\"  \" + (i + 1) + \".\" + storeTasks.get(i));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            throw new DukeException(\"For find command, the format is\" + \" \u0027find \u003cDETAILS\u003e\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 354
    }
  },
  {
    "path": "src/main/java/duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": " * Represents a type of task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Constructor for ToDo object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param description description of ToDo object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Returns the description along with its letter-code to represent ToDo object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @return description and letter-code."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return (\"[T]\" + super.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 25
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": " * Represents all interactions with the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    static final String WELCOME_SCREEN \u003d \" ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            + \"  Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            + \"  What can I do for you?\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            + \" ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    static final String END_SCREEN \u003d \" ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            + \"  Bye. Hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            + \" ____________________________________________________________\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Prints welcome screen when duke starts up."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static void showWelcomeScreen() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        System.out.println(WELCOME_SCREEN);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Prints end screen when user ends duke program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    protected static void showEndScreen() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        System.out.println(END_SCREEN);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 30
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "todo exercise"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": "deadline sign up class /by June 7th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "event conference /at June 8th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "find exercise"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "find class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "find conference"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "todo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "todo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "event /at 1pm"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "event /by 1pm"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "event presentation /by 1pm"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "deadline /by 1pm"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "deadline /at 1pm"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "deadline homework /at 1pm"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "delete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "delete"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "done"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": "done"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "blah"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": "deadline homework /by 2020-1-1 1300"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": "deadline homework /by 2020-2-2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "event presentation /at 2020-3-3 1300"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": "event presentation /at 2020-4-4"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "bqxy": 41
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "javac -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin  duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "bqxy": 3
    }
  }
]
