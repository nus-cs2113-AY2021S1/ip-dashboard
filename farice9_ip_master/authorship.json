[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "# Progress Log - AY20/21 Y2S1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "## Week 2"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Added Duke\u0027s skeleton greeting function"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Kept the original Duke logo print code in the commit"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Pushed to github"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "## Week 3"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "### Level 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Implemented greet, echo and exit functions to the bot"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "- The bot will repeat what the user inputs and exit when user says \"bye\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "### Level 2"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Implemented adding commands and list commands function"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "- The bot can store user\u0027s input and prints them out when requested"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "### Level 3"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Introduced a new Task class"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Implemented a mark tasks as done function"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Listing now shows if the task is done/not done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Added extra checks so that commands in upper-case are accepted as well"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Added extra checks to ensure the \"done\" parameter inserted by user is legible"
      }
    ],
    "authorContributionMap": {
      "farice9": 23,
      "-": 26
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Subclass of Task, for tasks with deadline"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public Deadline(String description) throws InvalidCommandException, InvalidDateException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // \"/\" indicates where the date input begins"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int dateStringIndex \u003d description.indexOf(\"/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (dateStringIndex \u003c 0) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Extract the deadline details and date separated by \"/\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.description \u003d description.trim().substring(\"deadline\".length(), dateStringIndex).trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.date \u003d description.substring(dateStringIndex + \"/by\".length()).trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "            numberOfTasks++;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.date + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 28
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": " * An interactive bot that performs various tasks based on user command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Last updated : 15 September 2020"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Functions implemented:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 1) Adding tasks to a list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 2) Printing the list of tasks stored"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 3) Indicating which task is done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 4) Different type of tasks (event, deadline, todo)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 5) Delete tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 6) Task storage onto a txt file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Main function"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "        ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Load the storage file content"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "            DukeFiles.initializeFile(listOfTasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "            System.out.println(\"Oh no! There\u0027s a problem loading file content\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "        greet();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "        processCommand(listOfTasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints greet user message and a simple user guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void greet() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Hey mate! Nice to meet you, I\u0027m Duke!\\nHow can I help you?\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Here are some commands you can use to interact with me:\\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "                \"todo \u003ctask\u003e                : Store what needs to be done \\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "                \"deadline \u003ctask\u003e /by \u003cdate\u003e : Keep track of your deadlines!\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "                \"event \u003ctask\u003e /at \u003cdate\u003e    : To keep in mind upcoming important events!\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "                \"list                       : To list out all the tasks you have so far\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "                \"done \u003cinteger number\u003e      : To mark a task as done\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "                \"delete \u003cinteger number\u003e    : To delete a task from the list\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Go ahead!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints goodbye message"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void exit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(\"Goodbye \u0026 have a nice day! Hope to see you again!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Process the commands given by the user"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void processCommand(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String commandModified;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "        boolean saidBye; // Logic flag to track if user said \"bye\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskCount; // Store the amount of tasks inserted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Repeatedly receive user command until \"bye\" is given"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Collect user\u0027s command"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "farice9"
        },
        "content": "            command \u003d inputCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": "            commandModified \u003d command.trim().toLowerCase();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Checks if the command is \"bye\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "farice9"
        },
        "content": "            saidBye \u003d command.toLowerCase().trim().equals(\"bye\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Update taskCount value from class-level member in Task"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "farice9"
        },
        "content": "            taskCount \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "farice9"
        },
        "content": "            boolean isListModified \u003d false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Prints the list of tasks stored if \"list\" is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (commandModified.equals(\"list\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "farice9"
        },
        "content": "                printList(listOfTasks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else if (commandModified.contains(\"done\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "farice9"
        },
        "content": "                // Update done status for indicated task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "farice9"
        },
        "content": "                doneTask(command, listOfTasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "farice9"
        },
        "content": "                isListModified \u003d true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else if (commandModified.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "farice9"
        },
        "content": "                // Delete the indicated task"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "farice9"
        },
        "content": "                deleteTask(listOfTasks, command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "farice9"
        },
        "content": "                isListModified \u003d true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else if (!saidBye) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "farice9"
        },
        "content": "                // Store the command into the array as a task if it\u0027s none of the above"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "farice9"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    addTask(command, listOfTasks, taskCount);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    isListModified \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "farice9"
        },
        "content": "                } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    // Informs user when command is inserted without stating the type of task"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    botSpeak(\"☹ Sorry but I don\u0027t understand that at all. Try again?\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "farice9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Update the txt file if something is added/deleted/marked as done"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (isListModified) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "farice9"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    DukeFiles.writeToFile(listOfTasks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "farice9"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    System.out.println(\"There\u0027s a problem with writing the file\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "farice9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } while (!saidBye);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Identifies the type of task given by user and add into the list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command     user input at terminal"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing tasks inserted by user"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param taskCount   Store the amount of tasks inserted"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws InvalidCommandException exception due to commands without specifying the type"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static void addTask(String command, ArrayList\u003cTask\u003e listOfTasks, int taskCount) throws InvalidCommandException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String task;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Identifies the task type"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "farice9"
        },
        "content": "        TaskType taskType \u003d getTaskType(command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Creates new object based on the type of the task"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "farice9"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "farice9"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Extract the string after \"todo\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "farice9"
        },
        "content": "            task \u003d command.trim().substring(\"todo\".length()).trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "farice9"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listOfTasks.add(new ToDo(task));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listOfTasks.get(taskCount).printAddResult();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "farice9"
        },
        "content": "                botSpeak(\"☹ OH NO! The description of todo cannot be empty!\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "farice9"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "farice9"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Command inserted by user will be processed and added into the list of tasks"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "farice9"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listOfTasks.add(new Deadline(command));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listOfTasks.get(taskCount).printAddResult();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "farice9"
        },
        "content": "                botSpeak(\"☹ OH NO! The description of deadline cannot be empty!\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "farice9"
        },
        "content": "                botSpeak(\"No date is found for this deadline! Try adding a date after /by\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "farice9"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "farice9"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "farice9"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listOfTasks.add(new Event(command));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listOfTasks.get(taskCount).printAddResult();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "farice9"
        },
        "content": "                botSpeak(\"☹ OH NO! The description of event cannot be empty!\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "farice9"
        },
        "content": "                botSpeak(\"No date is found for this event! Try adding a date after /at\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "farice9"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "farice9"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Exception due to non-specific task type"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Identifies and return the type of task the user has inserted"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command Command that the user input"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return the type of the task (event, deadline, todo)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static TaskType getTaskType(String command) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "farice9"
        },
        "content": "        TaskType taskType;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String commandModified \u003d command.trim().toLowerCase();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Checks the type of the task given"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (commandModified.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "farice9"
        },
        "content": "            taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "farice9"
        },
        "content": "            taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "farice9"
        },
        "content": "            taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // taskType is NONE when user did not input specific type at the start"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "farice9"
        },
        "content": "            taskType \u003d TaskType.NONE;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Deletes indicated task in the list"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing the list of task"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command Command input by the user"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static void deleteTask(ArrayList\u003cTask\u003e listOfTasks, String command) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskCount \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskIndexPosition \u003d command.toLowerCase().indexOf(\"delete\") + \"delete\".length();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Check if there\u0027s an integer input after \"delete\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (isIndexValid(command, taskIndexPosition)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Obtain the index of the task to be deleted"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "farice9"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(command.substring(taskIndexPosition).trim()) - 1;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Perform the delete operation is the index is within range"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if ((taskIndex \u003e\u003d 0) \u0026\u0026 (taskIndex \u003c taskCount)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Task taskToBeRemoved \u003d listOfTasks.get(taskIndex);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listOfTasks.remove(taskIndex);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Task.reduceNumberOfTasks();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "farice9"
        },
        "content": "                printDeleteResult(taskToBeRemoved);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "farice9"
        },
        "content": "                botSpeak(\"Task not found! Nothing is there to be deleted\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "farice9"
        },
        "content": "            botSpeak(\"No index number detected. Please try again!\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints the result if the task is deleted successfully"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param taskToBeRemoved Task indicated to be removed"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static void printDeleteResult(Task taskToBeRemoved) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Noted! I have removed the task requested:\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(taskToBeRemoved);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Now you have \" + Task.numberOfTasks + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints out the list of tasks stored"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks Array containing tasks inserted by user"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printList(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskCount \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Notify the user if no tasks has been added yet"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (taskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "farice9"
        },
        "content": "            botSpeak(\"No tasks has been added yet. Try adding something!\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Prints out the list of commands with respective index number"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "farice9"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "farice9"
        },
        "content": "            for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "farice9"
        },
        "content": "                System.out.println((i + 1) + \".\" + listOfTasks.get(i));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Allows user to mark tasks as done"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command     The command input by user"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks Array containing tasks inserted by user"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void doneTask(String command, ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskCount \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskIndexPosition \u003d command.toLowerCase().indexOf(\"done\") + \"done\".length();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (isIndexValid(command, taskIndexPosition)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Extract the index number of the task to be marked as done"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "farice9"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(command.substring(taskIndexPosition).trim()) - 1;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Make task as done if the task index inputted is at least 0 and less than the number of tasks inserted"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if ((taskIndex \u003e\u003d 0) \u0026\u0026 (taskIndex \u003c taskCount)) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "farice9"
        },
        "content": "                markAsDone(listOfTasks, taskIndex);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "farice9"
        },
        "content": "                botSpeak(\"Task not found. Make sure you input the correct task index number!\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "farice9"
        },
        "content": "            botSpeak(\"No index number detected. Please try again!\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Mark the task in the list as done"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks Array containing tasks inserted by user"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param taskIndex   Index of the task indicated"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static void markAsDone(ArrayList\u003cTask\u003e listOfTasks, int taskIndex) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Inform the user if the task input has already been done"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (listOfTasks.get(taskIndex).isDone) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "farice9"
        },
        "content": "            botSpeak(\"This task has already been done! Good luck completing others!!!\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Mark the task as done"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "farice9"
        },
        "content": "            listOfTasks.get(taskIndex).isDone \u003d true;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "farice9"
        },
        "content": "            botSpeak(\"Good job! I have marked this task as done:\\n\""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    + listOfTasks.get(taskIndex));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Checks if the \"done\" or \"delete\" command input by user is correct"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * It is correct if it does not have blank space and non-digits after \"done\" or \"delete\" input"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param sentence String of command inserted by user"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return logic true if the command is valid"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static boolean isIndexValid(String sentence, int taskIndexPosition) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String stringAfterCommand;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Extract the string and convert it to array of characters"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "farice9"
        },
        "content": "        stringAfterCommand \u003d sentence.substring(taskIndexPosition).trim();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "farice9"
        },
        "content": "        char[] charAfterCommand \u003d stringAfterCommand.toCharArray();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Return false if the substring after \"done\" only contains empty space"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (stringAfterCommand.isEmpty()) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Return false if the substring after \"done\" are not digits"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "farice9"
        },
        "content": "        for (char character : charAfterCommand) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (!Character.isDigit(character)) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "farice9"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints out what the bot says with divider on top and bottom"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param sentence String to be printed"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void botSpeak(String sentence) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(sentence);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints the line divider"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"*******************************************************************************\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Allows user to input command"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String inputCommand() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "farice9"
        },
        "content": "        command \u003d in.nextLine();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 361,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeFiles.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class DukeFiles {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static final String dukeFilepath \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Update the txt file with the list of tasks stored"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws IOException Error caused when writing file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void writeToFile(ArrayList\u003cTask\u003e listOfTasks) throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "        FileWriter fw \u003d new FileWriter(dukeFilepath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "            fw.write(task.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * To be run at the start of program to retrieve the content from storage file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void initializeFile(ArrayList\u003cTask\u003e listOfTasks) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "            loadFileContent(listOfTasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "            File f \u003d new File(dukeFilepath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "            System.out.println(\"File not found, creating one now!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * To load the content of the file onto the ArrayList of the program"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws FileNotFoundException Error caused by file not found at the specified filepath"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void loadFileContent(ArrayList\u003cTask\u003e listOfTasks) throws FileNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "        File f \u003d new File(dukeFilepath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Duke.printDivider();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Loading your previous tasks, hold on! ...\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "            int taskCount \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "            int initialLength \u003d \"[T][ ]\".length();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "            String description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "            String date;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "                if (line.startsWith(\"[T]\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    listOfTasks.add(new ToDo(line.substring(initialLength).trim()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    String taskDetail \u003d line.substring(initialLength, line.indexOf(\"(\", initialLength)).trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    if (line.startsWith(\"[D]\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": "                        date \u003d line.substring((line.indexOf(\"by:\") + \"by:\".length()), line.indexOf(\")\")).trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": "                        description \u003d \"deadline \" + taskDetail.trim() + \"/by\" + date;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "                        listOfTasks.add(new Deadline(description));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    } else if (line.startsWith(\"[E]\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": "                        date \u003d line.substring((line.indexOf(\"at:\") + \"at:\".length()), line.indexOf(\")\")).trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": "                        description \u003d \"event \" + taskDetail.trim() + \"/at\" + date;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": "                        listOfTasks.add(new Event(description));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "                        System.out.println(\"There\u0027s a problem identifying this task while reading file\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "farice9"
        },
        "content": "                if (line.contains(\"\\u2713\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    listOfTasks.get(taskCount).isDone \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "farice9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "farice9"
        },
        "content": "                System.out.println(\"Problem adding this task from storage file\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "farice9"
        },
        "content": "                System.out.println(\"Problem adding task due to incorrect date input\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"... Storage file content loaded!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 90
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Subclass of Task, for events happening on certain time"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Constructor for Event class type"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param description command inserted by user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws InvalidCommandException Exception caused by empty command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws InvalidDateException Exception caused by absence of date input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public Event(String description) throws InvalidCommandException, InvalidDateException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // \"/\" indicates where the date input begins"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int dateStringIndex \u003d description.indexOf(\"/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (dateStringIndex \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Extract and separate the event details and date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.description \u003d description.trim().substring(\"event\".length(), dateStringIndex).trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.date \u003d description.substring(dateStringIndex + \"/at\".length()).trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "            numberOfTasks++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.date + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 35
    }
  },
  {
    "path": "src/main/java/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 2
    }
  },
  {
    "path": "src/main/java/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class InvalidDateException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 2
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * The Task class contains different attributes of a task stored by user"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Attributes : description of the task, is the task done"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /** Class-level member to store total number of task */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected static int numberOfTasks \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Constructor for Task class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param description description of the task inserted by the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public Task(String description) throws InvalidCommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs the user the details of the task they added (if successful)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected void printAddResult() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Duke.printDivider();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Alrighty! I\u0027ve added the following task:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printNumberOfTasks(); // Inform user how many tasks they have"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Duke.printDivider();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * To obtain the status icon to be printed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return the status icon of the task (tick / cross)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * To obtain the number of tasks created"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return the number of tasks created"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static int getNumberOfTasks(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return numberOfTasks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints the number of tasks"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printNumberOfTasks(){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Now you have \" + numberOfTasks + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void reduceNumberOfTasks() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": "        numberOfTasks--;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 71
    }
  },
  {
    "path": "src/main/java/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Enumeration of different task types"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 9
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Subclass of Task, for basic tasks that needs to be done"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Constructor class for ToDo class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param description command inserted by the user after \"todo\" input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws InvalidCommandException Exception caused by empty command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public ToDo(String description) throws InvalidCommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "        numberOfTasks++;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 21
    }
  }
]
