[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "# Progress Log - AY20/21 Y2S1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "## Week 2"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Added Duke\u0027s skeleton greeting function"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Kept the original Duke logo print code in the commit"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Pushed to github"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "## Week 3"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "### Level 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Implemented greet, echo and exit functions to the bot"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "- The bot will repeat what the user inputs and exit when user says \"bye\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "### Level 2"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Implemented adding commands and list commands function"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "- The bot can store user\u0027s input and prints them out when requested"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "### Level 3"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Introduced a new Task class"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Implemented a mark tasks as done function"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Listing now shows if the task is done/not done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Added extra checks so that commands in upper-case are accepted as well"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Added extra checks to ensure the \"done\" parameter inserted by user is legible"
      }
    ],
    "authorContributionMap": {
      "farice9": 23,
      "-": 26
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Subclass of Task, for tasks with deadline"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public Deadline(String description) throws InvalidCommandException, InvalidDateException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // \"/\" indicates where the date input begins"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int dateStringIndex \u003d description.indexOf(\"/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (dateStringIndex \u003c 0) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Extract the deadline details and date separated by \"/\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.description \u003d description.trim().substring(\"deadline\".length(), dateStringIndex).trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.date \u003d description.substring(dateStringIndex + \"/by\".length()).trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "            numberOfTasks++;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printAddResult();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.date + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 29
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": " * An interactive bot that performs various tasks based on user command"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Last updated : 9 September 2020"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Functions implemented:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 1) Adding tasks to a list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 2) Printing the list of tasks stored"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 3) Indicating which task is done"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 4) Different type of tasks (event, deadline, todo)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Main function"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        greet();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "        processCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints greet user message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void greet() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(\"Hey mate! Nice to meet you, I\u0027m Duke!\\nHow can I help you?\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints goodbye message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void exit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(\"Goodbye \u0026 have a nice day! Hope to see you again!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Process the commands given by the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Possible commands : list, bye, done (_digit_), (any string)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void processCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "        boolean saidBye; // Logic flag to track if user said \"bye\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Stores the commands given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Task[] listOfTasks \u003d new Task[100]; // Can store 100 tasks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskCount; // Store the amount of tasks inserted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Repeatedly receive user command until \"bye\" is given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Collect user\u0027s command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": "            command \u003d inputCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Checks if the command is \"bye\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "            saidBye \u003d command.toLowerCase().trim().equals(\"bye\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Update taskCount value from class-level member in Task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "            taskCount \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Prints the list of tasks stored if \"list\" is called"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (command.toLowerCase().trim().equals(\"list\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "                printList(listOfTasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else if (command.toLowerCase().contains(\"done\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": "                // Update done status for indicated task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": "                doneTask(command, listOfTasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else if (!saidBye) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "                // Store the command into the array as a task if it\u0027s none of the above"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "farice9"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    addTask(command, listOfTasks, taskCount);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": "                } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    // Informs user when command is inserted without stating the type of task"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    botSpeak(\"☹ Sorry but I don\u0027t understand that at all. Try again?\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } while (!saidBye);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Identifies the type of task given by user and add into the list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command     user input at terminal"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks Array containing tasks inserted by user"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param taskCount   Store the amount of tasks inserted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws InvalidCommandException exception due to commands without specifying the type"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static void addTask(String command, Task[] listOfTasks, int taskCount) throws InvalidCommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String task;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Identifies the task type"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "farice9"
        },
        "content": "        TaskType taskType \u003d getTaskType(command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Creates new object based on the type of the task"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "farice9"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "farice9"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Extract the string after \"todo\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "farice9"
        },
        "content": "            task \u003d command.trim().substring(\"todo\".length()).trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "farice9"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listOfTasks[taskCount] \u003d new ToDo(task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "farice9"
        },
        "content": "                botSpeak(\"☹ OH NO! The description of todo cannot be empty!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "farice9"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "farice9"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Command inserted by user will be processed and added into the list of tasks"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "farice9"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listOfTasks[taskCount] \u003d new Deadline(command);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "farice9"
        },
        "content": "                botSpeak(\"☹ OH NO! The description of deadline cannot be empty!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "farice9"
        },
        "content": "                botSpeak(\"No date is found for this deadline! Try adding a date after /by\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "farice9"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "farice9"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "farice9"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listOfTasks[taskCount] \u003d new Event(command);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidCommandException e){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "farice9"
        },
        "content": "                botSpeak(\"☹ OH NO! The description of event cannot be empty!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "farice9"
        },
        "content": "                botSpeak(\"No date is found for this event! Try adding a date after /at\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "farice9"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "farice9"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Exception due to non-specific task type"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Identifies and return the type of task the user has inserted"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command Command that the user input"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return the type of the task (event, deadline, todo)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static TaskType getTaskType(String command) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "farice9"
        },
        "content": "        TaskType taskType;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String commandModified \u003d command.trim().toLowerCase();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Checks the type of the task given"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (commandModified.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "farice9"
        },
        "content": "            taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "farice9"
        },
        "content": "            taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "farice9"
        },
        "content": "            taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // taskType is NORMAL when user did not input specific type at the start"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "farice9"
        },
        "content": "            taskType \u003d TaskType.NORMAL;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints out the list of tasks stored"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks Array containing tasks inserted by user"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printList(Task[] listOfTasks) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskCount \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Notify the user if no tasks has been added yet"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (taskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "farice9"
        },
        "content": "            botSpeak(\"No tasks has been added yet. Try adding something!\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Prints out the list of commands with respective index number"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "farice9"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "farice9"
        },
        "content": "            for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "farice9"
        },
        "content": "                System.out.println((i + 1) + \".\" + listOfTasks[i]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Allows user to mark tasks as done"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command     The command input by user"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks Array containing tasks inserted by user"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void doneTask(String command, Task[] listOfTasks) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskCount \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (isDoneValid(command)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Extract the index number of the task to be marked as done"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "farice9"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(command.substring(command.toLowerCase().indexOf(\"done\") + 4).trim()) - 1;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Make task as done if the task index inputted is at least 0 and less than the number of tasks inserted"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if ((taskIndex \u003e\u003d 0) \u0026\u0026 (taskIndex \u003c taskCount)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "farice9"
        },
        "content": "                markAsDone(listOfTasks, taskIndex);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "farice9"
        },
        "content": "                botSpeak(\"Task not found. Make sure you input the correct task index number!\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "farice9"
        },
        "content": "            botSpeak(\"No index number inserted. Please try again!\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Mark the task in the list as done"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks Array containing tasks inserted by user"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param taskIndex   Index of the task indicated"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static void markAsDone(Task[] listOfTasks, int taskIndex) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Inform the user if the task input has already been done"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (listOfTasks[taskIndex].isDone) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "farice9"
        },
        "content": "            botSpeak(\"This task has already been done! Good luck completing others!!!\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Mark the task as done"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "farice9"
        },
        "content": "            listOfTasks[taskIndex].isDone \u003d true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "farice9"
        },
        "content": "            botSpeak(\"Good job! I have marked this task as done:\\n\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    + listOfTasks[taskIndex]);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Checks if the \"done\" command input by user is correct"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * It is correct if it does not have blank space and non-digits after \"done\" input"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param sentence String of command inserted by user"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return logic true if the \"done\" command is valid"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static boolean isDoneValid(String sentence) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Extract the string after \"done\" and convert it to array of characters"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String stringAfterDone \u003d sentence.substring(sentence.toLowerCase().indexOf(\"done\") + 4).trim();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "farice9"
        },
        "content": "        char[] charAfterDone \u003d stringAfterDone.toCharArray();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Return false if the substring after \"done\" only contains empty space"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (stringAfterDone.isEmpty()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Return false if the substring after \"done\" are not digits"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "farice9"
        },
        "content": "        for (char character : charAfterDone) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (!Character.isDigit(character)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "farice9"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints out what the bot says with divider on top and bottom"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param sentence String to be printed"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void botSpeak(String sentence) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(sentence);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints the line divider"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"*******************************************************************************\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Allows user to input command"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String inputCommand() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "farice9"
        },
        "content": "        command \u003d in.nextLine();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 270,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Subclass of Task, for events happening on certain time"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Constructor for Event class type"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param description command inserted by user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws InvalidCommandException Exception caused by empty command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws InvalidDateException Exception caused by absence of date input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public Event(String description) throws InvalidCommandException, InvalidDateException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // \"/\" indicates where the date input begins"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int dateStringIndex \u003d description.indexOf(\"/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (dateStringIndex \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Extract and separate the event details and date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.description \u003d description.trim().substring(\"event\".length(), dateStringIndex).trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.date \u003d description.substring(dateStringIndex + \"/at\".length()).trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "            numberOfTasks++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printAddResult();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.date + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 36
    }
  },
  {
    "path": "src/main/java/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 2
    }
  },
  {
    "path": "src/main/java/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class InvalidDateException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 2
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * The Task class contains different attributes of a task stored by user"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Attributes : description of the task, is the task done"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /** Class-level member to store total number of task */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected static int numberOfTasks \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Constructor for Task class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param description description of the task inserted by the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public Task(String description) throws InvalidCommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs the user the details of the task they added (if successful)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected void printAddResult() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Duke.printDivider();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Alrighty! I\u0027ve added the following task:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printNumberOfTasks(); // Inform user how many tasks they have"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Duke.printDivider();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * To obtain the status icon to be printed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return the status icon of the task (tick / cross)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * To obtain the number of tasks created"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return the number of tasks created"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static int getNumberOfTasks(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return numberOfTasks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints the number of tasks"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printNumberOfTasks(){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Now you have \" + numberOfTasks + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 67
    }
  },
  {
    "path": "src/main/java/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Enumeration of different task types"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    TODO, DEADLINE, EVENT, NORMAL"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 6
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Subclass of Task, for basic tasks that needs to be done"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Constructor class for ToDo class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param description command inserted by the user after \"todo\" input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws InvalidCommandException Exception caused by empty command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public ToDo(String description) throws InvalidCommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "        numberOfTasks++;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printAddResult();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 22
    }
  }
]
