[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "# Progress Log - AY20/21 Y2S1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "## Week 2"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Added Duke\u0027s skeleton greeting function"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Kept the original Duke logo print code in the commit"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Pushed to github"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "## Week 3"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "### Level 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Implemented greet, echo and exit functions to the bot"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "- The bot will repeat what the user inputs and exit when user says \"bye\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "### Level 2"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Implemented adding commands and list commands function"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "- The bot can store user\u0027s input and prints them out when requested"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "### Level 3"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Introduced a new Task class"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Implemented a mark tasks as done function"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Listing now shows if the task is done/not done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Added extra checks so that commands in upper-case are accepted as well"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "- Added extra checks to ensure the \"done\" parameter inserted by user is legible"
      }
    ],
    "authorContributionMap": {
      "farice9": 23,
      "-": 26
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Contains a method to execute different functions of Duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Runs different functions of Duke based on the command type"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * and updates the data file if the array list is updated"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command Raw command input from the user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param commandType Type of the command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void executeCommand(ArrayList\u003cTask\u003e listOfTasks, String command, CommandType commandType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "        boolean isListModified \u003d (commandType \u003d\u003d CommandType.DONE || commandType \u003d\u003d CommandType.DELETE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "                || commandType \u003d\u003d CommandType.TASK);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (commandType \u003d\u003d CommandType.LIST) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printList(listOfTasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.DONE) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Update done status for indicated task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "            TaskList.doneTask(command, listOfTasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.DELETE) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "            TaskList.deleteTask(listOfTasks, command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.TASK) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "                TaskList.addTask(command, listOfTasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "                // Informs user when command is inserted without stating the type of task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Ui.printInvalidTaskType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Updates the tasks.txt file if changes occur to the array list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "        DukeFiles.updateFile(listOfTasks, isListModified);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 37
    }
  },
  {
    "path": "src/main/java/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Enumeration of different command types that the user can call"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "    TASK,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "    BYE"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 10
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Subclass of Task, for tasks with deadline"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Builds a new Deadline task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param description Description of the deadline"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws InvalidCommandException Exception caused by empty description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws InvalidDateException Exception caused by absent date"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public Deadline(String description) throws InvalidCommandException, InvalidDateException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // \"/\" indicates where the date input begins"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int dateStringIndex \u003d description.indexOf(\"/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Throws exception at the absence of date"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (dateStringIndex \u003c 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Extract the deadline details and date separated by \"/\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.description \u003d description.trim().substring(\"deadline\".length(), dateStringIndex).trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.date \u003d description.substring(dateStringIndex + \"/by\".length()).trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "            numberOfTasks++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return Symbols.DEADLINE_INDICATOR + super.toString() + \" (by: \" + this.date + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 36
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": " * An interactive bot that performs various tasks based on user command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Last updated : 28 September 2020"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Functions implemented:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 1) Adding tasks to a list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 2) Printing the list of tasks stored"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 3) Indicating which task is done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 4) Different type of tasks (event, deadline, todo)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 5) Delete tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": " * 6) Task storage onto a txt file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Initialize by loading the saved file content onto the ArrayList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public Duke(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Load the storage file content"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "            DukeFiles.initializeFile(listOfTasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printLoadingError();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Runs the entire process of the interactive bot"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Receives and processes command by the user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void run(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Ui.printGreeting();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "        boolean saidBye;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Repeatedly receive \u0026 process user command until \"bye\" is given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Collect user\u0027s command \u0026 identify the type"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "            String command \u003d Ui.inputCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "            CommandType commandType \u003d Parser.getCommandType(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Checks if the command is \"bye\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "            saidBye \u003d (commandType \u003d\u003d CommandType.BYE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Command.executeCommand(listOfTasks, command, commandType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } while (!saidBye);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Ui.printGoodbye();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Main function"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "        ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "        new Duke(listOfTasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "        run(listOfTasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 64,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeFiles.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Contains all the methods required for file processing"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class DukeFiles {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static final String dukeFilepath \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Update the txt file with the list of tasks stored"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws IOException Error caused when writing file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void writeToFile(ArrayList\u003cTask\u003e listOfTasks) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        FileWriter fw \u003d new FileWriter(dukeFilepath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "            fw.write(task.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * To be run at the start of program to initialize the ArrayList needed for operation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * by loading the data from saved file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws IOException Error caused when writing file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void initializeFile(ArrayList\u003cTask\u003e listOfTasks) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "            loadFileContent(listOfTasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "            File f \u003d new File(dukeFilepath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printCreateNewFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * To load the content of the file onto the ArrayList of the program"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws FileNotFoundException Error caused by file not found at the specified filepath"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void loadFileContent(ArrayList\u003cTask\u003e listOfTasks) throws FileNotFoundException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "        File f \u003d new File(dukeFilepath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Ui.printLoadingFile();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "            int taskCount \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "            int initialLength \u003d \"[ ][ ]\".length();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "            String description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "            String date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "            TaskType taskType \u003d Parser.getTaskTypeFromFile(line);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": "                if (taskType \u003d\u003d TaskType.TODO) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    listOfTasks.add(new ToDo(line.substring(initialLength).trim()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    String taskDetail \u003d line.substring(initialLength, line.indexOf(\"(\", initialLength)).trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    if (taskType \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": "                        description \u003d getDeadlineDescription(line, taskDetail);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": "                        listOfTasks.add(new Deadline(description));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    } else if (taskType \u003d\u003d TaskType.EVENT) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "                        description \u003d getEventDescription(line, taskDetail);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "farice9"
        },
        "content": "                        listOfTasks.add(new Event(description));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "farice9"
        },
        "content": "                        Ui.printReadFileIdentificationError();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "farice9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "farice9"
        },
        "content": "                // Marks the task as done if there\u0027s a boxed tick in the same line"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "farice9"
        },
        "content": "                if (line.contains(Symbols.BOXED_TICK)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    listOfTasks.get(taskCount).doneTask();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "farice9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Ui.printReadFileAddTaskError();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Ui.printReadFileDateError();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Ui.printDoneLoading();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Extract the event description from the line in the file"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * to help create a new event task in ArrayList"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param line data from the file"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param taskDetail detail of the event"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return the description formatted to be easily add into ArrayList when builder is called"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String getEventDescription(String line, String taskDetail) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Get the date indicated between \"at:\" and \")\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String date \u003d line.substring((line.indexOf(\"at:\") + \"at:\".length()), line.indexOf(\")\")).trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Append the date onto the task detail"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return \"event \" + taskDetail.trim() + \"/at\" + date;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Extract the deadline description from the line in the file"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * to help create a new event task in ArrayList"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param line data from the file"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param taskDetail detail of the deadline"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return the description formatted to be easily add into ArrayList when builder is called"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String getDeadlineDescription(String line, String taskDetail) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Get the date indicated between \"by:\" and \")\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String date \u003d line.substring((line.indexOf(\"by:\") + \"by:\".length()), line.indexOf(\")\")).trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Append the date onto the task detail"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return \"deadline \" + taskDetail.trim() + \"/by\" + date;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Update the txt file if changes occur to the listOfTasks"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param isListModified boolean flag to detect if any changes occured to the list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void updateFile(ArrayList\u003cTask\u003e listOfTasks, boolean isListModified) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (isListModified) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "farice9"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "farice9"
        },
        "content": "                writeToFile(listOfTasks);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Ui.printWriteFileError();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 140
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Subclass of Task, for events happening on certain time"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Constructor for Event class type"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param description command inserted by user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws InvalidCommandException Exception caused by empty command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws InvalidDateException Exception caused by absence of date input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public Event(String description) throws InvalidCommandException, InvalidDateException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // \"/\" indicates where the date input begins"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int dateStringIndex \u003d description.indexOf(\"/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Throws exception at the absence of date"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (dateStringIndex \u003c 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Extract and separate the event details and date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.description \u003d description.trim().substring(\"event\".length(), dateStringIndex).trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.date \u003d description.substring(dateStringIndex + \"/at\".length()).trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "            numberOfTasks++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return Symbols.EVENT_INDICATOR + super.toString() + \" (at: \" + this.date + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 36
    }
  },
  {
    "path": "src/main/java/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 2
    }
  },
  {
    "path": "src/main/java/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class InvalidDateException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 2
    }
  },
  {
    "path": "src/main/java/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Contains messages to be printed in the user interface"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Messages involved when loading data file"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String LOADING_ERROR \u003d \"Oh no! There\u0027s a problem loading file content\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String LOADING_FILE \u003d \"Loading your previous tasks, hold on! ...\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String DONE_LOADING \u003d \"... Storage file content loaded!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String READ_FILE_IDENTIFICATION_ERROR \u003d \"There\u0027s a problem identifying this task while reading file\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String READ_FILE_ADD_TASK_ERROR \u003d \"Problem adding this task from storage file\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String READ_FILE_DATE_ERROR \u003d \"Problem adding task due to incorrect date input\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String WRITE_FILE_ERROR \u003d \"There\u0027s a problem with writing the file\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String CREATE_NEW_FILE \u003d  \"File not found, creating one now!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Simple interaction messages"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String GREET \u003d \"Hey mate! Nice to meet you, I\u0027m Duke!\\nHow can I help you?\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String GOODBYE \u003d \"Goodbye \u0026 have a nice day! Hope to see you again!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Error messages when detecting task input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String INVALID_TASK_TYPE_ERROR \u003d \"☹ Sorry but I don\u0027t understand that task at all. Try again?\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String EMPTY_TODO_ERROR \u003d \"☹ OH NO! The description of todo cannot be empty!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String EMPTY_DEADLINE_DESCRIPTION_ERROR \u003d \"☹ OH NO! The description of deadline cannot be empty!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String EMPTY_DEADLINE_DATE_ERROR \u003d \"No date is found for this deadline! Try adding a date after /by\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String EMPTY_EVENT_DESCRIPTION_ERROR \u003d \"☹ OH NO! The description of event cannot be empty!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String EMPTY_EVENT_DATE_ERROR \u003d \"No date is found for this event! Try adding a date after /at\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Error messages when using \"delete\" function"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String DELETE_TASK_NOT_FOUND_ERROR \u003d \"Task not found! Nothing is there to be deleted\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String INDEX_INPUT_NOT_DETECTED_ERROR \u003d \"No index number input detected. Please try again!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Messages when using \"list\" function"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String EMPTY_TASK_LIST_MESSAGE \u003d \"No tasks has been added yet. Try adding something!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Messages when using \"done\" function"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String INVALID_DONE_INDEX_ERROR \u003d \"Task not found. Nothing is marked as done. Check your task index number input!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String TASK_ALREADY_DONE_MESSAGE \u003d \"This task has already been done! Good luck completing others!!!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String MARK_AS_DONE_MESSAGE \u003d \"Good job! I have marked this task as done:\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Graphics involved in the UI"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String LINE_DIVIDER \u003d \"*******************************************************************************\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String USER_COMMAND_GUIDE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "            \"Here are some commands you can use to interact with me:\\n\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "            \"todo \u003ctask\u003e                : Store what needs to be done \\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "            \"deadline \u003ctask\u003e /by \u003cdate\u003e : Keep track of your deadlines!\\n\" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "            \"event \u003ctask\u003e /at \u003cdate\u003e    : To keep in mind upcoming important events!\\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "            \"list                       : To list out all the tasks you have so far\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "            \"done \u003cinteger number\u003e      : To mark a task as done\\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "            \"delete \u003cinteger number\u003e    : To delete a task from the list\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 64
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Helps process and identify commands input from the user"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Identify the type of command inserted by the user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command Raw command input from the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return command types of the input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static CommandType getCommandType(String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String commandModified \u003d command.trim().toLowerCase();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (commandModified.equals(\"bye\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return CommandType.BYE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.equals(\"list\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return CommandType.LIST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.contains(\"done\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return CommandType.DONE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return CommandType.DELETE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return CommandType.TASK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Process the line from the data file to identify the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * type of task in that line"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param line data from the file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return task type for that line (event, deadline, todo)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static TaskType getTaskTypeFromFile(String line) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Checks the type of the task given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (line.startsWith(Symbols.TODO_INDICATOR)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return TaskType.TODO;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (line.startsWith(Symbols.DEADLINE_INDICATOR)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return TaskType.DEADLINE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (line.startsWith(Symbols.EVENT_INDICATOR)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return TaskType.EVENT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "            //taskType \u003d taskType is NONE when user did not input specific type at the start"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return TaskType.NONE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Identifies and return the type of task the user has inserted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command Raw command input from the user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return the type of the task (event, deadline, todo)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static TaskType getTaskType(String command) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String commandModified \u003d command.trim().toLowerCase();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Checks the type of the task given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (commandModified.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return TaskType.TODO;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return TaskType.DEADLINE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return TaskType.EVENT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // taskType is NONE when user did not input specific type at the start"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return TaskType.NONE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Checks if the \"done\" or \"delete\" command input by user is correct"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * It is correct if it does not have blank space and non-digits after \"done\" or \"delete\" input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param sentence String of command inserted by user"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return logic true if the command is valid"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static boolean isIndexValid(String sentence, int taskIndexPosition) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String stringAfterCommand;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Extract the string and convert it to array of characters"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "farice9"
        },
        "content": "        stringAfterCommand \u003d sentence.substring(taskIndexPosition).trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "farice9"
        },
        "content": "        char[] charAfterCommand \u003d stringAfterCommand.toCharArray();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Return false if the substring after \"done\" only contains empty space"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (stringAfterCommand.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Return false if the substring after \"done\" are not digits"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "farice9"
        },
        "content": "        for (char character : charAfterCommand) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (!Character.isDigit(character)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "farice9"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 97
    }
  },
  {
    "path": "src/main/java/Symbols.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Constant strings for frequenlty used symbols"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Symbols {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Indicator used for each task type when writing into the array list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String TODO_INDICATOR \u003d \"[T]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String DEADLINE_INDICATOR \u003d \"[D]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String EVENT_INDICATOR \u003d \"[E]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Symbols used to indicate if the task is done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String BOXED_TICK \u003d \"[\" + \"\\u2713\" + \"]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String BOXED_CROSS \u003d \"[\" + \"\\u2718\" + \"]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 17
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * The Task class contains different attributes of a task stored by user"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Parent class of deadline, event and todo classes"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /** Class-level member to store total number of task */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected static int numberOfTasks \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Constructor for Task class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param description description of the task inserted by the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public Task(String description) throws InvalidCommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs the user the details of the task they added (if successful)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected void printAddResult() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Alrighty! I\u0027ve added the following task:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printNumberOfTasks(); // Inform user how many tasks they have"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Returns the boxed status icon to indicate if the task is done"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return the boxed status icon of the task (tick / cross)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return (isDone ? Symbols.BOXED_TICK : Symbols.BOXED_CROSS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Returns the number of tasks created"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return the number of tasks created"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static int getNumberOfTasks(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return numberOfTasks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return this.getStatusIcon() + \" \" + this.description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints the number of tasks"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printNumberOfTasks(){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Now you have \" + numberOfTasks + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Reduce the total number of tasks indicated in the list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void reduceNumberOfTasks() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": "        numberOfTasks--;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Mark the task as done by changing the isDone status"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public void doneTask() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "farice9"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 81
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Contains all the methods that can be called to modify the list of tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Process user\u0027s command to mark task as done"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command  Raw command input from the user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void doneTask(String command, ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskCount \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskIndexPosition \u003d command.toLowerCase().indexOf(\"done\") + \"done\".length();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (Parser.isIndexValid(command, taskIndexPosition)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Extract the index number of the task to be marked as done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(command.substring(taskIndexPosition).trim()) - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Mark task as done if the task index inputted is at least 0 and less than the number of tasks inserted"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "            boolean isTaskIndexWithinRange \u003d ((taskIndex \u003e\u003d 0) \u0026\u0026 (taskIndex \u003c taskCount));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (isTaskIndexWithinRange) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "                markAsDone(listOfTasks, taskIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Ui.printInvalidDoneIndexError();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printIndexInputNotDetectedError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Marks the indicated task in the list as done"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param taskIndex   Index of the task indicated"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void markAsDone(ArrayList\u003cTask\u003e listOfTasks, int taskIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Inform the user if the task input has already been done"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (listOfTasks.get(taskIndex).isDone) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printTaskAlreadyDoneMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Mark the task as done"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "            listOfTasks.get(taskIndex).doneTask();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printMarkAsDoneMessage(listOfTasks, taskIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Deletes the indicated task in the list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing the list of task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command Raw command input from the user"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void deleteTask(ArrayList\u003cTask\u003e listOfTasks, String command) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskCount \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskIndexPosition \u003d command.toLowerCase().indexOf(\"delete\") + \"delete\".length();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Check if there\u0027s an integer input after \"delete\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (Parser.isIndexValid(command, taskIndexPosition)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Obtain the index of the task to be deleted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(command.substring(taskIndexPosition).trim()) - 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Perform the delete operation is the index is within range"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": "            boolean isTaskIndexWithinRange \u003d ((taskIndex \u003e\u003d 0) \u0026\u0026 (taskIndex \u003c taskCount));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (isTaskIndexWithinRange) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Task taskToBeRemoved \u003d listOfTasks.get(taskIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listOfTasks.remove(taskIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Task.reduceNumberOfTasks();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Ui.printDeleteResult(taskToBeRemoved);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Ui.printDeleteTaskNotFoundError();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printIndexInputNotDetectedError();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Identifies the type of task given by user and add into the list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command Raw command input from the user"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws InvalidCommandException exception due to commands without specifying the type"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void addTask(String command, ArrayList\u003cTask\u003e listOfTasks) throws InvalidCommandException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String task;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Identifies the task type"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "farice9"
        },
        "content": "        TaskType taskType \u003d Parser.getTaskType(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskCount \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Creates new object based on the type of the task"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "farice9"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "farice9"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "farice9"
        },
        "content": "            addTodoTask(command, listOfTasks, taskCount);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "farice9"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "farice9"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "farice9"
        },
        "content": "            addDeadlineTask(command, listOfTasks, taskCount);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "farice9"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "farice9"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "farice9"
        },
        "content": "            addEventTask(command, listOfTasks, taskCount);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "farice9"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "farice9"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Exception due to non-specific task type"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Adds an event type task to the list of tasks"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command Raw command input from the user"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param taskCount Number of tasks in the list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void addEventTask(String command, ArrayList\u003cTask\u003e listOfTasks, int taskCount) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "farice9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "farice9"
        },
        "content": "            listOfTasks.add(new Event(command));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "farice9"
        },
        "content": "            listOfTasks.get(taskCount).printAddResult();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printEmptyEventDescriptionError();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printEmptyEventDateError();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Adds a deadline type task to the list of tasks"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command Raw command input from the user"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param taskCount Number of tasks in the list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void addDeadlineTask(String command, ArrayList\u003cTask\u003e listOfTasks, int taskCount) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "farice9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "farice9"
        },
        "content": "            listOfTasks.add(new Deadline(command));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "farice9"
        },
        "content": "            listOfTasks.get(taskCount).printAddResult();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printEmptyDeadlineDescriptionError();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printEmptyDeadlineDateError();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Adds a todo type task to the list of tasks"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param command Raw command input from the user"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks ArrayList containing list of tasks"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param taskCount Number of tasks in the list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void addTodoTask(String command, ArrayList\u003cTask\u003e listOfTasks, int taskCount) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String task;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Extract the string after \"todo\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "farice9"
        },
        "content": "        task \u003d command.trim().substring(\"todo\".length()).trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "farice9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "farice9"
        },
        "content": "            listOfTasks.add(new ToDo(task));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "farice9"
        },
        "content": "            listOfTasks.get(taskCount).printAddResult();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printEmptyTodoError();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 169
    }
  },
  {
    "path": "src/main/java/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Enumeration of different task types"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "    NONE"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 9
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Subclass of Task, for basic tasks that needs to be done"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Constructor class for ToDo class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param description command inserted by the user after \"todo\" input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @throws InvalidCommandException Exception caused by empty command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public ToDo(String description) throws InvalidCommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "        numberOfTasks++;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return Symbols.TODO_INDICATOR + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 21
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Contains all the methods needed for user to interact with Duke"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": " * Helps receive command input from the user and handles all the printing of messages"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Receive command input from the user via terminal"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return the command input as a String"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String inputCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        command \u003d in.nextLine();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Greets the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printGreeting() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(Message.GREET);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printUserGuide();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints a simple user command guide"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printUserGuide() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(Message.USER_COMMAND_GUIDE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Go ahead!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints the standard length divider"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(Message.LINE_DIVIDER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints out what the bot says with divider on top and bottom"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param sentence String to be printed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void botSpeak(String sentence) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(sentence);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints the goodbye message"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printGoodbye() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(Message.GOODBYE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user when command is inserted without stating the type of task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printInvalidTaskType() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(Message.INVALID_TASK_TYPE_ERROR);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user about error with writing the file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printWriteFileError() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(Message.WRITE_FILE_ERROR);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user when todo task is called without description"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printEmptyTodoError() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(Message.EMPTY_TODO_ERROR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user when deadline task is called without description"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printEmptyDeadlineDescriptionError() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(Message.EMPTY_DEADLINE_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user when deadline task is called without date"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printEmptyDeadlineDateError() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(Message.EMPTY_DEADLINE_DATE_ERROR);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printEmptyEventDescriptionError() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(Message.EMPTY_EVENT_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printEmptyEventDateError() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(Message.EMPTY_EVENT_DATE_ERROR);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints messages involved when performing \"delete\" function"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printDeleteTaskNotFoundError() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(Message.DELETE_TASK_NOT_FOUND_ERROR);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints the result of deleting task when successful"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param taskToBeRemoved Task in the array list to be removed"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printDeleteResult(Task taskToBeRemoved) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Noted! I have removed the task requested:\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(taskToBeRemoved);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Task.printNumberOfTasks();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user when the \"done\" task index input is invalid"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printInvalidDoneIndexError() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(Message.INVALID_DONE_INDEX_ERROR);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user when the task indicated to be marked done has already been done"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printTaskAlreadyDoneMessage() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(Message.TASK_ALREADY_DONE_MESSAGE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user that a task is marked as done"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printMarkAsDoneMessage(ArrayList\u003cTask\u003e listOfTasks, int taskIndex) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(Message.MARK_AS_DONE_MESSAGE + \"\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "farice9"
        },
        "content": "                + listOfTasks.get(taskIndex));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user when index input is not detected"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printIndexInputNotDetectedError() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(Message.INDEX_INPUT_NOT_DETECTED_ERROR);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user the list is empty when user calls \"list\" function"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printEmptyTaskListMessage() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "farice9"
        },
        "content": "        botSpeak(Message.EMPTY_TASK_LIST_MESSAGE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints out the list of tasks stored when \"list\" command is called"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param listOfTasks Array containing tasks inserted by user"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printList(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int taskCount \u003d Task.getNumberOfTasks();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Notify the user if no tasks has been added yet"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (taskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printEmptyTaskListMessage();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Prints out the list of commands with respective index number"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "farice9"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "farice9"
        },
        "content": "            for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "farice9"
        },
        "content": "                System.out.println((i + 1) + \".\" + listOfTasks.get(i));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user the file is being loaded onto the array list"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printLoadingFile() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(Message.LOADING_FILE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user when the loading of data file is done"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printDoneLoading() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(Message.DONE_LOADING);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user when there\u0027s a problem identifying the task when reading from the data file"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printReadFileIdentificationError() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(Message.READ_FILE_IDENTIFICATION_ERROR);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user about problems regarding loading the data file"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printLoadingError() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(Message.LOADING_ERROR);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user when there\u0027s an error with adding the task from data file"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printReadFileAddTaskError() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(Message.READ_FILE_ADD_TASK_ERROR);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user when there\u0027s error adding task caused by invalid date input"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printReadFileDateError() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(Message.READ_FILE_DATE_ERROR);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Informs user when the data file is not detected and will be created"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printCreateNewFile() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(Message.CREATE_NEW_FILE);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 239
    }
  }
]
