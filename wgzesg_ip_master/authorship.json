[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "# duke.core.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.core.Duke.java` file, right-click it, and choose `Run duke.core.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 2,
      "-": 24
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## Table of content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "2. [Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "3. [Features and Commands](#3-features-and-commands)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3.1 [Add Todo: `todo`](#31-add-todo-todo)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3.2 [Add Event: `event`](#32-add-event-event)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3.3 [Add Deadline: `deadline`](#33-add-deadline-deadline)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3.4 [List All: `list`](#34-list-all-list)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3.5 [Mark as Done: `done`](#35-mark-as-done-done)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3.6 [Delete task: `delete`](#36-delete-task-delete)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3.7 [Find by key phrases: `find`](#37-find-by-key-phrases-find)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3.8 [Filter by date: `doneby`](#38-filter-by-date-doneby)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3.9 [Exit the program: `bye`](#39-exit-the-program-bye)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "4. [Command summary](#4-command-summary)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "5. [Notes](#5-notes)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Duke is an todo list management application. It is designed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "for users who are familar with CLI to manage their tasks "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "fast and painless.  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 2. Quick Start "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Download and install Java 8 or above on your machine."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "2. Download the latest release from [here](https://github.com/wgzesg/ip)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "3. Copy the .jar file into a the folder that you wish to use as the home directory of "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "this application"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "4. Open command line app and go the the home directory of the application and run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    java -jar Duke.jar"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 3. Features and Commands"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.1 Add Todo: `todo`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Add a `todo` task to the task list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Format: ```todo \u003cTask Description\u003e```"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```todo read books```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "   [T][✘] read books"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.2 Add Event: `event`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Add a `event` task to the task list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Format: ```event \u003cTask Description\u003e /at \u003cDate-Time\u003e```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "This supports date time input of multiple format. [1]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "If the input is not in the listed formats, the "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "exact user input will be stored but it will not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "be recognised as a valid time."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example 1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```event CS2113 lecture /at 2020/09/21 1600```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[E][✘] CS2113 lecture (at: 2020/09/21 1600)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example 2"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```event CS2113 exam /at tomorrow```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[E][✘] CS2113 exam (at: tomorrow)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.3 Add Deadline: `deadline`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Add a `deadline` task to the task list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Format: ```deadline \u003cTask Description\u003e /by \u003cDate-Time\u003e``` "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "This supports date time input of multiple format.[1]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "If the input is not in the listed formats, the "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "exact user input will be stored but it will not"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "be recognised as a valid time."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```deadline CS2113 IP submission /by 20201002 23:59```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[D][✘] CS2113 IP submission (by: 20201002 23:59)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```deadline Get married /by 35 years old:)```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[D][✘] Get married (by: 35 years old:))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.4 List All: `list`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Display all the task, following chronological order of them being created."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Format: ```list```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```list```"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. [T][✘] read books"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "2. [E][✘] CS2113 lecture (at: 2020/09/21 1600)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.5 Mark as Done: `done`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Mark a task as done."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Format: ```done \u003cindex\u003e```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The index corresponds to the index of the task when they are"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "displayed in the list command. If the index falls out of the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "range, no action will be performed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```done 1```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[T][✓] read books"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.6 Delete task: `delete`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Mark a task as done."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Format: ```delete \u003cindex\u003e```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The index corresponds to the index of the task when they are"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "displayed in the list command. If the index falls out of the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "range, no action will be performed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```delete 1```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Got it. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[T][✓] read books"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.7 Find by key phrases: `find`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Find all tasks with description that contains the query key phrase."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Format: ```delete \u003ckey phrase\u003e```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The index displayed here does not correspond to the index of them"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "being created. Hence, **DO NOT USE** this index for `delete` command. "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```find lecture```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. [E][✘] CS2113 lecture (at: 2020/09/21 1600)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.8 Filter by date: `doneby`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Find all tasks which occurs/be done by a given date."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Format: ```doneby \u003cDate-Time\u003e```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "This supports date time input of multiple format. [1]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "If the input is not in the listed formats, no query will be performed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "If a task has no time specified, it will not be shown."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The index displayed here does not correspond to the index of them"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "being created. Hence, **DO NOT USE** this index for `delete` command. "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```doneby 20201230```"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. [E][✘] CS2113 lecture (at: 2020/09/21 1600)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.9 Exit the program: `bye`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Exit the program."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```bye```"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 4. Command Summary"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|Command | Description|"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|:------------:|:------------|"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|todo | ```todo \u003ctodo description\u003e```|"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|event | ```event \u003cevent description\u003e /at \u003cdate time\u003e```|"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|deadline | ```deadline \u003cdeadline description\u003e /by \u003cdate time\u003e```|"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|list | ```list```|"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|done | ```done \u003cindex\u003e```|"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|delete | ```delete \u003cindex\u003e```|"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|find | ```find \u003ckey phrase\u003e```|"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|doneby | ```doneby \u003cdate time\u003e```|"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|bye| ```bye```|"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 5. Notes"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[1] Here shows all 12 valid formats."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd HH:mm`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd HH:mm`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd HH:mm`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd HH:mm`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd HHmm`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd HHmm`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd HHmm`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd HHmm`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wgzesg": 233,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/commands/AddDeadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Command AddDeadline can be executed through calling this."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class AddDeadline extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public int execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Storage.addDeadline(args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        clearArgs();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 15
    }
  },
  {
    "path": "src/main/java/duke/commands/AddEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Command AddEvent can be executed through calling this."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class AddEvent extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public int execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Storage.addEvent(args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        clearArgs();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 15
    }
  },
  {
    "path": "src/main/java/duke/commands/AddTodo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Command AddTodo can be executed through calling this."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class AddTodo extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public int execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Storage.addToDo(args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        clearArgs();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 15
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String args;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Executes the relevant method based on the command to manipulate the database."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return 0 if the program continues; -1 if the program terminates (e.g. Bye command)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public int execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Clear arguments for next command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    protected void clearArgs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        args \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 20
    }
  },
  {
    "path": "src/main/java/duke/commands/Delete.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Command Delete can be executed through calling this."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class Delete extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public int execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Storage.delete(args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        clearArgs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 16
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneBy.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Command DoneBy can be executed through calling this."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DoneBy extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public int execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Storage.doneBy(args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        clearArgs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 16
    }
  },
  {
    "path": "src/main/java/duke/commands/Find.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Command Find can be executed through calling this."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class Find extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public int execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Storage.find(args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        clearArgs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 16
    }
  },
  {
    "path": "src/main/java/duke/commands/ListAll.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Command ListAll can be executed through calling this."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ListAll extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public int execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Storage.listAll();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        clearArgs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 16
    }
  },
  {
    "path": "src/main/java/duke/commands/MarkDone.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Command MarkDone can be executed through calling this."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class MarkDone extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public int execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            Storage.markDone(args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            clearArgs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }  catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"The index given is not a number.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"The index is out of range. You don\u0027t have a task at that number.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 21
    }
  },
  {
    "path": "src/main/java/duke/commands/PrintBye.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Command PrintBye can be executed through calling this."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class PrintBye extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public int execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Storage.handleBye();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        clearArgs();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 18
    }
  },
  {
    "path": "src/main/java/duke/core/CommandLib.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.exceptions.NullArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Links user input command to its handler."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class CommandLib {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final HashMap\u003cString, Command\u003e commandMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * On initialisation, the CommandLib is initilised with all possible commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandLib() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        // Initialise the map with all possible duke.commands"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        MarkDone markDone \u003d new MarkDone();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.register(Constants.DONE_CMD, markDone);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        AddTodo addTodo \u003d new AddTodo();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.register(Constants.TODO_CMD, addTodo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        AddDeadline addDeadline \u003d new AddDeadline();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.register(Constants.DEADLINE_CMD, addDeadline);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        AddEvent addEvent \u003d new AddEvent();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.register(Constants.EVENT_CMD, addEvent);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ListAll listAll \u003d new ListAll();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.register(Constants.LIST_CMD, listAll);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PrintBye printBye \u003d new PrintBye();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.register(Constants.BYE_CMD, printBye);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Delete delete \u003d new Delete();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.register(Constants.DELETE_CMD, delete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Find find \u003d new Find();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.register(Constants.FIND_CMD, find);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        DoneBy doneBy \u003d new DoneBy();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.register(Constants.DONEBY_CMD, doneBy);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void register(String commandName, Command command) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        commandMap.put(commandName, command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Execute the command by parsing the command from the arguments."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param cmd The user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return 0 if program continues; -1 if program terminates(e.g. Bye command)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public int execute(String cmd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] args \u003d cmd.split(\" \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Command command \u003d commandMap.get(args[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            command.args \u003d args[1];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"Oops, the command is not recognised!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) { }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int result \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            result \u003d command.execute();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (NullArgumentException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"Oops, the command is not recognised!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wgzesg": 73
    }
  },
  {
    "path": "src/main/java/duke/core/Constants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Constants used in program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String DONE_CMD \u003d \"done\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String TODO_CMD \u003d \"todo\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String DEADLINE_CMD \u003d \"deadline\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String EVENT_CMD \u003d \"event\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String LIST_CMD \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String BYE_CMD \u003d \"bye\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String DELETE_CMD \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String FIND_CMD \u003d \"find\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String DONEBY_CMD \u003d \"doneby\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String BY_PARSER \u003d \" /by \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String AT_PARSER \u003d \" /at \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String SEPLINE \u003d \"------------------------------------------\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String TICK \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String CROSS \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String FILEPATH \u003d \"data/storage.json\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final int DESCRIPTION \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final int TIME \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 33
    }
  },
  {
    "path": "src/main/java/duke/core/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final CommandLib commandLib \u003d new CommandLib();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Driving funtion."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args null"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            Storage.initialise();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"We cannot create a file for local storage. \" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    \"You may not be able to save your changes.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printOpening();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String command \u003d in.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            int result \u003d processCommand(command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                Storage.writeToStorage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                System.out.println(\"Unable to save the changes due to unknown reasons.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            if (result \u003d\u003d -1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        writeToStorage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static void writeToStorage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(\"Saving your changes...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            Storage.writeToStorage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"All changes are saved!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"The changes cannot be saved. Your progress will be lost.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static void printOpening() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printSeparationLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printGreetings();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static void printLogo() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(\"Hello from\\n\" + Constants.LOGO);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static int processCommand(String command) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printSeparationLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int result \u003d commandLib.execute(command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printSeparationLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static void printGreetings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printSeparationLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static void printSeparationLine() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(Constants.SEPLINE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 78,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/exceptions/NullArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class NullArgumentException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public NullArgumentException(String msg) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 8
    }
  },
  {
    "path": "src/main/java/duke/parser/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Parse date related input to date and time"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    // Accepted valid forms of string that can be properly parsed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e dtFormaters \u003d Arrays.asList("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd HH:mm\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd HH:mm\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd HHmm\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e dFormaters \u003d Arrays.asList("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Parse a given string following one of the accepted format into date-time format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param command String input to be parsed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return Parsed result in the form of LocalDateTime or null if no value parsing is found"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static LocalDateTime parseDate(String command) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (DateTimeFormatter dtf : dtFormaters) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                return LocalDateTime.parse(command, dtf);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (DateTimeFormatter dtf : dFormaters) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                return LocalDate.parse(command, dtf).atStartOfDay();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 54
    }
  },
  {
    "path": "src/main/java/duke/storage/RuntimeTypeAdapterFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Copyright (C) 2011 Google Inc."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *      http://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.JsonPrimitive;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.TypeAdapter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.TypeAdapterFactory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.internal.Streams;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.stream.JsonWriter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Adapts values whose runtime type may differ from their declaration type. This"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * is necessary when a field\u0027s type is not the same type that GSON should create"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * when deserializing that field. For example, consider these types:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   abstract class Shape {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     int x;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     int y;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   class Circle extends Shape {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     int radius;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   class Rectangle extends Shape {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   class Diamond extends Shape {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   class Drawing {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     Shape bottomShape;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     Shape topShape;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * \u003cp\u003eWithout additional type information, the serialized JSON is ambiguous. Is"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * the bottom shape in this drawing a rectangle or a diamond? \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * This class addresses this problem by adding type information to the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * serialized JSON and honoring that type information when the JSON is"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * deserialized: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"type\": \"Diamond\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"type\": \"Circle\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Both the type field name ({@code \"type\"}) and the type labels ({@code"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * \"Rectangle\"}) are configurable."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * \u003ch3\u003eRegistering Types\u003c/h3\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * name to the {@link #of} factory method. If you don\u0027t supply an explicit type"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * field name, {@code \"type\"} will be used. \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       \u003d RuntimeTypeAdapterFactory.of(Shape.class, \"type\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Next register all of your subtypes. Every subtype must be explicitly"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * registered. This protects your application from injection attacks. If you"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * don\u0027t supply an explicit type label, the type\u0027s simple name will be used."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Rectangle.class, \"Rectangle\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Circle.class, \"Circle\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Diamond.class, \"Diamond\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Finally, register the type adapter factory in your application\u0027s GSON builder:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       .registerTypeAdapterFactory(shapeAdapterFactory)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       .create();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Like {@code GsonBuilder}, this API supports chaining: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory \u003d RuntimeTypeAdapterFactory.of(Shape.class)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       .registerSubtype(Rectangle.class)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       .registerSubtype(Circle.class)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *       .registerSubtype(Diamond.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * \u003ch3\u003eSerialization and deserialization\u003c/h3\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * In order to serialize and deserialize a polymorphic object,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * you must specify the base type explicitly."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   Diamond diamond \u003d new Diamond();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   String json \u003d gson.toJson(diamond, Shape.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * And then:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " *   Shape shape \u003d gson.fromJson(json, Shape.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public final class RuntimeTypeAdapterFactory\u003cT\u003e implements TypeAdapterFactory {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final Class\u003c?\u003e baseType;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final String typeFieldName;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final Map\u003cString, Class\u003c?\u003e\u003e labelToSubtype \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final Map\u003cClass\u003c?\u003e, String\u003e subtypeToLabel \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final boolean maintainType;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private RuntimeTypeAdapterFactory(Class\u003c?\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (typeFieldName \u003d\u003d null || baseType \u003d\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.baseType \u003d baseType;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.typeFieldName \u003d typeFieldName;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.maintainType \u003d maintainType;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * {@code maintainType} flag decide if the type will be stored in pojo or not."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, typeFieldName, maintainType);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, typeFieldName, false);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Creates a new runtime type adapter for {@code baseType} using {@code \"type\"} as"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * the type field name."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, \"type\", false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Registers {@code type} identified by {@code label}. Labels are case"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * sensitive."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @throws IllegalArgumentException if either {@code type} or {@code label}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *     have already been registered on this type adapter."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type, String label) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (type \u003d\u003d null || label \u003d\u003d null) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new IllegalArgumentException(\"types and labels must be unique\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        labelToSubtype.put(label, type);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        subtypeToLabel.put(type, label);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Registers {@code type} identified by its {@link Class#getSimpleName simple"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * name}. Labels are case sensitive."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @throws IllegalArgumentException if either {@code type} or its simple name"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *     have already been registered on this type adapter."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return registerSubtype(type, type.getSimpleName());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public \u003cR\u003e TypeAdapter\u003cR\u003e create(Gson gson, TypeToken\u003cR\u003e type) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (type.getRawType() !\u003d baseType) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        final Map\u003cString, TypeAdapter\u003c?\u003e\u003e labelToDelegate"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        final Map\u003cClass\u003c?\u003e, TypeAdapter\u003c?\u003e\u003e subtypeToDelegate"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Map.Entry\u003cString, Class\u003c?\u003e\u003e entry : labelToSubtype.entrySet()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            TypeAdapter\u003c?\u003e delegate \u003d gson.getDelegateAdapter(this,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    TypeToken.get(entry.getValue()));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            labelToDelegate.put(entry.getKey(), delegate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            subtypeToDelegate.put(entry.getValue(), delegate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new TypeAdapter\u003cR\u003e() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            @Override public R read(JsonReader in) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                JsonElement jsonElement \u003d Streams.parse(in);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                JsonElement labelJsonElement;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                if (maintainType) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    labelJsonElement \u003d jsonElement.getAsJsonObject().get(typeFieldName);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    labelJsonElement \u003d jsonElement.getAsJsonObject().remove(typeFieldName);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                if (labelJsonElement \u003d\u003d null) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    throw new JsonParseException(\"cannot deserialize \" + baseType"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                            + \" because it does not define a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                String label \u003d labelJsonElement.getAsString();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                TypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) labelToDelegate.get(label);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                if (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    throw new JsonParseException(\"cannot deserialize \" +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                            baseType + \" subtype named \""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                            + label + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                return delegate.fromJsonTree(jsonElement);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            @Override public void write(JsonWriter out, R value) throws IOException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                Class\u003c?\u003e srcType \u003d value.getClass();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                String label \u003d subtypeToLabel.get(srcType);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                TypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) subtypeToDelegate.get(srcType);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                if (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    throw new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                            + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                JsonObject jsonObject \u003d delegate.toJsonTree(value).getAsJsonObject();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                if (maintainType) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    Streams.write(jsonObject, out);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                JsonObject clone \u003d new JsonObject();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                if (jsonObject.has(typeFieldName)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    throw new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                            + \" because it already defines a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                clone.add(typeFieldName, new JsonPrimitive(label));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                for (Map.Entry\u003cString, JsonElement\u003e e : jsonObject.entrySet()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    clone.add(e.getKey(), e.getValue());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                Streams.write(clone, out);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }.nullSafe();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 279
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.core.Constants;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.exceptions.NullArgumentException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static duke.core.Constants.FILEPATH;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * This class holds the data loaded during runtime and read and writes to the local storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static Gson gson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Initialise the database with locally stored data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * If the local file is not found. It creates the relevant file and folder."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @throws IOException If director or file cannot be created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void initialise() throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(\"Trying to load user data...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        RuntimeTypeAdapterFactory\u003cTask\u003e taskAdapterFactory \u003d RuntimeTypeAdapterFactory"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                .of(Task.class, \"type\", true)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                .registerSubtype(ToDo.class, \"Todo\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                .registerSubtype(Deadline.class, \"Deadline\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                .registerSubtype(Event.class, \"Event\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        gson \u003d new GsonBuilder().setPrettyPrinting()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                .registerTypeAdapterFactory(taskAdapterFactory).create();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            readFileContents();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"The file is not found\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            fileNotFoundHandler();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(\"Loading completed.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Write the content in TaskList to a local file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * If the local file is not found. It creates the relevant file and folder."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @throws IOException If director or file cannot be created."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void writeToStorage() throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        FileWriter writer;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            writer \u003d new FileWriter(FILEPATH);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            fileNotFoundHandler();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            writer \u003d new FileWriter(FILEPATH);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        gson.toJson(taskList, writer);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        writer.flush();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Mark a task as done."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param arg index of the task to be labelled as done"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void markDone(String arg) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int offset \u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int index \u003d Integer.parseInt(arg);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        taskList.get(index - offset).markAsDone();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        markDoneResponse(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * List all the tasks in the task list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void listAll() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printTaskList(taskList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Add a todo task to taskList."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args The task description of the event"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void addToDo(String args) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (args \u003d\u003d null || args.isBlank() || args.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new NullArgumentException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Task todo \u003d new ToDo(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        taskList.add(todo);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        addedToListResponse(todo);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Add a deadline task to taskList."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args The task description and the time of the deadline"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void addDeadline(String args) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] argumentParts \u003d args.split(Constants.BY_PARSER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (argumentParts.length \u003c 2 || argumentParts[Constants.DESCRIPTION].isBlank() ||"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                argumentParts[Constants.TIME].isBlank()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new NullArgumentException("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    \"☹ OOPS!!! Not provided sufficient arguments to create an deadline.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Task ddl \u003d new Deadline(argumentParts[Constants.DESCRIPTION],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                argumentParts[Constants.TIME]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        taskList.add(ddl);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        addedToListResponse(ddl);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Add an event task to taskList."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args The task description and the time of the event"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void addEvent(String args) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] argumentParts \u003d args.split(Constants.AT_PARSER);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (argumentParts.length \u003c 2 || argumentParts[Constants.DESCRIPTION].isBlank() ||"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                argumentParts[Constants.TIME].isBlank()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new NullArgumentException("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    \"☹ OOPS!!! Not provided sufficient arguments to create an event.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Task event \u003d new Event(argumentParts[Constants.DESCRIPTION], argumentParts[Constants.TIME]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        taskList.add(event);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        addedToListResponse(event);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Search for events and deadlines that occurs before a certain time."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args Time specified in one of the following formats"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *             \"yyyyMMdd HH:mm\", \"yyyy-MM-dd HH:mm\", \"yyyy MM dd HH:mm\", \"yyyy/MM/dd HH:mm\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *             \"yyyyMMdd HHmm\", \"yyyy-MM-dd HHmm\", \"yyyy MM dd HHmm\", \"yyyy/MM/dd HHmm\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *             \"yyyy-MM-dd\", \"yyyy MM dd\", \"yyyy/MM/dd\", \"yyyyMMdd HH:mm\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void doneBy(String args) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        LocalDateTime date \u003d DateParser.parseDate(args);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cTask\u003e newList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        newList \u003d taskList.stream()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    .filter(t -\u003e (t instanceof Deadline \u0026\u0026 ((Deadline) t).time !\u003d null"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                            \u0026\u0026 ((Deadline) t).time.isBefore(date)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                        || (t instanceof Event \u0026\u0026 ((Event) t).time !\u003d null"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                            \u0026\u0026 ((Event) t).time.isBefore(date))))"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    .sorted(Comparator.comparing((Task t) -\u003e t.taskName))"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printTaskList(newList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Find tasks which contains the given keyword in its descriptions."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args Filtering keyword that to be included in the task description."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void find(String args) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cTask\u003e newList;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        newList \u003d taskList.stream()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    .filter(t -\u003e t.taskName.contains(args))"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    .sorted(Comparator.comparing((Task t) -\u003e t.taskName))"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printTaskList(newList);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static void printTaskList(List\u003cTask\u003e newList) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Task t : newList) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(index + \". \" + t);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Prints bye to handle bye command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void handleBye() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Delete the item at the give index."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args The index of the element to be deleted"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void delete(String args) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            index \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"Your input is not an integer!\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            Task ts \u003d taskList.get(index - 1);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            taskList.remove(index - 1);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            deleteResponse(ts);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"You do not have such a task yet\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static void deleteResponse(Task task) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.print("
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Got it. I\u0027ve removed this task:\\n\" +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                task +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"\\nNow you have \" + taskList.size() + \" tasks in the list.\\n\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        );"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static void markDoneResponse(int index) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(taskList.get(index - 1));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static void addedToListResponse(Task task) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.print("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                task +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"\\nNow you have \" + taskList.size() + \" tasks in the list.\\n\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        );"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static void readFileContents() throws FileNotFoundException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Type taskListType \u003d new TypeToken\u003cArrayList\u003cTask\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        JsonReader reader \u003d new JsonReader(new FileReader(FILEPATH));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        taskList \u003d gson.fromJson(reader, taskListType);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static void fileNotFoundHandler() throws IOException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        File dir \u003d new File(\"data/\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        dir.mkdir();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        File yourFile \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        yourFile.createNewFile();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 253
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Deadline task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public LocalDateTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param description task description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param by the deadline to be done by this time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        type \u003d \"Deadline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        time \u003d DateParser.parseDate(by);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this(description, by);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 35
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Event task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public LocalDateTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param description task description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param at the event occurs at this time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        type \u003d \"Event\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        time \u003d DateParser.parseDate(at);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public Event(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this(description, by);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 35
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import duke.core.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * Task base class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String taskName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public Task(String task) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        taskName \u003d task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return \"[\" + (isDone ? Constants.TICK : Constants.CROSS) + \"] \" + taskName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 26
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " * ToDo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        type \u003d \"Todo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 22
    }
  },
  {
    "path": "src/main/java/gui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//// This is not used so far"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//import javax.swing.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//import java.awt.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//class gui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//    public static void main(String args[]) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        //Creating the Frame"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        JFrame frame \u003d new JFrame(\"Chat Frame\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        frame.setSize(400, 400);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        //Creating the MenuBar and adding components"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        JMenuBar mb \u003d new JMenuBar();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        JMenu m1 \u003d new JMenu(\"FILE\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        JMenu m2 \u003d new JMenu(\"Help\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        mb.add(m1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        mb.add(m2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        JMenuItem m11 \u003d new JMenuItem(\"Open\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        JMenuItem m22 \u003d new JMenuItem(\"Save as\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        m1.add(m11);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        m1.add(m22);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        //Creating the panel at bottom and adding components"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        JPanel panel \u003d new JPanel(); // the panel is not visible in output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        JLabel label \u003d new JLabel(\"Enter Text\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        JTextField tf \u003d new JTextField(10); // accepts upto 10 characters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        JButton send \u003d new JButton(\"Send\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        JButton reset \u003d new JButton(\"Reset\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        panel.add(label); // Components Added using Flow Layout"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        panel.add(tf);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        panel.add(send);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        panel.add(reset);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        // Text Area at the Center"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        JTextArea ta \u003d new JTextArea();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        //Adding Components to the frame."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        frame.getContentPane().add(BorderLayout.SOUTH, panel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        frame.getContentPane().add(BorderLayout.NORTH, mb);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        frame.getContentPane().add(BorderLayout.CENTER, ta);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//        frame.setVisible(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 43
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "todo read books"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "todo another thing"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "deadline     /at"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "deadline  /at randomTime"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "deadline randomDes /at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "deadline milestone 1 video /by Friday"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "event     /at"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "event  /at randomTime"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "event randomDes /at"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "event birthday party /at 31 Aug 4pm"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "done abc"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "done 15"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 19
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.core.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "REM run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "java -classpath ..\\bin duke.core.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 3,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "# run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "java -classpath ../bin duke.core.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 3,
      "-": 35
    }
  }
]
