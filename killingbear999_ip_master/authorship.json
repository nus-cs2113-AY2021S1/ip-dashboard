[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "  "
      }
    ],
    "authorContributionMap": {
      "killingbear999": 1,
      "-": 26
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "# USER GUIDE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "1. Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "2. Quick Start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "3. Features"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   1. Adding todo: `todo`"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   2. Adding deadline: `deadline`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   3. Adding event: `event`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   4. Viewing current tasks: `list`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   5. Viewing tasks on a specific date: `date`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   6. Marking a task as done: `done`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   7. Deleting a task: `delete`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   8. Finding a task containing specific words: `find`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   9. Exiting the chatbot: `bye`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "4. Command Summary"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "### 1. Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Duke is a desktop chatbot, optimised for use via a Command Line Interface (CLI). This application aims to help user store tasks and trace the status of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "### 2. Quick Start"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "2. Download the latest ip.jar from Github: https://github.com/killingbear999/ip."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "4. Type the command in the command box and press Enter to execute it.  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   E.g. Typing \u0027list\u0027 and pressing Enter for Duke to display all current tasks on the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "5. Refer to the Features below for details of each command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "### 3. Features"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "1. Adding todo: `todo`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   1. User can add a task of a \u0027todo\u0027 type into the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   2. Format: todo [DESCRIPTION]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   3. Example: todo borrow book"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "2. Adding deadline: `deadline`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   1. User can add a task of a \u0027deadline\u0027 type into the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   2. Format: deadline [DESCRIPTION] /by [timing] OR deadline [DESCRIPTION] /by [yyyy-mm-dd]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   3. Examples: deadline borrow books /by Sunday 6pm OR deadline borrow books /by 2020-07-21"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "3. Adding event: `event`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   1. User can add a task of a \u0027event\u0027 type into the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   2. Format: event [DESCRIPTION] /at [timing] OR event [DESCRIPTION] /at [yyyy-mm-dd]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   3. Examples: event borrow books /at Sunday 5-6pm OR event borrow books /at 2020-07-21"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "4. Viewing current tasks: `list`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   1. User can view current tasks on the list as well as their corresponding status."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   2. Format: list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   3. Example: list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "5. Viewing tasks on a specific date: `date`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   1. User can view current tasks on a specific date if available"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   2. Format: date [MON DAY YEAR]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   3. Example: date Jul 21 2020"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "6. Marking a task as done: `done`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   1. User can change the status of a specific task by marking it as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   2. Format: done [NUMBER]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   3. Example: done 1"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "7. Deleting a task: `delete`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   1. User can delete a specific task from the list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   2. Format: delete [NUMBER]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   3. Example: delete 1"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "8. Finding a task containing specific words: `find`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   1. User can find a task by searching a keyword"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   2. Format: find [DESCRIPTION]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   3. Example: find book"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "9. Exiting the chatbot: `bye`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   1. User can exit Duke by typing \u0027bye\u0027 and Duke will automatically update current tasks to the local disk"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   2. Format: bye"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "   3. Example: bye"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "### 4. Command Summary"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "ACTION | FORMAT \u0026 EXAMPLE"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "--------------------------------|--------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "todo | todo [DESCRIPTION]  (e.g. todo borrow book)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "deadline | deadline [DESCRIPTION] /by [timing] OR deadline [DESCRIPTION] /by [yyyy-mm-dd] (e.g. deadline borrow books /by Sunday 6pm OR deadline borrow books /by 2020-07-21)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "event |  event [DESCRIPTION] /at [timing] OR event [DESCRIPTION] /at [yyyy-mm-dd] (e.g. event borrow books /at Sunday 5-6pm OR event borrow books /at 2020-07-21)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "list | list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "date | date [MON DAY YEAR] (e.g. date Jul 21 2020)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "done | done [NUMBER] (e.g. done 1)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "delete | delete [NUMBER] (e.g. delete 1)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "find | find [DESCRIPTION] (e.g. find book)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "bye | bye"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 72,
      "-": 9
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": " * The Duke program is a desktop chatbot, opitimisd for use via a Command Line Interface."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": " * @author Wang Zihao"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": " * @version v0.2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": " * @since 2020-09-28"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is the main function that will run the chatbot Duke from greeting to goodbye */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String filePath \u003d \"../duke.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        boolean isExit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Storage storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        ui.showWelcomeMessages();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        storage.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        storage.updateTasks();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Scanner userInput \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            String userCommand \u003d userInput.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            Parser parser \u003d new Parser(userCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            isExit \u003d parser.shouldExit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            if (isExit) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                ui.showGoodByeMessage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                parser.executeCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                storage.updateFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 36,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "/** This class is to deal with making senseof the user command */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String userCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public Parser(String userCommand) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.userCommand \u003d userCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to execute command such as \"list\", \"done\", \"delete\" and store the input command */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        TaskList command \u003d new TaskList(userCommand);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (userCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            command.printList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (userCommand.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            command.markAsDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (userCommand.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            command.deleteTask();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (userCommand.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            command.findTask();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (userCommand.startsWith(\"date\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            command.findDate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            command.storeCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to exit the chatbot after the command \"bye\" is input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param isExit True if \"bye\" is entered by the user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @return isExit time to exit the chatbot"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (userCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            isExit \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 41
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "/** This class is to read data from the local disk and write new data to the local disk */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    ArrayList\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to load the data from the local disk */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void load() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            readFileContents();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            ui.showFileNotExistMessages();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to read the data from the local disk if the file exists"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @throws FileNotFoundException If file has not been created"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void readFileContents() throws FileNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            tasks.add(s.nextLine());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to initialise the arraylist with the data from the local disk */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void updateTasks() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            TaskList taskInitiation \u003d new TaskList(tasks.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            taskInitiation.initiateTasks();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to retrieve data from the list and ready to be written to the local disk */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static ArrayList\u003cString\u003e retrieveTasks() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        TaskList objects \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return objects.returnTasks();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to write new data to the local disk */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void updateFile() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            writeToFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            ui.showFileNotWriteableMessage(e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to write new data to the local disk if the file is writeable"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @throws IOException If file is not writeable for some reasons"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void writeToFile() throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        tasks \u003d retrieveTasks();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            fw.write(tasks.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 76
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.command.FindDateCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.command.FinishCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": " * This class is to deal with the operations like storing tasks, marking existing tasks as done,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": " * printing all current tasks in the list, deleting tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\tprotected String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\tpublic static ArrayList\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\tpublic TaskList(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\tthis.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\tpublic TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t/** It is to initialise arraylist with existing data from the local disk */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\tpublic void initiateTasks() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\ttasks.add(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t/** It is to store new task to the list */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\tpublic void storeCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\tAddCommand task \u003d new AddCommand(description, tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\ttask.addCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\ttask.echoCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t/** It is to print the tasks currently in the list */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\tpublic void printList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\tUi ui \u003d new Ui();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\tui.printList(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t/** It is to mark a chosen task as done */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\tpublic void markAsDone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\tFinishCommand task \u003d new FinishCommand(description, tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\ttask.markAsFinished();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t/** It is to delete a specific task from the list */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\tpublic void deleteTask() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\tDeleteCommand task \u003d new DeleteCommand(description, tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\ttask.removeTask();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t/** It is to find a task which contains some specific words */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\tpublic void findTask() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\tFindCommand task \u003d new FindCommand(description, tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\ttask.locateTask();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t/** It is to find a task on a specific date */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\tpublic void findDate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\tFindDateCommand task \u003d new FindDateCommand(description, tasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\ttask.findTask();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t/** It is to return all tasks in the list and ready them to be written into local disk */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\tpublic ArrayList\u003cString\u003e returnTasks() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t\treturn tasks;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 73
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "/** This class is to deal with interactions with the user */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to show welcome messages to greet the user */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void showWelcomeMessages() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to show goodbye message before exiting Duke */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void showGoodByeMessage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to show the error messages that file does not exit */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void showFileNotExistMessages() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"File does not exist yet\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"Please proceed to enter data\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to show the error message that the file is not writeable for some reasons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void showFileNotWriteableMessage(IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to show error messages that input command is in incorrect format */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printErrorMessage(boolean isEmptyTodo, boolean isEmptyDeadline, boolean isEmptyEvent,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            boolean isCorrectInput) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (isEmptyTodo) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (isEmptyDeadline) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (isEmptyEvent) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (isCorrectInput) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to print the list to show all tasks that are currently in the list */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printList(ArrayList\u003cString\u003e tasks) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"The list is empty.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (tasks.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"Here is the task in your list:\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"1.\" + tasks.get(0));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                System.out.println(i + \".\" + tasks.get(i - 1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to print all tasks in the matching list for the command type find */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printMatchingList(ArrayList\u003cString\u003e tasks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"The list is empty.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (tasks.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"Here is the matching task in your list:\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"1.\" + tasks.get(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                System.out.println(i + \".\" + tasks.get(i - 1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to echo command after user has input a new command */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void echoCommand(ArrayList\u003cString\u003e tasks) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"  \" + tasks.get(tasks.size()-1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (tasks.size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"Now you have \" + tasks.size() + \" task in the list.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to print the task that is finished if command \"done\" is used */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printTaskDone(ArrayList\u003cString\u003e tasks, int taskFinished) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"  \" + tasks.get(taskFinished));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to print the task that is deleted if command \"delete\" is used */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printTaskRemoved(ArrayList\u003cString\u003e tasks, int taskDeleted) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"  \" + tasks.get(taskDeleted));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to print the total number of tasks that are currently in the list */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printSum(ArrayList\u003cString\u003e tasks) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (tasks.size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"Now you have \" + tasks.size() + \" task in the list.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to print the error message if the find is empty */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printEmptyFindCommand() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"OOPS!!! The description of a find cannot be empty.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to print the message if no matching result is found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printEmptyMatchingList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"No matching result is found.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to print the message if the date is not found in the list */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printDateNotExistsMessage() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"Task is not found. Please try another date\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to print the task on the specific date */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printTaskOnTheDate(String taskOnTheDate) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(taskOnTheDate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to print the error message if the task is not found for done/delete command type */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printTaskNotFoundMessage() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"Task is not found. Please re-enter a new task number.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 139
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.exception.DeadlineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.exception.EventException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.exception.TodoException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": " * This class is to add new tasks into the list, with the command type event, todo and deadline,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": " * and echo the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static final int EMPTY_TODO \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static final int EMPTY_DEADLINE \u003d 9;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static final int EMPTY_EVENT \u003d 6;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public AddCommand(String description, ArrayList\u003cString\u003e tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        super(description, tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * It is to identify command type and determine whether they are deadline or todo or event, then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * process them separately, and check whether the format of the input command is correct or not"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void addCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (isDeadline()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                dealWithDeadline();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            } catch (DeadlineException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                ui.printErrorMessage(isEmptyTodo, isEmptyDeadline, isEmptyEvent, isCorrectInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (isTodo()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                dealWithTodo();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            } catch (TodoException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                ui.printErrorMessage(isEmptyTodo, isEmptyDeadline, isEmptyEvent, isCorrectInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (isEvent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                dealWithEvent();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            } catch (EventException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                ui.printErrorMessage(isEmptyTodo, isEmptyDeadline, isEmptyEvent, isCorrectInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            ui.printErrorMessage(isEmptyTodo, isEmptyDeadline, isEmptyEvent, isCorrectInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            isCorrectInput \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to check whether the command is \"deadline\" or not */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public boolean isDeadline() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return description.startsWith(\"deadline\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to check whether the command is \"todo\" or not */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public boolean isTodo() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return description.startsWith(\"todo\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to check whether the command is \"event\" or not */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public boolean isEvent() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return description.startsWith(\"event\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to check whether the command is valid or not */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public boolean isValidCommand(String description) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (isTodo() \u0026\u0026 description.length() \u003c EMPTY_TODO) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (isDeadline() \u0026\u0026 (description.length() \u003c EMPTY_DEADLINE || !description.contains(\"/by\"))) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (isEvent() \u0026\u0026 (description.length() \u003c EMPTY_EVENT || !description.contains(\"/at\"))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to process the command if it is event type"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @throws EventException If event is not entered in the correct format"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void dealWithEvent() throws EventException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        isEmptyEvent \u003d isValidCommand(description);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (isEmptyEvent) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            throw new EventException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        storeEvent();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to process the command if it is deadline type"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @throws DeadlineException If deadline is not entered in the correct format"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void dealWithDeadline() throws DeadlineException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        isEmptyDeadline \u003d isValidCommand(description);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (isEmptyDeadline) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            throw new DeadlineException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        storeDeadline();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to process the command if it is todo type"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @throws TodoException If todo is not entered in the correct format"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void dealWithTodo() throws TodoException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        isEmptyTodo \u003d isValidCommand(description);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (isEmptyTodo) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            throw new TodoException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        storeTodo();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to store an event if the format is correct"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param eventTitle The main content of the new event"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void storeEvent() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Event e \u003d new Event(description);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String eventTitle \u003d e.storeObject();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        tasks.add(eventTitle);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to store a todo if the format is correct"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param todoTitle The main content of the new todo"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void storeTodo() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Todo t \u003d new Todo(description);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String todoTitle \u003d t.storeObject();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        tasks.add(todoTitle);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to store a deadline if the format is correct"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param deadlineTitle The main content of the new deadline"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void storeDeadline() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Deadline d \u003d new Deadline(description);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String deadlineTitle \u003d d.storeObject();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        tasks.add(deadlineTitle);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to echo the task once it is stored in the list */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void echoCommand() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (isCorrectInput \u0026\u0026 !isEmptyTodo \u0026\u0026 !isEmptyDeadline \u0026\u0026 !isEmptyEvent) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            ui.echoCommand(tasks);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 157
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    protected boolean isCorrectInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    protected boolean isEmptyTodo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    protected boolean isEmptyDeadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    protected boolean isEmptyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static ArrayList\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public Command(String description, ArrayList\u003cString\u003e tasks) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.isCorrectInput \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.isEmptyTodo \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.isEmptyDeadline \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.isEmptyEvent \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 23
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.exception.DeleteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "/** This class is to handle the command type delete */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static final int EMPTY_DELETION \u003d 6;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public DeleteCommand(String description, ArrayList\u003cString\u003e tasks) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        super(description, tasks);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to delete a specific task identified by the user */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void removeTask() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            deleteTask();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } catch (DeleteException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            ui.printTaskNotFoundMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to delete a specific task if the format of the command type delete is correct"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @throws DeleteException If delete is empty or the item to be deleted does not exist"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void deleteTask() throws DeleteException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Task task \u003d new Task(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (description.length() \u003c\u003d EMPTY_DELETION) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            throw new DeleteException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int taskDeleted \u003d task.traceTaskDeleted();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (taskDeleted \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            throw new DeleteException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        ui.printTaskRemoved(tasks, taskDeleted);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        tasks.remove(taskDeleted);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        ui.printSum(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 46
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.exception.FindException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "/** This class is to deal with the command type find */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public FindCommand(String description, ArrayList\u003cString\u003e tasks) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        super(description, tasks);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to locate the task specified by the user */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void locateTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            findTask();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } catch (FindException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            ui.printEmptyFindCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to trace the specific task if the format for the command type find is correct"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param object The keyword that will be used to search and identify the specific task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @throws FindException If find is empty of the task to be found does not exist"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void findTask() throws FindException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (description.length() \u003c\u003d 4) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            throw new FindException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Task task \u003d new Task(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String object \u003d task.traceTask();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        ArrayList\u003cString\u003e TasksFound \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        for (String currentTask : tasks) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            if (currentTask.contains(object)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                TasksFound.add(currentTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (TasksFound.size() !\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            ui.printMatchingList(TasksFound);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            ui.printEmptyMatchingList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 50
    }
  },
  {
    "path": "src/main/java/duke/command/FindDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.exception.DateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "/** This class is to deal with the command type date */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class FindDateCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static final int WHITESPACE_MANAGEMENT \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public FindDateCommand(String description, ArrayList\u003cString\u003e tasks) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        super(description, tasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to find the task on the specific date"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param dataPosition The starting position of the main content from the command entered by the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param date The specific date that the user would like to search for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void findTask() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int datePosition \u003d description.indexOf(\" \", 1) + WHITESPACE_MANAGEMENT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        date \u003d description.substring(datePosition);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            locateTask();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } catch (DateException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            ui.printDateNotExistsMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to find the task on the specific date if the format for the command type date is correct"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param hasTask True if there are tasks on the date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param taskOnTheDate The main content of the task on the date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param currentTask The current task on the list while searching through the list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @throws DateException If no task found on the date or date entered is in incorrect format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void locateTask() throws DateException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        boolean hasTask \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String taskOnTheDate \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        for (String currentTask : tasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            if (currentTask.contains(date)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                taskOnTheDate \u003d currentTask;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                hasTask \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (!hasTask) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            throw new DateException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            ui.printTaskOnTheDate(taskOnTheDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 59
    }
  },
  {
    "path": "src/main/java/duke/command/FinishCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.exception.DoneException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "/** This class is to handle the commmand type done */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class FinishCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static final int WHITESPACE_MANAGEMENT \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private static int taskFinished \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private static String taskDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public FinishCommand(String description, ArrayList\u003cString\u003e tasks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        super(description, tasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to process the command if the command type is \"done\" */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void markAsFinished() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            traceTaskDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            checkValidTask();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            finishTask(taskDone, taskFinished);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            ui.printTaskDone(tasks, taskFinished);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } catch (DoneException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            ui.printTaskNotFoundMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is get the status of done (i.e. tick) and not done (i.e. cross) */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to trace the main body of the task that is marked as done by the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param taskFinished The sequence of the task, which is marked as done, in the list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param isDone True if the task is marked as done"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @throws DoneException If done is entered in incorrect format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void traceTaskDone() throws DoneException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (description.length() \u003c\u003d 4) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            throw new DoneException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Task task \u003d new Task(description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        taskFinished \u003d task.traceTaskDone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to extract the main body of the task done if the format for command type done is correct"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param taskFinished The sequence of the task, which is marked as done, in the list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param taskDone The main content of the task that is marked as done"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param taskPosition The starting position of the main body of the task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param taskLength The length of the task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @throws DoneException If the task to be marked as done does not exist"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void checkValidTask() throws DoneException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (taskFinished \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            throw new DoneException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        taskDone \u003d tasks.get(taskFinished);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int taskPosition \u003d taskDone.indexOf(\" \", 1) + WHITESPACE_MANAGEMENT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int taskLength \u003d taskDone.length();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        taskDone \u003d taskDone.substring(taskPosition, taskLength);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to update the status of the task that is done to the list */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void finishTask(String taskDone, int taskFinished) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (tasks.get(taskFinished).contains(\"[T]\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            tasks.set(taskFinished, \"[T][\" + getStatusIcon() + \"] \" + taskDone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (tasks.get(taskFinished).contains(\"[D]\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            tasks.set(taskFinished, \"[D][\" + getStatusIcon() + \"] \" + taskDone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (tasks.get(taskFinished).contains(\"[E]\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            tasks.set(taskFinished, \"[E][\" + getStatusIcon() + \"] \" + taskDone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 80
    }
  },
  {
    "path": "src/main/java/duke/exception/DateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class DateException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class DeadlineException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class DeleteException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class DoneException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class EventException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/FindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class FindException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/TodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class TodoException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 4
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "/** This class is to extract the main body of a specific deadline */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static final int WHITESPACE_MANAGEMENT \u003d 1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static final int WHITESPACE_WORDS_MANAGEMENT \u003d 3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public Deadline(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to return the main body of the deadline before it is written to the list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param firstBlankSpacePosition The starting position of the first blank space"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param endingPosition The starting position of the character \u0027/\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param deadlinePosition The starting position of the deadline"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param taskName The main content of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param deadline The main content of the deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @return The string containing the task and deadline and its status"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String storeObject() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int firstBlankSpacePosition \u003d description.indexOf(\" \", 1) + WHITESPACE_MANAGEMENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int endingPosition \u003d description.indexOf(\"/\") - WHITESPACE_MANAGEMENT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int deadlinePosition \u003d description.indexOf(\"by\") + WHITESPACE_WORDS_MANAGEMENT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String taskName \u003d description.substring(firstBlankSpacePosition, endingPosition);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String deadline \u003d description.substring(deadlinePosition);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (deadline.contains(\"-\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            LocalDate d \u003d LocalDate.parse(deadline);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            deadline \u003d d.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String stringReturn \u003d  \"[D][\" + \"\\u2718\" + \"] \" + taskName + \" (by: \" + deadline + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return stringReturn;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 39
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "/** This class is to extract the main body of a specific event */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static final int WHITESPACE_MANAGEMENT \u003d 1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static final int WHITESPACE_WORDS_MANAGEMENT \u003d 3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to return the main body of the event before it is written to the list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param firstBlankSpacePosition The starting position of the first blank space"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param endingPosition The starting position of the character \u0027/\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param timingPosition The starting position of the event timing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param taskName The main content of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param eventTime The main content of the event timing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @return The string containing the task and event timing and its status"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String storeObject() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int firstBlankSpacePosition \u003d description.indexOf(\" \", 1) + WHITESPACE_MANAGEMENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int endingPosition \u003d description.indexOf(\"/\") - WHITESPACE_MANAGEMENT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int timingPosition \u003d description.indexOf(\"at\") + WHITESPACE_WORDS_MANAGEMENT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String taskName \u003d description.substring(firstBlankSpacePosition, endingPosition);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String eventTime \u003d description.substring(timingPosition);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (eventTime.contains(\"-\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            LocalDate d \u003d LocalDate.parse(eventTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            eventTime \u003d d.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String stringReturn \u003d  \"[E][\" + \"\\u2718\" + \"] \" + taskName + \" (at: \" + eventTime + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return stringReturn;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 39
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "/** This class is to handle command types such as deadline, event, todo, done and delete */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static final int WHITESPACE_MANAGEMENT \u003d 1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    protected String[] taskTracers;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static int taskFinished;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static int taskDeleted;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String storeObject() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to return the int number of the position/ranking of the task done in the list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param taskTracers The separation of the user command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @return The sequence of the task, which is marked as done, in the list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public int traceTaskDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        taskTracers \u003d description.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        taskFinished \u003d Integer.parseInt(taskTracers[1]) - WHITESPACE_MANAGEMENT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return taskFinished;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to identify the int number of the position/ranking of the task that is deleted in the list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param taskTracers The separation of the user command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @return The sequence of the task, which is to be deleted, in the list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public int traceTaskDeleted() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        taskTracers \u003d description.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        taskDeleted \u003d Integer.parseInt(taskTracers[1]) - WHITESPACE_MANAGEMENT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return taskDeleted;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to identify the keyword to be used to search through the list and find the specific task */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String traceTask() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String[] taskTracers \u003d description.split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return taskTracers[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 46
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "/** This class is to extract the main body of a specific todo */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static final int WHITESPACE_MANAGEMENT \u003d 1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** It is to return the main body of the todo before it is written to the list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param todoPosition The starting position of the main content of todo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @param taskName The main content of todo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     * @return The string containing the task and its status"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String storeObject() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int toDoPosition \u003d description.indexOf(\" \", 1) + WHITESPACE_MANAGEMENT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String taskName \u003d description.substring(toDoPosition);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        String stringReturn \u003d \"[T][\" + \"\\u2718\" + \"] \" + taskName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return stringReturn;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 25
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 13
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java ../src/main/java/Task.java ../src/main/java/List.java ../src/main/java/Todo.java ../src/main/java/Deadline.java ../src/main/java/Event.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 2,
      "-": 36
    }
  }
]
