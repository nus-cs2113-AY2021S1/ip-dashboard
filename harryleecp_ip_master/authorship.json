[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import userInterface.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import userInterface.TaskFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import userInterface.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import userInterface.Validity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            storage.loadTextFile(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String text \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        ui.printGreetingMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(ui.printUnderscores());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            text \u003d input.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            Validity textFormat \u003d new Validity(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (text.equals(\"bye\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                System.out.println(\"Saving to file.........\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    storage.saveTextFile(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    System.out.println(\"OOPS!!! Something went wrong when saving the file!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else if (text.equals(\"list\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                System.out.println(ui.printUnderscores());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                ui.printList(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else if (text.equals(\"help\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                ui.printHelp();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    ui.checkRemainingCases(tasks, textFormat, text);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                } catch (TaskFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    System.out.println(e.toString().substring(29) + \"\\nEnter \\\"help\\\" for more info\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        ui.printFarewellMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        new Duke(\"tasklist.txt\").run();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 61,
      "-": 4
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String dueDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Deadline(String description, String doBy) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        super(description.substring(9));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        dueDate \u003d doBy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getDueDate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"[D]\" + super.printTask() + \"(by: \" + dueDate + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 21
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String dueDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Event(String description, String doAt) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        super(description.substring(6));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        dueDate \u003d doAt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getDueDate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"[E]\" + super.printTask() + \"(at: \" + dueDate + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 23
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public abstract String getTaskType();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public abstract String getDueDate();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Task (String x) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.task \u003d x;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void setDone () {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String mark \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (this.isDone \u003d\u003d true) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            mark \u003d \"[\\u2713]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            mark \u003d \"[\\u2718]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return mark + \" \" + this.task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 28
    }
  },
  {
    "path": "src/main/java/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        super(description.substring(5));"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getDueDate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"[T]\" + super.printTask();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 20
    }
  },
  {
    "path": "src/main/java/userInterface/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package userInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private String filename;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Storage(String filename) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.filename \u003d filename;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void loadTextFile(ArrayList\u003cTask\u003e tasks) throws FileNotFoundException{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        File f \u003d new File(filename);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String taskType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String isDoneValue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String taskDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String dateAndTime \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            String[] items \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            taskType \u003d items[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isDoneValue \u003d items[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            taskDescription \u003d items[2];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (items.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                dateAndTime \u003d items[3];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                Todo todo \u003d new Todo(\"todo \" + taskDescription);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                if (isDoneValue.equals(\"1\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    todo.setDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                tasks.add(todo);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                Deadline deadline \u003d new Deadline(\"deadline \" + taskDescription, dateAndTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                if (isDoneValue.equals(\"1\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    deadline.setDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                tasks.add(deadline);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                Event event \u003d new Event(\"event \" + taskDescription, dateAndTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                if (isDoneValue.equals(\"1\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    event.setDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                tasks.add(event);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void saveTextFile(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filename);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String textToWrite \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        for (Task item : tasks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            String doneIndex \u003d (item.isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (item.getTaskType().equals(\"T\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                textToWrite +\u003d \"T | \" + doneIndex + \" | \" + item.task + \"\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                textToWrite +\u003d item.getTaskType() + \" | \" + doneIndex + \" | \"+ item.task + \" | \" + item.getDueDate() + \"\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        fw.write(textToWrite);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 80
    }
  },
  {
    "path": "src/main/java/userInterface/TaskFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package userInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class TaskFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public TaskFormatException(String taskType) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        super(taskType);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 7
    }
  },
  {
    "path": "src/main/java/userInterface/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package userInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String printUnderscores() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"__________________________________________\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String instructions \u003d \"The following is a list of commands that you can enter:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"1) help - For showing all commands available\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"2) list - To display all the tasks in your list\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"3) todo - Add a to-do task into your list (Example: todo borrow book)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"4) deadline - Use \\\" /by \\\" to denote deadline (Example: deadline return book /by Sunday)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"5) event - Use \\\" /at \\\" to denote when the event takes place (Example: event meeting /at Mon 2-4pm)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"6) bye - To exit from the program\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(instructions);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void printGreetingMessage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String logo \u003d \" _______    __   ___      ___  _______\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"|__   __|  /  \\\\  \\\\  \\\\    /  / |   ____|\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"   | |    / __ \\\\  \\\\  \\\\  /  /  |  |__\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"   | |   / |__| \\\\  \\\\  \\\\/  /   |   __|\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \" __| |  /   __   \\\\  \\\\    /    |  |____\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"|____| /___|  |___\\\\  \\\\__/     |_______|\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(printUnderscores() + \"\\nHello! I\u0027m Jave\" + \"\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void printFarewellMessage() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(printUnderscores() + \"\\nBye. Hope to see you again soon!\\n\" + printUnderscores());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void printList(ArrayList\u003cTask\u003e items) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"There is nothing in your list currently\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            for (Task item : items) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                System.out.println(index + \". \" + (item).printTask());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(\"File tasklist.txt is not found, creating new file.......\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void markDone(int index, ArrayList\u003cTask\u003e texts) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if ((index \u003c\u003d texts.size()) \u0026\u0026 (index \u003e 0)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            (texts.get(index - 1)).setDone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(printUnderscores());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this as done:\\n  \" + texts.get(index - 1).printTask());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"Invalid index!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void deleteTask(int index, ArrayList\u003cTask\u003e texts) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if ((index \u003c\u003d texts.size()) \u0026\u0026 (index \u003e 0)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task:\\n  \" + texts.get(index - 1).printTask());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            texts.remove(index - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"Now you have \" + texts.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"Invalid index!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void addedTask(ArrayList\u003cTask\u003e texts) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\\n  \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + texts.get(texts.size()-1).printTask()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"\\nNow you have \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + texts.size()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \" tasks in the list\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void checkRemainingCases(ArrayList\u003cTask\u003e texts, Validity textFormat, String text) throws TaskFormatException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String[] words \u003d text.split(\" \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        switch (words[0]) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            words \u003d textFormat.checkDone();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (textFormat.isValid) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                int index \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                markDone(index, texts);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                throw new TaskFormatException(\"\\u2639 OOPS!!! The description of done cannot be empty and must be a digit.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            words \u003d textFormat.checkDelete();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (textFormat.isValid) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                int index \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                deleteTask(index, texts);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                throw new TaskFormatException(\"\\u2639 OOPS!!! The description of delete cannot be empty and must be a digit.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            words \u003d textFormat.checkEvent();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (textFormat.isValid) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                texts.add(new Event(words[0], words[1]));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                addedTask(texts);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                throw new TaskFormatException(\"\\u2639 OOPS!!! The event description format is wrong.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            words \u003d textFormat.checkDeadline();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (textFormat.isValid) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                texts.add(new Deadline(words[0], words[1]));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                addedTask(texts);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                throw new TaskFormatException(\"\\u2639 OOPS!!! The deadline description format is wrong.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (words.length \u003e 1) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                texts.add(new Todo(text));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                addedTask(texts);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                throw new TaskFormatException(\"\\u2639 OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            throw new TaskFormatException(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 136
    }
  },
  {
    "path": "src/main/java/userInterface/Validity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package userInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class Validity {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public boolean isValid;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Validity(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.isValid \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String[] checkDone() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String[] words \u003d description.split(\" \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (!(words[0].equals(\"done\")) || (words.length !\u003d 2)) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            int index \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch(NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return words;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String[] checkDeadline() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String[] words \u003d description.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (!(words[0].equals(\"deadline\"))) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else if(!(description.contains(\"/by\"))) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            words \u003d description.split(\" /by \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (words.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                isValid \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return words;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String[] checkEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String[] words \u003d description.split(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (!(words[0].equals(\"event\"))) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else if(!(description.contains(\"/at\"))) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            words \u003d description.split(\" /at \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (words.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                isValid \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return words;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String[] checkDelete() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String[] words \u003d description.split(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (!(words[0].equals(\"delete\")) || (words.length !\u003d 2)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            int index \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch(NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return words;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 69
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "anything"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "todo anything"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "help"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "event school project /at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "event school project /at Monday 12pm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "done"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "delete"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 15
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\tasks\\Task.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\tasks\\Deadline.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\tasks\\Event.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\tasks\\Todo.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\userInterface\\Storage.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\userInterface\\Ui.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\userInterface\\Validity.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\userInterface\\TaskFormatException.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 10,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "if  ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java ||"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/tasks/Task.java ||"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/tasks/Deadline.java ||"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/tasks/Event.java ||"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/formats/Validity.java ||"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/tasks/Todo.java ||"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/formats/TaskFormatException.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 7,
      "-": 37
    }
  }
]
