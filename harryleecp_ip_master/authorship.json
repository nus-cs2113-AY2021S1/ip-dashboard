[
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "The following is a summarized table of features for Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Name of feature | Description of feature |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| --------------- | ---------------------- |"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| List            | Displays all added tasks |"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Add \u0027todo\u0027      | Adds a Todo into your task list |"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Add \u0027deadline\u0027  | Adds a Deadline into your task list |"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Add \u0027event\u0027     | Adds an Event into your task list |"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Mark as \u0027done\u0027  | Ticks the checkbox to indicate a completed task corresponding to index |"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| \u0027delete\u0027 index  | Deletes task that matches the index |"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| \u0027printbydate\u0027   | Displays all Deadline and Event tasks based on entered date |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| \u0027find\u0027 keyword(s) | Displays all tasks according to the entered keyword(s) |"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Duke also has other commands such as \u0027help\u0027 which displays all available commands and \u0027bye\u0027 which saves the task list into a text file. Moreover, it is able to load task list that was saved under persistent storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Note__: All the available commands are case-insensitive"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Booting up Duke"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "When starting the program, Duke will first look for a file with the name `tasklist.txt` and load the contents of task list, if any."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "#### The outcome if text file exists"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Found tasklist.txt, contents have been read. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "#### The outcome if text file does not exist"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "File tasklist.txt is not found, creating new file......."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Adding a task into your list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "There are 3 types of tasks namely `todo`, `deadline` and `event`. The following table demonstrates how you can utilize these commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Task type | Entry format | Example of entry |"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| --------- | ------------ | ---------------- |"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Todo      | `todo` _[Task description]_ | `todo Read coding tutorial` |"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Deadline  | `deadline`_[Task description]_ /by _[DD/MM/YYYY Time(24-hour format)]_ | `deadline Return book /by 19/09/2020 1400` |"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Event     | `Event`_[Task description]_ /at _[DD/MM/YYYY Time(24-hour format)]_ | `event Meeting with friends /at 20/09/2020 1100` |"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Note__: When the format entered is wrong, the corresponding messages will be printed to inform the user about the mistake. Use `help` command to look at the correct examples."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Expected outcome looks like this when all the commands are executed correctly:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "todo something"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  [T][✘] something"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Now you have 1 tasks in the list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "event NUS open house /at 20/09/2020 1000"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  [E][✘] NUS open house(at: 20 Sep 2020 10:00am)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Now you have 2 tasks in the list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "deadline assignment submission /by 25/09/2020 1500"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  [D][✘] assignment submission(by: 25 Sep 2020 3:00pm)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Now you have 3 tasks in the list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Printing your task list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Enter the command `list` to print out the entire task list and the expected outcome is as such:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "1. [T][✘] something"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "2. [E][✘] NUS open house(at: 20 Sep 2020 10:00am)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "3. [D][✘] assignment submission(by: 25 Sep 2020 3:00pm)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Deleting a task from your list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Enter the command `delete` followed by the index of the task to be deleted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Command Format__: `delete` _[Task index]_"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Before deleting, Duke will look for the index corresponding to the task. If the index is out of bounds or the format is wrong, an error message will be shown. "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Otherwise the specified task will be deleted from your list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Example__: `delete 1` removes the first task in your list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  [T][✘] something"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Finding a task in your list"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Enter the command `find` followed by at least a keyword to search for all the tasks containing the keyword(s)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Command Format__: `find` _[Keyword(s)]_"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Example__: `find submission` looks for task(s) containing the word \u0027submission\u0027."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "find submission"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Here\u0027s what we have found: "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "1. [D][✘] assignment submission(by: 25 Sep 2020 3:00pm)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Marking a task as done"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Enter the command `done` followed by the index of the task to be marked as completed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Command Format__: `done` _[Task index]_"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Before marking, Duke will look for the index corresponding to the task. If the index is out od bounds or the format is wrong, an error message will be shown."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Otherwise the specified task will be marked as done in your list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Example__: `done 2` marks the second task in your list as done."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Nice! I\u0027ve marked this as done:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  [D][✓] assignment submission(by: 25 Sep 2020 3:00pm)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Printing tasks according to specific date and/or time"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Enter the command `printbydate` followed by the desired date and/or time. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Command Format__: `printbydate` _[d MMM yyyy h:ma]_"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Take note that the date and time does not have to be in the full form as this method checks if the task(s) contain(s) the string entered."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Example__: `printbydate 20 Sep` prints all deadlines and events with due dates containing \u002720 Sep\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "printbydate 20 Sep"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Here\u0027s what we have found: "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "1. [E][✘] NUS open house(at: 20 Sep 2020 10:00am)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Exiting the program"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "To exit the program and save the task list, use the `bye` command. Following which, the task list will be saved into the file `tasklist.txt`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Below is the expected outcome:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "bye"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Saving to file........."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__________________________________________"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "```"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "## End of user guide"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 137,
      "-": 11
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import userInterface.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import formats.TaskFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import userInterface.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import formats.Validity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Instantiate Task objects based on description of each line in text file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * If file does not exist, exception will be handled."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param filePath Name of text file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            storage.loadTextFile(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            ui.showLoadingSuccess();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Commands are executed based on the user\u0027s choice"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Method runs as long as user does not type \u0027bye\u0027 command    *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String text \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        ui.printGreetingMessage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(ui.printUnderscores());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            text \u003d input.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            Validity textFormat \u003d new Validity(text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (text.toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                System.out.println(\"Saving to file.........\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    storage.saveTextFile(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    System.out.println(\"OOPS!!! Something went wrong when saving the file!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else if (text.toLowerCase().equals(\"list\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                System.out.println(ui.printUnderscores());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                ui.printList(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else if (text.toLowerCase().equals(\"help\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                ui.printHelp();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    ui.checkRemainingCases(tasks, textFormat, text);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                } catch (TaskFormatException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    System.out.println(e.toString().substring(29) + \"\\nEnter \\\"help\\\" for more info\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        ui.printFarewellMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        new Duke(\"tasklist.txt\").run();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 72,
      "-": 4
    }
  },
  {
    "path": "src/main/java/formats/DateAndTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * Classes implementing this interface converts the format of date and time entered by the user.\u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * Users do not have to worry about following the format as this only serves to standardize the date and time"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * format for more convenient reading and filtering if need be."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * @author Lee Chein Pong Harry"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public interface DateAndTime {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Converts the formats of date and time into specific configurations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param description Date and time entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @return Converted format of date and time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @throws DateTimeException If date and/or time cannot be parsed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     static String convertDateFormat(String description) throws DateTimeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String[] dateDetails \u003d description.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/y\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(dateDetails[0], dateFormatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(dateDetails[1], timeFormatter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String dateString \u003d date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")).toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String timeString \u003d time.format(DateTimeFormatter.ofPattern(\"h:mma\")).toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return dateString + \" \" + timeString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 37
    }
  },
  {
    "path": "src/main/java/formats/TaskFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * This user-defined exception is meant to be thrown"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * when the date and time format entered is wrong."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * @author Lee Chein Pong Harry"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class TaskFormatException extends Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public TaskFormatException(String taskType) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        super(taskType);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 13
    }
  },
  {
    "path": "src/main/java/formats/Validity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package formats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * This class checks for all the validity of the commands entered by the user.\u003cp\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * As users might not be aware of the formats, this class can handle all the possible exceptions"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * without the need for restarting the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * @author Lee Chein Pong Harry"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class Validity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private String[] words;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private boolean isValid;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Validity(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        isValid \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        splitDescription();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void splitDescription() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        words \u003d description.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public boolean getIsValid() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Verifies the format of the \u0027done\u0027 command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Returns the split string containing the command and index if correct."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @return Array of split string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String[] checkDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (words.length !\u003d 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            int index \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch(NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return words;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Verifies the format \u0027delete\u0027 command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Returns the split string containing the command and index if correct."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @return Array of split string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String[] checkDelete() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (words.length !\u003d 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            //Users might accidentally enter a non-numeric character after \u0027delete\u0027 command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            int index \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch(NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return words;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Verifies the format of \u0027deadline\u0027 command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * If correct, split string contains command, description and due date."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @return Array of split string."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String[] checkDeadline() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if(!(description.contains(\"/by\"))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            words \u003d description.split(\" /by \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (words.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                isValid \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return words;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Verifies the format of \u0027event\u0027 command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * If correct, split string contains command, description and due date."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @return Array of split string."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String[] checkEvent() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if(!(description.contains(\"/at\"))) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            words \u003d description.split(\" /at \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (words.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                isValid \u003d false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return words;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Verifies the format of \u0027find\u0027 command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void checkFind() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Verifies the format of \u0027printbydate\u0027 command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void checkPrintByDate() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 120
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import formats.DateAndTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * This class is meant for storing upcoming deadlines on a specific date and time.\u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * The format of date is in \"MMM dd yyyy\" while the format of time is in \"h:ma\"."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * @author Lee Chein Pong Harry"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class Deadline extends Task implements DateAndTime{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private String dueDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Deadline(String description, String doBy) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        super(description.substring(9));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            dueDate \u003d DateAndTime.convertDateFormat(doBy);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            dueDate \u003d doBy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getDueDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Returns full description including object type, whether if it\u0027s done and due date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @return Full description of the Deadline object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"[D]\" + super.printTask() + \"(by: \" + dueDate + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 41
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import formats.DateAndTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * This class is meant for storing events that are happening on a specific date and time.\u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * The format of date is in \"MMM dd yyyy\" while the format of time is in \"h:ma\"."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * @author Lee Chein Pong Harry"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class Event extends Task implements DateAndTime {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private String dueDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Event(String description, String doAt) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        super(description.substring(6));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            dueDate \u003d DateAndTime.convertDateFormat(doAt);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            dueDate \u003d doAt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getDueDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Returns full description including object type, whether if it\u0027s done and due date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @return Full description of the Event object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"[E]\" + super.printTask() + \"(at: \" + dueDate + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 42
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * This class is for storing information of a task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * such as the description and if the task is complete."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * @author Lee Chein Pong Harry"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public abstract String getTaskType();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public abstract String getDueDate();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Task (String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        task \u003d userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void setDone () {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String mark \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            mark \u003d \"[\\u2713]\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            mark \u003d \"[\\u2718]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return mark + \" \" + this.task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 42
    }
  },
  {
    "path": "src/main/java/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * This class is meant for storing tasks without the need for due dates."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * @author Lee Chein Pong Harry"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        super(description.substring(5));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getDueDate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Returns full description including object and whether if it is done"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @return Full description of Todo object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"[T]\" + super.printTask();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 30
    }
  },
  {
    "path": "src/main/java/userInterface/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package userInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * This class handles the reading and writing of text file that contains the description of tasks.\u003cp\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * Each line contains the task type, whether if it is done, description and due date (if it is a deadline or an event)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * This allows users to store their list of tasks using persistent storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * @author Lee Chein Pong Harry"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private String filename;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Storage(String filename) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.filename \u003d filename;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Reads from text file and stores Task objects corresponding to description of each line."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * If file is not found, exception will be thrown and no array list will be created."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param tasks Task objects stored in the array list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @throws FileNotFoundException If file does not exist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void loadTextFile(ArrayList\u003cTask\u003e tasks) throws FileNotFoundException{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        File f \u003d new File(filename);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String taskType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String isDoneValue;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String taskDescription;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String dueDate \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            String[] items \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            taskType \u003d items[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            isDoneValue \u003d items[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            taskDescription \u003d items[2];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            int numberOfTaskProperties \u003d items.length;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (numberOfTaskProperties \u003d\u003d 4) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                //Only Deadline and Event objects have due date"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                dueDate \u003d items[3];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                Todo todo \u003d new Todo(\"todo \" + taskDescription);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                if (isDoneValue.equals(\"1\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    todo.setDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                tasks.add(todo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                Deadline deadline \u003d new Deadline(\"deadline \" + taskDescription, dueDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                if (isDoneValue.equals(\"1\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    deadline.setDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                tasks.add(deadline);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                Event event \u003d new Event(\"event \" + taskDescription, dueDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                if (isDoneValue.equals(\"1\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    event.setDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                tasks.add(event);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Stores description of each Task object into a text file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * The objects are stored in the same order as the array list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param tasks Task objects stored in the array list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @throws IOException If file cannot be saved."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void saveTextFile(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filename);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String textToWrite \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        for (Task item : tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            String doneIndex \u003d (item.getIsDone()) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (item.getTaskType().equals(\"T\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                textToWrite +\u003d \"T | \" + doneIndex + \" | \" + item.getTask() + \"\\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                //Deadline and Event class objects have due dates"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                textToWrite +\u003d item.getTaskType() + \" | \" + doneIndex + \" | \"+ item.getTask() + \" | \" + item.getDueDate() + \"\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        fw.write(textToWrite);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 104
    }
  },
  {
    "path": "src/main/java/userInterface/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package userInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import formats.TaskFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import formats.Validity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * This class mostly handles all the User Interface features.\u003cp\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * Users get to modify their list of tasks through adding and deleting."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * Moreover they also get to search for tasks using keywords or filter with date and time"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * in case the list gets too long to view one by one."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * @author Lee Chein Pong Harry"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String printUnderscores() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return \"__________________________________________\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String instructions \u003d \"The following is a list of commands that you can enter:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"1) help - For showing all commands available\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"2) list - To display all the tasks in your list\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"3) todo - Add a to-do task into your list (Example: todo borrow book)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"4) deadline - Use \\\" /by \\\" to denote due date and time (Example: deadline return book /by 19/09/2020 1500)\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"5) event - Use \\\" /at \\\" to denote when it takes place (Example: event meeting /at 20/09/2020 0900)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"6) printbydate - Prints deadlines and events according to date\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"7) find - Prints tasks containing keyword(s) entered by the user\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"8) bye - To save the list of tasks before exiting from the program\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(instructions);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void printGreetingMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String logo \u003d \" _______    __   ___      ___  _______\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"|__   __|  /  \\\\  \\\\  \\\\    /  / |   ____|\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"   | |    / __ \\\\  \\\\  \\\\  /  /  |  |__\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"   | |   / |__| \\\\  \\\\  \\\\/  /   |   __|\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \" __| |  /   __   \\\\  \\\\    /    |  |____\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"|____| /___|  |___\\\\  \\\\__/     |_______|\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(printUnderscores() + \"\\nHello! I\u0027m Jave\" + \"\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void printFarewellMessage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(printUnderscores() + \"\\nBye. Hope to see you again soon!\\n\" + printUnderscores());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void printList(ArrayList\u003cTask\u003e items) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"There is nothing in your list currently\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            for (Task item : items) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                System.out.println(index + \". \" + (item).printTask());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void showLoadingSuccess() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(\"Found tasklist.txt, contents have been read. \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(\"File tasklist.txt is not found, creating new file.......\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Notifies user about the newly added task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Prints error message when index is out of bounds."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param tasks Task objects stored in the array list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void addedTask(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\\n  \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + tasks.get(tasks.size()-1).printTask()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \"\\nNow you have \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + tasks.size()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                + \" tasks in the list\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Notifies user about the deleted task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Prints error message when index is out of bounds."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param index Index of Task object to be deleted."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param tasks Task objects stored in the array list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void deleteTask(int index, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if ((index \u003c\u003d tasks.size()) \u0026\u0026 (index \u003e 0)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task:\\n  \" + tasks.get(index - 1).printTask());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            tasks.remove(index - 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"Invalid index!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Notifies user about the Task object that is marked as done."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Prints error message when index is out of bounds."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param index Index of Task object to be marked as done."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param tasks Task objects stored in the array list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void markDone(int index, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if ((index \u003c\u003d tasks.size()) \u0026\u0026 (index \u003e 0)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            (tasks.get(index - 1)).setDone();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(printUnderscores());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this as done:\\n  \" + tasks.get(index - 1).printTask());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"Invalid index!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Prints Task objects containing on the keyword(s) entered by the user."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param tasks Task objects stored in the array list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param keywords Keyword(s) for narrowing down the search."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void findTasks(ArrayList\u003cTask\u003e tasks, String keywords) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        filteredTasks \u003d (ArrayList\u003cTask\u003e) tasks.stream()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                .filter((t) -\u003e t.getTask().contains(keywords))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"OOPS!!! We can\u0027t find anything that contains the description.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"Here\u0027s what we have found: \");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            printList(filteredTasks);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Prints all deadlines and events that containing the due date entered by the user."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param tasks Task objects stored in the array list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param description Date and/or time entered by the user."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void printByDate(ArrayList\u003cTask\u003e tasks, String description) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        filteredTasks \u003d (ArrayList\u003cTask\u003e) tasks.stream()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            .filter((t) -\u003e t instanceof Deadline | t instanceof Event)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            .filter((t) -\u003e t.getDueDate().contains(description))"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"OOPS!!! We can\u0027t find anything according to this date.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"Here\u0027s what we have found: \");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            printList(filteredTasks);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Checks the validity of the command entered by the user."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * If command is of the wrong format or not recognised, error message will be printed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param tasks Task objects stored in the array list"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param taskFormat TaskFormat object containing the command entered by the user"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param task Full description of the command"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @throws TaskFormatException If command entered is of the wrong format"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void checkRemainingCases(ArrayList\u003cTask\u003e tasks, Validity taskFormat, String task) throws TaskFormatException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String[] words \u003d task.split(\" \");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        switch (words[0].toLowerCase()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            words \u003d taskFormat.checkDone();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (taskFormat.getIsValid()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                int index \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                markDone(index, tasks);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                throw new TaskFormatException(\"\\u2639 OOPS!!! The description of done cannot be empty and must be a digit.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            taskFormat.checkFind();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (taskFormat.getIsValid()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                findTasks(tasks, task.substring(5));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                throw new TaskFormatException(\"\\u2639 OOPS!!! The description of find cannot be empty.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        case \"printbydate\":"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            taskFormat.checkPrintByDate();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (taskFormat.getIsValid()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                printByDate(tasks, task.substring(12));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                throw new TaskFormatException(\"\\u2639 OOPS!!! The description of printbydate cannot be empty\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            words \u003d taskFormat.checkDelete();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (taskFormat.getIsValid()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                int index \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                deleteTask(index, tasks);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                throw new TaskFormatException(\"\\u2639 OOPS!!! The description of delete cannot be empty and must be a digit.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            words \u003d taskFormat.checkEvent();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (taskFormat.getIsValid()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                tasks.add(new Event(words[0], words[1]));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                addedTask(tasks);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                throw new TaskFormatException(\"\\u2639 OOPS!!! The event description format is wrong.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            words \u003d taskFormat.checkDeadline();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (taskFormat.getIsValid()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                tasks.add(new Deadline(words[0], words[1]));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                addedTask(tasks);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                throw new TaskFormatException(\"\\u2639 OOPS!!! The deadline description format is wrong.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (words.length \u003e 1) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                tasks.add(new Todo(task));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                addedTask(tasks);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                throw new TaskFormatException(\"\\u2639 OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            throw new TaskFormatException(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 237
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "anything"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "todo anything"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "help"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "event school project /at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "event school project /at Monday 12pm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "done"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "delete"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 15
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\tasks\\Task.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\tasks\\Deadline.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\tasks\\Event.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\tasks\\Todo.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\userInterface\\Storage.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\userInterface\\Ui.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\formats\\Validity.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\formats\\TaskFormatException.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\formats\\DateAndTime.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 11,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "if  ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java ||"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/tasks/Task.java ||"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/tasks/Deadline.java ||"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/tasks/Event.java ||"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/formats/Validity.java ||"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/tasks/Todo.java ||"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/formats/TaskFormatException.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 7,
      "-": 37
    }
  }
]
